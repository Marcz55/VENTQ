
SPI-test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000000f0  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001fe  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000013b  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000017e  00000000  00000000  000004ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  00000680  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000198  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000074  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ef       	ldi	r30, 0xF0	; 240
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  7a:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <spi_init>:

unsigned char inbuffer = 0x44;

void spi_init(void)
{
	DDRA = (1<<PORTA2);
  82:	84 e0       	ldi	r24, 0x04	; 4
  84:	8a bb       	out	0x1a, r24	; 26
	PORTA = (1<<PORTA2); //Ha ingen slav vald
  86:	8b bb       	out	0x1b, r24	; 27
	DDRB = (1<<PORTB5)|(1<<PORTB7)|(1<<PORTB4); //Definiera outputs
  88:	80 eb       	ldi	r24, 0xB0	; 176
  8a:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0); //Sätt enhet till master, enable spi, klockfrekvens
  8c:	81 e5       	ldi	r24, 0x51	; 81
  8e:	8d b9       	out	0x0d, r24	; 13
  90:	08 95       	ret

00000092 <spi_transmit>:
}

void spi_transmit(unsigned char data)
{
	 SPDR = data;
  92:	8f b9       	out	0x0f, r24	; 15
	 while(!(SPSR & (1<<SPIF))); //Vänta på att överföring är klar
  94:	77 9b       	sbis	0x0e, 7	; 14
  96:	fe cf       	rjmp	.-4      	; 0x94 <spi_transmit+0x2>
	 inbuffer = SPDR;
  98:	8f b1       	in	r24, 0x0f	; 15
  9a:	80 93 60 00 	sts	0x0060, r24
  9e:	08 95       	ret

000000a0 <main>:
}

int main(void)
{
	spi_init();
  a0:	0e 94 41 00 	call	0x82	; 0x82 <spi_init>
	PORTA = (0<<PORTA2); //Slave select
  a4:	1b ba       	out	0x1b, r1	; 27
  a6:	c0 ea       	ldi	r28, 0xA0	; 160
  a8:	df e0       	ldi	r29, 0x0F	; 15
	while(p<4000)
	{
	_delay_us(100);
	PORTA = (0<<PORTA2); //Slave select
	spi_transmit(inbuffer);
	PORTA = (1<<PORTA2); //Slave deselect
  aa:	14 e0       	ldi	r17, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	8f e8       	ldi	r24, 0x8F	; 143
  ae:	91 e0       	ldi	r25, 0x01	; 1
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <main+0x10>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x16>
  b6:	00 00       	nop
	PORTA = (0<<PORTA2); //Slave select
	int p = 0;
	while(p<4000)
	{
	_delay_us(100);
	PORTA = (0<<PORTA2); //Slave select
  b8:	1b ba       	out	0x1b, r1	; 27
	spi_transmit(inbuffer);
  ba:	80 91 60 00 	lds	r24, 0x0060
  be:	0e 94 49 00 	call	0x92	; 0x92 <spi_transmit>
	PORTA = (1<<PORTA2); //Slave deselect
  c2:	1b bb       	out	0x1b, r17	; 27
  c4:	21 97       	sbiw	r28, 0x01	; 1
int main(void)
{
	spi_init();
	PORTA = (0<<PORTA2); //Slave select
	int p = 0;
	while(p<4000)
  c6:	20 97       	sbiw	r28, 0x00	; 0
  c8:	89 f7       	brne	.-30     	; 0xac <main+0xc>
	while(1)
	{
		_delay_ms(1000);
		PORTA = (0<<PORTA2); //Slave select
		spi_transmit(inbuffer);
		PORTA = (1<<PORTA2); //Slave deselect
  ca:	c4 e0       	ldi	r28, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	9f ef       	ldi	r25, 0xFF	; 255
  ce:	23 ed       	ldi	r18, 0xD3	; 211
  d0:	80 e3       	ldi	r24, 0x30	; 48
  d2:	91 50       	subi	r25, 0x01	; 1
  d4:	20 40       	sbci	r18, 0x00	; 0
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x32>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x3c>
  dc:	00 00       	nop
	p = p+1;
	}
	while(1)
	{
		_delay_ms(1000);
		PORTA = (0<<PORTA2); //Slave select
  de:	1b ba       	out	0x1b, r1	; 27
		spi_transmit(inbuffer);
  e0:	80 91 60 00 	lds	r24, 0x0060
  e4:	0e 94 49 00 	call	0x92	; 0x92 <spi_transmit>
		PORTA = (1<<PORTA2); //Slave deselect
  e8:	cb bb       	out	0x1b, r28	; 27
  ea:	f0 cf       	rjmp	.-32     	; 0xcc <main+0x2c>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
