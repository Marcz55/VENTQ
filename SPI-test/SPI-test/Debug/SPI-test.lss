
SPI-test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000000e0  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800062  00800062  00000176  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000188  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000123  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000016c  00000000  00000000  00000481  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000005f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000018f  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002d  00000000  00000000  000007c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ee       	ldi	r30, 0xE0	; 224
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 36       	cpi	r26, 0x63	; 99
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  8a:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <spi_init>:
unsigned char inbuffer = 0b10101010;
unsigned char trash;

void spi_init(void)
{
	DDRA = (1<<PORTA2)|(1<<PORTA0);
  92:	85 e0       	ldi	r24, 0x05	; 5
  94:	8a bb       	out	0x1a, r24	; 26
	PORTA = (1<<PORTA0);
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	8b bb       	out	0x1b, r24	; 27
	PORTA = (1<<PORTA2); //Ha ingen slav vald
  9a:	84 e0       	ldi	r24, 0x04	; 4
  9c:	8b bb       	out	0x1b, r24	; 27
	DDRB = (1<<PORTB5)|(1<<PORTB7)|(1<<PORTB4); //Definiera outputs
  9e:	80 eb       	ldi	r24, 0xB0	; 176
  a0:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0); //Sätt enhet till master, enable spi, klockfrekvens
  a2:	81 e5       	ldi	r24, 0x51	; 81
  a4:	8d b9       	out	0x0d, r24	; 13
  a6:	08 95       	ret

000000a8 <spi_transmit>:
}

void spi_transmit(unsigned char data)
{
	 SPDR = data;
  a8:	8f b9       	out	0x0f, r24	; 15
	 while(!(SPSR & (1<<SPIF))); //Vänta på att överföring är klar
  aa:	77 9b       	sbis	0x0e, 7	; 14
  ac:	fe cf       	rjmp	.-4      	; 0xaa <spi_transmit+0x2>
	 trash = SPDR;
  ae:	8f b1       	in	r24, 0x0f	; 15
  b0:	80 93 62 00 	sts	0x0062, r24
  b4:	08 95       	ret

000000b6 <main>:
}

int main(void)
{
	spi_init();
  b6:	0e 94 49 00 	call	0x92	; 0x92 <spi_init>
	while(1)
	{
	_delay_ms(500);
	PORTA = (0<<PORTA2); //Slave select
	spi_transmit(inbuffer);
	PORTA = (1<<PORTA2); //Slave deselect
  ba:	c4 e0       	ldi	r28, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	89 e6       	ldi	r24, 0x69	; 105
  c0:	98 e1       	ldi	r25, 0x18	; 24
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0xc>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x16>
  cc:	00 00       	nop
	//PORTA = (0<<PORTA2); //Slave select
	//PORTA = (1<<PORTA0);
	while(1)
	{
	_delay_ms(500);
	PORTA = (0<<PORTA2); //Slave select
  ce:	1b ba       	out	0x1b, r1	; 27
	spi_transmit(inbuffer);
  d0:	80 91 60 00 	lds	r24, 0x0060
  d4:	0e 94 54 00 	call	0xa8	; 0xa8 <spi_transmit>
	PORTA = (1<<PORTA2); //Slave deselect
  d8:	cb bb       	out	0x1b, r28	; 27
  da:	f0 cf       	rjmp	.-32     	; 0xbc <main+0x6>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
