
Kommunikationsenhet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000003f8  0000048c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800066  00800066  00000492  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000492  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000004c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002c6  00000000  00000000  0000052a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001c0  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000210  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  00000bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000205  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000018d  00000000  00000000  00000ed9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001066  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_10>
  2c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a6 e6       	ldi	r26, 0x66	; 102
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 37       	cpi	r26, 0x72	; 114
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e8 ef       	ldi	r30, 0xF8	; 248
  78:	f3 e0       	ldi	r31, 0x03	; 3
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>
  86:	0e 94 80 00 	call	0x100	; 0x100 <main>
  8a:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <appendList>:
	unsigned char data_;
	struct node* next_;
};

void appendList (unsigned char data)
{
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
	// Härifrån skapas en ny nod som sedan initialiseras
	struct node* temp = malloc(sizeof(struct node));
  96:	83 e0       	ldi	r24, 0x03	; 3
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 ce 00 	call	0x19c	; 0x19c <malloc>
  9e:	fc 01       	movw	r30, r24
	assert(temp != NULL);
  a0:	00 97       	sbiw	r24, 0x00	; 0
  a2:	11 f4       	brne	.+4      	; 0xa8 <appendList+0x16>
  a4:	0e 94 f5 01 	call	0x3ea	; 0x3ea <abort>
	temp->data_ = data;
  a8:	c0 83       	st	Z, r28
	temp->next_ = NULL; // ...till hit
  aa:	12 82       	std	Z+2, r1	; 0x02
  ac:	11 82       	std	Z+1, r1	; 0x01
	
	if (firstPtr_g == NULL) // Om listan är tom
  ae:	80 91 68 00 	lds	r24, 0x0068
  b2:	90 91 69 00 	lds	r25, 0x0069
  b6:	89 2b       	or	r24, r25
  b8:	29 f4       	brne	.+10     	; 0xc4 <appendList+0x32>
	{
		firstPtr_g = temp;
  ba:	f0 93 69 00 	sts	0x0069, r31
  be:	e0 93 68 00 	sts	0x0068, r30
  c2:	08 c0       	rjmp	.+16     	; 0xd4 <appendList+0x42>
	}
	else // Om listan inte är tom
	{
		lastPtr_g->next_ = temp;
  c4:	a0 91 6c 00 	lds	r26, 0x006C
  c8:	b0 91 6d 00 	lds	r27, 0x006D
  cc:	12 96       	adiw	r26, 0x02	; 2
  ce:	fc 93       	st	X, r31
  d0:	ee 93       	st	-X, r30
  d2:	11 97       	sbiw	r26, 0x01	; 1
	}
	lastPtr_g = temp;	
  d4:	f0 93 6d 00 	sts	0x006D, r31
  d8:	e0 93 6c 00 	sts	0x006C, r30
}
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <Bluetooth_init>:

void Bluetooth_init()
{
	UBRRL = (0<<UBRR3)|(1<<UBRR2)|(1<<UBRR1)|(1<<UBRR0); //Sätt baud-rate till 115200 
  e0:	87 e0       	ldi	r24, 0x07	; 7
  e2:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN)|(1<<RXCIE); //Sätt på sändare och mottagare, samt sätt på interrupts vid recieve complete respektive tom buffer.
  e4:	88 e9       	ldi	r24, 0x98	; 152
  e6:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(3<<UCSZ0)|(0<<UPM1)|(0<<UPM0); //Sätt 8-bit meddelanden samt ingen paritet
  e8:	86 e8       	ldi	r24, 0x86	; 134
  ea:	80 bd       	out	0x20, r24	; 32
	DDRA = (0<<DDA1)|(1<<DDA0); //Definiera en input och en output
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	8a bb       	out	0x1a, r24	; 26
	PORTA = (0<<PORTA0)|(1<<PORTA1); //Skicka ut clear to send
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	8b bb       	out	0x1b, r24	; 27
  f4:	08 95       	ret

000000f6 <SPI_init>:
}

void SPI_init(void)
{
	DDRB = (1<<PORTB6); //Alla utom MISO ska vara ingångar.
  f6:	80 e4       	ldi	r24, 0x40	; 64
  f8:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE)|(1<<SPIE); //Sätt på SPI
  fa:	80 ec       	ldi	r24, 0xC0	; 192
  fc:	8d b9       	out	0x0d, r24	; 13
  fe:	08 95       	ret

00000100 <main>:
	SPDR = data;
}

int main(void)
{
	firstPtr_g = NULL;
 100:	10 92 69 00 	sts	0x0069, r1
 104:	10 92 68 00 	sts	0x0068, r1
	lastPtr_g = NULL;
 108:	10 92 6d 00 	sts	0x006D, r1
 10c:	10 92 6c 00 	sts	0x006C, r1
	Bluetooth_init();
 110:	0e 94 70 00 	call	0xe0	; 0xe0 <Bluetooth_init>
	SPI_init();
 114:	0e 94 7b 00 	call	0xf6	; 0xf6 <SPI_init>
	sei();
 118:	78 94       	sei
	//unsigned char test;
	
	while(1)
	{
	MCUCR = (1<<SE); //Sleep enable
 11a:	90 e4       	ldi	r25, 0x40	; 64
 11c:	95 bf       	out	0x35, r25	; 53
	sleep_mode();
 11e:	85 b7       	in	r24, 0x35	; 53
 120:	80 64       	ori	r24, 0x40	; 64
 122:	85 bf       	out	0x35, r24	; 53
 124:	88 95       	sleep
 126:	85 b7       	in	r24, 0x35	; 53
 128:	8f 7b       	andi	r24, 0xBF	; 191
 12a:	85 bf       	out	0x35, r24	; 53
 12c:	f7 cf       	rjmp	.-18     	; 0x11c <main+0x1c>

0000012e <__vector_11>:
	}

}

ISR(USART_RXC_vect) //Inkommet bluetoothmeddelande
{
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	8f 93       	push	r24
	MCUCR = (0<<SE);
 13a:	15 be       	out	0x35, r1	; 53
	UDR = data;
}

unsigned char Recieve(void)
{
	return UDR;
 13c:	8c b1       	in	r24, 0x0c	; 12
}

ISR(USART_RXC_vect) //Inkommet bluetoothmeddelande
{
	MCUCR = (0<<SE);
	SPDR = Recieve(); //Information som ska skickas överförs direkt till SPDR, där det är redo att föras över till masterenheten.
 13e:	8f b9       	out	0x0f, r24	; 15
}
 140:	8f 91       	pop	r24
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <__vector_10>:

ISR(SPISTC_vect)//SPI-överföring klar
{
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	2f 93       	push	r18
 158:	3f 93       	push	r19
 15a:	4f 93       	push	r20
 15c:	5f 93       	push	r21
 15e:	6f 93       	push	r22
 160:	7f 93       	push	r23
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	af 93       	push	r26
 168:	bf 93       	push	r27
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31
	MCUCR = (0<<SE);
 16e:	15 be       	out	0x35, r1	; 53
	//Send(SPDR); Lägg in i lista istället!
	appendList(SPDR);
 170:	8f b1       	in	r24, 0x0f	; 15
 172:	0e 94 49 00 	call	0x92	; 0x92 <appendList>
	SPDR = 0x44; //Återställ SPDR.
 176:	84 e4       	ldi	r24, 0x44	; 68
 178:	8f b9       	out	0x0f, r24	; 15
	
}
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	bf 91       	pop	r27
 180:	af 91       	pop	r26
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	7f 91       	pop	r23
 188:	6f 91       	pop	r22
 18a:	5f 91       	pop	r21
 18c:	4f 91       	pop	r20
 18e:	3f 91       	pop	r19
 190:	2f 91       	pop	r18
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <malloc>:
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	82 30       	cpi	r24, 0x02	; 2
 1a2:	91 05       	cpc	r25, r1
 1a4:	10 f4       	brcc	.+4      	; 0x1aa <malloc+0xe>
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	e0 91 70 00 	lds	r30, 0x0070
 1ae:	f0 91 71 00 	lds	r31, 0x0071
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	a0 e0       	ldi	r26, 0x00	; 0
 1b8:	b0 e0       	ldi	r27, 0x00	; 0
 1ba:	30 97       	sbiw	r30, 0x00	; 0
 1bc:	39 f1       	breq	.+78     	; 0x20c <malloc+0x70>
 1be:	40 81       	ld	r20, Z
 1c0:	51 81       	ldd	r21, Z+1	; 0x01
 1c2:	48 17       	cp	r20, r24
 1c4:	59 07       	cpc	r21, r25
 1c6:	b8 f0       	brcs	.+46     	; 0x1f6 <malloc+0x5a>
 1c8:	48 17       	cp	r20, r24
 1ca:	59 07       	cpc	r21, r25
 1cc:	71 f4       	brne	.+28     	; 0x1ea <malloc+0x4e>
 1ce:	82 81       	ldd	r24, Z+2	; 0x02
 1d0:	93 81       	ldd	r25, Z+3	; 0x03
 1d2:	10 97       	sbiw	r26, 0x00	; 0
 1d4:	29 f0       	breq	.+10     	; 0x1e0 <malloc+0x44>
 1d6:	13 96       	adiw	r26, 0x03	; 3
 1d8:	9c 93       	st	X, r25
 1da:	8e 93       	st	-X, r24
 1dc:	12 97       	sbiw	r26, 0x02	; 2
 1de:	2c c0       	rjmp	.+88     	; 0x238 <malloc+0x9c>
 1e0:	90 93 71 00 	sts	0x0071, r25
 1e4:	80 93 70 00 	sts	0x0070, r24
 1e8:	27 c0       	rjmp	.+78     	; 0x238 <malloc+0x9c>
 1ea:	21 15       	cp	r18, r1
 1ec:	31 05       	cpc	r19, r1
 1ee:	31 f0       	breq	.+12     	; 0x1fc <malloc+0x60>
 1f0:	42 17       	cp	r20, r18
 1f2:	53 07       	cpc	r21, r19
 1f4:	18 f0       	brcs	.+6      	; 0x1fc <malloc+0x60>
 1f6:	a9 01       	movw	r20, r18
 1f8:	db 01       	movw	r26, r22
 1fa:	01 c0       	rjmp	.+2      	; 0x1fe <malloc+0x62>
 1fc:	ef 01       	movw	r28, r30
 1fe:	9a 01       	movw	r18, r20
 200:	bd 01       	movw	r22, r26
 202:	df 01       	movw	r26, r30
 204:	02 80       	ldd	r0, Z+2	; 0x02
 206:	f3 81       	ldd	r31, Z+3	; 0x03
 208:	e0 2d       	mov	r30, r0
 20a:	d7 cf       	rjmp	.-82     	; 0x1ba <malloc+0x1e>
 20c:	21 15       	cp	r18, r1
 20e:	31 05       	cpc	r19, r1
 210:	f9 f0       	breq	.+62     	; 0x250 <malloc+0xb4>
 212:	28 1b       	sub	r18, r24
 214:	39 0b       	sbc	r19, r25
 216:	24 30       	cpi	r18, 0x04	; 4
 218:	31 05       	cpc	r19, r1
 21a:	80 f4       	brcc	.+32     	; 0x23c <malloc+0xa0>
 21c:	8a 81       	ldd	r24, Y+2	; 0x02
 21e:	9b 81       	ldd	r25, Y+3	; 0x03
 220:	61 15       	cp	r22, r1
 222:	71 05       	cpc	r23, r1
 224:	21 f0       	breq	.+8      	; 0x22e <malloc+0x92>
 226:	fb 01       	movw	r30, r22
 228:	93 83       	std	Z+3, r25	; 0x03
 22a:	82 83       	std	Z+2, r24	; 0x02
 22c:	04 c0       	rjmp	.+8      	; 0x236 <malloc+0x9a>
 22e:	90 93 71 00 	sts	0x0071, r25
 232:	80 93 70 00 	sts	0x0070, r24
 236:	fe 01       	movw	r30, r28
 238:	32 96       	adiw	r30, 0x02	; 2
 23a:	44 c0       	rjmp	.+136    	; 0x2c4 <malloc+0x128>
 23c:	fe 01       	movw	r30, r28
 23e:	e2 0f       	add	r30, r18
 240:	f3 1f       	adc	r31, r19
 242:	81 93       	st	Z+, r24
 244:	91 93       	st	Z+, r25
 246:	22 50       	subi	r18, 0x02	; 2
 248:	31 09       	sbc	r19, r1
 24a:	39 83       	std	Y+1, r19	; 0x01
 24c:	28 83       	st	Y, r18
 24e:	3a c0       	rjmp	.+116    	; 0x2c4 <malloc+0x128>
 250:	20 91 6e 00 	lds	r18, 0x006E
 254:	30 91 6f 00 	lds	r19, 0x006F
 258:	23 2b       	or	r18, r19
 25a:	41 f4       	brne	.+16     	; 0x26c <malloc+0xd0>
 25c:	20 91 62 00 	lds	r18, 0x0062
 260:	30 91 63 00 	lds	r19, 0x0063
 264:	30 93 6f 00 	sts	0x006F, r19
 268:	20 93 6e 00 	sts	0x006E, r18
 26c:	20 91 60 00 	lds	r18, 0x0060
 270:	30 91 61 00 	lds	r19, 0x0061
 274:	21 15       	cp	r18, r1
 276:	31 05       	cpc	r19, r1
 278:	41 f4       	brne	.+16     	; 0x28a <malloc+0xee>
 27a:	2d b7       	in	r18, 0x3d	; 61
 27c:	3e b7       	in	r19, 0x3e	; 62
 27e:	40 91 64 00 	lds	r20, 0x0064
 282:	50 91 65 00 	lds	r21, 0x0065
 286:	24 1b       	sub	r18, r20
 288:	35 0b       	sbc	r19, r21
 28a:	e0 91 6e 00 	lds	r30, 0x006E
 28e:	f0 91 6f 00 	lds	r31, 0x006F
 292:	e2 17       	cp	r30, r18
 294:	f3 07       	cpc	r31, r19
 296:	a0 f4       	brcc	.+40     	; 0x2c0 <malloc+0x124>
 298:	2e 1b       	sub	r18, r30
 29a:	3f 0b       	sbc	r19, r31
 29c:	28 17       	cp	r18, r24
 29e:	39 07       	cpc	r19, r25
 2a0:	78 f0       	brcs	.+30     	; 0x2c0 <malloc+0x124>
 2a2:	ac 01       	movw	r20, r24
 2a4:	4e 5f       	subi	r20, 0xFE	; 254
 2a6:	5f 4f       	sbci	r21, 0xFF	; 255
 2a8:	24 17       	cp	r18, r20
 2aa:	35 07       	cpc	r19, r21
 2ac:	48 f0       	brcs	.+18     	; 0x2c0 <malloc+0x124>
 2ae:	4e 0f       	add	r20, r30
 2b0:	5f 1f       	adc	r21, r31
 2b2:	50 93 6f 00 	sts	0x006F, r21
 2b6:	40 93 6e 00 	sts	0x006E, r20
 2ba:	81 93       	st	Z+, r24
 2bc:	91 93       	st	Z+, r25
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <malloc+0x128>
 2c0:	e0 e0       	ldi	r30, 0x00	; 0
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	cf 01       	movw	r24, r30
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <free>:
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	00 97       	sbiw	r24, 0x00	; 0
 2d2:	09 f4       	brne	.+2      	; 0x2d6 <free+0xa>
 2d4:	87 c0       	rjmp	.+270    	; 0x3e4 <free+0x118>
 2d6:	fc 01       	movw	r30, r24
 2d8:	32 97       	sbiw	r30, 0x02	; 2
 2da:	13 82       	std	Z+3, r1	; 0x03
 2dc:	12 82       	std	Z+2, r1	; 0x02
 2de:	c0 91 70 00 	lds	r28, 0x0070
 2e2:	d0 91 71 00 	lds	r29, 0x0071
 2e6:	20 97       	sbiw	r28, 0x00	; 0
 2e8:	81 f4       	brne	.+32     	; 0x30a <free+0x3e>
 2ea:	20 81       	ld	r18, Z
 2ec:	31 81       	ldd	r19, Z+1	; 0x01
 2ee:	28 0f       	add	r18, r24
 2f0:	39 1f       	adc	r19, r25
 2f2:	80 91 6e 00 	lds	r24, 0x006E
 2f6:	90 91 6f 00 	lds	r25, 0x006F
 2fa:	82 17       	cp	r24, r18
 2fc:	93 07       	cpc	r25, r19
 2fe:	79 f5       	brne	.+94     	; 0x35e <free+0x92>
 300:	f0 93 6f 00 	sts	0x006F, r31
 304:	e0 93 6e 00 	sts	0x006E, r30
 308:	6d c0       	rjmp	.+218    	; 0x3e4 <free+0x118>
 30a:	de 01       	movw	r26, r28
 30c:	20 e0       	ldi	r18, 0x00	; 0
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	ae 17       	cp	r26, r30
 312:	bf 07       	cpc	r27, r31
 314:	50 f4       	brcc	.+20     	; 0x32a <free+0x5e>
 316:	12 96       	adiw	r26, 0x02	; 2
 318:	4d 91       	ld	r20, X+
 31a:	5c 91       	ld	r21, X
 31c:	13 97       	sbiw	r26, 0x03	; 3
 31e:	9d 01       	movw	r18, r26
 320:	41 15       	cp	r20, r1
 322:	51 05       	cpc	r21, r1
 324:	09 f1       	breq	.+66     	; 0x368 <free+0x9c>
 326:	da 01       	movw	r26, r20
 328:	f3 cf       	rjmp	.-26     	; 0x310 <free+0x44>
 32a:	b3 83       	std	Z+3, r27	; 0x03
 32c:	a2 83       	std	Z+2, r26	; 0x02
 32e:	40 81       	ld	r20, Z
 330:	51 81       	ldd	r21, Z+1	; 0x01
 332:	84 0f       	add	r24, r20
 334:	95 1f       	adc	r25, r21
 336:	8a 17       	cp	r24, r26
 338:	9b 07       	cpc	r25, r27
 33a:	71 f4       	brne	.+28     	; 0x358 <free+0x8c>
 33c:	8d 91       	ld	r24, X+
 33e:	9c 91       	ld	r25, X
 340:	11 97       	sbiw	r26, 0x01	; 1
 342:	84 0f       	add	r24, r20
 344:	95 1f       	adc	r25, r21
 346:	02 96       	adiw	r24, 0x02	; 2
 348:	91 83       	std	Z+1, r25	; 0x01
 34a:	80 83       	st	Z, r24
 34c:	12 96       	adiw	r26, 0x02	; 2
 34e:	8d 91       	ld	r24, X+
 350:	9c 91       	ld	r25, X
 352:	13 97       	sbiw	r26, 0x03	; 3
 354:	93 83       	std	Z+3, r25	; 0x03
 356:	82 83       	std	Z+2, r24	; 0x02
 358:	21 15       	cp	r18, r1
 35a:	31 05       	cpc	r19, r1
 35c:	29 f4       	brne	.+10     	; 0x368 <free+0x9c>
 35e:	f0 93 71 00 	sts	0x0071, r31
 362:	e0 93 70 00 	sts	0x0070, r30
 366:	3e c0       	rjmp	.+124    	; 0x3e4 <free+0x118>
 368:	d9 01       	movw	r26, r18
 36a:	13 96       	adiw	r26, 0x03	; 3
 36c:	fc 93       	st	X, r31
 36e:	ee 93       	st	-X, r30
 370:	12 97       	sbiw	r26, 0x02	; 2
 372:	4d 91       	ld	r20, X+
 374:	5d 91       	ld	r21, X+
 376:	a4 0f       	add	r26, r20
 378:	b5 1f       	adc	r27, r21
 37a:	ea 17       	cp	r30, r26
 37c:	fb 07       	cpc	r31, r27
 37e:	79 f4       	brne	.+30     	; 0x39e <free+0xd2>
 380:	80 81       	ld	r24, Z
 382:	91 81       	ldd	r25, Z+1	; 0x01
 384:	84 0f       	add	r24, r20
 386:	95 1f       	adc	r25, r21
 388:	02 96       	adiw	r24, 0x02	; 2
 38a:	d9 01       	movw	r26, r18
 38c:	11 96       	adiw	r26, 0x01	; 1
 38e:	9c 93       	st	X, r25
 390:	8e 93       	st	-X, r24
 392:	82 81       	ldd	r24, Z+2	; 0x02
 394:	93 81       	ldd	r25, Z+3	; 0x03
 396:	13 96       	adiw	r26, 0x03	; 3
 398:	9c 93       	st	X, r25
 39a:	8e 93       	st	-X, r24
 39c:	12 97       	sbiw	r26, 0x02	; 2
 39e:	e0 e0       	ldi	r30, 0x00	; 0
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	8a 81       	ldd	r24, Y+2	; 0x02
 3a4:	9b 81       	ldd	r25, Y+3	; 0x03
 3a6:	00 97       	sbiw	r24, 0x00	; 0
 3a8:	19 f0       	breq	.+6      	; 0x3b0 <free+0xe4>
 3aa:	fe 01       	movw	r30, r28
 3ac:	ec 01       	movw	r28, r24
 3ae:	f9 cf       	rjmp	.-14     	; 0x3a2 <free+0xd6>
 3b0:	ce 01       	movw	r24, r28
 3b2:	02 96       	adiw	r24, 0x02	; 2
 3b4:	28 81       	ld	r18, Y
 3b6:	39 81       	ldd	r19, Y+1	; 0x01
 3b8:	82 0f       	add	r24, r18
 3ba:	93 1f       	adc	r25, r19
 3bc:	20 91 6e 00 	lds	r18, 0x006E
 3c0:	30 91 6f 00 	lds	r19, 0x006F
 3c4:	28 17       	cp	r18, r24
 3c6:	39 07       	cpc	r19, r25
 3c8:	69 f4       	brne	.+26     	; 0x3e4 <free+0x118>
 3ca:	30 97       	sbiw	r30, 0x00	; 0
 3cc:	29 f4       	brne	.+10     	; 0x3d8 <free+0x10c>
 3ce:	10 92 71 00 	sts	0x0071, r1
 3d2:	10 92 70 00 	sts	0x0070, r1
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <free+0x110>
 3d8:	13 82       	std	Z+3, r1	; 0x03
 3da:	12 82       	std	Z+2, r1	; 0x02
 3dc:	d0 93 6f 00 	sts	0x006F, r29
 3e0:	c0 93 6e 00 	sts	0x006E, r28
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	08 95       	ret

000003ea <abort>:
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	f8 94       	cli
 3f0:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <_exit>

000003f4 <_exit>:
 3f4:	f8 94       	cli

000003f6 <__stop_program>:
 3f6:	ff cf       	rjmp	.-2      	; 0x3f6 <__stop_program>
