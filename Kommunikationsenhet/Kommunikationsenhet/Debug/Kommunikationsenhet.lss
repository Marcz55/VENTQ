
Kommunikationsenhet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000134  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000060  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001e9  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000012e  00000000  00000000  00000401  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000015f  00000000  00000000  0000052f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000fc  00000000  00000000  00000690  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001bf  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000107  00000000  00000000  0000094b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000050  00000000  00000000  00000a52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_10>
  2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  74:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Bluetooth_init>:
unsigned char SPIinbuffer;
unsigned char SPIutbuffer;

void Bluetooth_init()
{
	UBRRL = (0<<UBRR3)|(1<<UBRR2)|(1<<UBRR1)|(1<<UBRR0); //Sätt baud-rate till 115200 
  7c:	87 e0       	ldi	r24, 0x07	; 7
  7e:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN)|(1<<RXCIE); //Sätt på sändare och mottagare, samt sätt på interrupts vid recieve complete respektive tom buffer.
  80:	88 e9       	ldi	r24, 0x98	; 152
  82:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(3<<UCSZ0)|(0<<UPM1)|(0<<UPM0); //Sätt 8-bit meddelanden samt ingen paritet
  84:	86 e8       	ldi	r24, 0x86	; 134
  86:	80 bd       	out	0x20, r24	; 32
	DDRA = (0<<DDA1)|(1<<DDA0); //Definiera en input och en output
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	8a bb       	out	0x1a, r24	; 26
	PORTA = (0<<PORTA0)|(1<<PORTA1); //Skicka ut clear to send
  8c:	82 e0       	ldi	r24, 0x02	; 2
  8e:	8b bb       	out	0x1b, r24	; 27
  90:	08 95       	ret

00000092 <SPI_init>:
}

void SPI_init(void)
{
	DDRB = (1<<PORTB6); //Alla utom MISO ska vara ingångar.
  92:	80 e4       	ldi	r24, 0x40	; 64
  94:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE)|(1<<SPIE); //Sätt på SPI
  96:	80 ec       	ldi	r24, 0xC0	; 192
  98:	8d b9       	out	0x0d, r24	; 13
  9a:	08 95       	ret

0000009c <Send>:
}

void Send(unsigned char data)

{
	while ( !( UCSRA & (1<<UDRE)));
  9c:	5d 9b       	sbis	0x0b, 5	; 11
  9e:	fe cf       	rjmp	.-4      	; 0x9c <Send>
	UDR = data;
  a0:	8c b9       	out	0x0c, r24	; 12
  a2:	08 95       	ret

000000a4 <main>:
	SPDR = data;
}

int main(void)
{
	Bluetooth_init();
  a4:	0e 94 3e 00 	call	0x7c	; 0x7c <Bluetooth_init>
	SPI_init();
  a8:	0e 94 49 00 	call	0x92	; 0x92 <SPI_init>
	sei();
  ac:	78 94       	sei
	//unsigned char test;
	
	while(1)
	{
	MCUCR = (1<<SE); //Sleep enable
  ae:	90 e4       	ldi	r25, 0x40	; 64
  b0:	95 bf       	out	0x35, r25	; 53
	sleep_mode();
  b2:	85 b7       	in	r24, 0x35	; 53
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	85 bf       	out	0x35, r24	; 53
  b8:	88 95       	sleep
  ba:	85 b7       	in	r24, 0x35	; 53
  bc:	8f 7b       	andi	r24, 0xBF	; 191
  be:	85 bf       	out	0x35, r24	; 53
  c0:	f7 cf       	rjmp	.-18     	; 0xb0 <main+0xc>

000000c2 <__vector_11>:
	}

}

ISR(USART_RXC_vect) //Inkommet bluetoothmeddelande
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
	MCUCR = (0<<SE);
  ce:	15 be       	out	0x35, r1	; 53
	UDR = data;
}

unsigned char Recieve(void)
{
	return UDR;
  d0:	8c b1       	in	r24, 0x0c	; 12
}

ISR(USART_RXC_vect) //Inkommet bluetoothmeddelande
{
	MCUCR = (0<<SE);
	SPDR = Recieve(); //Information som ska skickas överförs direkt till SPDR, där det är redo att föras över till masterenheten.
  d2:	8f b9       	out	0x0f, r24	; 15
}
  d4:	8f 91       	pop	r24
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <__vector_10>:

ISR(SPISTC_vect)//SPI-överföring klar
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	2f 93       	push	r18
  ec:	3f 93       	push	r19
  ee:	4f 93       	push	r20
  f0:	5f 93       	push	r21
  f2:	6f 93       	push	r22
  f4:	7f 93       	push	r23
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
  fa:	af 93       	push	r26
  fc:	bf 93       	push	r27
  fe:	ef 93       	push	r30
 100:	ff 93       	push	r31
	MCUCR = (0<<SE);
 102:	15 be       	out	0x35, r1	; 53
	Send(SPDR);
 104:	8f b1       	in	r24, 0x0f	; 15
 106:	0e 94 4e 00 	call	0x9c	; 0x9c <Send>
	SPDR = 0x44; //Återställ SPDR.
 10a:	84 e4       	ldi	r24, 0x44	; 68
 10c:	8f b9       	out	0x0f, r24	; 15
	
}
 10e:	ff 91       	pop	r31
 110:	ef 91       	pop	r30
 112:	bf 91       	pop	r27
 114:	af 91       	pop	r26
 116:	9f 91       	pop	r25
 118:	8f 91       	pop	r24
 11a:	7f 91       	pop	r23
 11c:	6f 91       	pop	r22
 11e:	5f 91       	pop	r21
 120:	4f 91       	pop	r20
 122:	3f 91       	pop	r19
 124:	2f 91       	pop	r18
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
