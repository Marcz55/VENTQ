
Kommunikationsenhet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000442  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000442  000004d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800066  00800066  000004dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000351  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000023f  00000000  00000000  000008dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024d  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00000d6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000020e  00000000  00000000  00000ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e3  00000000  00000000  000010ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000012ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_10>
  2c:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a6 e6       	ldi	r26, 0x66	; 102
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ae 36       	cpi	r26, 0x6E	; 110
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e2 e4       	ldi	r30, 0x42	; 66
  78:	f4 e0       	ldi	r31, 0x04	; 4
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>
  86:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  8a:	0c 94 1f 02 	jmp	0x43e	; 0x43e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <bluetoothInit>:
	struct node_t* next_;
};

void bluetoothInit()
{
    UBRRL = (0<<UBRR3)|(1<<UBRR2)|(1<<UBRR1)|(1<<UBRR0); //Sätt baud-rate till 115200
  92:	87 e0       	ldi	r24, 0x07	; 7
  94:	89 b9       	out	0x09, r24	; 9
    UCSRB = (1<<RXEN)|(1<<TXEN)|(1<<RXCIE); //Sätt på sändare och mottagare, samt sätt på interrupts vid recieve complete respektive tom buffer.
  96:	88 e9       	ldi	r24, 0x98	; 152
  98:	8a b9       	out	0x0a, r24	; 10
    UCSRC = (1<<URSEL)|(3<<UCSZ0)|(0<<UPM1)|(0<<UPM0); //Sätt 8-bit meddelanden samt ingen paritet
  9a:	86 e8       	ldi	r24, 0x86	; 134
  9c:	80 bd       	out	0x20, r24	; 32
    DDRA = (0<<DDA1)|(1<<DDA0); //Definiera en input och en output
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	8a bb       	out	0x1a, r24	; 26
    PORTA = (0<<PORTA0)|(1<<PORTA1); //Skicka ut clear to send
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	8b bb       	out	0x1b, r24	; 27
  a6:	08 95       	ret

000000a8 <spiInit>:
}

void spiInit(void)
{
    DDRB = (1<<PORTB6); //Alla utom MISO ska vara ingångar.
  a8:	80 e4       	ldi	r24, 0x40	; 64
  aa:	87 bb       	out	0x17, r24	; 23
    SPCR = (1<<SPE)|(1<<SPIE); //Sätt på SPI
  ac:	80 ec       	ldi	r24, 0xC0	; 192
  ae:	8d b9       	out	0x0d, r24	; 13
  b0:	08 95       	ret

000000b2 <bluetoothSend>:
    
}

void bluetoothSend(unsigned char data)
{
    while ( !( UCSRA & (1<<UDRE)));
  b2:	5d 9b       	sbis	0x0b, 5	; 11
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <bluetoothSend>
    UDR = data;
  b6:	8c b9       	out	0x0c, r24	; 12
  b8:	08 95       	ret

000000ba <removeFirst>:
{
    SPDR = 0;
}

void removeFirst ()
{
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
    if (first_p_g == NULL)
  be:	80 91 66 00 	lds	r24, 0x0066
  c2:	90 91 67 00 	lds	r25, 0x0067
  c6:	00 97       	sbiw	r24, 0x00	; 0
  c8:	49 f0       	breq	.+18     	; 0xdc <removeFirst+0x22>
    {
        return;
    }
    else
    {
        struct node_t* temp_p = first_p_g->next_;
  ca:	fc 01       	movw	r30, r24
  cc:	c1 81       	ldd	r28, Z+1	; 0x01
  ce:	d2 81       	ldd	r29, Z+2	; 0x02
        free (first_p_g);
  d0:	0e 94 90 01 	call	0x320	; 0x320 <free>
        first_p_g = temp_p;
  d4:	d0 93 67 00 	sts	0x0067, r29
  d8:	c0 93 66 00 	sts	0x0066, r28
    }
}
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <processList>:

void processList()
{
    if (first_p_g != NULL)
  e2:	e0 91 66 00 	lds	r30, 0x0066
  e6:	f0 91 67 00 	lds	r31, 0x0067
  ea:	30 97       	sbiw	r30, 0x00	; 0
  ec:	29 f0       	breq	.+10     	; 0xf8 <processList+0x16>
    {
        bluetoothSend(first_p_g->data_);
  ee:	80 81       	ld	r24, Z
  f0:	0e 94 59 00 	call	0xb2	; 0xb2 <bluetoothSend>
        removeFirst();
  f4:	0e 94 5d 00 	call	0xba	; 0xba <removeFirst>
  f8:	08 95       	ret

000000fa <appendList>:
    }
}

void appendList (unsigned char data)
{
  fa:	cf 93       	push	r28
  fc:	c8 2f       	mov	r28, r24
	// Härifrån skapas en ny nod som sedan initialiseras
	struct node_t* node = malloc(sizeof(struct node_t));
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <malloc>
 106:	fc 01       	movw	r30, r24
    if (node == NULL)
 108:	00 97       	sbiw	r24, 0x00	; 0
 10a:	d1 f0       	breq	.+52     	; 0x140 <appendList+0x46>
    {
        return;
    }        
	node->data_ = data;
 10c:	c0 83       	st	Z, r28
	node->next_ = NULL; // ...till hit
 10e:	12 82       	std	Z+2, r1	; 0x02
 110:	11 82       	std	Z+1, r1	; 0x01
	
	if (first_p_g == NULL) // Om listan är tom
 112:	80 91 66 00 	lds	r24, 0x0066
 116:	90 91 67 00 	lds	r25, 0x0067
 11a:	89 2b       	or	r24, r25
 11c:	29 f4       	brne	.+10     	; 0x128 <appendList+0x2e>
	{
		first_p_g = node;
 11e:	f0 93 67 00 	sts	0x0067, r31
 122:	e0 93 66 00 	sts	0x0066, r30
 126:	08 c0       	rjmp	.+16     	; 0x138 <appendList+0x3e>
	}
	else // Om listan inte är tom
	{
		last_p_g->next_ = node;
 128:	a0 91 68 00 	lds	r26, 0x0068
 12c:	b0 91 69 00 	lds	r27, 0x0069
 130:	12 96       	adiw	r26, 0x02	; 2
 132:	fc 93       	st	X, r31
 134:	ee 93       	st	-X, r30
 136:	11 97       	sbiw	r26, 0x01	; 1
	}
	last_p_g = node;
 138:	f0 93 69 00 	sts	0x0069, r31
 13c:	e0 93 68 00 	sts	0x0068, r30
}
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <main>:

int main(void)
{
	first_p_g = NULL;
 144:	10 92 67 00 	sts	0x0067, r1
 148:	10 92 66 00 	sts	0x0066, r1
	last_p_g = NULL;
 14c:	10 92 69 00 	sts	0x0069, r1
 150:	10 92 68 00 	sts	0x0068, r1
	bluetoothInit();
 154:	0e 94 49 00 	call	0x92	; 0x92 <bluetoothInit>
	spiInit();
 158:	0e 94 54 00 	call	0xa8	; 0xa8 <spiInit>
	sei();
 15c:	78 94       	sei
	{
        while(last_p_g != NULL)   //Gå igenom listan tills den blir tom
        {
          processList();   
        }
        MCUCR = (1<<SE); //Sleep enable
 15e:	c0 e4       	ldi	r28, 0x40	; 64
 160:	02 c0       	rjmp	.+4      	; 0x166 <main+0x22>
	
	while(1)
	{
        while(last_p_g != NULL)   //Gå igenom listan tills den blir tom
        {
          processList();   
 162:	0e 94 71 00 	call	0xe2	; 0xe2 <processList>
	spiInit();
	sei();
	
	while(1)
	{
        while(last_p_g != NULL)   //Gå igenom listan tills den blir tom
 166:	80 91 68 00 	lds	r24, 0x0068
 16a:	90 91 69 00 	lds	r25, 0x0069
 16e:	89 2b       	or	r24, r25
 170:	c1 f7       	brne	.-16     	; 0x162 <main+0x1e>
        {
          processList();   
        }
        MCUCR = (1<<SE); //Sleep enable
 172:	c5 bf       	out	0x35, r28	; 53
	    sleep_mode(); //Gå in i sleep mode om det inte finns något att göra
 174:	85 b7       	in	r24, 0x35	; 53
 176:	80 64       	ori	r24, 0x40	; 64
 178:	85 bf       	out	0x35, r24	; 53
 17a:	88 95       	sleep
 17c:	85 b7       	in	r24, 0x35	; 53
 17e:	8f 7b       	andi	r24, 0xBF	; 191
 180:	85 bf       	out	0x35, r24	; 53
	}
 182:	f1 cf       	rjmp	.-30     	; 0x166 <main+0x22>

00000184 <__vector_11>:
}

ISR(USART_RXC_vect) //Inkommet bluetoothmeddelande
{
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	8f 93       	push	r24
	MCUCR = (0<<SE);
 190:	15 be       	out	0x35, r1	; 53
    UDR = data;
}

unsigned char bluetoothReceive(void)
{
    return UDR;
 192:	8c b1       	in	r24, 0x0c	; 12
    return SPDR;
}

void spiWrite(unsigned char data)
{
    SPDR = data;
 194:	8f b9       	out	0x0f, r24	; 15

ISR(USART_RXC_vect) //Inkommet bluetoothmeddelande
{
	MCUCR = (0<<SE);
	spiWrite(bluetoothReceive()); //Information som ska skickas överförs direkt till SPDR, där det är redo att föras över till masterenheten.
}
 196:	8f 91       	pop	r24
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <__vector_10>:

ISR(SPISTC_vect)//SPI-överföring klar
{
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	2f 93       	push	r18
 1ae:	3f 93       	push	r19
 1b0:	4f 93       	push	r20
 1b2:	5f 93       	push	r21
 1b4:	6f 93       	push	r22
 1b6:	7f 93       	push	r23
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
 1bc:	af 93       	push	r26
 1be:	bf 93       	push	r27
 1c0:	ef 93       	push	r30
 1c2:	ff 93       	push	r31
	MCUCR = (0<<SE);
 1c4:	15 be       	out	0x35, r1	; 53
    return UDR;
}

unsigned char spiReceive(void)
{
    return SPDR;
 1c6:	8f b1       	in	r24, 0x0f	; 15

ISR(SPISTC_vect)//SPI-överföring klar
{
	MCUCR = (0<<SE);
	//Send(SPDR); Lägg in i lista istället!
	appendList(spiReceive());
 1c8:	0e 94 7d 00 	call	0xfa	; 0xfa <appendList>
    SPDR = data;
}

void spiReset()
{
    SPDR = 0;
 1cc:	1f b8       	out	0x0f, r1	; 15
{
	MCUCR = (0<<SE);
	//Send(SPDR); Lägg in i lista istället!
	appendList(spiReceive());
	spiReset(); //Återställ SPDR.
}
 1ce:	ff 91       	pop	r31
 1d0:	ef 91       	pop	r30
 1d2:	bf 91       	pop	r27
 1d4:	af 91       	pop	r26
 1d6:	9f 91       	pop	r25
 1d8:	8f 91       	pop	r24
 1da:	7f 91       	pop	r23
 1dc:	6f 91       	pop	r22
 1de:	5f 91       	pop	r21
 1e0:	4f 91       	pop	r20
 1e2:	3f 91       	pop	r19
 1e4:	2f 91       	pop	r18
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <malloc>:
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	91 05       	cpc	r25, r1
 1f8:	10 f4       	brcc	.+4      	; 0x1fe <malloc+0xe>
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	e0 91 6c 00 	lds	r30, 0x006C
 202:	f0 91 6d 00 	lds	r31, 0x006D
 206:	20 e0       	ldi	r18, 0x00	; 0
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e0       	ldi	r27, 0x00	; 0
 20e:	30 97       	sbiw	r30, 0x00	; 0
 210:	39 f1       	breq	.+78     	; 0x260 <malloc+0x70>
 212:	40 81       	ld	r20, Z
 214:	51 81       	ldd	r21, Z+1	; 0x01
 216:	48 17       	cp	r20, r24
 218:	59 07       	cpc	r21, r25
 21a:	b8 f0       	brcs	.+46     	; 0x24a <malloc+0x5a>
 21c:	48 17       	cp	r20, r24
 21e:	59 07       	cpc	r21, r25
 220:	71 f4       	brne	.+28     	; 0x23e <malloc+0x4e>
 222:	82 81       	ldd	r24, Z+2	; 0x02
 224:	93 81       	ldd	r25, Z+3	; 0x03
 226:	10 97       	sbiw	r26, 0x00	; 0
 228:	29 f0       	breq	.+10     	; 0x234 <malloc+0x44>
 22a:	13 96       	adiw	r26, 0x03	; 3
 22c:	9c 93       	st	X, r25
 22e:	8e 93       	st	-X, r24
 230:	12 97       	sbiw	r26, 0x02	; 2
 232:	2c c0       	rjmp	.+88     	; 0x28c <malloc+0x9c>
 234:	90 93 6d 00 	sts	0x006D, r25
 238:	80 93 6c 00 	sts	0x006C, r24
 23c:	27 c0       	rjmp	.+78     	; 0x28c <malloc+0x9c>
 23e:	21 15       	cp	r18, r1
 240:	31 05       	cpc	r19, r1
 242:	31 f0       	breq	.+12     	; 0x250 <malloc+0x60>
 244:	42 17       	cp	r20, r18
 246:	53 07       	cpc	r21, r19
 248:	18 f0       	brcs	.+6      	; 0x250 <malloc+0x60>
 24a:	a9 01       	movw	r20, r18
 24c:	db 01       	movw	r26, r22
 24e:	01 c0       	rjmp	.+2      	; 0x252 <malloc+0x62>
 250:	ef 01       	movw	r28, r30
 252:	9a 01       	movw	r18, r20
 254:	bd 01       	movw	r22, r26
 256:	df 01       	movw	r26, r30
 258:	02 80       	ldd	r0, Z+2	; 0x02
 25a:	f3 81       	ldd	r31, Z+3	; 0x03
 25c:	e0 2d       	mov	r30, r0
 25e:	d7 cf       	rjmp	.-82     	; 0x20e <malloc+0x1e>
 260:	21 15       	cp	r18, r1
 262:	31 05       	cpc	r19, r1
 264:	f9 f0       	breq	.+62     	; 0x2a4 <malloc+0xb4>
 266:	28 1b       	sub	r18, r24
 268:	39 0b       	sbc	r19, r25
 26a:	24 30       	cpi	r18, 0x04	; 4
 26c:	31 05       	cpc	r19, r1
 26e:	80 f4       	brcc	.+32     	; 0x290 <malloc+0xa0>
 270:	8a 81       	ldd	r24, Y+2	; 0x02
 272:	9b 81       	ldd	r25, Y+3	; 0x03
 274:	61 15       	cp	r22, r1
 276:	71 05       	cpc	r23, r1
 278:	21 f0       	breq	.+8      	; 0x282 <malloc+0x92>
 27a:	fb 01       	movw	r30, r22
 27c:	93 83       	std	Z+3, r25	; 0x03
 27e:	82 83       	std	Z+2, r24	; 0x02
 280:	04 c0       	rjmp	.+8      	; 0x28a <malloc+0x9a>
 282:	90 93 6d 00 	sts	0x006D, r25
 286:	80 93 6c 00 	sts	0x006C, r24
 28a:	fe 01       	movw	r30, r28
 28c:	32 96       	adiw	r30, 0x02	; 2
 28e:	44 c0       	rjmp	.+136    	; 0x318 <malloc+0x128>
 290:	fe 01       	movw	r30, r28
 292:	e2 0f       	add	r30, r18
 294:	f3 1f       	adc	r31, r19
 296:	81 93       	st	Z+, r24
 298:	91 93       	st	Z+, r25
 29a:	22 50       	subi	r18, 0x02	; 2
 29c:	31 09       	sbc	r19, r1
 29e:	39 83       	std	Y+1, r19	; 0x01
 2a0:	28 83       	st	Y, r18
 2a2:	3a c0       	rjmp	.+116    	; 0x318 <malloc+0x128>
 2a4:	20 91 6a 00 	lds	r18, 0x006A
 2a8:	30 91 6b 00 	lds	r19, 0x006B
 2ac:	23 2b       	or	r18, r19
 2ae:	41 f4       	brne	.+16     	; 0x2c0 <malloc+0xd0>
 2b0:	20 91 62 00 	lds	r18, 0x0062
 2b4:	30 91 63 00 	lds	r19, 0x0063
 2b8:	30 93 6b 00 	sts	0x006B, r19
 2bc:	20 93 6a 00 	sts	0x006A, r18
 2c0:	20 91 60 00 	lds	r18, 0x0060
 2c4:	30 91 61 00 	lds	r19, 0x0061
 2c8:	21 15       	cp	r18, r1
 2ca:	31 05       	cpc	r19, r1
 2cc:	41 f4       	brne	.+16     	; 0x2de <malloc+0xee>
 2ce:	2d b7       	in	r18, 0x3d	; 61
 2d0:	3e b7       	in	r19, 0x3e	; 62
 2d2:	40 91 64 00 	lds	r20, 0x0064
 2d6:	50 91 65 00 	lds	r21, 0x0065
 2da:	24 1b       	sub	r18, r20
 2dc:	35 0b       	sbc	r19, r21
 2de:	e0 91 6a 00 	lds	r30, 0x006A
 2e2:	f0 91 6b 00 	lds	r31, 0x006B
 2e6:	e2 17       	cp	r30, r18
 2e8:	f3 07       	cpc	r31, r19
 2ea:	a0 f4       	brcc	.+40     	; 0x314 <malloc+0x124>
 2ec:	2e 1b       	sub	r18, r30
 2ee:	3f 0b       	sbc	r19, r31
 2f0:	28 17       	cp	r18, r24
 2f2:	39 07       	cpc	r19, r25
 2f4:	78 f0       	brcs	.+30     	; 0x314 <malloc+0x124>
 2f6:	ac 01       	movw	r20, r24
 2f8:	4e 5f       	subi	r20, 0xFE	; 254
 2fa:	5f 4f       	sbci	r21, 0xFF	; 255
 2fc:	24 17       	cp	r18, r20
 2fe:	35 07       	cpc	r19, r21
 300:	48 f0       	brcs	.+18     	; 0x314 <malloc+0x124>
 302:	4e 0f       	add	r20, r30
 304:	5f 1f       	adc	r21, r31
 306:	50 93 6b 00 	sts	0x006B, r21
 30a:	40 93 6a 00 	sts	0x006A, r20
 30e:	81 93       	st	Z+, r24
 310:	91 93       	st	Z+, r25
 312:	02 c0       	rjmp	.+4      	; 0x318 <malloc+0x128>
 314:	e0 e0       	ldi	r30, 0x00	; 0
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	cf 01       	movw	r24, r30
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <free>:
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	00 97       	sbiw	r24, 0x00	; 0
 326:	09 f4       	brne	.+2      	; 0x32a <free+0xa>
 328:	87 c0       	rjmp	.+270    	; 0x438 <free+0x118>
 32a:	fc 01       	movw	r30, r24
 32c:	32 97       	sbiw	r30, 0x02	; 2
 32e:	13 82       	std	Z+3, r1	; 0x03
 330:	12 82       	std	Z+2, r1	; 0x02
 332:	c0 91 6c 00 	lds	r28, 0x006C
 336:	d0 91 6d 00 	lds	r29, 0x006D
 33a:	20 97       	sbiw	r28, 0x00	; 0
 33c:	81 f4       	brne	.+32     	; 0x35e <free+0x3e>
 33e:	20 81       	ld	r18, Z
 340:	31 81       	ldd	r19, Z+1	; 0x01
 342:	28 0f       	add	r18, r24
 344:	39 1f       	adc	r19, r25
 346:	80 91 6a 00 	lds	r24, 0x006A
 34a:	90 91 6b 00 	lds	r25, 0x006B
 34e:	82 17       	cp	r24, r18
 350:	93 07       	cpc	r25, r19
 352:	79 f5       	brne	.+94     	; 0x3b2 <free+0x92>
 354:	f0 93 6b 00 	sts	0x006B, r31
 358:	e0 93 6a 00 	sts	0x006A, r30
 35c:	6d c0       	rjmp	.+218    	; 0x438 <free+0x118>
 35e:	de 01       	movw	r26, r28
 360:	20 e0       	ldi	r18, 0x00	; 0
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	ae 17       	cp	r26, r30
 366:	bf 07       	cpc	r27, r31
 368:	50 f4       	brcc	.+20     	; 0x37e <free+0x5e>
 36a:	12 96       	adiw	r26, 0x02	; 2
 36c:	4d 91       	ld	r20, X+
 36e:	5c 91       	ld	r21, X
 370:	13 97       	sbiw	r26, 0x03	; 3
 372:	9d 01       	movw	r18, r26
 374:	41 15       	cp	r20, r1
 376:	51 05       	cpc	r21, r1
 378:	09 f1       	breq	.+66     	; 0x3bc <free+0x9c>
 37a:	da 01       	movw	r26, r20
 37c:	f3 cf       	rjmp	.-26     	; 0x364 <free+0x44>
 37e:	b3 83       	std	Z+3, r27	; 0x03
 380:	a2 83       	std	Z+2, r26	; 0x02
 382:	40 81       	ld	r20, Z
 384:	51 81       	ldd	r21, Z+1	; 0x01
 386:	84 0f       	add	r24, r20
 388:	95 1f       	adc	r25, r21
 38a:	8a 17       	cp	r24, r26
 38c:	9b 07       	cpc	r25, r27
 38e:	71 f4       	brne	.+28     	; 0x3ac <free+0x8c>
 390:	8d 91       	ld	r24, X+
 392:	9c 91       	ld	r25, X
 394:	11 97       	sbiw	r26, 0x01	; 1
 396:	84 0f       	add	r24, r20
 398:	95 1f       	adc	r25, r21
 39a:	02 96       	adiw	r24, 0x02	; 2
 39c:	91 83       	std	Z+1, r25	; 0x01
 39e:	80 83       	st	Z, r24
 3a0:	12 96       	adiw	r26, 0x02	; 2
 3a2:	8d 91       	ld	r24, X+
 3a4:	9c 91       	ld	r25, X
 3a6:	13 97       	sbiw	r26, 0x03	; 3
 3a8:	93 83       	std	Z+3, r25	; 0x03
 3aa:	82 83       	std	Z+2, r24	; 0x02
 3ac:	21 15       	cp	r18, r1
 3ae:	31 05       	cpc	r19, r1
 3b0:	29 f4       	brne	.+10     	; 0x3bc <free+0x9c>
 3b2:	f0 93 6d 00 	sts	0x006D, r31
 3b6:	e0 93 6c 00 	sts	0x006C, r30
 3ba:	3e c0       	rjmp	.+124    	; 0x438 <free+0x118>
 3bc:	d9 01       	movw	r26, r18
 3be:	13 96       	adiw	r26, 0x03	; 3
 3c0:	fc 93       	st	X, r31
 3c2:	ee 93       	st	-X, r30
 3c4:	12 97       	sbiw	r26, 0x02	; 2
 3c6:	4d 91       	ld	r20, X+
 3c8:	5d 91       	ld	r21, X+
 3ca:	a4 0f       	add	r26, r20
 3cc:	b5 1f       	adc	r27, r21
 3ce:	ea 17       	cp	r30, r26
 3d0:	fb 07       	cpc	r31, r27
 3d2:	79 f4       	brne	.+30     	; 0x3f2 <free+0xd2>
 3d4:	80 81       	ld	r24, Z
 3d6:	91 81       	ldd	r25, Z+1	; 0x01
 3d8:	84 0f       	add	r24, r20
 3da:	95 1f       	adc	r25, r21
 3dc:	02 96       	adiw	r24, 0x02	; 2
 3de:	d9 01       	movw	r26, r18
 3e0:	11 96       	adiw	r26, 0x01	; 1
 3e2:	9c 93       	st	X, r25
 3e4:	8e 93       	st	-X, r24
 3e6:	82 81       	ldd	r24, Z+2	; 0x02
 3e8:	93 81       	ldd	r25, Z+3	; 0x03
 3ea:	13 96       	adiw	r26, 0x03	; 3
 3ec:	9c 93       	st	X, r25
 3ee:	8e 93       	st	-X, r24
 3f0:	12 97       	sbiw	r26, 0x02	; 2
 3f2:	e0 e0       	ldi	r30, 0x00	; 0
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	8a 81       	ldd	r24, Y+2	; 0x02
 3f8:	9b 81       	ldd	r25, Y+3	; 0x03
 3fa:	00 97       	sbiw	r24, 0x00	; 0
 3fc:	19 f0       	breq	.+6      	; 0x404 <free+0xe4>
 3fe:	fe 01       	movw	r30, r28
 400:	ec 01       	movw	r28, r24
 402:	f9 cf       	rjmp	.-14     	; 0x3f6 <free+0xd6>
 404:	ce 01       	movw	r24, r28
 406:	02 96       	adiw	r24, 0x02	; 2
 408:	28 81       	ld	r18, Y
 40a:	39 81       	ldd	r19, Y+1	; 0x01
 40c:	82 0f       	add	r24, r18
 40e:	93 1f       	adc	r25, r19
 410:	20 91 6a 00 	lds	r18, 0x006A
 414:	30 91 6b 00 	lds	r19, 0x006B
 418:	28 17       	cp	r18, r24
 41a:	39 07       	cpc	r19, r25
 41c:	69 f4       	brne	.+26     	; 0x438 <free+0x118>
 41e:	30 97       	sbiw	r30, 0x00	; 0
 420:	29 f4       	brne	.+10     	; 0x42c <free+0x10c>
 422:	10 92 6d 00 	sts	0x006D, r1
 426:	10 92 6c 00 	sts	0x006C, r1
 42a:	02 c0       	rjmp	.+4      	; 0x430 <free+0x110>
 42c:	13 82       	std	Z+3, r1	; 0x03
 42e:	12 82       	std	Z+2, r1	; 0x02
 430:	d0 93 6b 00 	sts	0x006B, r29
 434:	c0 93 6a 00 	sts	0x006A, r28
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	08 95       	ret

0000043e <_exit>:
 43e:	f8 94       	cli

00000440 <__stop_program>:
 440:	ff cf       	rjmp	.-2      	; 0x440 <__stop_program>
