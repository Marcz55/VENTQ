
Test_servo_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001eb8  00001f4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001eb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003c2  00800120  00800120  00001f6c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f6c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00001f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001956  00000000  00000000  00002054  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002af  00000000  00000000  000039aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000090d  00000000  00000000  00003c59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000530  00000000  00000000  00004568  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000476  00000000  00000000  00004a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001d31  00000000  00000000  00004f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00006c3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	70 c0       	rjmp	.+224    	; 0xe2 <__ctors_end>
       2:	00 00       	nop
       4:	8d c0       	rjmp	.+282    	; 0x120 <__bad_interrupt>
       6:	00 00       	nop
       8:	7f c6       	rjmp	.+3326   	; 0xd08 <__vector_2>
       a:	00 00       	nop
       c:	89 c0       	rjmp	.+274    	; 0x120 <__bad_interrupt>
       e:	00 00       	nop
      10:	87 c0       	rjmp	.+270    	; 0x120 <__bad_interrupt>
      12:	00 00       	nop
      14:	85 c0       	rjmp	.+266    	; 0x120 <__bad_interrupt>
      16:	00 00       	nop
      18:	83 c0       	rjmp	.+262    	; 0x120 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	81 c0       	rjmp	.+258    	; 0x120 <__bad_interrupt>
      1e:	00 00       	nop
      20:	7f c0       	rjmp	.+254    	; 0x120 <__bad_interrupt>
      22:	00 00       	nop
      24:	7d c0       	rjmp	.+250    	; 0x120 <__bad_interrupt>
      26:	00 00       	nop
      28:	7b c0       	rjmp	.+246    	; 0x120 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	79 c0       	rjmp	.+242    	; 0x120 <__bad_interrupt>
      2e:	00 00       	nop
      30:	77 c0       	rjmp	.+238    	; 0x120 <__bad_interrupt>
      32:	00 00       	nop
      34:	75 c0       	rjmp	.+234    	; 0x120 <__bad_interrupt>
      36:	00 00       	nop
      38:	73 c0       	rjmp	.+230    	; 0x120 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	71 c0       	rjmp	.+226    	; 0x120 <__bad_interrupt>
      3e:	00 00       	nop
      40:	6f c0       	rjmp	.+222    	; 0x120 <__bad_interrupt>
      42:	00 00       	nop
      44:	6d c0       	rjmp	.+218    	; 0x120 <__bad_interrupt>
      46:	00 00       	nop
      48:	6b c0       	rjmp	.+214    	; 0x120 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	69 c0       	rjmp	.+210    	; 0x120 <__bad_interrupt>
      4e:	00 00       	nop
      50:	67 c0       	rjmp	.+206    	; 0x120 <__bad_interrupt>
      52:	00 00       	nop
      54:	65 c0       	rjmp	.+202    	; 0x120 <__bad_interrupt>
      56:	00 00       	nop
      58:	63 c0       	rjmp	.+198    	; 0x120 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	61 c0       	rjmp	.+194    	; 0x120 <__bad_interrupt>
      5e:	00 00       	nop
      60:	5f c0       	rjmp	.+190    	; 0x120 <__bad_interrupt>
      62:	00 00       	nop
      64:	5d c0       	rjmp	.+186    	; 0x120 <__bad_interrupt>
      66:	00 00       	nop
      68:	5b c0       	rjmp	.+182    	; 0x120 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	59 c0       	rjmp	.+178    	; 0x120 <__bad_interrupt>
      6e:	00 00       	nop
      70:	57 c0       	rjmp	.+174    	; 0x120 <__bad_interrupt>
      72:	00 00       	nop
      74:	55 c0       	rjmp	.+170    	; 0x120 <__bad_interrupt>
      76:	00 00       	nop
      78:	53 c0       	rjmp	.+166    	; 0x120 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	51 c0       	rjmp	.+162    	; 0x120 <__bad_interrupt>
      7e:	00 00       	nop
      80:	4f c0       	rjmp	.+158    	; 0x120 <__bad_interrupt>
      82:	00 00       	nop
      84:	4d c0       	rjmp	.+154    	; 0x120 <__bad_interrupt>
      86:	00 00       	nop
      88:	4b c0       	rjmp	.+150    	; 0x120 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 07       	cpc	r19, r31
      ba:	2c 7a       	andi	r18, 0xAC	; 172
      bc:	a5 ba       	out	0x15, r10	; 21
      be:	6c c5       	rjmp	.+2776   	; 0xb98 <MoveRearRightLeg+0x108>
      c0:	90 da       	rcall	.-2784   	; 0xfffff5e2 <__eeprom_end+0xff7ef5e2>
      c2:	3b 93       	.word	0x933b	; ????
      c4:	65 fc       	sbrc	r6, 5
      c6:	8b bc       	out	0x2b, r8	; 43
      c8:	53 f8       	bld	r5, 3
      ca:	10 fd       	sbrc	r17, 0
      cc:	3c 56       	subi	r19, 0x6C	; 108
      ce:	92 83       	std	Z+2, r25	; 0x02
      d0:	4d bd       	out	0x2d, r20	; 45
      d2:	87 9d       	mul	r24, r7
      d4:	3a b6       	in	r3, 0x3a	; 58
      d6:	3d cb       	rjmp	.-2438   	; 0xfffff752 <__eeprom_end+0xff7ef752>
      d8:	c9 bf       	out	0x39, r28	; 57
      da:	5b be       	out	0x3b, r5	; 59
      dc:	73 da       	rcall	.-2842   	; 0xfffff5c4 <__eeprom_end+0xff7ef5c4>
      de:	0f c9       	rjmp	.-3554   	; 0xfffff2fe <__eeprom_end+0xff7ef2fe>
      e0:	3f 00       	.word	0x003f	; ????

000000e2 <__ctors_end>:
      e2:	11 24       	eor	r1, r1
      e4:	1f be       	out	0x3f, r1	; 63
      e6:	cf ef       	ldi	r28, 0xFF	; 255
      e8:	d0 e4       	ldi	r29, 0x40	; 64
      ea:	de bf       	out	0x3e, r29	; 62
      ec:	cd bf       	out	0x3d, r28	; 61

000000ee <__do_copy_data>:
      ee:	11 e0       	ldi	r17, 0x01	; 1
      f0:	a0 e0       	ldi	r26, 0x00	; 0
      f2:	b1 e0       	ldi	r27, 0x01	; 1
      f4:	e8 eb       	ldi	r30, 0xB8	; 184
      f6:	fe e1       	ldi	r31, 0x1E	; 30
      f8:	00 e0       	ldi	r16, 0x00	; 0
      fa:	0b bf       	out	0x3b, r16	; 59
      fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x14>
      fe:	07 90       	elpm	r0, Z+
     100:	0d 92       	st	X+, r0
     102:	a0 32       	cpi	r26, 0x20	; 32
     104:	b1 07       	cpc	r27, r17
     106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0x10>

00000108 <__do_clear_bss>:
     108:	24 e0       	ldi	r18, 0x04	; 4
     10a:	a0 e2       	ldi	r26, 0x20	; 32
     10c:	b1 e0       	ldi	r27, 0x01	; 1
     10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
     110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
     112:	a2 3e       	cpi	r26, 0xE2	; 226
     114:	b2 07       	cpc	r27, r18
     116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>
     118:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <main>
     11c:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <_exit>

00000120 <__bad_interrupt>:
     120:	6f cf       	rjmp	.-290    	; 0x0 <__vectors>

00000122 <initUSART>:
		// Vänta tills den sänt klart det sista
	}
	USART0RecieveMode();
	sei(); // Tillåt interrupts igen
	
}
     122:	84 e0       	ldi	r24, 0x04	; 4
     124:	8a b9       	out	0x0a, r24	; 10
     126:	1b b8       	out	0x0b, r1	; 11
     128:	10 92 c5 00 	sts	0x00C5, r1
     12c:	10 92 c4 00 	sts	0x00C4, r1
     130:	88 e1       	ldi	r24, 0x18	; 24
     132:	80 93 c1 00 	sts	0x00C1, r24
     136:	86 e0       	ldi	r24, 0x06	; 6
     138:	80 93 c2 00 	sts	0x00C2, r24
     13c:	08 95       	ret

0000013e <USARTWriteChar>:
     13e:	e0 ec       	ldi	r30, 0xC0	; 192
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	90 81       	ld	r25, Z
     144:	95 ff       	sbrs	r25, 5
     146:	fd cf       	rjmp	.-6      	; 0x142 <USARTWriteChar+0x4>
     148:	80 93 c6 00 	sts	0x00C6, r24
     14c:	08 95       	ret

0000014e <USARTSendInstruction5>:
void USARTSendInstruction5(int ID, int instruction, int parameter0, int parameter1, int parameter2, int parameter3, int parameter4)
{
     14e:	cf 92       	push	r12
     150:	ef 92       	push	r14
     152:	ff 92       	push	r15
     154:	0f 93       	push	r16
     156:	1f 93       	push	r17
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	c8 2f       	mov	r28, r24
     15e:	d6 2f       	mov	r29, r22
     160:	14 2f       	mov	r17, r20
     162:	f2 2e       	mov	r15, r18
	PORTD = (0<<PORTD2);
}

void USART0SendMode()
{
	PORTD = (1<<PORTD2);
     164:	84 e0       	ldi	r24, 0x04	; 4
     166:	8b b9       	out	0x0b, r24	; 11
}
void USARTSendInstruction5(int ID, int instruction, int parameter0, int parameter1, int parameter2, int parameter3, int parameter4)
{
	// sätt USART till sändläge
	USART0SendMode();
	UCSR0A = UCSR0A | (0 << 6); // Gjorde så att vi kunde skicka en instruktion efter en instruktion/read.
     168:	e0 ec       	ldi	r30, 0xC0	; 192
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	80 81       	ld	r24, Z
     16e:	80 83       	st	Z, r24
	USARTWriteChar(0xFF);
     170:	8f ef       	ldi	r24, 0xFF	; 255
     172:	e5 df       	rcall	.-54     	; 0x13e <USARTWriteChar>
	USARTWriteChar(0xFF);
     174:	8f ef       	ldi	r24, 0xFF	; 255
     176:	e3 df       	rcall	.-58     	; 0x13e <USARTWriteChar>
	USARTWriteChar(ID);
     178:	8c 2f       	mov	r24, r28
     17a:	e1 df       	rcall	.-62     	; 0x13e <USARTWriteChar>
	USARTWriteChar(7); // Paketets längd.
     17c:	87 e0       	ldi	r24, 0x07	; 7
     17e:	df df       	rcall	.-66     	; 0x13e <USARTWriteChar>
	USARTWriteChar(instruction);
     180:	8d 2f       	mov	r24, r29
     182:	dd df       	rcall	.-70     	; 0x13e <USARTWriteChar>
	USARTWriteChar(parameter0);
     184:	81 2f       	mov	r24, r17
     186:	db df       	rcall	.-74     	; 0x13e <USARTWriteChar>
	USARTWriteChar(parameter1);
     188:	8f 2d       	mov	r24, r15
     18a:	d9 df       	rcall	.-78     	; 0x13e <USARTWriteChar>
	USARTWriteChar(parameter2);
     18c:	80 2f       	mov	r24, r16
     18e:	d7 df       	rcall	.-82     	; 0x13e <USARTWriteChar>
	USARTWriteChar(parameter3);
     190:	8e 2d       	mov	r24, r14
     192:	d5 df       	rcall	.-86     	; 0x13e <USARTWriteChar>
	USARTWriteChar(parameter4);
     194:	8c 2d       	mov	r24, r12
     196:	d3 df       	rcall	.-90     	; 0x13e <USARTWriteChar>
	cli();
     198:	f8 94       	cli
	USARTWriteChar(~(ID+7+instruction+parameter0+parameter1+parameter2+parameter3+parameter4)); // Checksum
     19a:	87 e0       	ldi	r24, 0x07	; 7
     19c:	8c 0d       	add	r24, r12
     19e:	e8 0e       	add	r14, r24
     1a0:	0e 0d       	add	r16, r14
     1a2:	f0 0e       	add	r15, r16
     1a4:	1f 0d       	add	r17, r15
     1a6:	d1 0f       	add	r29, r17
     1a8:	8d 2f       	mov	r24, r29
     1aa:	8c 0f       	add	r24, r28
     1ac:	80 95       	com	r24
     1ae:	c7 df       	rcall	.-114    	; 0x13e <USARTWriteChar>
	while(!TXD0_FINISHED) //TXD0 sätts till 1 då all data shiftats ut ifrån usarten
     1b0:	e0 ec       	ldi	r30, 0xC0	; 192
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	80 81       	ld	r24, Z
     1b6:	86 ff       	sbrs	r24, 6
     1b8:	fd cf       	rjmp	.-6      	; 0x1b4 <USARTSendInstruction5+0x66>
#define REAR_RIGHT_LEG 4


void USART0RecieveMode() 
{
	PORTD = (0<<PORTD2);
     1ba:	1b b8       	out	0x0b, r1	; 11
		// Vänta tills den sänt klart det sista
	}
	;
	USART0RecieveMode();
 	//char test1 = RXD0_DATA; // För att läsa det som är i reciever bufferten, används nu för att readchar ska funka
	sei(); // Tillåt interrupts igen
     1bc:	78 94       	sei
	
}
     1be:	df 91       	pop	r29
     1c0:	cf 91       	pop	r28
     1c2:	1f 91       	pop	r17
     1c4:	0f 91       	pop	r16
     1c6:	ff 90       	pop	r15
     1c8:	ef 90       	pop	r14
     1ca:	cf 90       	pop	r12
     1cc:	08 95       	ret

000001ce <USARTReadChar>:


char USARTReadChar()
{
	//Vänta tills data är tillgänglig
	while(!RXD0_READY)
     1ce:	e0 ec       	ldi	r30, 0xC0	; 192
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	80 81       	ld	r24, Z
     1d4:	88 23       	and	r24, r24
     1d6:	ec f7       	brge	.-6      	; 0x1d2 <USARTReadChar+0x4>
	{
		//Gör ingenting
	}
	return RXD0_DATA;
     1d8:	80 91 c6 00 	lds	r24, 0x00C6
}
     1dc:	08 95       	ret

000001de <USARTReadStatusPacket>:

int USARTReadStatusPacket()
{
     1de:	ff 92       	push	r15
     1e0:	0f 93       	push	r16
     1e2:	1f 93       	push	r17
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
	int ValueOfParameters = 0;
	//if ((USARTReadChar() == 0xFF) & (USARTReadChar() == 0xFF)) // Kollar om två startbitar
	//{
		//char test = USARTReadChar();
		char Start1 = USARTReadChar();
     1e8:	f2 df       	rcall	.-28     	; 0x1ce <USARTReadChar>
		char Start2 = USARTReadChar();
     1ea:	f1 df       	rcall	.-30     	; 0x1ce <USARTReadChar>
		char ID = USARTReadChar();
     1ec:	f0 df       	rcall	.-32     	; 0x1ce <USARTReadChar>
		char Length = USARTReadChar();
     1ee:	ef df       	rcall	.-34     	; 0x1ce <USARTReadChar>
     1f0:	f8 2e       	mov	r15, r24
		char Error = USARTReadChar();
     1f2:	ed df       	rcall	.-38     	; 0x1ce <USARTReadChar>
		int HelpVariable = 0;
		// Läser av parametervärdena och sparar värdet i ValueOfParameters
		while (Length > 2) 
     1f4:	82 e0       	ldi	r24, 0x02	; 2
     1f6:	8f 15       	cp	r24, r15
     1f8:	a8 f4       	brcc	.+42     	; 0x224 <USARTReadStatusPacket+0x46>
     1fa:	c0 e0       	ldi	r28, 0x00	; 0
     1fc:	d0 e0       	ldi	r29, 0x00	; 0
	return RXD0_DATA;
}

int USARTReadStatusPacket()
{
	int ValueOfParameters = 0;
     1fe:	00 e0       	ldi	r16, 0x00	; 0
     200:	10 e0       	ldi	r17, 0x00	; 0
		char Error = USARTReadChar();
		int HelpVariable = 0;
		// Läser av parametervärdena och sparar värdet i ValueOfParameters
		while (Length > 2) 
		{
			ValueOfParameters = ValueOfParameters + (USARTReadChar() << (8*HelpVariable));
     202:	e5 df       	rcall	.-54     	; 0x1ce <USARTReadChar>
     204:	28 2f       	mov	r18, r24
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	0c 2e       	mov	r0, r28
     20a:	02 c0       	rjmp	.+4      	; 0x210 <USARTReadStatusPacket+0x32>
     20c:	22 0f       	add	r18, r18
     20e:	33 1f       	adc	r19, r19
     210:	0a 94       	dec	r0
     212:	e2 f7       	brpl	.-8      	; 0x20c <USARTReadStatusPacket+0x2e>
     214:	02 0f       	add	r16, r18
     216:	13 1f       	adc	r17, r19
			HelpVariable = HelpVariable + 1;
			Length = Length - 1;
     218:	fa 94       	dec	r15
     21a:	28 96       	adiw	r28, 0x08	; 8
		char ID = USARTReadChar();
		char Length = USARTReadChar();
		char Error = USARTReadChar();
		int HelpVariable = 0;
		// Läser av parametervärdena och sparar värdet i ValueOfParameters
		while (Length > 2) 
     21c:	82 e0       	ldi	r24, 0x02	; 2
     21e:	f8 12       	cpse	r15, r24
     220:	f0 cf       	rjmp	.-32     	; 0x202 <USARTReadStatusPacket+0x24>
     222:	02 c0       	rjmp	.+4      	; 0x228 <USARTReadStatusPacket+0x4a>
	return RXD0_DATA;
}

int USARTReadStatusPacket()
{
	int ValueOfParameters = 0;
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	10 e0       	ldi	r17, 0x00	; 0
			ValueOfParameters = ValueOfParameters + (USARTReadChar() << (8*HelpVariable));
			HelpVariable = HelpVariable + 1;
			Length = Length - 1;
		}
		
		char CheckSum = USARTReadChar();
     228:	d2 df       	rcall	.-92     	; 0x1ce <USARTReadChar>
	//}
	return ValueOfParameters;
	
}
     22a:	c8 01       	movw	r24, r16
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	1f 91       	pop	r17
     232:	0f 91       	pop	r16
     234:	ff 90       	pop	r15
     236:	08 95       	ret

00000238 <MoveDynamixel>:

void MoveDynamixel(int ID,long int Degree,long int Velocity)
{
     238:	4f 92       	push	r4
     23a:	5f 92       	push	r5
     23c:	6f 92       	push	r6
     23e:	7f 92       	push	r7
     240:	8f 92       	push	r8
     242:	9f 92       	push	r9
     244:	af 92       	push	r10
     246:	bf 92       	push	r11
     248:	cf 92       	push	r12
     24a:	df 92       	push	r13
     24c:	ef 92       	push	r14
     24e:	ff 92       	push	r15
     250:	0f 93       	push	r16
     252:	1f 93       	push	r17
     254:	cf 93       	push	r28
     256:	df 93       	push	r29
     258:	ec 01       	movw	r28, r24
     25a:	68 01       	movw	r12, r16
     25c:	79 01       	movw	r14, r18
	if ((Degree <= 300) & (Degree >= 0)) // Tillåtna grader är 0-300
     25e:	4d 32       	cpi	r20, 0x2D	; 45
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	58 07       	cpc	r21, r24
     264:	61 05       	cpc	r22, r1
     266:	71 05       	cpc	r23, r1
     268:	e0 f5       	brcc	.+120    	; 0x2e2 <MoveDynamixel+0xaa>
	{
		long int LowGoalPosition = ((Degree*1023)/300) & 0x00FF; // Gör om graden till ett tal mellan 0-1023 och delar upp det i LSB(byte) och MSB(byte)
     26a:	af ef       	ldi	r26, 0xFF	; 255
     26c:	b3 e0       	ldi	r27, 0x03	; 3
     26e:	9a 01       	movw	r18, r20
     270:	ab 01       	movw	r20, r22
     272:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <__muluhisi3>
     276:	2c e2       	ldi	r18, 0x2C	; 44
     278:	31 e0       	ldi	r19, 0x01	; 1
     27a:	40 e0       	ldi	r20, 0x00	; 0
     27c:	50 e0       	ldi	r21, 0x00	; 0
     27e:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <__divmodsi4>
     282:	49 01       	movw	r8, r18
     284:	5a 01       	movw	r10, r20
     286:	99 24       	eor	r9, r9
     288:	aa 24       	eor	r10, r10
     28a:	bb 24       	eor	r11, r11
		long int HighGoalPosition = ((Degree*1023)/300) & 0xFF00;
		HighGoalPosition = (HighGoalPosition >> 8);
     28c:	43 2e       	mov	r4, r19
     28e:	51 2c       	mov	r5, r1
	
		long int LowAngleVelocity = 0;
		long int HighAngleVelocity = 0;
	
		if (Velocity >= 114) // Om RPM över 114 så rör vi oss med snabbaste möjliga hastigheten med spänningen som tillhandahålls
     290:	82 e7       	ldi	r24, 0x72	; 114
     292:	c8 16       	cp	r12, r24
     294:	d1 04       	cpc	r13, r1
     296:	e1 04       	cpc	r14, r1
     298:	f1 04       	cpc	r15, r1
     29a:	a4 f4       	brge	.+40     	; 0x2c4 <MoveDynamixel+0x8c>
			LowAngleVelocity = 0;
			HighAngleVelocity = 0;
		}
		else
		{
			LowAngleVelocity = ((Velocity*1023)/114) & 0x00FF;
     29c:	af ef       	ldi	r26, 0xFF	; 255
     29e:	b3 e0       	ldi	r27, 0x03	; 3
     2a0:	a7 01       	movw	r20, r14
     2a2:	96 01       	movw	r18, r12
     2a4:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <__muluhisi3>
     2a8:	22 e7       	ldi	r18, 0x72	; 114
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <__divmodsi4>
     2b4:	79 01       	movw	r14, r18
     2b6:	8a 01       	movw	r16, r20
     2b8:	ff 24       	eor	r15, r15
     2ba:	00 27       	eor	r16, r16
     2bc:	11 27       	eor	r17, r17
			HighAngleVelocity = ((Velocity*1023)/114) & 0xFF00;
			HighAngleVelocity = (HighAngleVelocity >> 8);
     2be:	43 2f       	mov	r20, r19
     2c0:	50 e0       	ldi	r21, 0x00	; 0
     2c2:	06 c0       	rjmp	.+12     	; 0x2d0 <MoveDynamixel+0x98>
		long int HighAngleVelocity = 0;
	
		if (Velocity >= 114) // Om RPM över 114 så rör vi oss med snabbaste möjliga hastigheten med spänningen som tillhandahålls
		{
			LowAngleVelocity = 0;
			HighAngleVelocity = 0;
     2c4:	40 e0       	ldi	r20, 0x00	; 0
     2c6:	50 e0       	ldi	r21, 0x00	; 0
     2c8:	ba 01       	movw	r22, r20
		long int LowAngleVelocity = 0;
		long int HighAngleVelocity = 0;
	
		if (Velocity >= 114) // Om RPM över 114 så rör vi oss med snabbaste möjliga hastigheten med spänningen som tillhandahålls
		{
			LowAngleVelocity = 0;
     2ca:	e1 2c       	mov	r14, r1
     2cc:	f1 2c       	mov	r15, r1
     2ce:	87 01       	movw	r16, r14
			LowAngleVelocity = ((Velocity*1023)/114) & 0x00FF;
			HighAngleVelocity = ((Velocity*1023)/114) & 0xFF00;
			HighAngleVelocity = (HighAngleVelocity >> 8);
		}
	
		USARTSendInstruction5(ID,INST_WRITE,P_GOAL_POSITION_L,LowGoalPosition ,HighGoalPosition, LowAngleVelocity, HighAngleVelocity);
     2d0:	6a 01       	movw	r12, r20
     2d2:	82 01       	movw	r16, r4
     2d4:	94 01       	movw	r18, r8
     2d6:	4e e1       	ldi	r20, 0x1E	; 30
     2d8:	50 e0       	ldi	r21, 0x00	; 0
     2da:	63 e0       	ldi	r22, 0x03	; 3
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	ce 01       	movw	r24, r28
     2e0:	36 df       	rcall	.-404    	; 0x14e <USARTSendInstruction5>
	}
	return;
}
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	1f 91       	pop	r17
     2e8:	0f 91       	pop	r16
     2ea:	ff 90       	pop	r15
     2ec:	ef 90       	pop	r14
     2ee:	df 90       	pop	r13
     2f0:	cf 90       	pop	r12
     2f2:	bf 90       	pop	r11
     2f4:	af 90       	pop	r10
     2f6:	9f 90       	pop	r9
     2f8:	8f 90       	pop	r8
     2fa:	7f 90       	pop	r7
     2fc:	6f 90       	pop	r6
     2fe:	5f 90       	pop	r5
     300:	4f 90       	pop	r4
     302:	08 95       	ret

00000304 <MoveFrontLeftLeg>:

void MoveFrontLeftLeg(float x, float y, float z, int speed)
{
     304:	4f 92       	push	r4
     306:	5f 92       	push	r5
     308:	6f 92       	push	r6
     30a:	7f 92       	push	r7
     30c:	8f 92       	push	r8
     30e:	9f 92       	push	r9
     310:	af 92       	push	r10
     312:	bf 92       	push	r11
     314:	cf 92       	push	r12
     316:	df 92       	push	r13
     318:	ef 92       	push	r14
     31a:	ff 92       	push	r15
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	60 97       	sbiw	r28, 0x10	; 16
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	f8 94       	cli
     32e:	de bf       	out	0x3e, r29	; 62
     330:	0f be       	out	0x3f, r0	; 63
     332:	cd bf       	out	0x3d, r28	; 61
     334:	2b 01       	movw	r4, r22
     336:	3c 01       	movw	r6, r24
     338:	49 01       	movw	r8, r18
     33a:	5a 01       	movw	r10, r20
     33c:	e9 82       	std	Y+1, r14	; 0x01
     33e:	fa 82       	std	Y+2, r15	; 0x02
     340:	0b 83       	std	Y+3, r16	; 0x03
     342:	1c 83       	std	Y+4, r17	; 0x04
     344:	86 01       	movw	r16, r12
	long int theta1 = atan2f(-x,y)*180/PI;
     346:	90 58       	subi	r25, 0x80	; 128
     348:	0e 94 85 0c 	call	0x190a	; 0x190a <atan2>
     34c:	6d 87       	std	Y+13, r22	; 0x0d
     34e:	7e 87       	std	Y+14, r23	; 0x0e
     350:	8f 87       	std	Y+15, r24	; 0x0f
     352:	98 8b       	std	Y+16, r25	; 0x10
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) + 
     354:	29 81       	ldd	r18, Y+1	; 0x01
     356:	3a 81       	ldd	r19, Y+2	; 0x02
     358:	4b 81       	ldd	r20, Y+3	; 0x03
     35a:	5c 81       	ldd	r21, Y+4	; 0x04
     35c:	ca 01       	movw	r24, r20
     35e:	b9 01       	movw	r22, r18
     360:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     364:	6b 01       	movw	r12, r22
     366:	7c 01       	movw	r14, r24
     368:	a3 01       	movw	r20, r6
     36a:	92 01       	movw	r18, r4
     36c:	c3 01       	movw	r24, r6
     36e:	b2 01       	movw	r22, r4
     370:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     374:	2b 01       	movw	r4, r22
     376:	3c 01       	movw	r6, r24
     378:	a5 01       	movw	r20, r10
     37a:	94 01       	movw	r18, r8
     37c:	c5 01       	movw	r24, r10
     37e:	b4 01       	movw	r22, r8
     380:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     384:	9b 01       	movw	r18, r22
     386:	ac 01       	movw	r20, r24
     388:	c3 01       	movw	r24, r6
     38a:	b2 01       	movw	r22, r4
     38c:	0e 94 12 0c 	call	0x1824	; 0x1824 <__addsf3>
     390:	2b 01       	movw	r4, r22
     392:	3c 01       	movw	r6, r24
     394:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <sqrt>
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	48 e4       	ldi	r20, 0x48	; 72
     39e:	52 e4       	ldi	r21, 0x42	; 66
     3a0:	0e 94 11 0c 	call	0x1822	; 0x1822 <__subsf3>
     3a4:	4b 01       	movw	r8, r22
     3a6:	5c 01       	movw	r10, r24
     3a8:	9b 01       	movw	r18, r22
     3aa:	ac 01       	movw	r20, r24
     3ac:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     3b0:	6d 83       	std	Y+5, r22	; 0x05
     3b2:	7e 83       	std	Y+6, r23	; 0x06
     3b4:	8f 83       	std	Y+7, r24	; 0x07
     3b6:	98 87       	std	Y+8, r25	; 0x08
     3b8:	9b 01       	movw	r18, r22
     3ba:	ac 01       	movw	r20, r24
     3bc:	c7 01       	movw	r24, r14
     3be:	b6 01       	movw	r22, r12
     3c0:	0e 94 12 0c 	call	0x1824	; 0x1824 <__addsf3>
     3c4:	69 87       	std	Y+9, r22	; 0x09
     3c6:	7a 87       	std	Y+10, r23	; 0x0a
     3c8:	8b 87       	std	Y+11, r24	; 0x0b
     3ca:	9c 87       	std	Y+12, r25	; 0x0c
     3cc:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <sqrt>
     3d0:	9b 01       	movw	r18, r22
     3d2:	ac 01       	movw	r20, r24
     3d4:	69 81       	ldd	r22, Y+1	; 0x01
     3d6:	7a 81       	ldd	r23, Y+2	; 0x02
     3d8:	8b 81       	ldd	r24, Y+3	; 0x03
     3da:	9c 81       	ldd	r25, Y+4	; 0x04
     3dc:	90 58       	subi	r25, 0x80	; 128
     3de:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divsf3>
     3e2:	0e 94 03 0c 	call	0x1806	; 0x1806 <acos>
     3e6:	69 83       	std	Y+1, r22	; 0x01
     3e8:	7a 83       	std	Y+2, r23	; 0x02
     3ea:	8b 83       	std	Y+3, r24	; 0x03
     3ec:	9c 83       	std	Y+4, r25	; 0x04
		acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
     3ee:	20 e0       	ldi	r18, 0x00	; 0
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	48 e4       	ldi	r20, 0x48	; 72
     3f4:	52 e4       	ldi	r21, 0x42	; 66
     3f6:	c3 01       	movw	r24, r6
     3f8:	b2 01       	movw	r22, r4
     3fa:	0e 94 11 0c 	call	0x1822	; 0x1822 <__subsf3>
     3fe:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <sqrt>
     402:	9b 01       	movw	r18, r22
     404:	ac 01       	movw	r20, r24
     406:	c5 01       	movw	r24, r10
     408:	b4 01       	movw	r22, r8
     40a:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     40e:	9b 01       	movw	r18, r22
     410:	ac 01       	movw	r20, r24
     412:	c7 01       	movw	r24, r14
     414:	b6 01       	movw	r22, r12
     416:	0e 94 12 0c 	call	0x1824	; 0x1824 <__addsf3>
     41a:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <sqrt>
     41e:	2b 01       	movw	r4, r22
     420:	3c 01       	movw	r6, r24
     422:	20 e0       	ldi	r18, 0x00	; 0
     424:	38 e4       	ldi	r19, 0x48	; 72
     426:	4c e8       	ldi	r20, 0x8C	; 140
     428:	55 e4       	ldi	r21, 0x45	; 69
     42a:	69 85       	ldd	r22, Y+9	; 0x09
     42c:	7a 85       	ldd	r23, Y+10	; 0x0a
     42e:	8b 85       	ldd	r24, Y+11	; 0x0b
     430:	9c 85       	ldd	r25, Y+12	; 0x0c
     432:	0e 94 12 0c 	call	0x1824	; 0x1824 <__addsf3>
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	38 e0       	ldi	r19, 0x08	; 8
     43a:	44 e8       	ldi	r20, 0x84	; 132
     43c:	56 e4       	ldi	r21, 0x46	; 70
     43e:	0e 94 11 0c 	call	0x1822	; 0x1822 <__subsf3>
     442:	4b 01       	movw	r8, r22
     444:	5c 01       	movw	r10, r24
     446:	a3 01       	movw	r20, r6
     448:	92 01       	movw	r18, r4
     44a:	c3 01       	movw	r24, r6
     44c:	b2 01       	movw	r22, r4
     44e:	0e 94 12 0c 	call	0x1824	; 0x1824 <__addsf3>
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	46 e8       	ldi	r20, 0x86	; 134
     458:	52 e4       	ldi	r21, 0x42	; 66
     45a:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     45e:	9b 01       	movw	r18, r22
     460:	ac 01       	movw	r20, r24
     462:	c5 01       	movw	r24, r10
     464:	b4 01       	movw	r22, r8
     466:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divsf3>
     46a:	0e 94 03 0c 	call	0x1806	; 0x1806 <acos>
     46e:	2b 01       	movw	r4, r22
     470:	3c 01       	movw	r6, r24
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     472:	a7 01       	movw	r20, r14
     474:	96 01       	movw	r18, r12
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	7a e1       	ldi	r23, 0x1A	; 26
     47a:	87 ea       	ldi	r24, 0xA7	; 167
     47c:	96 e4       	ldi	r25, 0x46	; 70
     47e:	0e 94 11 0c 	call	0x1822	; 0x1822 <__subsf3>
     482:	2d 81       	ldd	r18, Y+5	; 0x05
     484:	3e 81       	ldd	r19, Y+6	; 0x06
     486:	4f 81       	ldd	r20, Y+7	; 0x07
     488:	58 85       	ldd	r21, Y+8	; 0x08
     48a:	0e 94 11 0c 	call	0x1822	; 0x1822 <__subsf3>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	38 e1       	ldi	r19, 0x18	; 24
     492:	48 e8       	ldi	r20, 0x88	; 136
     494:	56 e4       	ldi	r21, 0x46	; 70
     496:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divsf3>
     49a:	0e 94 03 0c 	call	0x1806	; 0x1806 <acos>
     49e:	4b 01       	movw	r8, r22
     4a0:	5c 01       	movw	r10, r24
	long int ActuatorAngle1 =  theta1 + 105;
	long int ActuatorAngle2 =  theta2 + 75;
	long int ActuatorAngle3 =  theta3 + 1;
	
	
	MoveDynamixel(2,ActuatorAngle1,speed);
     4a2:	68 01       	movw	r12, r16
     4a4:	ee 24       	eor	r14, r14
     4a6:	d7 fc       	sbrc	r13, 7
     4a8:	e0 94       	com	r14
     4aa:	fe 2c       	mov	r15, r14
	return;
}

void MoveFrontLeftLeg(float x, float y, float z, int speed)
{
	long int theta1 = atan2f(-x,y)*180/PI;
     4ac:	20 e0       	ldi	r18, 0x00	; 0
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	44 e3       	ldi	r20, 0x34	; 52
     4b2:	53 e4       	ldi	r21, 0x43	; 67
     4b4:	6d 85       	ldd	r22, Y+13	; 0x0d
     4b6:	7e 85       	ldd	r23, Y+14	; 0x0e
     4b8:	8f 85       	ldd	r24, Y+15	; 0x0f
     4ba:	98 89       	ldd	r25, Y+16	; 0x10
     4bc:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     4c0:	28 ed       	ldi	r18, 0xD8	; 216
     4c2:	3f e0       	ldi	r19, 0x0F	; 15
     4c4:	49 e4       	ldi	r20, 0x49	; 73
     4c6:	50 e4       	ldi	r21, 0x40	; 64
     4c8:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divsf3>
     4cc:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__fixsfsi>
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) + 
		acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

	long int ActuatorAngle1 =  theta1 + 105;
     4d0:	ab 01       	movw	r20, r22
     4d2:	bc 01       	movw	r22, r24
     4d4:	47 59       	subi	r20, 0x97	; 151
     4d6:	5f 4f       	sbci	r21, 0xFF	; 255
     4d8:	6f 4f       	sbci	r22, 0xFF	; 255
     4da:	7f 4f       	sbci	r23, 0xFF	; 255
	long int ActuatorAngle2 =  theta2 + 75;
	long int ActuatorAngle3 =  theta3 + 1;
	
	
	MoveDynamixel(2,ActuatorAngle1,speed);
     4dc:	97 01       	movw	r18, r14
     4de:	86 01       	movw	r16, r12
     4e0:	82 e0       	ldi	r24, 0x02	; 2
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	a9 de       	rcall	.-686    	; 0x238 <MoveDynamixel>
	USARTReadStatusPacket();
     4e6:	7b de       	rcall	.-778    	; 0x1de <USARTReadStatusPacket>
}

void MoveFrontLeftLeg(float x, float y, float z, int speed)
{
	long int theta1 = atan2f(-x,y)*180/PI;
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) + 
     4e8:	a3 01       	movw	r20, r6
     4ea:	92 01       	movw	r18, r4
     4ec:	69 81       	ldd	r22, Y+1	; 0x01
     4ee:	7a 81       	ldd	r23, Y+2	; 0x02
     4f0:	8b 81       	ldd	r24, Y+3	; 0x03
     4f2:	9c 81       	ldd	r25, Y+4	; 0x04
     4f4:	0e 94 12 0c 	call	0x1824	; 0x1824 <__addsf3>
     4f8:	24 ee       	ldi	r18, 0xE4	; 228
     4fa:	3e e2       	ldi	r19, 0x2E	; 46
     4fc:	45 e6       	ldi	r20, 0x65	; 101
     4fe:	52 e4       	ldi	r21, 0x42	; 66
     500:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     504:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__fixsfsi>
		acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

	long int ActuatorAngle1 =  theta1 + 105;
	long int ActuatorAngle2 =  theta2 + 75;
     508:	ab 01       	movw	r20, r22
     50a:	bc 01       	movw	r22, r24
     50c:	45 5b       	subi	r20, 0xB5	; 181
     50e:	5f 4f       	sbci	r21, 0xFF	; 255
     510:	6f 4f       	sbci	r22, 0xFF	; 255
     512:	7f 4f       	sbci	r23, 0xFF	; 255
	long int ActuatorAngle3 =  theta3 + 1;
	
	
	MoveDynamixel(2,ActuatorAngle1,speed);
	USARTReadStatusPacket();
	MoveDynamixel(4,ActuatorAngle2,speed);
     514:	97 01       	movw	r18, r14
     516:	86 01       	movw	r16, r12
     518:	84 e0       	ldi	r24, 0x04	; 4
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	8d de       	rcall	.-742    	; 0x238 <MoveDynamixel>
	USARTReadStatusPacket();
     51e:	5f de       	rcall	.-834    	; 0x1de <USARTReadStatusPacket>
{
	long int theta1 = atan2f(-x,y)*180/PI;
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) + 
		acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	44 e3       	ldi	r20, 0x34	; 52
     526:	53 e4       	ldi	r21, 0x43	; 67
     528:	c5 01       	movw	r24, r10
     52a:	b4 01       	movw	r22, r8
     52c:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     530:	28 ed       	ldi	r18, 0xD8	; 216
     532:	3f e0       	ldi	r19, 0x0F	; 15
     534:	49 e4       	ldi	r20, 0x49	; 73
     536:	50 e4       	ldi	r21, 0x40	; 64
     538:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divsf3>
     53c:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__fixsfsi>

	long int ActuatorAngle1 =  theta1 + 105;
	long int ActuatorAngle2 =  theta2 + 75;
	long int ActuatorAngle3 =  theta3 + 1;
     540:	ab 01       	movw	r20, r22
     542:	bc 01       	movw	r22, r24
     544:	4f 5f       	subi	r20, 0xFF	; 255
     546:	5f 4f       	sbci	r21, 0xFF	; 255
     548:	6f 4f       	sbci	r22, 0xFF	; 255
     54a:	7f 4f       	sbci	r23, 0xFF	; 255
	
	MoveDynamixel(2,ActuatorAngle1,speed);
	USARTReadStatusPacket();
	MoveDynamixel(4,ActuatorAngle2,speed);
	USARTReadStatusPacket();
	MoveDynamixel(6,ActuatorAngle3,speed);
     54c:	97 01       	movw	r18, r14
     54e:	86 01       	movw	r16, r12
     550:	86 e0       	ldi	r24, 0x06	; 6
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	71 de       	rcall	.-798    	; 0x238 <MoveDynamixel>
	USARTReadStatusPacket();
     556:	43 de       	rcall	.-890    	; 0x1de <USARTReadStatusPacket>
	return;
}
     558:	60 96       	adiw	r28, 0x10	; 16
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	f8 94       	cli
     55e:	de bf       	out	0x3e, r29	; 62
     560:	0f be       	out	0x3f, r0	; 63
     562:	cd bf       	out	0x3d, r28	; 61
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	0f 91       	pop	r16
     56c:	ff 90       	pop	r15
     56e:	ef 90       	pop	r14
     570:	df 90       	pop	r13
     572:	cf 90       	pop	r12
     574:	bf 90       	pop	r11
     576:	af 90       	pop	r10
     578:	9f 90       	pop	r9
     57a:	8f 90       	pop	r8
     57c:	7f 90       	pop	r7
     57e:	6f 90       	pop	r6
     580:	5f 90       	pop	r5
     582:	4f 90       	pop	r4
     584:	08 95       	ret

00000586 <MoveFrontRightLeg>:

void MoveFrontRightLeg(float x, float y, float z, int speed)
{
     586:	4f 92       	push	r4
     588:	5f 92       	push	r5
     58a:	6f 92       	push	r6
     58c:	7f 92       	push	r7
     58e:	8f 92       	push	r8
     590:	9f 92       	push	r9
     592:	af 92       	push	r10
     594:	bf 92       	push	r11
     596:	cf 92       	push	r12
     598:	df 92       	push	r13
     59a:	ef 92       	push	r14
     59c:	ff 92       	push	r15
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	60 97       	sbiw	r28, 0x10	; 16
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	f8 94       	cli
     5b0:	de bf       	out	0x3e, r29	; 62
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	cd bf       	out	0x3d, r28	; 61
     5b6:	2b 01       	movw	r4, r22
     5b8:	3c 01       	movw	r6, r24
     5ba:	49 01       	movw	r8, r18
     5bc:	5a 01       	movw	r10, r20
     5be:	e9 82       	std	Y+1, r14	; 0x01
     5c0:	fa 82       	std	Y+2, r15	; 0x02
     5c2:	0b 83       	std	Y+3, r16	; 0x03
     5c4:	1c 83       	std	Y+4, r17	; 0x04
     5c6:	86 01       	movw	r16, r12
	long int theta1 = atan2f(-x,y)*180/PI;
     5c8:	90 58       	subi	r25, 0x80	; 128
     5ca:	0e 94 85 0c 	call	0x190a	; 0x190a <atan2>
     5ce:	6d 87       	std	Y+13, r22	; 0x0d
     5d0:	7e 87       	std	Y+14, r23	; 0x0e
     5d2:	8f 87       	std	Y+15, r24	; 0x0f
     5d4:	98 8b       	std	Y+16, r25	; 0x10
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
     5d6:	29 81       	ldd	r18, Y+1	; 0x01
     5d8:	3a 81       	ldd	r19, Y+2	; 0x02
     5da:	4b 81       	ldd	r20, Y+3	; 0x03
     5dc:	5c 81       	ldd	r21, Y+4	; 0x04
     5de:	ca 01       	movw	r24, r20
     5e0:	b9 01       	movw	r22, r18
     5e2:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     5e6:	6b 01       	movw	r12, r22
     5e8:	7c 01       	movw	r14, r24
     5ea:	a3 01       	movw	r20, r6
     5ec:	92 01       	movw	r18, r4
     5ee:	c3 01       	movw	r24, r6
     5f0:	b2 01       	movw	r22, r4
     5f2:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     5f6:	2b 01       	movw	r4, r22
     5f8:	3c 01       	movw	r6, r24
     5fa:	a5 01       	movw	r20, r10
     5fc:	94 01       	movw	r18, r8
     5fe:	c5 01       	movw	r24, r10
     600:	b4 01       	movw	r22, r8
     602:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     606:	9b 01       	movw	r18, r22
     608:	ac 01       	movw	r20, r24
     60a:	c3 01       	movw	r24, r6
     60c:	b2 01       	movw	r22, r4
     60e:	0e 94 12 0c 	call	0x1824	; 0x1824 <__addsf3>
     612:	2b 01       	movw	r4, r22
     614:	3c 01       	movw	r6, r24
     616:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <sqrt>
     61a:	20 e0       	ldi	r18, 0x00	; 0
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	48 e4       	ldi	r20, 0x48	; 72
     620:	52 e4       	ldi	r21, 0x42	; 66
     622:	0e 94 11 0c 	call	0x1822	; 0x1822 <__subsf3>
     626:	4b 01       	movw	r8, r22
     628:	5c 01       	movw	r10, r24
     62a:	9b 01       	movw	r18, r22
     62c:	ac 01       	movw	r20, r24
     62e:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     632:	6d 83       	std	Y+5, r22	; 0x05
     634:	7e 83       	std	Y+6, r23	; 0x06
     636:	8f 83       	std	Y+7, r24	; 0x07
     638:	98 87       	std	Y+8, r25	; 0x08
     63a:	9b 01       	movw	r18, r22
     63c:	ac 01       	movw	r20, r24
     63e:	c7 01       	movw	r24, r14
     640:	b6 01       	movw	r22, r12
     642:	0e 94 12 0c 	call	0x1824	; 0x1824 <__addsf3>
     646:	69 87       	std	Y+9, r22	; 0x09
     648:	7a 87       	std	Y+10, r23	; 0x0a
     64a:	8b 87       	std	Y+11, r24	; 0x0b
     64c:	9c 87       	std	Y+12, r25	; 0x0c
     64e:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <sqrt>
     652:	9b 01       	movw	r18, r22
     654:	ac 01       	movw	r20, r24
     656:	69 81       	ldd	r22, Y+1	; 0x01
     658:	7a 81       	ldd	r23, Y+2	; 0x02
     65a:	8b 81       	ldd	r24, Y+3	; 0x03
     65c:	9c 81       	ldd	r25, Y+4	; 0x04
     65e:	90 58       	subi	r25, 0x80	; 128
     660:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divsf3>
     664:	0e 94 03 0c 	call	0x1806	; 0x1806 <acos>
     668:	69 83       	std	Y+1, r22	; 0x01
     66a:	7a 83       	std	Y+2, r23	; 0x02
     66c:	8b 83       	std	Y+3, r24	; 0x03
     66e:	9c 83       	std	Y+4, r25	; 0x04
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
     670:	20 e0       	ldi	r18, 0x00	; 0
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	48 e4       	ldi	r20, 0x48	; 72
     676:	52 e4       	ldi	r21, 0x42	; 66
     678:	c3 01       	movw	r24, r6
     67a:	b2 01       	movw	r22, r4
     67c:	0e 94 11 0c 	call	0x1822	; 0x1822 <__subsf3>
     680:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <sqrt>
     684:	9b 01       	movw	r18, r22
     686:	ac 01       	movw	r20, r24
     688:	c5 01       	movw	r24, r10
     68a:	b4 01       	movw	r22, r8
     68c:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     690:	9b 01       	movw	r18, r22
     692:	ac 01       	movw	r20, r24
     694:	c7 01       	movw	r24, r14
     696:	b6 01       	movw	r22, r12
     698:	0e 94 12 0c 	call	0x1824	; 0x1824 <__addsf3>
     69c:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <sqrt>
     6a0:	2b 01       	movw	r4, r22
     6a2:	3c 01       	movw	r6, r24
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	38 e4       	ldi	r19, 0x48	; 72
     6a8:	4c e8       	ldi	r20, 0x8C	; 140
     6aa:	55 e4       	ldi	r21, 0x45	; 69
     6ac:	69 85       	ldd	r22, Y+9	; 0x09
     6ae:	7a 85       	ldd	r23, Y+10	; 0x0a
     6b0:	8b 85       	ldd	r24, Y+11	; 0x0b
     6b2:	9c 85       	ldd	r25, Y+12	; 0x0c
     6b4:	0e 94 12 0c 	call	0x1824	; 0x1824 <__addsf3>
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	38 e0       	ldi	r19, 0x08	; 8
     6bc:	44 e8       	ldi	r20, 0x84	; 132
     6be:	56 e4       	ldi	r21, 0x46	; 70
     6c0:	0e 94 11 0c 	call	0x1822	; 0x1822 <__subsf3>
     6c4:	4b 01       	movw	r8, r22
     6c6:	5c 01       	movw	r10, r24
     6c8:	a3 01       	movw	r20, r6
     6ca:	92 01       	movw	r18, r4
     6cc:	c3 01       	movw	r24, r6
     6ce:	b2 01       	movw	r22, r4
     6d0:	0e 94 12 0c 	call	0x1824	; 0x1824 <__addsf3>
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	46 e8       	ldi	r20, 0x86	; 134
     6da:	52 e4       	ldi	r21, 0x42	; 66
     6dc:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     6e0:	9b 01       	movw	r18, r22
     6e2:	ac 01       	movw	r20, r24
     6e4:	c5 01       	movw	r24, r10
     6e6:	b4 01       	movw	r22, r8
     6e8:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divsf3>
     6ec:	0e 94 03 0c 	call	0x1806	; 0x1806 <acos>
     6f0:	2b 01       	movw	r4, r22
     6f2:	3c 01       	movw	r6, r24
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     6f4:	a7 01       	movw	r20, r14
     6f6:	96 01       	movw	r18, r12
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	7a e1       	ldi	r23, 0x1A	; 26
     6fc:	87 ea       	ldi	r24, 0xA7	; 167
     6fe:	96 e4       	ldi	r25, 0x46	; 70
     700:	0e 94 11 0c 	call	0x1822	; 0x1822 <__subsf3>
     704:	2d 81       	ldd	r18, Y+5	; 0x05
     706:	3e 81       	ldd	r19, Y+6	; 0x06
     708:	4f 81       	ldd	r20, Y+7	; 0x07
     70a:	58 85       	ldd	r21, Y+8	; 0x08
     70c:	0e 94 11 0c 	call	0x1822	; 0x1822 <__subsf3>
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	38 e1       	ldi	r19, 0x18	; 24
     714:	48 e8       	ldi	r20, 0x88	; 136
     716:	56 e4       	ldi	r21, 0x46	; 70
     718:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divsf3>
     71c:	0e 94 03 0c 	call	0x1806	; 0x1806 <acos>
     720:	4b 01       	movw	r8, r22
     722:	5c 01       	movw	r10, r24
	long int ActuatorAngle1 =  theta1 + 193;
	long int ActuatorAngle2 =  theta2 + 75;
	long int ActuatorAngle3 =  theta3 + 3;
	
	
	MoveDynamixel(8,ActuatorAngle1,speed);
     724:	68 01       	movw	r12, r16
     726:	ee 24       	eor	r14, r14
     728:	d7 fc       	sbrc	r13, 7
     72a:	e0 94       	com	r14
     72c:	fe 2c       	mov	r15, r14
	return;
}

void MoveFrontRightLeg(float x, float y, float z, int speed)
{
	long int theta1 = atan2f(-x,y)*180/PI;
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	44 e3       	ldi	r20, 0x34	; 52
     734:	53 e4       	ldi	r21, 0x43	; 67
     736:	6d 85       	ldd	r22, Y+13	; 0x0d
     738:	7e 85       	ldd	r23, Y+14	; 0x0e
     73a:	8f 85       	ldd	r24, Y+15	; 0x0f
     73c:	98 89       	ldd	r25, Y+16	; 0x10
     73e:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     742:	28 ed       	ldi	r18, 0xD8	; 216
     744:	3f e0       	ldi	r19, 0x0F	; 15
     746:	49 e4       	ldi	r20, 0x49	; 73
     748:	50 e4       	ldi	r21, 0x40	; 64
     74a:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divsf3>
     74e:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__fixsfsi>
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

	long int ActuatorAngle1 =  theta1 + 193;
     752:	ab 01       	movw	r20, r22
     754:	bc 01       	movw	r22, r24
     756:	4f 53       	subi	r20, 0x3F	; 63
     758:	5f 4f       	sbci	r21, 0xFF	; 255
     75a:	6f 4f       	sbci	r22, 0xFF	; 255
     75c:	7f 4f       	sbci	r23, 0xFF	; 255
	long int ActuatorAngle2 =  theta2 + 75;
	long int ActuatorAngle3 =  theta3 + 3;
	
	
	MoveDynamixel(8,ActuatorAngle1,speed);
     75e:	97 01       	movw	r18, r14
     760:	86 01       	movw	r16, r12
     762:	88 e0       	ldi	r24, 0x08	; 8
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	68 dd       	rcall	.-1328   	; 0x238 <MoveDynamixel>
	USARTReadStatusPacket();
     768:	3a dd       	rcall	.-1420   	; 0x1de <USARTReadStatusPacket>
}

void MoveFrontRightLeg(float x, float y, float z, int speed)
{
	long int theta1 = atan2f(-x,y)*180/PI;
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
     76a:	a3 01       	movw	r20, r6
     76c:	92 01       	movw	r18, r4
     76e:	69 81       	ldd	r22, Y+1	; 0x01
     770:	7a 81       	ldd	r23, Y+2	; 0x02
     772:	8b 81       	ldd	r24, Y+3	; 0x03
     774:	9c 81       	ldd	r25, Y+4	; 0x04
     776:	0e 94 12 0c 	call	0x1824	; 0x1824 <__addsf3>
     77a:	24 ee       	ldi	r18, 0xE4	; 228
     77c:	3e e2       	ldi	r19, 0x2E	; 46
     77e:	45 e6       	ldi	r20, 0x65	; 101
     780:	52 e4       	ldi	r21, 0x42	; 66
     782:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     786:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__fixsfsi>
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

	long int ActuatorAngle1 =  theta1 + 193;
	long int ActuatorAngle2 =  theta2 + 75;
     78a:	ab 01       	movw	r20, r22
     78c:	bc 01       	movw	r22, r24
     78e:	45 5b       	subi	r20, 0xB5	; 181
     790:	5f 4f       	sbci	r21, 0xFF	; 255
     792:	6f 4f       	sbci	r22, 0xFF	; 255
     794:	7f 4f       	sbci	r23, 0xFF	; 255
	long int ActuatorAngle3 =  theta3 + 3;
	
	
	MoveDynamixel(8,ActuatorAngle1,speed);
	USARTReadStatusPacket();
	MoveDynamixel(10,ActuatorAngle2,speed);
     796:	97 01       	movw	r18, r14
     798:	86 01       	movw	r16, r12
     79a:	8a e0       	ldi	r24, 0x0A	; 10
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	4c dd       	rcall	.-1384   	; 0x238 <MoveDynamixel>
	USARTReadStatusPacket();
     7a0:	1e dd       	rcall	.-1476   	; 0x1de <USARTReadStatusPacket>
{
	long int theta1 = atan2f(-x,y)*180/PI;
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     7a2:	20 e0       	ldi	r18, 0x00	; 0
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	44 e3       	ldi	r20, 0x34	; 52
     7a8:	53 e4       	ldi	r21, 0x43	; 67
     7aa:	c5 01       	movw	r24, r10
     7ac:	b4 01       	movw	r22, r8
     7ae:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     7b2:	28 ed       	ldi	r18, 0xD8	; 216
     7b4:	3f e0       	ldi	r19, 0x0F	; 15
     7b6:	49 e4       	ldi	r20, 0x49	; 73
     7b8:	50 e4       	ldi	r21, 0x40	; 64
     7ba:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divsf3>
     7be:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__fixsfsi>

	long int ActuatorAngle1 =  theta1 + 193;
	long int ActuatorAngle2 =  theta2 + 75;
	long int ActuatorAngle3 =  theta3 + 3;
     7c2:	ab 01       	movw	r20, r22
     7c4:	bc 01       	movw	r22, r24
     7c6:	4d 5f       	subi	r20, 0xFD	; 253
     7c8:	5f 4f       	sbci	r21, 0xFF	; 255
     7ca:	6f 4f       	sbci	r22, 0xFF	; 255
     7cc:	7f 4f       	sbci	r23, 0xFF	; 255
	
	MoveDynamixel(8,ActuatorAngle1,speed);
	USARTReadStatusPacket();
	MoveDynamixel(10,ActuatorAngle2,speed);
	USARTReadStatusPacket();
	MoveDynamixel(12,ActuatorAngle3,speed);
     7ce:	97 01       	movw	r18, r14
     7d0:	86 01       	movw	r16, r12
     7d2:	8c e0       	ldi	r24, 0x0C	; 12
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	30 dd       	rcall	.-1440   	; 0x238 <MoveDynamixel>
	USARTReadStatusPacket();	
     7d8:	02 dd       	rcall	.-1532   	; 0x1de <USARTReadStatusPacket>
	return;
}
     7da:	60 96       	adiw	r28, 0x10	; 16
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	f8 94       	cli
     7e0:	de bf       	out	0x3e, r29	; 62
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	cd bf       	out	0x3d, r28	; 61
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	1f 91       	pop	r17
     7ec:	0f 91       	pop	r16
     7ee:	ff 90       	pop	r15
     7f0:	ef 90       	pop	r14
     7f2:	df 90       	pop	r13
     7f4:	cf 90       	pop	r12
     7f6:	bf 90       	pop	r11
     7f8:	af 90       	pop	r10
     7fa:	9f 90       	pop	r9
     7fc:	8f 90       	pop	r8
     7fe:	7f 90       	pop	r7
     800:	6f 90       	pop	r6
     802:	5f 90       	pop	r5
     804:	4f 90       	pop	r4
     806:	08 95       	ret

00000808 <MoveRearLeftLeg>:
void MoveRearLeftLeg(float x, float y, float z, int speed)
{
     808:	4f 92       	push	r4
     80a:	5f 92       	push	r5
     80c:	6f 92       	push	r6
     80e:	7f 92       	push	r7
     810:	8f 92       	push	r8
     812:	9f 92       	push	r9
     814:	af 92       	push	r10
     816:	bf 92       	push	r11
     818:	cf 92       	push	r12
     81a:	df 92       	push	r13
     81c:	ef 92       	push	r14
     81e:	ff 92       	push	r15
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62
     82c:	60 97       	sbiw	r28, 0x10	; 16
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	f8 94       	cli
     832:	de bf       	out	0x3e, r29	; 62
     834:	0f be       	out	0x3f, r0	; 63
     836:	cd bf       	out	0x3d, r28	; 61
     838:	2b 01       	movw	r4, r22
     83a:	3c 01       	movw	r6, r24
     83c:	49 01       	movw	r8, r18
     83e:	5a 01       	movw	r10, r20
     840:	e9 82       	std	Y+1, r14	; 0x01
     842:	fa 82       	std	Y+2, r15	; 0x02
     844:	0b 83       	std	Y+3, r16	; 0x03
     846:	1c 83       	std	Y+4, r17	; 0x04
     848:	86 01       	movw	r16, r12
	long int theta1 = atan2f(x,-y)*180/PI;
     84a:	50 58       	subi	r21, 0x80	; 128
     84c:	0e 94 85 0c 	call	0x190a	; 0x190a <atan2>
     850:	6d 87       	std	Y+13, r22	; 0x0d
     852:	7e 87       	std	Y+14, r23	; 0x0e
     854:	8f 87       	std	Y+15, r24	; 0x0f
     856:	98 8b       	std	Y+16, r25	; 0x10
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
     858:	29 81       	ldd	r18, Y+1	; 0x01
     85a:	3a 81       	ldd	r19, Y+2	; 0x02
     85c:	4b 81       	ldd	r20, Y+3	; 0x03
     85e:	5c 81       	ldd	r21, Y+4	; 0x04
     860:	ca 01       	movw	r24, r20
     862:	b9 01       	movw	r22, r18
     864:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     868:	6b 01       	movw	r12, r22
     86a:	7c 01       	movw	r14, r24
     86c:	a3 01       	movw	r20, r6
     86e:	92 01       	movw	r18, r4
     870:	c3 01       	movw	r24, r6
     872:	b2 01       	movw	r22, r4
     874:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     878:	2b 01       	movw	r4, r22
     87a:	3c 01       	movw	r6, r24
     87c:	a5 01       	movw	r20, r10
     87e:	94 01       	movw	r18, r8
     880:	c5 01       	movw	r24, r10
     882:	b4 01       	movw	r22, r8
     884:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     888:	9b 01       	movw	r18, r22
     88a:	ac 01       	movw	r20, r24
     88c:	c3 01       	movw	r24, r6
     88e:	b2 01       	movw	r22, r4
     890:	c9 d7       	rcall	.+3986   	; 0x1824 <__addsf3>
     892:	2b 01       	movw	r4, r22
     894:	3c 01       	movw	r6, r24
     896:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <sqrt>
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	48 e4       	ldi	r20, 0x48	; 72
     8a0:	52 e4       	ldi	r21, 0x42	; 66
     8a2:	bf d7       	rcall	.+3966   	; 0x1822 <__subsf3>
     8a4:	4b 01       	movw	r8, r22
     8a6:	5c 01       	movw	r10, r24
     8a8:	9b 01       	movw	r18, r22
     8aa:	ac 01       	movw	r20, r24
     8ac:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     8b0:	6d 83       	std	Y+5, r22	; 0x05
     8b2:	7e 83       	std	Y+6, r23	; 0x06
     8b4:	8f 83       	std	Y+7, r24	; 0x07
     8b6:	98 87       	std	Y+8, r25	; 0x08
     8b8:	9b 01       	movw	r18, r22
     8ba:	ac 01       	movw	r20, r24
     8bc:	c7 01       	movw	r24, r14
     8be:	b6 01       	movw	r22, r12
     8c0:	b1 d7       	rcall	.+3938   	; 0x1824 <__addsf3>
     8c2:	69 87       	std	Y+9, r22	; 0x09
     8c4:	7a 87       	std	Y+10, r23	; 0x0a
     8c6:	8b 87       	std	Y+11, r24	; 0x0b
     8c8:	9c 87       	std	Y+12, r25	; 0x0c
     8ca:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <sqrt>
     8ce:	9b 01       	movw	r18, r22
     8d0:	ac 01       	movw	r20, r24
     8d2:	69 81       	ldd	r22, Y+1	; 0x01
     8d4:	7a 81       	ldd	r23, Y+2	; 0x02
     8d6:	8b 81       	ldd	r24, Y+3	; 0x03
     8d8:	9c 81       	ldd	r25, Y+4	; 0x04
     8da:	90 58       	subi	r25, 0x80	; 128
     8dc:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divsf3>
     8e0:	92 d7       	rcall	.+3876   	; 0x1806 <acos>
     8e2:	69 83       	std	Y+1, r22	; 0x01
     8e4:	7a 83       	std	Y+2, r23	; 0x02
     8e6:	8b 83       	std	Y+3, r24	; 0x03
     8e8:	9c 83       	std	Y+4, r25	; 0x04
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	48 e4       	ldi	r20, 0x48	; 72
     8f0:	52 e4       	ldi	r21, 0x42	; 66
     8f2:	c3 01       	movw	r24, r6
     8f4:	b2 01       	movw	r22, r4
     8f6:	95 d7       	rcall	.+3882   	; 0x1822 <__subsf3>
     8f8:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <sqrt>
     8fc:	9b 01       	movw	r18, r22
     8fe:	ac 01       	movw	r20, r24
     900:	c5 01       	movw	r24, r10
     902:	b4 01       	movw	r22, r8
     904:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     908:	9b 01       	movw	r18, r22
     90a:	ac 01       	movw	r20, r24
     90c:	c7 01       	movw	r24, r14
     90e:	b6 01       	movw	r22, r12
     910:	89 d7       	rcall	.+3858   	; 0x1824 <__addsf3>
     912:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <sqrt>
     916:	2b 01       	movw	r4, r22
     918:	3c 01       	movw	r6, r24
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	38 e4       	ldi	r19, 0x48	; 72
     91e:	4c e8       	ldi	r20, 0x8C	; 140
     920:	55 e4       	ldi	r21, 0x45	; 69
     922:	69 85       	ldd	r22, Y+9	; 0x09
     924:	7a 85       	ldd	r23, Y+10	; 0x0a
     926:	8b 85       	ldd	r24, Y+11	; 0x0b
     928:	9c 85       	ldd	r25, Y+12	; 0x0c
     92a:	7c d7       	rcall	.+3832   	; 0x1824 <__addsf3>
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	38 e0       	ldi	r19, 0x08	; 8
     930:	44 e8       	ldi	r20, 0x84	; 132
     932:	56 e4       	ldi	r21, 0x46	; 70
     934:	76 d7       	rcall	.+3820   	; 0x1822 <__subsf3>
     936:	4b 01       	movw	r8, r22
     938:	5c 01       	movw	r10, r24
     93a:	a3 01       	movw	r20, r6
     93c:	92 01       	movw	r18, r4
     93e:	c3 01       	movw	r24, r6
     940:	b2 01       	movw	r22, r4
     942:	70 d7       	rcall	.+3808   	; 0x1824 <__addsf3>
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	46 e8       	ldi	r20, 0x86	; 134
     94a:	52 e4       	ldi	r21, 0x42	; 66
     94c:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     950:	9b 01       	movw	r18, r22
     952:	ac 01       	movw	r20, r24
     954:	c5 01       	movw	r24, r10
     956:	b4 01       	movw	r22, r8
     958:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divsf3>
     95c:	54 d7       	rcall	.+3752   	; 0x1806 <acos>
     95e:	2b 01       	movw	r4, r22
     960:	3c 01       	movw	r6, r24
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     962:	a7 01       	movw	r20, r14
     964:	96 01       	movw	r18, r12
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	7a e1       	ldi	r23, 0x1A	; 26
     96a:	87 ea       	ldi	r24, 0xA7	; 167
     96c:	96 e4       	ldi	r25, 0x46	; 70
     96e:	59 d7       	rcall	.+3762   	; 0x1822 <__subsf3>
     970:	2d 81       	ldd	r18, Y+5	; 0x05
     972:	3e 81       	ldd	r19, Y+6	; 0x06
     974:	4f 81       	ldd	r20, Y+7	; 0x07
     976:	58 85       	ldd	r21, Y+8	; 0x08
     978:	54 d7       	rcall	.+3752   	; 0x1822 <__subsf3>
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	38 e1       	ldi	r19, 0x18	; 24
     97e:	48 e8       	ldi	r20, 0x88	; 136
     980:	56 e4       	ldi	r21, 0x46	; 70
     982:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divsf3>
     986:	3f d7       	rcall	.+3710   	; 0x1806 <acos>
     988:	4b 01       	movw	r8, r22
     98a:	5c 01       	movw	r10, r24
	long int ActuatorAngle1 =  theta1 + 195;
	long int ActuatorAngle2 =  225 - theta2;
	long int ActuatorAngle3 =  300 - theta3 ;
	
	
	MoveDynamixel(1,ActuatorAngle1,speed);
     98c:	68 01       	movw	r12, r16
     98e:	ee 24       	eor	r14, r14
     990:	d7 fc       	sbrc	r13, 7
     992:	e0 94       	com	r14
     994:	fe 2c       	mov	r15, r14
	USARTReadStatusPacket();	
	return;
}
void MoveRearLeftLeg(float x, float y, float z, int speed)
{
	long int theta1 = atan2f(x,-y)*180/PI;
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	44 e3       	ldi	r20, 0x34	; 52
     99c:	53 e4       	ldi	r21, 0x43	; 67
     99e:	6d 85       	ldd	r22, Y+13	; 0x0d
     9a0:	7e 85       	ldd	r23, Y+14	; 0x0e
     9a2:	8f 85       	ldd	r24, Y+15	; 0x0f
     9a4:	98 89       	ldd	r25, Y+16	; 0x10
     9a6:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     9aa:	28 ed       	ldi	r18, 0xD8	; 216
     9ac:	3f e0       	ldi	r19, 0x0F	; 15
     9ae:	49 e4       	ldi	r20, 0x49	; 73
     9b0:	50 e4       	ldi	r21, 0x40	; 64
     9b2:	fe d7       	rcall	.+4092   	; 0x19b0 <__divsf3>
     9b4:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__fixsfsi>
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

	long int ActuatorAngle1 =  theta1 + 195;
     9b8:	ab 01       	movw	r20, r22
     9ba:	bc 01       	movw	r22, r24
     9bc:	4d 53       	subi	r20, 0x3D	; 61
     9be:	5f 4f       	sbci	r21, 0xFF	; 255
     9c0:	6f 4f       	sbci	r22, 0xFF	; 255
     9c2:	7f 4f       	sbci	r23, 0xFF	; 255
	long int ActuatorAngle2 =  225 - theta2;
	long int ActuatorAngle3 =  300 - theta3 ;
	
	
	MoveDynamixel(1,ActuatorAngle1,speed);
     9c4:	97 01       	movw	r18, r14
     9c6:	86 01       	movw	r16, r12
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	35 dc       	rcall	.-1942   	; 0x238 <MoveDynamixel>
	USARTReadStatusPacket();
     9ce:	07 dc       	rcall	.-2034   	; 0x1de <USARTReadStatusPacket>
	return;
}
void MoveRearLeftLeg(float x, float y, float z, int speed)
{
	long int theta1 = atan2f(x,-y)*180/PI;
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
     9d0:	a3 01       	movw	r20, r6
     9d2:	92 01       	movw	r18, r4
     9d4:	69 81       	ldd	r22, Y+1	; 0x01
     9d6:	7a 81       	ldd	r23, Y+2	; 0x02
     9d8:	8b 81       	ldd	r24, Y+3	; 0x03
     9da:	9c 81       	ldd	r25, Y+4	; 0x04
     9dc:	23 d7       	rcall	.+3654   	; 0x1824 <__addsf3>
     9de:	24 ee       	ldi	r18, 0xE4	; 228
     9e0:	3e e2       	ldi	r19, 0x2E	; 46
     9e2:	45 e6       	ldi	r20, 0x65	; 101
     9e4:	52 e4       	ldi	r21, 0x42	; 66
     9e6:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     9ea:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__fixsfsi>
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

	long int ActuatorAngle1 =  theta1 + 195;
	long int ActuatorAngle2 =  225 - theta2;
     9ee:	0f 2e       	mov	r0, r31
     9f0:	f1 ee       	ldi	r31, 0xE1	; 225
     9f2:	4f 2e       	mov	r4, r31
     9f4:	51 2c       	mov	r5, r1
     9f6:	61 2c       	mov	r6, r1
     9f8:	71 2c       	mov	r7, r1
     9fa:	f0 2d       	mov	r31, r0
     9fc:	93 01       	movw	r18, r6
     9fe:	82 01       	movw	r16, r4
     a00:	06 1b       	sub	r16, r22
     a02:	17 0b       	sbc	r17, r23
     a04:	28 0b       	sbc	r18, r24
     a06:	39 0b       	sbc	r19, r25
     a08:	b9 01       	movw	r22, r18
     a0a:	a8 01       	movw	r20, r16
	long int ActuatorAngle3 =  300 - theta3 ;
	
	
	MoveDynamixel(1,ActuatorAngle1,speed);
	USARTReadStatusPacket();
    MoveDynamixel(3,ActuatorAngle2,speed);
     a0c:	97 01       	movw	r18, r14
     a0e:	86 01       	movw	r16, r12
     a10:	83 e0       	ldi	r24, 0x03	; 3
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	11 dc       	rcall	.-2014   	; 0x238 <MoveDynamixel>
    USARTReadStatusPacket();
     a16:	e3 db       	rcall	.-2106   	; 0x1de <USARTReadStatusPacket>
{
	long int theta1 = atan2f(x,-y)*180/PI;
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	44 e3       	ldi	r20, 0x34	; 52
     a1e:	53 e4       	ldi	r21, 0x43	; 67
     a20:	c5 01       	movw	r24, r10
     a22:	b4 01       	movw	r22, r8
     a24:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     a28:	28 ed       	ldi	r18, 0xD8	; 216
     a2a:	3f e0       	ldi	r19, 0x0F	; 15
     a2c:	49 e4       	ldi	r20, 0x49	; 73
     a2e:	50 e4       	ldi	r21, 0x40	; 64
     a30:	bf d7       	rcall	.+3966   	; 0x19b0 <__divsf3>
     a32:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__fixsfsi>

	long int ActuatorAngle1 =  theta1 + 195;
	long int ActuatorAngle2 =  225 - theta2;
	long int ActuatorAngle3 =  300 - theta3 ;
     a36:	0f 2e       	mov	r0, r31
     a38:	fc e2       	ldi	r31, 0x2C	; 44
     a3a:	8f 2e       	mov	r8, r31
     a3c:	99 24       	eor	r9, r9
     a3e:	93 94       	inc	r9
     a40:	a1 2c       	mov	r10, r1
     a42:	b1 2c       	mov	r11, r1
     a44:	f0 2d       	mov	r31, r0
     a46:	95 01       	movw	r18, r10
     a48:	84 01       	movw	r16, r8
     a4a:	06 1b       	sub	r16, r22
     a4c:	17 0b       	sbc	r17, r23
     a4e:	28 0b       	sbc	r18, r24
     a50:	39 0b       	sbc	r19, r25
     a52:	b9 01       	movw	r22, r18
     a54:	a8 01       	movw	r20, r16
	
	MoveDynamixel(1,ActuatorAngle1,speed);
	USARTReadStatusPacket();
    MoveDynamixel(3,ActuatorAngle2,speed);
    USARTReadStatusPacket();
	MoveDynamixel(5,ActuatorAngle3,speed);
     a56:	97 01       	movw	r18, r14
     a58:	86 01       	movw	r16, r12
     a5a:	85 e0       	ldi	r24, 0x05	; 5
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	ec db       	rcall	.-2088   	; 0x238 <MoveDynamixel>
	USARTReadStatusPacket();
     a60:	be db       	rcall	.-2180   	; 0x1de <USARTReadStatusPacket>
	return;
}
     a62:	60 96       	adiw	r28, 0x10	; 16
     a64:	0f b6       	in	r0, 0x3f	; 63
     a66:	f8 94       	cli
     a68:	de bf       	out	0x3e, r29	; 62
     a6a:	0f be       	out	0x3f, r0	; 63
     a6c:	cd bf       	out	0x3d, r28	; 61
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	1f 91       	pop	r17
     a74:	0f 91       	pop	r16
     a76:	ff 90       	pop	r15
     a78:	ef 90       	pop	r14
     a7a:	df 90       	pop	r13
     a7c:	cf 90       	pop	r12
     a7e:	bf 90       	pop	r11
     a80:	af 90       	pop	r10
     a82:	9f 90       	pop	r9
     a84:	8f 90       	pop	r8
     a86:	7f 90       	pop	r7
     a88:	6f 90       	pop	r6
     a8a:	5f 90       	pop	r5
     a8c:	4f 90       	pop	r4
     a8e:	08 95       	ret

00000a90 <MoveRearRightLeg>:
void MoveRearRightLeg(float x, float y, float z, int speed)
{
     a90:	4f 92       	push	r4
     a92:	5f 92       	push	r5
     a94:	6f 92       	push	r6
     a96:	7f 92       	push	r7
     a98:	8f 92       	push	r8
     a9a:	9f 92       	push	r9
     a9c:	af 92       	push	r10
     a9e:	bf 92       	push	r11
     aa0:	cf 92       	push	r12
     aa2:	df 92       	push	r13
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	cd b7       	in	r28, 0x3d	; 61
     ab2:	de b7       	in	r29, 0x3e	; 62
     ab4:	60 97       	sbiw	r28, 0x10	; 16
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	f8 94       	cli
     aba:	de bf       	out	0x3e, r29	; 62
     abc:	0f be       	out	0x3f, r0	; 63
     abe:	cd bf       	out	0x3d, r28	; 61
     ac0:	2b 01       	movw	r4, r22
     ac2:	3c 01       	movw	r6, r24
     ac4:	49 01       	movw	r8, r18
     ac6:	5a 01       	movw	r10, r20
     ac8:	e9 82       	std	Y+1, r14	; 0x01
     aca:	fa 82       	std	Y+2, r15	; 0x02
     acc:	0b 83       	std	Y+3, r16	; 0x03
     ace:	1c 83       	std	Y+4, r17	; 0x04
     ad0:	86 01       	movw	r16, r12
	long int theta1 = atan2f(x,-y)*180/PI;
     ad2:	50 58       	subi	r21, 0x80	; 128
     ad4:	1a d7       	rcall	.+3636   	; 0x190a <atan2>
     ad6:	6d 87       	std	Y+13, r22	; 0x0d
     ad8:	7e 87       	std	Y+14, r23	; 0x0e
     ada:	8f 87       	std	Y+15, r24	; 0x0f
     adc:	98 8b       	std	Y+16, r25	; 0x10
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
     ade:	29 81       	ldd	r18, Y+1	; 0x01
     ae0:	3a 81       	ldd	r19, Y+2	; 0x02
     ae2:	4b 81       	ldd	r20, Y+3	; 0x03
     ae4:	5c 81       	ldd	r21, Y+4	; 0x04
     ae6:	ca 01       	movw	r24, r20
     ae8:	b9 01       	movw	r22, r18
     aea:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     aee:	6b 01       	movw	r12, r22
     af0:	7c 01       	movw	r14, r24
     af2:	a3 01       	movw	r20, r6
     af4:	92 01       	movw	r18, r4
     af6:	c3 01       	movw	r24, r6
     af8:	b2 01       	movw	r22, r4
     afa:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     afe:	2b 01       	movw	r4, r22
     b00:	3c 01       	movw	r6, r24
     b02:	a5 01       	movw	r20, r10
     b04:	94 01       	movw	r18, r8
     b06:	c5 01       	movw	r24, r10
     b08:	b4 01       	movw	r22, r8
     b0a:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     b0e:	9b 01       	movw	r18, r22
     b10:	ac 01       	movw	r20, r24
     b12:	c3 01       	movw	r24, r6
     b14:	b2 01       	movw	r22, r4
     b16:	86 d6       	rcall	.+3340   	; 0x1824 <__addsf3>
     b18:	2b 01       	movw	r4, r22
     b1a:	3c 01       	movw	r6, r24
     b1c:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <sqrt>
     b20:	20 e0       	ldi	r18, 0x00	; 0
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	48 e4       	ldi	r20, 0x48	; 72
     b26:	52 e4       	ldi	r21, 0x42	; 66
     b28:	7c d6       	rcall	.+3320   	; 0x1822 <__subsf3>
     b2a:	4b 01       	movw	r8, r22
     b2c:	5c 01       	movw	r10, r24
     b2e:	9b 01       	movw	r18, r22
     b30:	ac 01       	movw	r20, r24
     b32:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     b36:	6d 83       	std	Y+5, r22	; 0x05
     b38:	7e 83       	std	Y+6, r23	; 0x06
     b3a:	8f 83       	std	Y+7, r24	; 0x07
     b3c:	98 87       	std	Y+8, r25	; 0x08
     b3e:	9b 01       	movw	r18, r22
     b40:	ac 01       	movw	r20, r24
     b42:	c7 01       	movw	r24, r14
     b44:	b6 01       	movw	r22, r12
     b46:	6e d6       	rcall	.+3292   	; 0x1824 <__addsf3>
     b48:	69 87       	std	Y+9, r22	; 0x09
     b4a:	7a 87       	std	Y+10, r23	; 0x0a
     b4c:	8b 87       	std	Y+11, r24	; 0x0b
     b4e:	9c 87       	std	Y+12, r25	; 0x0c
     b50:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <sqrt>
     b54:	9b 01       	movw	r18, r22
     b56:	ac 01       	movw	r20, r24
     b58:	69 81       	ldd	r22, Y+1	; 0x01
     b5a:	7a 81       	ldd	r23, Y+2	; 0x02
     b5c:	8b 81       	ldd	r24, Y+3	; 0x03
     b5e:	9c 81       	ldd	r25, Y+4	; 0x04
     b60:	90 58       	subi	r25, 0x80	; 128
     b62:	26 d7       	rcall	.+3660   	; 0x19b0 <__divsf3>
     b64:	50 d6       	rcall	.+3232   	; 0x1806 <acos>
     b66:	69 83       	std	Y+1, r22	; 0x01
     b68:	7a 83       	std	Y+2, r23	; 0x02
     b6a:	8b 83       	std	Y+3, r24	; 0x03
     b6c:	9c 83       	std	Y+4, r25	; 0x04
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
     b6e:	20 e0       	ldi	r18, 0x00	; 0
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	48 e4       	ldi	r20, 0x48	; 72
     b74:	52 e4       	ldi	r21, 0x42	; 66
     b76:	c3 01       	movw	r24, r6
     b78:	b2 01       	movw	r22, r4
     b7a:	53 d6       	rcall	.+3238   	; 0x1822 <__subsf3>
     b7c:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <sqrt>
     b80:	9b 01       	movw	r18, r22
     b82:	ac 01       	movw	r20, r24
     b84:	c5 01       	movw	r24, r10
     b86:	b4 01       	movw	r22, r8
     b88:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     b8c:	9b 01       	movw	r18, r22
     b8e:	ac 01       	movw	r20, r24
     b90:	c7 01       	movw	r24, r14
     b92:	b6 01       	movw	r22, r12
     b94:	47 d6       	rcall	.+3214   	; 0x1824 <__addsf3>
     b96:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <sqrt>
     b9a:	2b 01       	movw	r4, r22
     b9c:	3c 01       	movw	r6, r24
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	38 e4       	ldi	r19, 0x48	; 72
     ba2:	4c e8       	ldi	r20, 0x8C	; 140
     ba4:	55 e4       	ldi	r21, 0x45	; 69
     ba6:	69 85       	ldd	r22, Y+9	; 0x09
     ba8:	7a 85       	ldd	r23, Y+10	; 0x0a
     baa:	8b 85       	ldd	r24, Y+11	; 0x0b
     bac:	9c 85       	ldd	r25, Y+12	; 0x0c
     bae:	3a d6       	rcall	.+3188   	; 0x1824 <__addsf3>
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	38 e0       	ldi	r19, 0x08	; 8
     bb4:	44 e8       	ldi	r20, 0x84	; 132
     bb6:	56 e4       	ldi	r21, 0x46	; 70
     bb8:	34 d6       	rcall	.+3176   	; 0x1822 <__subsf3>
     bba:	4b 01       	movw	r8, r22
     bbc:	5c 01       	movw	r10, r24
     bbe:	a3 01       	movw	r20, r6
     bc0:	92 01       	movw	r18, r4
     bc2:	c3 01       	movw	r24, r6
     bc4:	b2 01       	movw	r22, r4
     bc6:	2e d6       	rcall	.+3164   	; 0x1824 <__addsf3>
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	46 e8       	ldi	r20, 0x86	; 134
     bce:	52 e4       	ldi	r21, 0x42	; 66
     bd0:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     bd4:	9b 01       	movw	r18, r22
     bd6:	ac 01       	movw	r20, r24
     bd8:	c5 01       	movw	r24, r10
     bda:	b4 01       	movw	r22, r8
     bdc:	e9 d6       	rcall	.+3538   	; 0x19b0 <__divsf3>
     bde:	13 d6       	rcall	.+3110   	; 0x1806 <acos>
     be0:	2b 01       	movw	r4, r22
     be2:	3c 01       	movw	r6, r24
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     be4:	a7 01       	movw	r20, r14
     be6:	96 01       	movw	r18, r12
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	7a e1       	ldi	r23, 0x1A	; 26
     bec:	87 ea       	ldi	r24, 0xA7	; 167
     bee:	96 e4       	ldi	r25, 0x46	; 70
     bf0:	18 d6       	rcall	.+3120   	; 0x1822 <__subsf3>
     bf2:	2d 81       	ldd	r18, Y+5	; 0x05
     bf4:	3e 81       	ldd	r19, Y+6	; 0x06
     bf6:	4f 81       	ldd	r20, Y+7	; 0x07
     bf8:	58 85       	ldd	r21, Y+8	; 0x08
     bfa:	13 d6       	rcall	.+3110   	; 0x1822 <__subsf3>
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	38 e1       	ldi	r19, 0x18	; 24
     c00:	48 e8       	ldi	r20, 0x88	; 136
     c02:	56 e4       	ldi	r21, 0x46	; 70
     c04:	d5 d6       	rcall	.+3498   	; 0x19b0 <__divsf3>
     c06:	ff d5       	rcall	.+3070   	; 0x1806 <acos>
     c08:	4b 01       	movw	r8, r22
     c0a:	5c 01       	movw	r10, r24
	long int ActuatorAngle1 =  theta1 + 105;
	long int ActuatorAngle2 =  225 - theta2;
	long int ActuatorAngle3 =  300 - theta3;
	
	
	MoveDynamixel(7,ActuatorAngle1,speed);
     c0c:	68 01       	movw	r12, r16
     c0e:	ee 24       	eor	r14, r14
     c10:	d7 fc       	sbrc	r13, 7
     c12:	e0 94       	com	r14
     c14:	fe 2c       	mov	r15, r14
	USARTReadStatusPacket();
	return;
}
void MoveRearRightLeg(float x, float y, float z, int speed)
{
	long int theta1 = atan2f(x,-y)*180/PI;
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	44 e3       	ldi	r20, 0x34	; 52
     c1c:	53 e4       	ldi	r21, 0x43	; 67
     c1e:	6d 85       	ldd	r22, Y+13	; 0x0d
     c20:	7e 85       	ldd	r23, Y+14	; 0x0e
     c22:	8f 85       	ldd	r24, Y+15	; 0x0f
     c24:	98 89       	ldd	r25, Y+16	; 0x10
     c26:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     c2a:	28 ed       	ldi	r18, 0xD8	; 216
     c2c:	3f e0       	ldi	r19, 0x0F	; 15
     c2e:	49 e4       	ldi	r20, 0x49	; 73
     c30:	50 e4       	ldi	r21, 0x40	; 64
     c32:	be d6       	rcall	.+3452   	; 0x19b0 <__divsf3>
     c34:	25 d7       	rcall	.+3658   	; 0x1a80 <__fixsfsi>
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

	long int ActuatorAngle1 =  theta1 + 105;
     c36:	ab 01       	movw	r20, r22
     c38:	bc 01       	movw	r22, r24
     c3a:	47 59       	subi	r20, 0x97	; 151
     c3c:	5f 4f       	sbci	r21, 0xFF	; 255
     c3e:	6f 4f       	sbci	r22, 0xFF	; 255
     c40:	7f 4f       	sbci	r23, 0xFF	; 255
	long int ActuatorAngle2 =  225 - theta2;
	long int ActuatorAngle3 =  300 - theta3;
	
	
	MoveDynamixel(7,ActuatorAngle1,speed);
     c42:	97 01       	movw	r18, r14
     c44:	86 01       	movw	r16, r12
     c46:	87 e0       	ldi	r24, 0x07	; 7
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	f6 da       	rcall	.-2580   	; 0x238 <MoveDynamixel>
	USARTReadStatusPacket();
     c4c:	c8 da       	rcall	.-2672   	; 0x1de <USARTReadStatusPacket>
	return;
}
void MoveRearRightLeg(float x, float y, float z, int speed)
{
	long int theta1 = atan2f(x,-y)*180/PI;
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
     c4e:	a3 01       	movw	r20, r6
     c50:	92 01       	movw	r18, r4
     c52:	69 81       	ldd	r22, Y+1	; 0x01
     c54:	7a 81       	ldd	r23, Y+2	; 0x02
     c56:	8b 81       	ldd	r24, Y+3	; 0x03
     c58:	9c 81       	ldd	r25, Y+4	; 0x04
     c5a:	e4 d5       	rcall	.+3016   	; 0x1824 <__addsf3>
     c5c:	24 ee       	ldi	r18, 0xE4	; 228
     c5e:	3e e2       	ldi	r19, 0x2E	; 46
     c60:	45 e6       	ldi	r20, 0x65	; 101
     c62:	52 e4       	ldi	r21, 0x42	; 66
     c64:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsf3>
     c68:	0b d7       	rcall	.+3606   	; 0x1a80 <__fixsfsi>
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

	long int ActuatorAngle1 =  theta1 + 105;
	long int ActuatorAngle2 =  225 - theta2;
     c6a:	0f 2e       	mov	r0, r31
     c6c:	f1 ee       	ldi	r31, 0xE1	; 225
     c6e:	4f 2e       	mov	r4, r31
     c70:	51 2c       	mov	r5, r1
     c72:	61 2c       	mov	r6, r1
     c74:	71 2c       	mov	r7, r1
     c76:	f0 2d       	mov	r31, r0
     c78:	93 01       	movw	r18, r6
     c7a:	82 01       	movw	r16, r4
     c7c:	06 1b       	sub	r16, r22
     c7e:	17 0b       	sbc	r17, r23
     c80:	28 0b       	sbc	r18, r24
     c82:	39 0b       	sbc	r19, r25
     c84:	b9 01       	movw	r22, r18
     c86:	a8 01       	movw	r20, r16
	long int ActuatorAngle3 =  300 - theta3;
	
	
	MoveDynamixel(7,ActuatorAngle1,speed);
	USARTReadStatusPacket();
	MoveDynamixel(9,ActuatorAngle2,speed);
     c88:	97 01       	movw	r18, r14
     c8a:	86 01       	movw	r16, r12
     c8c:	89 e0       	ldi	r24, 0x09	; 9
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	d3 da       	rcall	.-2650   	; 0x238 <MoveDynamixel>
	USARTReadStatusPacket();
     c92:	a5 da       	rcall	.-2742   	; 0x1de <USARTReadStatusPacket>
{
	long int theta1 = atan2f(x,-y)*180/PI;
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	44 e3       	ldi	r20, 0x34	; 52
     c9a:	53 e4       	ldi	r21, 0x43	; 67
     c9c:	c5 01       	movw	r24, r10
     c9e:	b4 01       	movw	r22, r8
     ca0:	f5 d7       	rcall	.+4074   	; 0x1c8c <__mulsf3>
     ca2:	28 ed       	ldi	r18, 0xD8	; 216
     ca4:	3f e0       	ldi	r19, 0x0F	; 15
     ca6:	49 e4       	ldi	r20, 0x49	; 73
     ca8:	50 e4       	ldi	r21, 0x40	; 64
     caa:	82 d6       	rcall	.+3332   	; 0x19b0 <__divsf3>
     cac:	e9 d6       	rcall	.+3538   	; 0x1a80 <__fixsfsi>

	long int ActuatorAngle1 =  theta1 + 105;
	long int ActuatorAngle2 =  225 - theta2;
	long int ActuatorAngle3 =  300 - theta3;
     cae:	0f 2e       	mov	r0, r31
     cb0:	fc e2       	ldi	r31, 0x2C	; 44
     cb2:	8f 2e       	mov	r8, r31
     cb4:	99 24       	eor	r9, r9
     cb6:	93 94       	inc	r9
     cb8:	a1 2c       	mov	r10, r1
     cba:	b1 2c       	mov	r11, r1
     cbc:	f0 2d       	mov	r31, r0
     cbe:	95 01       	movw	r18, r10
     cc0:	84 01       	movw	r16, r8
     cc2:	06 1b       	sub	r16, r22
     cc4:	17 0b       	sbc	r17, r23
     cc6:	28 0b       	sbc	r18, r24
     cc8:	39 0b       	sbc	r19, r25
     cca:	b9 01       	movw	r22, r18
     ccc:	a8 01       	movw	r20, r16
	
	MoveDynamixel(7,ActuatorAngle1,speed);
	USARTReadStatusPacket();
	MoveDynamixel(9,ActuatorAngle2,speed);
	USARTReadStatusPacket();
	MoveDynamixel(11,ActuatorAngle3,speed);
     cce:	97 01       	movw	r18, r14
     cd0:	86 01       	movw	r16, r12
     cd2:	8b e0       	ldi	r24, 0x0B	; 11
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	b0 da       	rcall	.-2720   	; 0x238 <MoveDynamixel>
	USARTReadStatusPacket();
     cd8:	82 da       	rcall	.-2812   	; 0x1de <USARTReadStatusPacket>
	return;
}
     cda:	60 96       	adiw	r28, 0x10	; 16
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	1f 91       	pop	r17
     cec:	0f 91       	pop	r16
     cee:	ff 90       	pop	r15
     cf0:	ef 90       	pop	r14
     cf2:	df 90       	pop	r13
     cf4:	cf 90       	pop	r12
     cf6:	bf 90       	pop	r11
     cf8:	af 90       	pop	r10
     cfa:	9f 90       	pop	r9
     cfc:	8f 90       	pop	r8
     cfe:	7f 90       	pop	r7
     d00:	6f 90       	pop	r6
     d02:	5f 90       	pop	r5
     d04:	4f 90       	pop	r4
     d06:	08 95       	ret

00000d08 <__vector_2>:
leg rearLeftLeg = {REAR_LEFT_LEG, 1, 3, 5};
leg rearRightLeg = {REAR_RIGHT_LEG, 7, 9, 11};


ISR(INT1_vect)
{	
     d08:	1f 92       	push	r1
     d0a:	0f 92       	push	r0
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	0f 92       	push	r0
     d10:	11 24       	eor	r1, r1
     d12:	0b b6       	in	r0, 0x3b	; 59
     d14:	0f 92       	push	r0
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
     d1a:	2f 93       	push	r18
     d1c:	3f 93       	push	r19
     d1e:	4f 93       	push	r20
     d20:	5f 93       	push	r21
     d22:	6f 93       	push	r22
     d24:	7f 93       	push	r23
     d26:	8f 93       	push	r24
     d28:	9f 93       	push	r25
     d2a:	af 93       	push	r26
     d2c:	bf 93       	push	r27
     d2e:	cf 93       	push	r28
     d30:	ef 93       	push	r30
     d32:	ff 93       	push	r31
	MoveDynamixel(frontLeftLeg.coxaJoint, actuatorPositions_g[frontLeftLeg.coxaJoint][currentPos_g],20);
     d34:	80 91 1a 01 	lds	r24, 0x011A
     d38:	90 91 1b 01 	lds	r25, 0x011B
     d3c:	c4 e1       	ldi	r28, 0x14	; 20
     d3e:	c8 9f       	mul	r28, r24
     d40:	f0 01       	movw	r30, r0
     d42:	c9 9f       	mul	r28, r25
     d44:	f0 0d       	add	r31, r0
     d46:	11 24       	eor	r1, r1
     d48:	20 91 20 01 	lds	r18, 0x0120
     d4c:	30 91 21 01 	lds	r19, 0x0121
     d50:	e2 0f       	add	r30, r18
     d52:	f3 1f       	adc	r31, r19
     d54:	ee 0f       	add	r30, r30
     d56:	ff 1f       	adc	r31, r31
     d58:	ee 0f       	add	r30, r30
     d5a:	ff 1f       	adc	r31, r31
     d5c:	ee 5d       	subi	r30, 0xDE	; 222
     d5e:	fe 4f       	sbci	r31, 0xFE	; 254
     d60:	40 81       	ld	r20, Z
     d62:	51 81       	ldd	r21, Z+1	; 0x01
     d64:	62 81       	ldd	r22, Z+2	; 0x02
     d66:	73 81       	ldd	r23, Z+3	; 0x03
     d68:	04 e1       	ldi	r16, 0x14	; 20
     d6a:	10 e0       	ldi	r17, 0x00	; 0
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	63 da       	rcall	.-2874   	; 0x238 <MoveDynamixel>
	USARTReadStatusPacket();
     d72:	35 da       	rcall	.-2966   	; 0x1de <USARTReadStatusPacket>
	MoveDynamixel(frontLeftLeg.femurJoint, actuatorPositions_g[frontLeftLeg.femurJoint][currentPos_g],20);
     d74:	80 91 1c 01 	lds	r24, 0x011C
     d78:	90 91 1d 01 	lds	r25, 0x011D
     d7c:	c8 9f       	mul	r28, r24
     d7e:	f0 01       	movw	r30, r0
     d80:	c9 9f       	mul	r28, r25
     d82:	f0 0d       	add	r31, r0
     d84:	11 24       	eor	r1, r1
     d86:	20 91 20 01 	lds	r18, 0x0120
     d8a:	30 91 21 01 	lds	r19, 0x0121
     d8e:	e2 0f       	add	r30, r18
     d90:	f3 1f       	adc	r31, r19
     d92:	ee 0f       	add	r30, r30
     d94:	ff 1f       	adc	r31, r31
     d96:	ee 0f       	add	r30, r30
     d98:	ff 1f       	adc	r31, r31
     d9a:	ee 5d       	subi	r30, 0xDE	; 222
     d9c:	fe 4f       	sbci	r31, 0xFE	; 254
     d9e:	40 81       	ld	r20, Z
     da0:	51 81       	ldd	r21, Z+1	; 0x01
     da2:	62 81       	ldd	r22, Z+2	; 0x02
     da4:	73 81       	ldd	r23, Z+3	; 0x03
     da6:	04 e1       	ldi	r16, 0x14	; 20
     da8:	10 e0       	ldi	r17, 0x00	; 0
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	44 da       	rcall	.-2936   	; 0x238 <MoveDynamixel>
	USARTReadStatusPacket();
     db0:	16 da       	rcall	.-3028   	; 0x1de <USARTReadStatusPacket>
	MoveDynamixel(frontLeftLeg.tibiaJoint, actuatorPositions_g[frontLeftLeg.tibiaJoint][currentPos_g],20);
     db2:	80 91 1e 01 	lds	r24, 0x011E
     db6:	90 91 1f 01 	lds	r25, 0x011F
     dba:	c8 9f       	mul	r28, r24
     dbc:	f0 01       	movw	r30, r0
     dbe:	c9 9f       	mul	r28, r25
     dc0:	f0 0d       	add	r31, r0
     dc2:	11 24       	eor	r1, r1
     dc4:	20 91 20 01 	lds	r18, 0x0120
     dc8:	30 91 21 01 	lds	r19, 0x0121
     dcc:	e2 0f       	add	r30, r18
     dce:	f3 1f       	adc	r31, r19
     dd0:	ee 0f       	add	r30, r30
     dd2:	ff 1f       	adc	r31, r31
     dd4:	ee 0f       	add	r30, r30
     dd6:	ff 1f       	adc	r31, r31
     dd8:	ee 5d       	subi	r30, 0xDE	; 222
     dda:	fe 4f       	sbci	r31, 0xFE	; 254
     ddc:	40 81       	ld	r20, Z
     dde:	51 81       	ldd	r21, Z+1	; 0x01
     de0:	62 81       	ldd	r22, Z+2	; 0x02
     de2:	73 81       	ldd	r23, Z+3	; 0x03
     de4:	04 e1       	ldi	r16, 0x14	; 20
     de6:	10 e0       	ldi	r17, 0x00	; 0
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	25 da       	rcall	.-2998   	; 0x238 <MoveDynamixel>
	USARTReadStatusPacket();
     dee:	f7 d9       	rcall	.-3090   	; 0x1de <USARTReadStatusPacket>
    
    MoveDynamixel(frontRightLeg.coxaJoint, actuatorPositions_g[frontLeftLeg.coxaJoint][currentPos_g],20);
     df0:	80 91 1a 01 	lds	r24, 0x011A
     df4:	90 91 1b 01 	lds	r25, 0x011B
     df8:	c8 9f       	mul	r28, r24
     dfa:	f0 01       	movw	r30, r0
     dfc:	c9 9f       	mul	r28, r25
     dfe:	f0 0d       	add	r31, r0
     e00:	11 24       	eor	r1, r1
     e02:	80 91 20 01 	lds	r24, 0x0120
     e06:	90 91 21 01 	lds	r25, 0x0121
     e0a:	e8 0f       	add	r30, r24
     e0c:	f9 1f       	adc	r31, r25
     e0e:	ee 0f       	add	r30, r30
     e10:	ff 1f       	adc	r31, r31
     e12:	ee 0f       	add	r30, r30
     e14:	ff 1f       	adc	r31, r31
     e16:	ee 5d       	subi	r30, 0xDE	; 222
     e18:	fe 4f       	sbci	r31, 0xFE	; 254
     e1a:	40 81       	ld	r20, Z
     e1c:	51 81       	ldd	r21, Z+1	; 0x01
     e1e:	62 81       	ldd	r22, Z+2	; 0x02
     e20:	73 81       	ldd	r23, Z+3	; 0x03
     e22:	04 e1       	ldi	r16, 0x14	; 20
     e24:	10 e0       	ldi	r17, 0x00	; 0
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	80 91 12 01 	lds	r24, 0x0112
     e2e:	90 91 13 01 	lds	r25, 0x0113
     e32:	02 da       	rcall	.-3068   	; 0x238 <MoveDynamixel>
	USARTReadStatusPacket();
     e34:	d4 d9       	rcall	.-3160   	; 0x1de <USARTReadStatusPacket>
	MoveDynamixel(frontRightLeg.femurJoint, actuatorPositions_g[frontLeftLeg.femurJoint][currentPos_g],20);
     e36:	80 91 1c 01 	lds	r24, 0x011C
     e3a:	90 91 1d 01 	lds	r25, 0x011D
     e3e:	c8 9f       	mul	r28, r24
     e40:	f0 01       	movw	r30, r0
     e42:	c9 9f       	mul	r28, r25
     e44:	f0 0d       	add	r31, r0
     e46:	11 24       	eor	r1, r1
     e48:	80 91 20 01 	lds	r24, 0x0120
     e4c:	90 91 21 01 	lds	r25, 0x0121
     e50:	e8 0f       	add	r30, r24
     e52:	f9 1f       	adc	r31, r25
     e54:	ee 0f       	add	r30, r30
     e56:	ff 1f       	adc	r31, r31
     e58:	ee 0f       	add	r30, r30
     e5a:	ff 1f       	adc	r31, r31
     e5c:	ee 5d       	subi	r30, 0xDE	; 222
     e5e:	fe 4f       	sbci	r31, 0xFE	; 254
     e60:	40 81       	ld	r20, Z
     e62:	51 81       	ldd	r21, Z+1	; 0x01
     e64:	62 81       	ldd	r22, Z+2	; 0x02
     e66:	73 81       	ldd	r23, Z+3	; 0x03
     e68:	04 e1       	ldi	r16, 0x14	; 20
     e6a:	10 e0       	ldi	r17, 0x00	; 0
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	80 91 14 01 	lds	r24, 0x0114
     e74:	90 91 15 01 	lds	r25, 0x0115
     e78:	df d9       	rcall	.-3138   	; 0x238 <MoveDynamixel>
	USARTReadStatusPacket();
     e7a:	b1 d9       	rcall	.-3230   	; 0x1de <USARTReadStatusPacket>
	MoveDynamixel(frontRightLeg.tibiaJoint, actuatorPositions_g[frontLeftLeg.tibiaJoint][currentPos_g],20);
     e7c:	80 91 1e 01 	lds	r24, 0x011E
     e80:	90 91 1f 01 	lds	r25, 0x011F
     e84:	c8 9f       	mul	r28, r24
     e86:	f0 01       	movw	r30, r0
     e88:	c9 9f       	mul	r28, r25
     e8a:	f0 0d       	add	r31, r0
     e8c:	11 24       	eor	r1, r1
     e8e:	80 91 20 01 	lds	r24, 0x0120
     e92:	90 91 21 01 	lds	r25, 0x0121
     e96:	e8 0f       	add	r30, r24
     e98:	f9 1f       	adc	r31, r25
     e9a:	ee 0f       	add	r30, r30
     e9c:	ff 1f       	adc	r31, r31
     e9e:	ee 0f       	add	r30, r30
     ea0:	ff 1f       	adc	r31, r31
     ea2:	ee 5d       	subi	r30, 0xDE	; 222
     ea4:	fe 4f       	sbci	r31, 0xFE	; 254
     ea6:	40 81       	ld	r20, Z
     ea8:	51 81       	ldd	r21, Z+1	; 0x01
     eaa:	62 81       	ldd	r22, Z+2	; 0x02
     eac:	73 81       	ldd	r23, Z+3	; 0x03
     eae:	04 e1       	ldi	r16, 0x14	; 20
     eb0:	10 e0       	ldi	r17, 0x00	; 0
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	80 91 16 01 	lds	r24, 0x0116
     eba:	90 91 17 01 	lds	r25, 0x0117
     ebe:	bc d9       	rcall	.-3208   	; 0x238 <MoveDynamixel>
	USARTReadStatusPacket();
     ec0:	8e d9       	rcall	.-3300   	; 0x1de <USARTReadStatusPacket>
    
    MoveDynamixel(rearRightLeg.coxaJoint, actuatorPositions_g[frontLeftLeg.coxaJoint][currentPos_g],20);
     ec2:	80 91 1a 01 	lds	r24, 0x011A
     ec6:	90 91 1b 01 	lds	r25, 0x011B
     eca:	c8 9f       	mul	r28, r24
     ecc:	f0 01       	movw	r30, r0
     ece:	c9 9f       	mul	r28, r25
     ed0:	f0 0d       	add	r31, r0
     ed2:	11 24       	eor	r1, r1
     ed4:	80 91 20 01 	lds	r24, 0x0120
     ed8:	90 91 21 01 	lds	r25, 0x0121
     edc:	e8 0f       	add	r30, r24
     ede:	f9 1f       	adc	r31, r25
     ee0:	ee 0f       	add	r30, r30
     ee2:	ff 1f       	adc	r31, r31
     ee4:	ee 0f       	add	r30, r30
     ee6:	ff 1f       	adc	r31, r31
     ee8:	ee 5d       	subi	r30, 0xDE	; 222
     eea:	fe 4f       	sbci	r31, 0xFE	; 254
     eec:	40 81       	ld	r20, Z
     eee:	51 81       	ldd	r21, Z+1	; 0x01
     ef0:	62 81       	ldd	r22, Z+2	; 0x02
     ef2:	73 81       	ldd	r23, Z+3	; 0x03
     ef4:	04 e1       	ldi	r16, 0x14	; 20
     ef6:	10 e0       	ldi	r17, 0x00	; 0
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	80 91 02 01 	lds	r24, 0x0102
     f00:	90 91 03 01 	lds	r25, 0x0103
     f04:	99 d9       	rcall	.-3278   	; 0x238 <MoveDynamixel>
	USARTReadStatusPacket();
     f06:	6b d9       	rcall	.-3370   	; 0x1de <USARTReadStatusPacket>
	MoveDynamixel(rearRightLeg.femurJoint, actuatorPositions_g[frontLeftLeg.femurJoint][currentPos_g],20);
     f08:	80 91 1c 01 	lds	r24, 0x011C
     f0c:	90 91 1d 01 	lds	r25, 0x011D
     f10:	c8 9f       	mul	r28, r24
     f12:	f0 01       	movw	r30, r0
     f14:	c9 9f       	mul	r28, r25
     f16:	f0 0d       	add	r31, r0
     f18:	11 24       	eor	r1, r1
     f1a:	80 91 20 01 	lds	r24, 0x0120
     f1e:	90 91 21 01 	lds	r25, 0x0121
     f22:	e8 0f       	add	r30, r24
     f24:	f9 1f       	adc	r31, r25
     f26:	ee 0f       	add	r30, r30
     f28:	ff 1f       	adc	r31, r31
     f2a:	ee 0f       	add	r30, r30
     f2c:	ff 1f       	adc	r31, r31
     f2e:	ee 5d       	subi	r30, 0xDE	; 222
     f30:	fe 4f       	sbci	r31, 0xFE	; 254
     f32:	40 81       	ld	r20, Z
     f34:	51 81       	ldd	r21, Z+1	; 0x01
     f36:	62 81       	ldd	r22, Z+2	; 0x02
     f38:	73 81       	ldd	r23, Z+3	; 0x03
     f3a:	04 e1       	ldi	r16, 0x14	; 20
     f3c:	10 e0       	ldi	r17, 0x00	; 0
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	80 91 04 01 	lds	r24, 0x0104
     f46:	90 91 05 01 	lds	r25, 0x0105
     f4a:	76 d9       	rcall	.-3348   	; 0x238 <MoveDynamixel>
	USARTReadStatusPacket();
     f4c:	48 d9       	rcall	.-3440   	; 0x1de <USARTReadStatusPacket>
	MoveDynamixel(rearRightLeg.tibiaJoint, actuatorPositions_g[frontLeftLeg.tibiaJoint][currentPos_g],20);
     f4e:	80 91 1e 01 	lds	r24, 0x011E
     f52:	90 91 1f 01 	lds	r25, 0x011F
     f56:	c8 9f       	mul	r28, r24
     f58:	f0 01       	movw	r30, r0
     f5a:	c9 9f       	mul	r28, r25
     f5c:	f0 0d       	add	r31, r0
     f5e:	11 24       	eor	r1, r1
     f60:	80 91 20 01 	lds	r24, 0x0120
     f64:	90 91 21 01 	lds	r25, 0x0121
     f68:	e8 0f       	add	r30, r24
     f6a:	f9 1f       	adc	r31, r25
     f6c:	ee 0f       	add	r30, r30
     f6e:	ff 1f       	adc	r31, r31
     f70:	ee 0f       	add	r30, r30
     f72:	ff 1f       	adc	r31, r31
     f74:	ee 5d       	subi	r30, 0xDE	; 222
     f76:	fe 4f       	sbci	r31, 0xFE	; 254
     f78:	40 81       	ld	r20, Z
     f7a:	51 81       	ldd	r21, Z+1	; 0x01
     f7c:	62 81       	ldd	r22, Z+2	; 0x02
     f7e:	73 81       	ldd	r23, Z+3	; 0x03
     f80:	04 e1       	ldi	r16, 0x14	; 20
     f82:	10 e0       	ldi	r17, 0x00	; 0
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	80 91 06 01 	lds	r24, 0x0106
     f8c:	90 91 07 01 	lds	r25, 0x0107
     f90:	53 d9       	rcall	.-3418   	; 0x238 <MoveDynamixel>
	USARTReadStatusPacket();
     f92:	25 d9       	rcall	.-3510   	; 0x1de <USARTReadStatusPacket>
    
    MoveDynamixel(rearLeftLeg.coxaJoint, actuatorPositions_g[frontLeftLeg.coxaJoint][currentPos_g],20);
     f94:	80 91 1a 01 	lds	r24, 0x011A
     f98:	90 91 1b 01 	lds	r25, 0x011B
     f9c:	c8 9f       	mul	r28, r24
     f9e:	f0 01       	movw	r30, r0
     fa0:	c9 9f       	mul	r28, r25
     fa2:	f0 0d       	add	r31, r0
     fa4:	11 24       	eor	r1, r1
     fa6:	80 91 20 01 	lds	r24, 0x0120
     faa:	90 91 21 01 	lds	r25, 0x0121
     fae:	e8 0f       	add	r30, r24
     fb0:	f9 1f       	adc	r31, r25
     fb2:	ee 0f       	add	r30, r30
     fb4:	ff 1f       	adc	r31, r31
     fb6:	ee 0f       	add	r30, r30
     fb8:	ff 1f       	adc	r31, r31
     fba:	ee 5d       	subi	r30, 0xDE	; 222
     fbc:	fe 4f       	sbci	r31, 0xFE	; 254
     fbe:	40 81       	ld	r20, Z
     fc0:	51 81       	ldd	r21, Z+1	; 0x01
     fc2:	62 81       	ldd	r22, Z+2	; 0x02
     fc4:	73 81       	ldd	r23, Z+3	; 0x03
     fc6:	04 e1       	ldi	r16, 0x14	; 20
     fc8:	10 e0       	ldi	r17, 0x00	; 0
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	80 91 0a 01 	lds	r24, 0x010A
     fd2:	90 91 0b 01 	lds	r25, 0x010B
     fd6:	30 d9       	rcall	.-3488   	; 0x238 <MoveDynamixel>
	USARTReadStatusPacket();
     fd8:	02 d9       	rcall	.-3580   	; 0x1de <USARTReadStatusPacket>
	MoveDynamixel(rearLeftLeg.femurJoint, actuatorPositions_g[frontLeftLeg.femurJoint][currentPos_g],20);
     fda:	80 91 1c 01 	lds	r24, 0x011C
     fde:	90 91 1d 01 	lds	r25, 0x011D
     fe2:	c8 9f       	mul	r28, r24
     fe4:	f0 01       	movw	r30, r0
     fe6:	c9 9f       	mul	r28, r25
     fe8:	f0 0d       	add	r31, r0
     fea:	11 24       	eor	r1, r1
     fec:	80 91 20 01 	lds	r24, 0x0120
     ff0:	90 91 21 01 	lds	r25, 0x0121
     ff4:	e8 0f       	add	r30, r24
     ff6:	f9 1f       	adc	r31, r25
     ff8:	ee 0f       	add	r30, r30
     ffa:	ff 1f       	adc	r31, r31
     ffc:	ee 0f       	add	r30, r30
     ffe:	ff 1f       	adc	r31, r31
    1000:	ee 5d       	subi	r30, 0xDE	; 222
    1002:	fe 4f       	sbci	r31, 0xFE	; 254
    1004:	40 81       	ld	r20, Z
    1006:	51 81       	ldd	r21, Z+1	; 0x01
    1008:	62 81       	ldd	r22, Z+2	; 0x02
    100a:	73 81       	ldd	r23, Z+3	; 0x03
    100c:	04 e1       	ldi	r16, 0x14	; 20
    100e:	10 e0       	ldi	r17, 0x00	; 0
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	80 91 0c 01 	lds	r24, 0x010C
    1018:	90 91 0d 01 	lds	r25, 0x010D
    101c:	0d d9       	rcall	.-3558   	; 0x238 <MoveDynamixel>
	USARTReadStatusPacket();
    101e:	df d8       	rcall	.-3650   	; 0x1de <USARTReadStatusPacket>
	MoveDynamixel(rearLeftLeg.tibiaJoint, actuatorPositions_g[frontLeftLeg.tibiaJoint][currentPos_g],20);
    1020:	80 91 1e 01 	lds	r24, 0x011E
    1024:	90 91 1f 01 	lds	r25, 0x011F
    1028:	c8 9f       	mul	r28, r24
    102a:	f0 01       	movw	r30, r0
    102c:	c9 9f       	mul	r28, r25
    102e:	f0 0d       	add	r31, r0
    1030:	11 24       	eor	r1, r1
    1032:	80 91 20 01 	lds	r24, 0x0120
    1036:	90 91 21 01 	lds	r25, 0x0121
    103a:	e8 0f       	add	r30, r24
    103c:	f9 1f       	adc	r31, r25
    103e:	ee 0f       	add	r30, r30
    1040:	ff 1f       	adc	r31, r31
    1042:	ee 0f       	add	r30, r30
    1044:	ff 1f       	adc	r31, r31
    1046:	ee 5d       	subi	r30, 0xDE	; 222
    1048:	fe 4f       	sbci	r31, 0xFE	; 254
    104a:	40 81       	ld	r20, Z
    104c:	51 81       	ldd	r21, Z+1	; 0x01
    104e:	62 81       	ldd	r22, Z+2	; 0x02
    1050:	73 81       	ldd	r23, Z+3	; 0x03
    1052:	04 e1       	ldi	r16, 0x14	; 20
    1054:	10 e0       	ldi	r17, 0x00	; 0
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	80 91 0e 01 	lds	r24, 0x010E
    105e:	90 91 0f 01 	lds	r25, 0x010F
    1062:	ea d8       	rcall	.-3628   	; 0x238 <MoveDynamixel>
	USARTReadStatusPacket();
    1064:	bc d8       	rcall	.-3720   	; 0x1de <USARTReadStatusPacket>
    
	if (currentPos_g > 8)
    1066:	80 91 20 01 	lds	r24, 0x0120
    106a:	90 91 21 01 	lds	r25, 0x0121
    106e:	09 97       	sbiw	r24, 0x09	; 9
    1070:	24 f0       	brlt	.+8      	; 0x107a <__vector_2+0x372>
    {
        currentPos_g = 0;
    1072:	10 92 21 01 	sts	0x0121, r1
    1076:	10 92 20 01 	sts	0x0120, r1
    }
    currentPos_g++;
    107a:	80 91 20 01 	lds	r24, 0x0120
    107e:	90 91 21 01 	lds	r25, 0x0121
    1082:	01 96       	adiw	r24, 0x01	; 1
    1084:	90 93 21 01 	sts	0x0121, r25
    1088:	80 93 20 01 	sts	0x0120, r24
} 
    108c:	ff 91       	pop	r31
    108e:	ef 91       	pop	r30
    1090:	cf 91       	pop	r28
    1092:	bf 91       	pop	r27
    1094:	af 91       	pop	r26
    1096:	9f 91       	pop	r25
    1098:	8f 91       	pop	r24
    109a:	7f 91       	pop	r23
    109c:	6f 91       	pop	r22
    109e:	5f 91       	pop	r21
    10a0:	4f 91       	pop	r20
    10a2:	3f 91       	pop	r19
    10a4:	2f 91       	pop	r18
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	0f 90       	pop	r0
    10ac:	0b be       	out	0x3b, r0	; 59
    10ae:	0f 90       	pop	r0
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	0f 90       	pop	r0
    10b4:	1f 90       	pop	r1
    10b6:	18 95       	reti

000010b8 <CalcStraightPath>:




void CalcStraightPath(leg currentLeg, int numberOfPositions, float x1, float y1, float z1, float x2, float y2, float z2)
{
    10b8:	2f 92       	push	r2
    10ba:	3f 92       	push	r3
    10bc:	4f 92       	push	r4
    10be:	5f 92       	push	r5
    10c0:	6f 92       	push	r6
    10c2:	7f 92       	push	r7
    10c4:	8f 92       	push	r8
    10c6:	9f 92       	push	r9
    10c8:	af 92       	push	r10
    10ca:	bf 92       	push	r11
    10cc:	cf 92       	push	r12
    10ce:	df 92       	push	r13
    10d0:	ef 92       	push	r14
    10d2:	ff 92       	push	r15
    10d4:	0f 93       	push	r16
    10d6:	1f 93       	push	r17
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	e4 97       	sbiw	r28, 0x34	; 52
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	f8 94       	cli
    10e6:	de bf       	out	0x3e, r29	; 62
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	cd bf       	out	0x3d, r28	; 61
    10ec:	29 83       	std	Y+1, r18	; 0x01
    10ee:	3a 83       	std	Y+2, r19	; 0x02
    10f0:	4b 83       	std	Y+3, r20	; 0x03
    10f2:	5c 83       	std	Y+4, r21	; 0x04
    10f4:	6d 83       	std	Y+5, r22	; 0x05
    10f6:	7e 83       	std	Y+6, r23	; 0x06
    10f8:	8f 83       	std	Y+7, r24	; 0x07
    10fa:	98 87       	std	Y+8, r25	; 0x08
    10fc:	18 a3       	std	Y+32, r17	; 0x20
    10fe:	0f 8f       	std	Y+31, r16	; 0x1f
    1100:	09 81       	ldd	r16, Y+1	; 0x01
    1102:	1a 81       	ldd	r17, Y+2	; 0x02
    1104:	2b 80       	ldd	r2, Y+3	; 0x03
    1106:	3c 80       	ldd	r3, Y+4	; 0x04
    1108:	2d 81       	ldd	r18, Y+5	; 0x05
    110a:	3e 81       	ldd	r19, Y+6	; 0x06
    110c:	3a 8b       	std	Y+18, r19	; 0x12
    110e:	29 8b       	std	Y+17, r18	; 0x11
    1110:	4f 81       	ldd	r20, Y+7	; 0x07
    1112:	58 85       	ldd	r21, Y+8	; 0x08
    1114:	5e 8b       	std	Y+22, r21	; 0x16
    1116:	4d 8b       	std	Y+21, r20	; 0x15
    long int theta1;
    long int theta2;
    long int theta3;
    if ((currentLeg.legNumber == FRONT_LEFT_LEG) | (currentLeg.legNumber == FRONT_RIGHT_LEG))
    1118:	c8 01       	movw	r24, r16
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	02 97       	sbiw	r24, 0x02	; 2
    111e:	88 f4       	brcc	.+34     	; 0x1142 <CalcStraightPath+0x8a>
    {
        x1 *= -1;
    1120:	f7 fa       	bst	r15, 7
    1122:	f0 94       	com	r15
    1124:	f7 f8       	bld	r15, 7
    1126:	f0 94       	com	r15
        x2 *= -1;
    1128:	61 96       	adiw	r28, 0x11	; 17
    112a:	8c ad       	ldd	r24, Y+60	; 0x3c
    112c:	9d ad       	ldd	r25, Y+61	; 0x3d
    112e:	ae ad       	ldd	r26, Y+62	; 0x3e
    1130:	bf ad       	ldd	r27, Y+63	; 0x3f
    1132:	61 97       	sbiw	r28, 0x11	; 17
    1134:	b0 58       	subi	r27, 0x80	; 128
    1136:	61 96       	adiw	r28, 0x11	; 17
    1138:	8c af       	std	Y+60, r24	; 0x3c
    113a:	9d af       	std	Y+61, r25	; 0x3d
    113c:	ae af       	std	Y+62, r26	; 0x3e
    113e:	bf af       	std	Y+63, r27	; 0x3f
    1140:	61 97       	sbiw	r28, 0x11	; 17
    }
    if ((currentLeg.legNumber == REAR_RIGHT_LEG) | (currentLeg.legNumber == REAR_LEFT_LEG))
    1142:	c8 01       	movw	r24, r16
    1144:	03 97       	sbiw	r24, 0x03	; 3
    1146:	02 97       	sbiw	r24, 0x02	; 2
    1148:	88 f4       	brcc	.+34     	; 0x116c <CalcStraightPath+0xb4>
    {
        y1 *= -1;
    114a:	b7 fa       	bst	r11, 7
    114c:	b0 94       	com	r11
    114e:	b7 f8       	bld	r11, 7
    1150:	b0 94       	com	r11
        y2 *= -1;
    1152:	65 96       	adiw	r28, 0x15	; 21
    1154:	2c ad       	ldd	r18, Y+60	; 0x3c
    1156:	3d ad       	ldd	r19, Y+61	; 0x3d
    1158:	4e ad       	ldd	r20, Y+62	; 0x3e
    115a:	5f ad       	ldd	r21, Y+63	; 0x3f
    115c:	65 97       	sbiw	r28, 0x15	; 21
    115e:	50 58       	subi	r21, 0x80	; 128
    1160:	65 96       	adiw	r28, 0x15	; 21
    1162:	2c af       	std	Y+60, r18	; 0x3c
    1164:	3d af       	std	Y+61, r19	; 0x3d
    1166:	4e af       	std	Y+62, r20	; 0x3e
    1168:	5f af       	std	Y+63, r21	; 0x3f
    116a:	65 97       	sbiw	r28, 0x15	; 21
    }
    float deltaX = (x2 - x1) / numberOfPositions;
    116c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    116e:	58 a1       	ldd	r21, Y+32	; 0x20
    1170:	ba 01       	movw	r22, r20
    1172:	88 27       	eor	r24, r24
    1174:	77 fd       	sbrc	r23, 7
    1176:	80 95       	com	r24
    1178:	98 2f       	mov	r25, r24
    117a:	b5 d4       	rcall	.+2410   	; 0x1ae6 <__floatsisf>
    117c:	2b 01       	movw	r4, r22
    117e:	3c 01       	movw	r6, r24
    1180:	a7 01       	movw	r20, r14
    1182:	96 01       	movw	r18, r12
    1184:	61 96       	adiw	r28, 0x11	; 17
    1186:	6c ad       	ldd	r22, Y+60	; 0x3c
    1188:	7d ad       	ldd	r23, Y+61	; 0x3d
    118a:	8e ad       	ldd	r24, Y+62	; 0x3e
    118c:	9f ad       	ldd	r25, Y+63	; 0x3f
    118e:	61 97       	sbiw	r28, 0x11	; 17
    1190:	48 d3       	rcall	.+1680   	; 0x1822 <__subsf3>
    1192:	a3 01       	movw	r20, r6
    1194:	92 01       	movw	r18, r4
    1196:	0c d4       	rcall	.+2072   	; 0x19b0 <__divsf3>
    1198:	69 a3       	std	Y+33, r22	; 0x21
    119a:	7a a3       	std	Y+34, r23	; 0x22
    119c:	8b a3       	std	Y+35, r24	; 0x23
    119e:	9c a3       	std	Y+36, r25	; 0x24
    float deltaY = (y2 - y1) / numberOfPositions;
    11a0:	a5 01       	movw	r20, r10
    11a2:	94 01       	movw	r18, r8
    11a4:	65 96       	adiw	r28, 0x15	; 21
    11a6:	6c ad       	ldd	r22, Y+60	; 0x3c
    11a8:	7d ad       	ldd	r23, Y+61	; 0x3d
    11aa:	8e ad       	ldd	r24, Y+62	; 0x3e
    11ac:	9f ad       	ldd	r25, Y+63	; 0x3f
    11ae:	65 97       	sbiw	r28, 0x15	; 21
    11b0:	38 d3       	rcall	.+1648   	; 0x1822 <__subsf3>
    11b2:	a3 01       	movw	r20, r6
    11b4:	92 01       	movw	r18, r4
    11b6:	fc d3       	rcall	.+2040   	; 0x19b0 <__divsf3>
    11b8:	6d a3       	std	Y+37, r22	; 0x25
    11ba:	7e a3       	std	Y+38, r23	; 0x26
    11bc:	8f a3       	std	Y+39, r24	; 0x27
    11be:	98 a7       	std	Y+40, r25	; 0x28
    float deltaZ = (z2 - z1) / numberOfPositions;
    11c0:	2d 96       	adiw	r28, 0x0d	; 13
    11c2:	2c ad       	ldd	r18, Y+60	; 0x3c
    11c4:	3d ad       	ldd	r19, Y+61	; 0x3d
    11c6:	4e ad       	ldd	r20, Y+62	; 0x3e
    11c8:	5f ad       	ldd	r21, Y+63	; 0x3f
    11ca:	2d 97       	sbiw	r28, 0x0d	; 13
    11cc:	69 96       	adiw	r28, 0x19	; 25
    11ce:	6c ad       	ldd	r22, Y+60	; 0x3c
    11d0:	7d ad       	ldd	r23, Y+61	; 0x3d
    11d2:	8e ad       	ldd	r24, Y+62	; 0x3e
    11d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    11d6:	69 97       	sbiw	r28, 0x19	; 25
    11d8:	24 d3       	rcall	.+1608   	; 0x1822 <__subsf3>
    11da:	a3 01       	movw	r20, r6
    11dc:	92 01       	movw	r18, r4
    11de:	e8 d3       	rcall	.+2000   	; 0x19b0 <__divsf3>
    11e0:	69 a7       	std	Y+41, r22	; 0x29
    11e2:	7a a7       	std	Y+42, r23	; 0x2a
    11e4:	8b a7       	std	Y+43, r24	; 0x2b
    11e6:	9c a7       	std	Y+44, r25	; 0x2c
    
    float x,y,z;
    
    for (int i = 0; i < numberOfPositions; i++)
    11e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11ea:	98 a1       	ldd	r25, Y+32	; 0x20
    11ec:	18 16       	cp	r1, r24
    11ee:	19 06       	cpc	r1, r25
    11f0:	0c f0       	brlt	.+2      	; 0x11f4 <CalcStraightPath+0x13c>
    11f2:	ec c1       	rjmp	.+984    	; 0x15cc <CalcStraightPath+0x514>
    11f4:	20 e5       	ldi	r18, 0x50	; 80
    11f6:	22 9d       	mul	r18, r2
    11f8:	c0 01       	movw	r24, r0
    11fa:	23 9d       	mul	r18, r3
    11fc:	90 0d       	add	r25, r0
    11fe:	11 24       	eor	r1, r1
    1200:	dc 01       	movw	r26, r24
    1202:	ae 5d       	subi	r26, 0xDE	; 222
    1204:	be 4f       	sbci	r27, 0xFE	; 254
    1206:	b8 8f       	std	Y+24, r27	; 0x18
    1208:	af 8b       	std	Y+23, r26	; 0x17
    120a:	e9 89       	ldd	r30, Y+17	; 0x11
    120c:	fa 89       	ldd	r31, Y+18	; 0x12
    120e:	2e 9f       	mul	r18, r30
    1210:	c0 01       	movw	r24, r0
    1212:	2f 9f       	mul	r18, r31
    1214:	90 0d       	add	r25, r0
    1216:	11 24       	eor	r1, r1
    1218:	ac 01       	movw	r20, r24
    121a:	4e 5d       	subi	r20, 0xDE	; 222
    121c:	5e 4f       	sbci	r21, 0xFE	; 254
    121e:	5a 8f       	std	Y+26, r21	; 0x1a
    1220:	49 8f       	std	Y+25, r20	; 0x19
    1222:	ad 89       	ldd	r26, Y+21	; 0x15
    1224:	be 89       	ldd	r27, Y+22	; 0x16
    1226:	2a 9f       	mul	r18, r26
    1228:	c0 01       	movw	r24, r0
    122a:	2b 9f       	mul	r18, r27
    122c:	90 0d       	add	r25, r0
    122e:	11 24       	eor	r1, r1
    1230:	fc 01       	movw	r30, r24
    1232:	ee 5d       	subi	r30, 0xDE	; 222
    1234:	fe 4f       	sbci	r31, 0xFE	; 254
    1236:	fe 8b       	std	Y+22, r31	; 0x16
    1238:	ed 8b       	std	Y+21, r30	; 0x15
    123a:	21 2c       	mov	r2, r1
    123c:	31 2c       	mov	r3, r1
			}
            case REAR_LEFT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 195;
				actuatorPositions_g[currentLeg.femurJoint][i] =  225 - theta2;
				actuatorPositions_g[currentLeg.tibiaJoint][i] =  300 - theta3;
    123e:	cd a6       	std	Y+45, r12	; 0x2d
    1240:	de a6       	std	Y+46, r13	; 0x2e
    1242:	ef a6       	std	Y+47, r14	; 0x2f
    1244:	f8 aa       	std	Y+48, r15	; 0x30
    1246:	89 aa       	std	Y+49, r8	; 0x31
    1248:	9a aa       	std	Y+50, r9	; 0x32
    124a:	ab aa       	std	Y+51, r10	; 0x33
    124c:	bc aa       	std	Y+52, r11	; 0x34
    
    float x,y,z;
    
    for (int i = 0; i < numberOfPositions; i++)
    {
        x = x1 + (i + 1) * deltaX;
    124e:	ff ef       	ldi	r31, 0xFF	; 255
    1250:	2f 1a       	sub	r2, r31
    1252:	3f 0a       	sbc	r3, r31
    1254:	b1 01       	movw	r22, r2
    1256:	88 27       	eor	r24, r24
    1258:	77 fd       	sbrc	r23, 7
    125a:	80 95       	com	r24
    125c:	98 2f       	mov	r25, r24
    125e:	43 d4       	rcall	.+2182   	; 0x1ae6 <__floatsisf>
    1260:	2b 01       	movw	r4, r22
    1262:	3c 01       	movw	r6, r24
    1264:	29 a1       	ldd	r18, Y+33	; 0x21
    1266:	3a a1       	ldd	r19, Y+34	; 0x22
    1268:	4b a1       	ldd	r20, Y+35	; 0x23
    126a:	5c a1       	ldd	r21, Y+36	; 0x24
    126c:	0f d5       	rcall	.+2590   	; 0x1c8c <__mulsf3>
    126e:	2d a5       	ldd	r18, Y+45	; 0x2d
    1270:	3e a5       	ldd	r19, Y+46	; 0x2e
    1272:	4f a5       	ldd	r20, Y+47	; 0x2f
    1274:	58 a9       	ldd	r21, Y+48	; 0x30
    1276:	d6 d2       	rcall	.+1452   	; 0x1824 <__addsf3>
    1278:	4b 01       	movw	r8, r22
    127a:	5c 01       	movw	r10, r24
        y = y1 + (i + 1) * deltaY;
    127c:	a3 01       	movw	r20, r6
    127e:	92 01       	movw	r18, r4
    1280:	6d a1       	ldd	r22, Y+37	; 0x25
    1282:	7e a1       	ldd	r23, Y+38	; 0x26
    1284:	8f a1       	ldd	r24, Y+39	; 0x27
    1286:	98 a5       	ldd	r25, Y+40	; 0x28
    1288:	01 d5       	rcall	.+2562   	; 0x1c8c <__mulsf3>
    128a:	29 a9       	ldd	r18, Y+49	; 0x31
    128c:	3a a9       	ldd	r19, Y+50	; 0x32
    128e:	4b a9       	ldd	r20, Y+51	; 0x33
    1290:	5c a9       	ldd	r21, Y+52	; 0x34
    1292:	c8 d2       	rcall	.+1424   	; 0x1824 <__addsf3>
    1294:	6b 01       	movw	r12, r22
    1296:	7c 01       	movw	r14, r24
        z = z1 + (i + 1) * deltaZ;
    1298:	a3 01       	movw	r20, r6
    129a:	92 01       	movw	r18, r4
    129c:	69 a5       	ldd	r22, Y+41	; 0x29
    129e:	7a a5       	ldd	r23, Y+42	; 0x2a
    12a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    12a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    12a4:	f3 d4       	rcall	.+2534   	; 0x1c8c <__mulsf3>
    12a6:	2d 96       	adiw	r28, 0x0d	; 13
    12a8:	2c ad       	ldd	r18, Y+60	; 0x3c
    12aa:	3d ad       	ldd	r19, Y+61	; 0x3d
    12ac:	4e ad       	ldd	r20, Y+62	; 0x3e
    12ae:	5f ad       	ldd	r21, Y+63	; 0x3f
    12b0:	2d 97       	sbiw	r28, 0x0d	; 13
    12b2:	b8 d2       	rcall	.+1392   	; 0x1824 <__addsf3>
    12b4:	69 87       	std	Y+9, r22	; 0x09
    12b6:	7a 87       	std	Y+10, r23	; 0x0a
    12b8:	8b 87       	std	Y+11, r24	; 0x0b
    12ba:	9c 87       	std	Y+12, r25	; 0x0c
      
        // lös inverskinematik för lederna.
        theta1 = atan2f(x,y)*180/PI;
    12bc:	a7 01       	movw	r20, r14
    12be:	96 01       	movw	r18, r12
    12c0:	c5 01       	movw	r24, r10
    12c2:	b4 01       	movw	r22, r8
    12c4:	22 d3       	rcall	.+1604   	; 0x190a <atan2>
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	44 e3       	ldi	r20, 0x34	; 52
    12cc:	53 e4       	ldi	r21, 0x43	; 67
    12ce:	de d4       	rcall	.+2492   	; 0x1c8c <__mulsf3>
    12d0:	28 ed       	ldi	r18, 0xD8	; 216
    12d2:	3f e0       	ldi	r19, 0x0F	; 15
    12d4:	49 e4       	ldi	r20, 0x49	; 73
    12d6:	50 e4       	ldi	r21, 0x40	; 64
    12d8:	6b d3       	rcall	.+1750   	; 0x19b0 <__divsf3>
    12da:	d2 d3       	rcall	.+1956   	; 0x1a80 <__fixsfsi>
    12dc:	6b 8f       	std	Y+27, r22	; 0x1b
    12de:	7c 8f       	std	Y+28, r23	; 0x1c
    12e0:	8d 8f       	std	Y+29, r24	; 0x1d
    12e2:	9e 8f       	std	Y+30, r25	; 0x1e
        theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
    12e4:	29 85       	ldd	r18, Y+9	; 0x09
    12e6:	3a 85       	ldd	r19, Y+10	; 0x0a
    12e8:	4b 85       	ldd	r20, Y+11	; 0x0b
    12ea:	5c 85       	ldd	r21, Y+12	; 0x0c
    12ec:	ca 01       	movw	r24, r20
    12ee:	b9 01       	movw	r22, r18
    12f0:	cd d4       	rcall	.+2458   	; 0x1c8c <__mulsf3>
    12f2:	2b 01       	movw	r4, r22
    12f4:	3c 01       	movw	r6, r24
    12f6:	a5 01       	movw	r20, r10
    12f8:	94 01       	movw	r18, r8
    12fa:	c5 01       	movw	r24, r10
    12fc:	b4 01       	movw	r22, r8
    12fe:	c6 d4       	rcall	.+2444   	; 0x1c8c <__mulsf3>
    1300:	4b 01       	movw	r8, r22
    1302:	5c 01       	movw	r10, r24
    1304:	a7 01       	movw	r20, r14
    1306:	96 01       	movw	r18, r12
    1308:	c7 01       	movw	r24, r14
    130a:	b6 01       	movw	r22, r12
    130c:	bf d4       	rcall	.+2430   	; 0x1c8c <__mulsf3>
    130e:	9b 01       	movw	r18, r22
    1310:	ac 01       	movw	r20, r24
    1312:	c5 01       	movw	r24, r10
    1314:	b4 01       	movw	r22, r8
    1316:	86 d2       	rcall	.+1292   	; 0x1824 <__addsf3>
    1318:	6d 87       	std	Y+13, r22	; 0x0d
    131a:	7e 87       	std	Y+14, r23	; 0x0e
    131c:	8f 87       	std	Y+15, r24	; 0x0f
    131e:	98 8b       	std	Y+16, r25	; 0x10
    1320:	1c d5       	rcall	.+2616   	; 0x1d5a <sqrt>
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	48 e4       	ldi	r20, 0x48	; 72
    1328:	52 e4       	ldi	r21, 0x42	; 66
    132a:	7b d2       	rcall	.+1270   	; 0x1822 <__subsf3>
    132c:	6b 01       	movw	r12, r22
    132e:	7c 01       	movw	r14, r24
    1330:	9b 01       	movw	r18, r22
    1332:	ac 01       	movw	r20, r24
    1334:	ab d4       	rcall	.+2390   	; 0x1c8c <__mulsf3>
    1336:	69 8b       	std	Y+17, r22	; 0x11
    1338:	7a 8b       	std	Y+18, r23	; 0x12
    133a:	8b 8b       	std	Y+19, r24	; 0x13
    133c:	9c 8b       	std	Y+20, r25	; 0x14
    133e:	9b 01       	movw	r18, r22
    1340:	ac 01       	movw	r20, r24
    1342:	c3 01       	movw	r24, r6
    1344:	b2 01       	movw	r22, r4
    1346:	6e d2       	rcall	.+1244   	; 0x1824 <__addsf3>
    1348:	4b 01       	movw	r8, r22
    134a:	5c 01       	movw	r10, r24
    134c:	06 d5       	rcall	.+2572   	; 0x1d5a <sqrt>
    134e:	9b 01       	movw	r18, r22
    1350:	ac 01       	movw	r20, r24
    1352:	69 85       	ldd	r22, Y+9	; 0x09
    1354:	7a 85       	ldd	r23, Y+10	; 0x0a
    1356:	8b 85       	ldd	r24, Y+11	; 0x0b
    1358:	9c 85       	ldd	r25, Y+12	; 0x0c
    135a:	90 58       	subi	r25, 0x80	; 128
    135c:	29 d3       	rcall	.+1618   	; 0x19b0 <__divsf3>
    135e:	53 d2       	rcall	.+1190   	; 0x1806 <acos>
    1360:	69 87       	std	Y+9, r22	; 0x09
    1362:	7a 87       	std	Y+10, r23	; 0x0a
    1364:	8b 87       	std	Y+11, r24	; 0x0b
    1366:	9c 87       	std	Y+12, r25	; 0x0c
                                  acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	48 e4       	ldi	r20, 0x48	; 72
    136e:	52 e4       	ldi	r21, 0x42	; 66
    1370:	6d 85       	ldd	r22, Y+13	; 0x0d
    1372:	7e 85       	ldd	r23, Y+14	; 0x0e
    1374:	8f 85       	ldd	r24, Y+15	; 0x0f
    1376:	98 89       	ldd	r25, Y+16	; 0x10
    1378:	54 d2       	rcall	.+1192   	; 0x1822 <__subsf3>
    137a:	ef d4       	rcall	.+2526   	; 0x1d5a <sqrt>
    137c:	9b 01       	movw	r18, r22
    137e:	ac 01       	movw	r20, r24
    1380:	c7 01       	movw	r24, r14
    1382:	b6 01       	movw	r22, r12
    1384:	83 d4       	rcall	.+2310   	; 0x1c8c <__mulsf3>
    1386:	9b 01       	movw	r18, r22
    1388:	ac 01       	movw	r20, r24
    138a:	c3 01       	movw	r24, r6
    138c:	b2 01       	movw	r22, r4
    138e:	4a d2       	rcall	.+1172   	; 0x1824 <__addsf3>
    1390:	e4 d4       	rcall	.+2504   	; 0x1d5a <sqrt>
    1392:	6b 01       	movw	r12, r22
    1394:	7c 01       	movw	r14, r24
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	38 e4       	ldi	r19, 0x48	; 72
    139a:	4c e8       	ldi	r20, 0x8C	; 140
    139c:	55 e4       	ldi	r21, 0x45	; 69
    139e:	c5 01       	movw	r24, r10
    13a0:	b4 01       	movw	r22, r8
    13a2:	40 d2       	rcall	.+1152   	; 0x1824 <__addsf3>
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	38 e0       	ldi	r19, 0x08	; 8
    13a8:	44 e8       	ldi	r20, 0x84	; 132
    13aa:	56 e4       	ldi	r21, 0x46	; 70
    13ac:	3a d2       	rcall	.+1140   	; 0x1822 <__subsf3>
    13ae:	4b 01       	movw	r8, r22
    13b0:	5c 01       	movw	r10, r24
    13b2:	a7 01       	movw	r20, r14
    13b4:	96 01       	movw	r18, r12
    13b6:	c7 01       	movw	r24, r14
    13b8:	b6 01       	movw	r22, r12
    13ba:	34 d2       	rcall	.+1128   	; 0x1824 <__addsf3>
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	46 e8       	ldi	r20, 0x86	; 134
    13c2:	52 e4       	ldi	r21, 0x42	; 66
    13c4:	63 d4       	rcall	.+2246   	; 0x1c8c <__mulsf3>
    13c6:	9b 01       	movw	r18, r22
    13c8:	ac 01       	movw	r20, r24
    13ca:	c5 01       	movw	r24, r10
    13cc:	b4 01       	movw	r22, r8
    13ce:	f0 d2       	rcall	.+1504   	; 0x19b0 <__divsf3>
    13d0:	1a d2       	rcall	.+1076   	; 0x1806 <acos>
    13d2:	9b 01       	movw	r18, r22
    13d4:	ac 01       	movw	r20, r24
        y = y1 + (i + 1) * deltaY;
        z = z1 + (i + 1) * deltaZ;
      
        // lös inverskinematik för lederna.
        theta1 = atan2f(x,y)*180/PI;
        theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
    13d6:	69 85       	ldd	r22, Y+9	; 0x09
    13d8:	7a 85       	ldd	r23, Y+10	; 0x0a
    13da:	8b 85       	ldd	r24, Y+11	; 0x0b
    13dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    13de:	22 d2       	rcall	.+1092   	; 0x1824 <__addsf3>
    13e0:	24 ee       	ldi	r18, 0xE4	; 228
    13e2:	3e e2       	ldi	r19, 0x2E	; 46
    13e4:	45 e6       	ldi	r20, 0x65	; 101
    13e6:	52 e4       	ldi	r21, 0x42	; 66
    13e8:	51 d4       	rcall	.+2210   	; 0x1c8c <__mulsf3>
    13ea:	4a d3       	rcall	.+1684   	; 0x1a80 <__fixsfsi>
    13ec:	6b 01       	movw	r12, r22
    13ee:	7c 01       	movw	r14, r24
                                  acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
        
        theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
    13f0:	a3 01       	movw	r20, r6
    13f2:	92 01       	movw	r18, r4
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	7a e1       	ldi	r23, 0x1A	; 26
    13f8:	87 ea       	ldi	r24, 0xA7	; 167
    13fa:	96 e4       	ldi	r25, 0x46	; 70
    13fc:	12 d2       	rcall	.+1060   	; 0x1822 <__subsf3>
    13fe:	29 89       	ldd	r18, Y+17	; 0x11
    1400:	3a 89       	ldd	r19, Y+18	; 0x12
    1402:	4b 89       	ldd	r20, Y+19	; 0x13
    1404:	5c 89       	ldd	r21, Y+20	; 0x14
    1406:	0d d2       	rcall	.+1050   	; 0x1822 <__subsf3>
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	38 e1       	ldi	r19, 0x18	; 24
    140c:	48 e8       	ldi	r20, 0x88	; 136
    140e:	56 e4       	ldi	r21, 0x46	; 70
    1410:	cf d2       	rcall	.+1438   	; 0x19b0 <__divsf3>
    1412:	f9 d1       	rcall	.+1010   	; 0x1806 <acos>
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	44 e3       	ldi	r20, 0x34	; 52
    141a:	53 e4       	ldi	r21, 0x43	; 67
    141c:	37 d4       	rcall	.+2158   	; 0x1c8c <__mulsf3>
    141e:	28 ed       	ldi	r18, 0xD8	; 216
    1420:	3f e0       	ldi	r19, 0x0F	; 15
    1422:	49 e4       	ldi	r20, 0x49	; 73
    1424:	50 e4       	ldi	r21, 0x40	; 64
    1426:	c4 d2       	rcall	.+1416   	; 0x19b0 <__divsf3>
    1428:	2b d3       	rcall	.+1622   	; 0x1a80 <__fixsfsi>
        
        // spara resultatet i global array
		switch(currentLeg.legNumber)
    142a:	02 30       	cpi	r16, 0x02	; 2
    142c:	11 05       	cpc	r17, r1
    142e:	a9 f1       	breq	.+106    	; 0x149a <CalcStraightPath+0x3e2>
    1430:	24 f4       	brge	.+8      	; 0x143a <CalcStraightPath+0x382>
    1432:	01 30       	cpi	r16, 0x01	; 1
    1434:	11 05       	cpc	r17, r1
    1436:	51 f0       	breq	.+20     	; 0x144c <CalcStraightPath+0x394>
    1438:	b2 c0       	rjmp	.+356    	; 0x159e <CalcStraightPath+0x4e6>
    143a:	03 30       	cpi	r16, 0x03	; 3
    143c:	11 05       	cpc	r17, r1
    143e:	09 f4       	brne	.+2      	; 0x1442 <CalcStraightPath+0x38a>
    1440:	53 c0       	rjmp	.+166    	; 0x14e8 <CalcStraightPath+0x430>
    1442:	04 30       	cpi	r16, 0x04	; 4
    1444:	11 05       	cpc	r17, r1
    1446:	09 f4       	brne	.+2      	; 0x144a <CalcStraightPath+0x392>
    1448:	7d c0       	rjmp	.+250    	; 0x1544 <CalcStraightPath+0x48c>
    144a:	a9 c0       	rjmp	.+338    	; 0x159e <CalcStraightPath+0x4e6>
		{
			case FRONT_LEFT_LEG:
			{
				actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 105;
    144c:	8b 8c       	ldd	r8, Y+27	; 0x1b
    144e:	9c 8c       	ldd	r9, Y+28	; 0x1c
    1450:	ad 8c       	ldd	r10, Y+29	; 0x1d
    1452:	be 8c       	ldd	r11, Y+30	; 0x1e
    1454:	29 e6       	ldi	r18, 0x69	; 105
    1456:	82 0e       	add	r8, r18
    1458:	91 1c       	adc	r9, r1
    145a:	a1 1c       	adc	r10, r1
    145c:	b1 1c       	adc	r11, r1
    145e:	af 89       	ldd	r26, Y+23	; 0x17
    1460:	b8 8d       	ldd	r27, Y+24	; 0x18
    1462:	8d 92       	st	X+, r8
    1464:	9d 92       	st	X+, r9
    1466:	ad 92       	st	X+, r10
    1468:	bc 92       	st	X, r11
    146a:	13 97       	sbiw	r26, 0x03	; 3
				actuatorPositions_g[currentLeg.femurJoint][i] =  theta2 + 75;
    146c:	bb e4       	ldi	r27, 0x4B	; 75
    146e:	cb 0e       	add	r12, r27
    1470:	d1 1c       	adc	r13, r1
    1472:	e1 1c       	adc	r14, r1
    1474:	f1 1c       	adc	r15, r1
    1476:	e9 8d       	ldd	r30, Y+25	; 0x19
    1478:	fa 8d       	ldd	r31, Y+26	; 0x1a
    147a:	c0 82       	st	Z, r12
    147c:	d1 82       	std	Z+1, r13	; 0x01
    147e:	e2 82       	std	Z+2, r14	; 0x02
    1480:	f3 82       	std	Z+3, r15	; 0x03
				actuatorPositions_g[currentLeg.tibiaJoint][i] =  theta3 + 1;
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	01 96       	adiw	r24, 0x01	; 1
    1488:	a1 1d       	adc	r26, r1
    148a:	b1 1d       	adc	r27, r1
    148c:	ed 89       	ldd	r30, Y+21	; 0x15
    148e:	fe 89       	ldd	r31, Y+22	; 0x16
    1490:	80 83       	st	Z, r24
    1492:	91 83       	std	Z+1, r25	; 0x01
    1494:	a2 83       	std	Z+2, r26	; 0x02
    1496:	b3 83       	std	Z+3, r27	; 0x03
                break;
    1498:	82 c0       	rjmp	.+260    	; 0x159e <CalcStraightPath+0x4e6>
			}
			case FRONT_RIGHT_LEG:
			{
				actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 193;
    149a:	8b 8c       	ldd	r8, Y+27	; 0x1b
    149c:	9c 8c       	ldd	r9, Y+28	; 0x1c
    149e:	ad 8c       	ldd	r10, Y+29	; 0x1d
    14a0:	be 8c       	ldd	r11, Y+30	; 0x1e
    14a2:	f1 ec       	ldi	r31, 0xC1	; 193
    14a4:	8f 0e       	add	r8, r31
    14a6:	91 1c       	adc	r9, r1
    14a8:	a1 1c       	adc	r10, r1
    14aa:	b1 1c       	adc	r11, r1
    14ac:	af 89       	ldd	r26, Y+23	; 0x17
    14ae:	b8 8d       	ldd	r27, Y+24	; 0x18
    14b0:	8d 92       	st	X+, r8
    14b2:	9d 92       	st	X+, r9
    14b4:	ad 92       	st	X+, r10
    14b6:	bc 92       	st	X, r11
    14b8:	13 97       	sbiw	r26, 0x03	; 3
				actuatorPositions_g[currentLeg.femurJoint][i] =  theta2 + 75;
    14ba:	bb e4       	ldi	r27, 0x4B	; 75
    14bc:	cb 0e       	add	r12, r27
    14be:	d1 1c       	adc	r13, r1
    14c0:	e1 1c       	adc	r14, r1
    14c2:	f1 1c       	adc	r15, r1
    14c4:	e9 8d       	ldd	r30, Y+25	; 0x19
    14c6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    14c8:	c0 82       	st	Z, r12
    14ca:	d1 82       	std	Z+1, r13	; 0x01
    14cc:	e2 82       	std	Z+2, r14	; 0x02
    14ce:	f3 82       	std	Z+3, r15	; 0x03
				actuatorPositions_g[currentLeg.tibiaJoint][i] =  theta3 + 3;
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	03 96       	adiw	r24, 0x03	; 3
    14d6:	a1 1d       	adc	r26, r1
    14d8:	b1 1d       	adc	r27, r1
    14da:	ed 89       	ldd	r30, Y+21	; 0x15
    14dc:	fe 89       	ldd	r31, Y+22	; 0x16
    14de:	80 83       	st	Z, r24
    14e0:	91 83       	std	Z+1, r25	; 0x01
    14e2:	a2 83       	std	Z+2, r26	; 0x02
    14e4:	b3 83       	std	Z+3, r27	; 0x03
                break;
    14e6:	5b c0       	rjmp	.+182    	; 0x159e <CalcStraightPath+0x4e6>
			}
            case REAR_LEFT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 195;
    14e8:	8b 8c       	ldd	r8, Y+27	; 0x1b
    14ea:	9c 8c       	ldd	r9, Y+28	; 0x1c
    14ec:	ad 8c       	ldd	r10, Y+29	; 0x1d
    14ee:	be 8c       	ldd	r11, Y+30	; 0x1e
    14f0:	f3 ec       	ldi	r31, 0xC3	; 195
    14f2:	8f 0e       	add	r8, r31
    14f4:	91 1c       	adc	r9, r1
    14f6:	a1 1c       	adc	r10, r1
    14f8:	b1 1c       	adc	r11, r1
    14fa:	af 89       	ldd	r26, Y+23	; 0x17
    14fc:	b8 8d       	ldd	r27, Y+24	; 0x18
    14fe:	8d 92       	st	X+, r8
    1500:	9d 92       	st	X+, r9
    1502:	ad 92       	st	X+, r10
    1504:	bc 92       	st	X, r11
    1506:	13 97       	sbiw	r26, 0x03	; 3
				actuatorPositions_g[currentLeg.femurJoint][i] =  225 - theta2;
    1508:	21 ee       	ldi	r18, 0xE1	; 225
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	40 e0       	ldi	r20, 0x00	; 0
    150e:	50 e0       	ldi	r21, 0x00	; 0
    1510:	2c 19       	sub	r18, r12
    1512:	3d 09       	sbc	r19, r13
    1514:	4e 09       	sbc	r20, r14
    1516:	5f 09       	sbc	r21, r15
    1518:	a9 8d       	ldd	r26, Y+25	; 0x19
    151a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    151c:	2d 93       	st	X+, r18
    151e:	3d 93       	st	X+, r19
    1520:	4d 93       	st	X+, r20
    1522:	5c 93       	st	X, r21
    1524:	13 97       	sbiw	r26, 0x03	; 3
				actuatorPositions_g[currentLeg.tibiaJoint][i] =  300 - theta3;
    1526:	2c e2       	ldi	r18, 0x2C	; 44
    1528:	31 e0       	ldi	r19, 0x01	; 1
    152a:	40 e0       	ldi	r20, 0x00	; 0
    152c:	50 e0       	ldi	r21, 0x00	; 0
    152e:	26 1b       	sub	r18, r22
    1530:	37 0b       	sbc	r19, r23
    1532:	48 0b       	sbc	r20, r24
    1534:	59 0b       	sbc	r21, r25
    1536:	ed 89       	ldd	r30, Y+21	; 0x15
    1538:	fe 89       	ldd	r31, Y+22	; 0x16
    153a:	20 83       	st	Z, r18
    153c:	31 83       	std	Z+1, r19	; 0x01
    153e:	42 83       	std	Z+2, r20	; 0x02
    1540:	53 83       	std	Z+3, r21	; 0x03
                break;
    1542:	2d c0       	rjmp	.+90     	; 0x159e <CalcStraightPath+0x4e6>
            }
            case REAR_RIGHT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 105;
    1544:	8b 8c       	ldd	r8, Y+27	; 0x1b
    1546:	9c 8c       	ldd	r9, Y+28	; 0x1c
    1548:	ad 8c       	ldd	r10, Y+29	; 0x1d
    154a:	be 8c       	ldd	r11, Y+30	; 0x1e
    154c:	f9 e6       	ldi	r31, 0x69	; 105
    154e:	8f 0e       	add	r8, r31
    1550:	91 1c       	adc	r9, r1
    1552:	a1 1c       	adc	r10, r1
    1554:	b1 1c       	adc	r11, r1
    1556:	af 89       	ldd	r26, Y+23	; 0x17
    1558:	b8 8d       	ldd	r27, Y+24	; 0x18
    155a:	8d 92       	st	X+, r8
    155c:	9d 92       	st	X+, r9
    155e:	ad 92       	st	X+, r10
    1560:	bc 92       	st	X, r11
    1562:	13 97       	sbiw	r26, 0x03	; 3
				actuatorPositions_g[currentLeg.femurJoint][i] =  225 - theta2;
    1564:	21 ee       	ldi	r18, 0xE1	; 225
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	40 e0       	ldi	r20, 0x00	; 0
    156a:	50 e0       	ldi	r21, 0x00	; 0
    156c:	2c 19       	sub	r18, r12
    156e:	3d 09       	sbc	r19, r13
    1570:	4e 09       	sbc	r20, r14
    1572:	5f 09       	sbc	r21, r15
    1574:	a9 8d       	ldd	r26, Y+25	; 0x19
    1576:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1578:	2d 93       	st	X+, r18
    157a:	3d 93       	st	X+, r19
    157c:	4d 93       	st	X+, r20
    157e:	5c 93       	st	X, r21
    1580:	13 97       	sbiw	r26, 0x03	; 3
				actuatorPositions_g[currentLeg.tibiaJoint][i] =  300 - theta3;
    1582:	2c e2       	ldi	r18, 0x2C	; 44
    1584:	31 e0       	ldi	r19, 0x01	; 1
    1586:	40 e0       	ldi	r20, 0x00	; 0
    1588:	50 e0       	ldi	r21, 0x00	; 0
    158a:	26 1b       	sub	r18, r22
    158c:	37 0b       	sbc	r19, r23
    158e:	48 0b       	sbc	r20, r24
    1590:	59 0b       	sbc	r21, r25
    1592:	ed 89       	ldd	r30, Y+21	; 0x15
    1594:	fe 89       	ldd	r31, Y+22	; 0x16
    1596:	20 83       	st	Z, r18
    1598:	31 83       	std	Z+1, r19	; 0x01
    159a:	42 83       	std	Z+2, r20	; 0x02
    159c:	53 83       	std	Z+3, r21	; 0x03
    159e:	2f 89       	ldd	r18, Y+23	; 0x17
    15a0:	38 8d       	ldd	r19, Y+24	; 0x18
    15a2:	2c 5f       	subi	r18, 0xFC	; 252
    15a4:	3f 4f       	sbci	r19, 0xFF	; 255
    15a6:	38 8f       	std	Y+24, r19	; 0x18
    15a8:	2f 8b       	std	Y+23, r18	; 0x17
    15aa:	49 8d       	ldd	r20, Y+25	; 0x19
    15ac:	5a 8d       	ldd	r21, Y+26	; 0x1a
    15ae:	4c 5f       	subi	r20, 0xFC	; 252
    15b0:	5f 4f       	sbci	r21, 0xFF	; 255
    15b2:	5a 8f       	std	Y+26, r21	; 0x1a
    15b4:	49 8f       	std	Y+25, r20	; 0x19
    15b6:	8d 89       	ldd	r24, Y+21	; 0x15
    15b8:	9e 89       	ldd	r25, Y+22	; 0x16
    15ba:	04 96       	adiw	r24, 0x04	; 4
    15bc:	9e 8b       	std	Y+22, r25	; 0x16
    15be:	8d 8b       	std	Y+21, r24	; 0x15
    float deltaY = (y2 - y1) / numberOfPositions;
    float deltaZ = (z2 - z1) / numberOfPositions;
    
    float x,y,z;
    
    for (int i = 0; i < numberOfPositions; i++)
    15c0:	af 8d       	ldd	r26, Y+31	; 0x1f
    15c2:	b8 a1       	ldd	r27, Y+32	; 0x20
    15c4:	2a 16       	cp	r2, r26
    15c6:	3b 06       	cpc	r3, r27
    15c8:	09 f0       	breq	.+2      	; 0x15cc <CalcStraightPath+0x514>
    15ca:	41 ce       	rjmp	.-894    	; 0x124e <CalcStraightPath+0x196>
		
        
        
        
    }
}
    15cc:	e4 96       	adiw	r28, 0x34	; 52
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	f8 94       	cli
    15d2:	de bf       	out	0x3e, r29	; 62
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	cd bf       	out	0x3d, r28	; 61
    15d8:	df 91       	pop	r29
    15da:	cf 91       	pop	r28
    15dc:	1f 91       	pop	r17
    15de:	0f 91       	pop	r16
    15e0:	ff 90       	pop	r15
    15e2:	ef 90       	pop	r14
    15e4:	df 90       	pop	r13
    15e6:	cf 90       	pop	r12
    15e8:	bf 90       	pop	r11
    15ea:	af 90       	pop	r10
    15ec:	9f 90       	pop	r9
    15ee:	8f 90       	pop	r8
    15f0:	7f 90       	pop	r7
    15f2:	6f 90       	pop	r6
    15f4:	5f 90       	pop	r5
    15f6:	4f 90       	pop	r4
    15f8:	3f 90       	pop	r3
    15fa:	2f 90       	pop	r2
    15fc:	08 95       	ret

000015fe <main>:


int main(void)
{
	initUSART();
    15fe:	0e 94 91 00 	call	0x122	; 0x122 <initUSART>
	cli();
    1602:	f8 94       	cli
	EICRA = 0b1100; // Stigande flank på INT1 genererar avbrott
    1604:	8c e0       	ldi	r24, 0x0C	; 12
    1606:	80 93 69 00 	sts	0x0069, r24
	EIMSK = (EIMSK | 2); // Möjliggör externa avbrott på INT0, pinne 40  
    160a:	e9 9a       	sbi	0x1d, 1	; 29
	DDRA = 0;
    160c:	11 b8       	out	0x01, r1	; 1
	// MCUCR = (MCUCR | (1 << PUD)); Något som testades för att se om det gjorde något
	//PORTA |= (1 << PORTA0);
	 // Möjliggör globala avbrott
	sei();
    160e:	78 94       	sei
	USARTReadStatusPacket();
	MoveDynamixel(5,120 - 45 ,10);
	USARTReadStatusPacket();
	*/
    
    MoveFrontRightLeg(120,120,-85,10);
    1610:	0f 2e       	mov	r0, r31
    1612:	fa e0       	ldi	r31, 0x0A	; 10
    1614:	cf 2e       	mov	r12, r31
    1616:	d1 2c       	mov	r13, r1
    1618:	f0 2d       	mov	r31, r0
    161a:	e1 2c       	mov	r14, r1
    161c:	f1 2c       	mov	r15, r1
    161e:	0a ea       	ldi	r16, 0xAA	; 170
    1620:	12 ec       	ldi	r17, 0xC2	; 194
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 ef       	ldi	r20, 0xF0	; 240
    1628:	52 e4       	ldi	r21, 0x42	; 66
    162a:	ca 01       	movw	r24, r20
    162c:	b9 01       	movw	r22, r18
    162e:	0e 94 c3 02 	call	0x586	; 0x586 <MoveFrontRightLeg>
	MoveFrontLeftLeg(-120,120,-85,10);
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	40 ef       	ldi	r20, 0xF0	; 240
    1638:	52 e4       	ldi	r21, 0x42	; 66
    163a:	60 e0       	ldi	r22, 0x00	; 0
    163c:	70 e0       	ldi	r23, 0x00	; 0
    163e:	80 ef       	ldi	r24, 0xF0	; 240
    1640:	92 ec       	ldi	r25, 0xC2	; 194
    1642:	0e 94 82 01 	call	0x304	; 0x304 <MoveFrontLeftLeg>
	MoveRearLeftLeg(-120,-120,-85,10);
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	40 ef       	ldi	r20, 0xF0	; 240
    164c:	52 ec       	ldi	r21, 0xC2	; 194
    164e:	ca 01       	movw	r24, r20
    1650:	b9 01       	movw	r22, r18
    1652:	da d8       	rcall	.-3660   	; 0x808 <MoveRearLeftLeg>
	MoveRearRightLeg(120,-120,-85,10);
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	40 ef       	ldi	r20, 0xF0	; 240
    165a:	52 ec       	ldi	r21, 0xC2	; 194
    165c:	60 e0       	ldi	r22, 0x00	; 0
    165e:	70 e0       	ldi	r23, 0x00	; 0
    1660:	80 ef       	ldi	r24, 0xF0	; 240
    1662:	92 e4       	ldi	r25, 0x42	; 66
    1664:	15 da       	rcall	.-3030   	; 0xa90 <MoveRearRightLeg>
    
	CalcStraightPath(frontLeftLeg,10,-120,120,-85,-120,80,-85);
    1666:	c2 ec       	ldi	r28, 0xC2	; 194
    1668:	cf 93       	push	r28
    166a:	da ea       	ldi	r29, 0xAA	; 170
    166c:	df 93       	push	r29
    166e:	1f 92       	push	r1
    1670:	1f 92       	push	r1
    1672:	0f 2e       	mov	r0, r31
    1674:	f2 e4       	ldi	r31, 0x42	; 66
    1676:	6f 2e       	mov	r6, r31
    1678:	f0 2d       	mov	r31, r0
    167a:	6f 92       	push	r6
    167c:	0f 2e       	mov	r0, r31
    167e:	f0 ea       	ldi	r31, 0xA0	; 160
    1680:	5f 2e       	mov	r5, r31
    1682:	f0 2d       	mov	r31, r0
    1684:	5f 92       	push	r5
    1686:	1f 92       	push	r1
    1688:	1f 92       	push	r1
    168a:	cf 93       	push	r28
    168c:	0f 2e       	mov	r0, r31
    168e:	f0 ef       	ldi	r31, 0xF0	; 240
    1690:	7f 2e       	mov	r7, r31
    1692:	f0 2d       	mov	r31, r0
    1694:	7f 92       	push	r7
    1696:	1f 92       	push	r1
    1698:	1f 92       	push	r1
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	1f 92       	push	r1
    16a0:	1f 92       	push	r1
    16a2:	0f 2e       	mov	r0, r31
    16a4:	81 2c       	mov	r8, r1
    16a6:	91 2c       	mov	r9, r1
    16a8:	f0 ef       	ldi	r31, 0xF0	; 240
    16aa:	af 2e       	mov	r10, r31
    16ac:	f2 e4       	ldi	r31, 0x42	; 66
    16ae:	bf 2e       	mov	r11, r31
    16b0:	f0 2d       	mov	r31, r0
    16b2:	0f 2e       	mov	r0, r31
    16b4:	c1 2c       	mov	r12, r1
    16b6:	d1 2c       	mov	r13, r1
    16b8:	f0 ef       	ldi	r31, 0xF0	; 240
    16ba:	ef 2e       	mov	r14, r31
    16bc:	f2 ec       	ldi	r31, 0xC2	; 194
    16be:	ff 2e       	mov	r15, r31
    16c0:	f0 2d       	mov	r31, r0
    16c2:	0a e0       	ldi	r16, 0x0A	; 10
    16c4:	10 e0       	ldi	r17, 0x00	; 0
    16c6:	20 91 18 01 	lds	r18, 0x0118
    16ca:	30 91 19 01 	lds	r19, 0x0119
    16ce:	40 91 1a 01 	lds	r20, 0x011A
    16d2:	50 91 1b 01 	lds	r21, 0x011B
    16d6:	60 91 1c 01 	lds	r22, 0x011C
    16da:	70 91 1d 01 	lds	r23, 0x011D
    16de:	80 91 1e 01 	lds	r24, 0x011E
    16e2:	90 91 1f 01 	lds	r25, 0x011F
    16e6:	e8 dc       	rcall	.-1584   	; 0x10b8 <CalcStraightPath>
    CalcStraightPath(frontRightLeg,10,120,120,-85,120,80,-85);
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
    16ec:	1f 92       	push	r1
    16ee:	1f 92       	push	r1
    16f0:	6f 92       	push	r6
    16f2:	5f 92       	push	r5
    16f4:	1f 92       	push	r1
    16f6:	1f 92       	push	r1
    16f8:	6f 92       	push	r6
    16fa:	7f 92       	push	r7
    16fc:	1f 92       	push	r1
    16fe:	1f 92       	push	r1
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	1f 92       	push	r1
    1706:	1f 92       	push	r1
    1708:	75 01       	movw	r14, r10
    170a:	64 01       	movw	r12, r8
    170c:	20 91 10 01 	lds	r18, 0x0110
    1710:	30 91 11 01 	lds	r19, 0x0111
    1714:	40 91 12 01 	lds	r20, 0x0112
    1718:	50 91 13 01 	lds	r21, 0x0113
    171c:	60 91 14 01 	lds	r22, 0x0114
    1720:	70 91 15 01 	lds	r23, 0x0115
    1724:	80 91 16 01 	lds	r24, 0x0116
    1728:	90 91 17 01 	lds	r25, 0x0117
    172c:	c5 dc       	rcall	.-1654   	; 0x10b8 <CalcStraightPath>
    CalcStraightPath(rearLeftLeg,10,-120,-120,-85,-120,-160,-85);
    172e:	8d b7       	in	r24, 0x3d	; 61
    1730:	9e b7       	in	r25, 0x3e	; 62
    1732:	80 96       	adiw	r24, 0x20	; 32
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	9e bf       	out	0x3e, r25	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	8d bf       	out	0x3d, r24	; 61
    173e:	cf 93       	push	r28
    1740:	df 93       	push	r29
    1742:	1f 92       	push	r1
    1744:	1f 92       	push	r1
    1746:	0f 2e       	mov	r0, r31
    1748:	f3 ec       	ldi	r31, 0xC3	; 195
    174a:	4f 2e       	mov	r4, r31
    174c:	f0 2d       	mov	r31, r0
    174e:	4f 92       	push	r4
    1750:	68 94       	set
    1752:	55 24       	eor	r5, r5
    1754:	55 f8       	bld	r5, 5
    1756:	5f 92       	push	r5
    1758:	1f 92       	push	r1
    175a:	1f 92       	push	r1
    175c:	cf 93       	push	r28
    175e:	7f 92       	push	r7
    1760:	1f 92       	push	r1
    1762:	1f 92       	push	r1
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
    1768:	1f 92       	push	r1
    176a:	1f 92       	push	r1
    176c:	0f 2e       	mov	r0, r31
    176e:	81 2c       	mov	r8, r1
    1770:	91 2c       	mov	r9, r1
    1772:	f0 ef       	ldi	r31, 0xF0	; 240
    1774:	af 2e       	mov	r10, r31
    1776:	f2 ec       	ldi	r31, 0xC2	; 194
    1778:	bf 2e       	mov	r11, r31
    177a:	f0 2d       	mov	r31, r0
    177c:	75 01       	movw	r14, r10
    177e:	64 01       	movw	r12, r8
    1780:	20 91 08 01 	lds	r18, 0x0108
    1784:	30 91 09 01 	lds	r19, 0x0109
    1788:	40 91 0a 01 	lds	r20, 0x010A
    178c:	50 91 0b 01 	lds	r21, 0x010B
    1790:	60 91 0c 01 	lds	r22, 0x010C
    1794:	70 91 0d 01 	lds	r23, 0x010D
    1798:	80 91 0e 01 	lds	r24, 0x010E
    179c:	90 91 0f 01 	lds	r25, 0x010F
    17a0:	8b dc       	rcall	.-1770   	; 0x10b8 <CalcStraightPath>
    CalcStraightPath(rearRightLeg,10,120,-120,-85,120,-160,-85);
    17a2:	cf 93       	push	r28
    17a4:	df 93       	push	r29
    17a6:	1f 92       	push	r1
    17a8:	1f 92       	push	r1
    17aa:	4f 92       	push	r4
    17ac:	5f 92       	push	r5
    17ae:	1f 92       	push	r1
    17b0:	1f 92       	push	r1
    17b2:	6f 92       	push	r6
    17b4:	7f 92       	push	r7
    17b6:	1f 92       	push	r1
    17b8:	1f 92       	push	r1
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
    17be:	1f 92       	push	r1
    17c0:	1f 92       	push	r1
    17c2:	0f 2e       	mov	r0, r31
    17c4:	c1 2c       	mov	r12, r1
    17c6:	d1 2c       	mov	r13, r1
    17c8:	f0 ef       	ldi	r31, 0xF0	; 240
    17ca:	ef 2e       	mov	r14, r31
    17cc:	f2 e4       	ldi	r31, 0x42	; 66
    17ce:	ff 2e       	mov	r15, r31
    17d0:	f0 2d       	mov	r31, r0
    17d2:	20 91 00 01 	lds	r18, 0x0100
    17d6:	30 91 01 01 	lds	r19, 0x0101
    17da:	40 91 02 01 	lds	r20, 0x0102
    17de:	50 91 03 01 	lds	r21, 0x0103
    17e2:	60 91 04 01 	lds	r22, 0x0104
    17e6:	70 91 05 01 	lds	r23, 0x0105
    17ea:	80 91 06 01 	lds	r24, 0x0106
    17ee:	90 91 07 01 	lds	r25, 0x0107
    17f2:	62 dc       	rcall	.-1852   	; 0x10b8 <CalcStraightPath>
    17f4:	8d b7       	in	r24, 0x3d	; 61
    17f6:	9e b7       	in	r25, 0x3e	; 62
    17f8:	80 96       	adiw	r24, 0x20	; 32
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	f8 94       	cli
    17fe:	9e bf       	out	0x3e, r25	; 62
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	8d bf       	out	0x3d, r24	; 61
    1804:	ff cf       	rjmp	.-2      	; 0x1804 <main+0x206>

00001806 <acos>:
    1806:	9f 93       	push	r25
    1808:	9f 77       	andi	r25, 0x7F	; 127
    180a:	a8 d1       	rcall	.+848    	; 0x1b5c <__fp_arccos>
    180c:	0f 90       	pop	r0
    180e:	00 20       	and	r0, r0
    1810:	3a f4       	brpl	.+14     	; 0x1820 <acos+0x1a>
    1812:	90 58       	subi	r25, 0x80	; 128
    1814:	a2 ea       	ldi	r26, 0xA2	; 162
    1816:	2a ed       	ldi	r18, 0xDA	; 218
    1818:	3f e0       	ldi	r19, 0x0F	; 15
    181a:	49 e4       	ldi	r20, 0x49	; 73
    181c:	50 e4       	ldi	r21, 0x40	; 64
    181e:	13 d0       	rcall	.+38     	; 0x1846 <__addsf3x>
    1820:	f4 c1       	rjmp	.+1000   	; 0x1c0a <__fp_round>

00001822 <__subsf3>:
    1822:	50 58       	subi	r21, 0x80	; 128

00001824 <__addsf3>:
    1824:	bb 27       	eor	r27, r27
    1826:	aa 27       	eor	r26, r26
    1828:	0e d0       	rcall	.+28     	; 0x1846 <__addsf3x>
    182a:	ef c1       	rjmp	.+990    	; 0x1c0a <__fp_round>
    182c:	e0 d1       	rcall	.+960    	; 0x1bee <__fp_pscA>
    182e:	30 f0       	brcs	.+12     	; 0x183c <__addsf3+0x18>
    1830:	e5 d1       	rcall	.+970    	; 0x1bfc <__fp_pscB>
    1832:	20 f0       	brcs	.+8      	; 0x183c <__addsf3+0x18>
    1834:	31 f4       	brne	.+12     	; 0x1842 <__addsf3+0x1e>
    1836:	9f 3f       	cpi	r25, 0xFF	; 255
    1838:	11 f4       	brne	.+4      	; 0x183e <__addsf3+0x1a>
    183a:	1e f4       	brtc	.+6      	; 0x1842 <__addsf3+0x1e>
    183c:	b0 c1       	rjmp	.+864    	; 0x1b9e <__fp_nan>
    183e:	0e f4       	brtc	.+2      	; 0x1842 <__addsf3+0x1e>
    1840:	e0 95       	com	r30
    1842:	e7 fb       	bst	r30, 7
    1844:	a6 c1       	rjmp	.+844    	; 0x1b92 <__fp_inf>

00001846 <__addsf3x>:
    1846:	e9 2f       	mov	r30, r25
    1848:	f1 d1       	rcall	.+994    	; 0x1c2c <__fp_split3>
    184a:	80 f3       	brcs	.-32     	; 0x182c <__addsf3+0x8>
    184c:	ba 17       	cp	r27, r26
    184e:	62 07       	cpc	r22, r18
    1850:	73 07       	cpc	r23, r19
    1852:	84 07       	cpc	r24, r20
    1854:	95 07       	cpc	r25, r21
    1856:	18 f0       	brcs	.+6      	; 0x185e <__addsf3x+0x18>
    1858:	71 f4       	brne	.+28     	; 0x1876 <__addsf3x+0x30>
    185a:	9e f5       	brtc	.+102    	; 0x18c2 <__addsf3x+0x7c>
    185c:	09 c2       	rjmp	.+1042   	; 0x1c70 <__fp_zero>
    185e:	0e f4       	brtc	.+2      	; 0x1862 <__addsf3x+0x1c>
    1860:	e0 95       	com	r30
    1862:	0b 2e       	mov	r0, r27
    1864:	ba 2f       	mov	r27, r26
    1866:	a0 2d       	mov	r26, r0
    1868:	0b 01       	movw	r0, r22
    186a:	b9 01       	movw	r22, r18
    186c:	90 01       	movw	r18, r0
    186e:	0c 01       	movw	r0, r24
    1870:	ca 01       	movw	r24, r20
    1872:	a0 01       	movw	r20, r0
    1874:	11 24       	eor	r1, r1
    1876:	ff 27       	eor	r31, r31
    1878:	59 1b       	sub	r21, r25
    187a:	99 f0       	breq	.+38     	; 0x18a2 <__addsf3x+0x5c>
    187c:	59 3f       	cpi	r21, 0xF9	; 249
    187e:	50 f4       	brcc	.+20     	; 0x1894 <__addsf3x+0x4e>
    1880:	50 3e       	cpi	r21, 0xE0	; 224
    1882:	68 f1       	brcs	.+90     	; 0x18de <__addsf3x+0x98>
    1884:	1a 16       	cp	r1, r26
    1886:	f0 40       	sbci	r31, 0x00	; 0
    1888:	a2 2f       	mov	r26, r18
    188a:	23 2f       	mov	r18, r19
    188c:	34 2f       	mov	r19, r20
    188e:	44 27       	eor	r20, r20
    1890:	58 5f       	subi	r21, 0xF8	; 248
    1892:	f3 cf       	rjmp	.-26     	; 0x187a <__addsf3x+0x34>
    1894:	46 95       	lsr	r20
    1896:	37 95       	ror	r19
    1898:	27 95       	ror	r18
    189a:	a7 95       	ror	r26
    189c:	f0 40       	sbci	r31, 0x00	; 0
    189e:	53 95       	inc	r21
    18a0:	c9 f7       	brne	.-14     	; 0x1894 <__addsf3x+0x4e>
    18a2:	7e f4       	brtc	.+30     	; 0x18c2 <__addsf3x+0x7c>
    18a4:	1f 16       	cp	r1, r31
    18a6:	ba 0b       	sbc	r27, r26
    18a8:	62 0b       	sbc	r22, r18
    18aa:	73 0b       	sbc	r23, r19
    18ac:	84 0b       	sbc	r24, r20
    18ae:	ba f0       	brmi	.+46     	; 0x18de <__addsf3x+0x98>
    18b0:	91 50       	subi	r25, 0x01	; 1
    18b2:	a1 f0       	breq	.+40     	; 0x18dc <__addsf3x+0x96>
    18b4:	ff 0f       	add	r31, r31
    18b6:	bb 1f       	adc	r27, r27
    18b8:	66 1f       	adc	r22, r22
    18ba:	77 1f       	adc	r23, r23
    18bc:	88 1f       	adc	r24, r24
    18be:	c2 f7       	brpl	.-16     	; 0x18b0 <__addsf3x+0x6a>
    18c0:	0e c0       	rjmp	.+28     	; 0x18de <__addsf3x+0x98>
    18c2:	ba 0f       	add	r27, r26
    18c4:	62 1f       	adc	r22, r18
    18c6:	73 1f       	adc	r23, r19
    18c8:	84 1f       	adc	r24, r20
    18ca:	48 f4       	brcc	.+18     	; 0x18de <__addsf3x+0x98>
    18cc:	87 95       	ror	r24
    18ce:	77 95       	ror	r23
    18d0:	67 95       	ror	r22
    18d2:	b7 95       	ror	r27
    18d4:	f7 95       	ror	r31
    18d6:	9e 3f       	cpi	r25, 0xFE	; 254
    18d8:	08 f0       	brcs	.+2      	; 0x18dc <__addsf3x+0x96>
    18da:	b3 cf       	rjmp	.-154    	; 0x1842 <__addsf3+0x1e>
    18dc:	93 95       	inc	r25
    18de:	88 0f       	add	r24, r24
    18e0:	08 f0       	brcs	.+2      	; 0x18e4 <__addsf3x+0x9e>
    18e2:	99 27       	eor	r25, r25
    18e4:	ee 0f       	add	r30, r30
    18e6:	97 95       	ror	r25
    18e8:	87 95       	ror	r24
    18ea:	08 95       	ret
    18ec:	80 d1       	rcall	.+768    	; 0x1bee <__fp_pscA>
    18ee:	58 f0       	brcs	.+22     	; 0x1906 <__addsf3x+0xc0>
    18f0:	80 e8       	ldi	r24, 0x80	; 128
    18f2:	91 e0       	ldi	r25, 0x01	; 1
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <__addsf3x+0xb2>
    18f6:	9e ef       	ldi	r25, 0xFE	; 254
    18f8:	81 d1       	rcall	.+770    	; 0x1bfc <__fp_pscB>
    18fa:	28 f0       	brcs	.+10     	; 0x1906 <__addsf3x+0xc0>
    18fc:	40 e8       	ldi	r20, 0x80	; 128
    18fe:	51 e0       	ldi	r21, 0x01	; 1
    1900:	59 f4       	brne	.+22     	; 0x1918 <atan2+0xe>
    1902:	5e ef       	ldi	r21, 0xFE	; 254
    1904:	09 c0       	rjmp	.+18     	; 0x1918 <atan2+0xe>
    1906:	4b c1       	rjmp	.+662    	; 0x1b9e <__fp_nan>
    1908:	b3 c1       	rjmp	.+870    	; 0x1c70 <__fp_zero>

0000190a <atan2>:
    190a:	e9 2f       	mov	r30, r25
    190c:	e0 78       	andi	r30, 0x80	; 128
    190e:	8e d1       	rcall	.+796    	; 0x1c2c <__fp_split3>
    1910:	68 f3       	brcs	.-38     	; 0x18ec <__addsf3x+0xa6>
    1912:	09 2e       	mov	r0, r25
    1914:	05 2a       	or	r0, r21
    1916:	c1 f3       	breq	.-16     	; 0x1908 <__addsf3x+0xc2>
    1918:	26 17       	cp	r18, r22
    191a:	37 07       	cpc	r19, r23
    191c:	48 07       	cpc	r20, r24
    191e:	59 07       	cpc	r21, r25
    1920:	38 f0       	brcs	.+14     	; 0x1930 <atan2+0x26>
    1922:	0e 2e       	mov	r0, r30
    1924:	07 f8       	bld	r0, 7
    1926:	e0 25       	eor	r30, r0
    1928:	69 f0       	breq	.+26     	; 0x1944 <atan2+0x3a>
    192a:	e0 25       	eor	r30, r0
    192c:	e0 64       	ori	r30, 0x40	; 64
    192e:	0a c0       	rjmp	.+20     	; 0x1944 <atan2+0x3a>
    1930:	ef 63       	ori	r30, 0x3F	; 63
    1932:	07 f8       	bld	r0, 7
    1934:	00 94       	com	r0
    1936:	07 fa       	bst	r0, 7
    1938:	db 01       	movw	r26, r22
    193a:	b9 01       	movw	r22, r18
    193c:	9d 01       	movw	r18, r26
    193e:	dc 01       	movw	r26, r24
    1940:	ca 01       	movw	r24, r20
    1942:	ad 01       	movw	r20, r26
    1944:	ef 93       	push	r30
    1946:	43 d0       	rcall	.+134    	; 0x19ce <__divsf3_pse>
    1948:	60 d1       	rcall	.+704    	; 0x1c0a <__fp_round>
    194a:	0a d0       	rcall	.+20     	; 0x1960 <atan>
    194c:	5f 91       	pop	r21
    194e:	55 23       	and	r21, r21
    1950:	31 f0       	breq	.+12     	; 0x195e <atan2+0x54>
    1952:	2b ed       	ldi	r18, 0xDB	; 219
    1954:	3f e0       	ldi	r19, 0x0F	; 15
    1956:	49 e4       	ldi	r20, 0x49	; 73
    1958:	50 fd       	sbrc	r21, 0
    195a:	49 ec       	ldi	r20, 0xC9	; 201
    195c:	63 cf       	rjmp	.-314    	; 0x1824 <__addsf3>
    195e:	08 95       	ret

00001960 <atan>:
    1960:	df 93       	push	r29
    1962:	dd 27       	eor	r29, r29
    1964:	b9 2f       	mov	r27, r25
    1966:	bf 77       	andi	r27, 0x7F	; 127
    1968:	40 e8       	ldi	r20, 0x80	; 128
    196a:	5f e3       	ldi	r21, 0x3F	; 63
    196c:	16 16       	cp	r1, r22
    196e:	17 06       	cpc	r1, r23
    1970:	48 07       	cpc	r20, r24
    1972:	5b 07       	cpc	r21, r27
    1974:	10 f4       	brcc	.+4      	; 0x197a <atan+0x1a>
    1976:	d9 2f       	mov	r29, r25
    1978:	82 d1       	rcall	.+772    	; 0x1c7e <inverse>
    197a:	9f 93       	push	r25
    197c:	8f 93       	push	r24
    197e:	7f 93       	push	r23
    1980:	6f 93       	push	r22
    1982:	29 d2       	rcall	.+1106   	; 0x1dd6 <square>
    1984:	ec e8       	ldi	r30, 0x8C	; 140
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	0d d1       	rcall	.+538    	; 0x1ba4 <__fp_powser>
    198a:	3f d1       	rcall	.+638    	; 0x1c0a <__fp_round>
    198c:	2f 91       	pop	r18
    198e:	3f 91       	pop	r19
    1990:	4f 91       	pop	r20
    1992:	5f 91       	pop	r21
    1994:	87 d1       	rcall	.+782    	; 0x1ca4 <__mulsf3x>
    1996:	dd 23       	and	r29, r29
    1998:	49 f0       	breq	.+18     	; 0x19ac <atan+0x4c>
    199a:	90 58       	subi	r25, 0x80	; 128
    199c:	a2 ea       	ldi	r26, 0xA2	; 162
    199e:	2a ed       	ldi	r18, 0xDA	; 218
    19a0:	3f e0       	ldi	r19, 0x0F	; 15
    19a2:	49 ec       	ldi	r20, 0xC9	; 201
    19a4:	5f e3       	ldi	r21, 0x3F	; 63
    19a6:	d0 78       	andi	r29, 0x80	; 128
    19a8:	5d 27       	eor	r21, r29
    19aa:	4d df       	rcall	.-358    	; 0x1846 <__addsf3x>
    19ac:	df 91       	pop	r29
    19ae:	2d c1       	rjmp	.+602    	; 0x1c0a <__fp_round>

000019b0 <__divsf3>:
    19b0:	0c d0       	rcall	.+24     	; 0x19ca <__divsf3x>
    19b2:	2b c1       	rjmp	.+598    	; 0x1c0a <__fp_round>
    19b4:	23 d1       	rcall	.+582    	; 0x1bfc <__fp_pscB>
    19b6:	40 f0       	brcs	.+16     	; 0x19c8 <__divsf3+0x18>
    19b8:	1a d1       	rcall	.+564    	; 0x1bee <__fp_pscA>
    19ba:	30 f0       	brcs	.+12     	; 0x19c8 <__divsf3+0x18>
    19bc:	21 f4       	brne	.+8      	; 0x19c6 <__divsf3+0x16>
    19be:	5f 3f       	cpi	r21, 0xFF	; 255
    19c0:	19 f0       	breq	.+6      	; 0x19c8 <__divsf3+0x18>
    19c2:	e7 c0       	rjmp	.+462    	; 0x1b92 <__fp_inf>
    19c4:	51 11       	cpse	r21, r1
    19c6:	55 c1       	rjmp	.+682    	; 0x1c72 <__fp_szero>
    19c8:	ea c0       	rjmp	.+468    	; 0x1b9e <__fp_nan>

000019ca <__divsf3x>:
    19ca:	30 d1       	rcall	.+608    	; 0x1c2c <__fp_split3>
    19cc:	98 f3       	brcs	.-26     	; 0x19b4 <__divsf3+0x4>

000019ce <__divsf3_pse>:
    19ce:	99 23       	and	r25, r25
    19d0:	c9 f3       	breq	.-14     	; 0x19c4 <__divsf3+0x14>
    19d2:	55 23       	and	r21, r21
    19d4:	b1 f3       	breq	.-20     	; 0x19c2 <__divsf3+0x12>
    19d6:	95 1b       	sub	r25, r21
    19d8:	55 0b       	sbc	r21, r21
    19da:	bb 27       	eor	r27, r27
    19dc:	aa 27       	eor	r26, r26
    19de:	62 17       	cp	r22, r18
    19e0:	73 07       	cpc	r23, r19
    19e2:	84 07       	cpc	r24, r20
    19e4:	38 f0       	brcs	.+14     	; 0x19f4 <__divsf3_pse+0x26>
    19e6:	9f 5f       	subi	r25, 0xFF	; 255
    19e8:	5f 4f       	sbci	r21, 0xFF	; 255
    19ea:	22 0f       	add	r18, r18
    19ec:	33 1f       	adc	r19, r19
    19ee:	44 1f       	adc	r20, r20
    19f0:	aa 1f       	adc	r26, r26
    19f2:	a9 f3       	breq	.-22     	; 0x19de <__divsf3_pse+0x10>
    19f4:	33 d0       	rcall	.+102    	; 0x1a5c <__divsf3_pse+0x8e>
    19f6:	0e 2e       	mov	r0, r30
    19f8:	3a f0       	brmi	.+14     	; 0x1a08 <__divsf3_pse+0x3a>
    19fa:	e0 e8       	ldi	r30, 0x80	; 128
    19fc:	30 d0       	rcall	.+96     	; 0x1a5e <__divsf3_pse+0x90>
    19fe:	91 50       	subi	r25, 0x01	; 1
    1a00:	50 40       	sbci	r21, 0x00	; 0
    1a02:	e6 95       	lsr	r30
    1a04:	00 1c       	adc	r0, r0
    1a06:	ca f7       	brpl	.-14     	; 0x19fa <__divsf3_pse+0x2c>
    1a08:	29 d0       	rcall	.+82     	; 0x1a5c <__divsf3_pse+0x8e>
    1a0a:	fe 2f       	mov	r31, r30
    1a0c:	27 d0       	rcall	.+78     	; 0x1a5c <__divsf3_pse+0x8e>
    1a0e:	66 0f       	add	r22, r22
    1a10:	77 1f       	adc	r23, r23
    1a12:	88 1f       	adc	r24, r24
    1a14:	bb 1f       	adc	r27, r27
    1a16:	26 17       	cp	r18, r22
    1a18:	37 07       	cpc	r19, r23
    1a1a:	48 07       	cpc	r20, r24
    1a1c:	ab 07       	cpc	r26, r27
    1a1e:	b0 e8       	ldi	r27, 0x80	; 128
    1a20:	09 f0       	breq	.+2      	; 0x1a24 <__divsf3_pse+0x56>
    1a22:	bb 0b       	sbc	r27, r27
    1a24:	80 2d       	mov	r24, r0
    1a26:	bf 01       	movw	r22, r30
    1a28:	ff 27       	eor	r31, r31
    1a2a:	93 58       	subi	r25, 0x83	; 131
    1a2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a2e:	2a f0       	brmi	.+10     	; 0x1a3a <__divsf3_pse+0x6c>
    1a30:	9e 3f       	cpi	r25, 0xFE	; 254
    1a32:	51 05       	cpc	r21, r1
    1a34:	68 f0       	brcs	.+26     	; 0x1a50 <__divsf3_pse+0x82>
    1a36:	ad c0       	rjmp	.+346    	; 0x1b92 <__fp_inf>
    1a38:	1c c1       	rjmp	.+568    	; 0x1c72 <__fp_szero>
    1a3a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a3c:	ec f3       	brlt	.-6      	; 0x1a38 <__divsf3_pse+0x6a>
    1a3e:	98 3e       	cpi	r25, 0xE8	; 232
    1a40:	dc f3       	brlt	.-10     	; 0x1a38 <__divsf3_pse+0x6a>
    1a42:	86 95       	lsr	r24
    1a44:	77 95       	ror	r23
    1a46:	67 95       	ror	r22
    1a48:	b7 95       	ror	r27
    1a4a:	f7 95       	ror	r31
    1a4c:	9f 5f       	subi	r25, 0xFF	; 255
    1a4e:	c9 f7       	brne	.-14     	; 0x1a42 <__divsf3_pse+0x74>
    1a50:	88 0f       	add	r24, r24
    1a52:	91 1d       	adc	r25, r1
    1a54:	96 95       	lsr	r25
    1a56:	87 95       	ror	r24
    1a58:	97 f9       	bld	r25, 7
    1a5a:	08 95       	ret
    1a5c:	e1 e0       	ldi	r30, 0x01	; 1
    1a5e:	66 0f       	add	r22, r22
    1a60:	77 1f       	adc	r23, r23
    1a62:	88 1f       	adc	r24, r24
    1a64:	bb 1f       	adc	r27, r27
    1a66:	62 17       	cp	r22, r18
    1a68:	73 07       	cpc	r23, r19
    1a6a:	84 07       	cpc	r24, r20
    1a6c:	ba 07       	cpc	r27, r26
    1a6e:	20 f0       	brcs	.+8      	; 0x1a78 <__divsf3_pse+0xaa>
    1a70:	62 1b       	sub	r22, r18
    1a72:	73 0b       	sbc	r23, r19
    1a74:	84 0b       	sbc	r24, r20
    1a76:	ba 0b       	sbc	r27, r26
    1a78:	ee 1f       	adc	r30, r30
    1a7a:	88 f7       	brcc	.-30     	; 0x1a5e <__divsf3_pse+0x90>
    1a7c:	e0 95       	com	r30
    1a7e:	08 95       	ret

00001a80 <__fixsfsi>:
    1a80:	04 d0       	rcall	.+8      	; 0x1a8a <__fixunssfsi>
    1a82:	68 94       	set
    1a84:	b1 11       	cpse	r27, r1
    1a86:	f5 c0       	rjmp	.+490    	; 0x1c72 <__fp_szero>
    1a88:	08 95       	ret

00001a8a <__fixunssfsi>:
    1a8a:	d8 d0       	rcall	.+432    	; 0x1c3c <__fp_splitA>
    1a8c:	88 f0       	brcs	.+34     	; 0x1ab0 <__fixunssfsi+0x26>
    1a8e:	9f 57       	subi	r25, 0x7F	; 127
    1a90:	90 f0       	brcs	.+36     	; 0x1ab6 <__fixunssfsi+0x2c>
    1a92:	b9 2f       	mov	r27, r25
    1a94:	99 27       	eor	r25, r25
    1a96:	b7 51       	subi	r27, 0x17	; 23
    1a98:	a0 f0       	brcs	.+40     	; 0x1ac2 <__fixunssfsi+0x38>
    1a9a:	d1 f0       	breq	.+52     	; 0x1ad0 <__fixunssfsi+0x46>
    1a9c:	66 0f       	add	r22, r22
    1a9e:	77 1f       	adc	r23, r23
    1aa0:	88 1f       	adc	r24, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	1a f0       	brmi	.+6      	; 0x1aac <__fixunssfsi+0x22>
    1aa6:	ba 95       	dec	r27
    1aa8:	c9 f7       	brne	.-14     	; 0x1a9c <__fixunssfsi+0x12>
    1aaa:	12 c0       	rjmp	.+36     	; 0x1ad0 <__fixunssfsi+0x46>
    1aac:	b1 30       	cpi	r27, 0x01	; 1
    1aae:	81 f0       	breq	.+32     	; 0x1ad0 <__fixunssfsi+0x46>
    1ab0:	df d0       	rcall	.+446    	; 0x1c70 <__fp_zero>
    1ab2:	b1 e0       	ldi	r27, 0x01	; 1
    1ab4:	08 95       	ret
    1ab6:	dc c0       	rjmp	.+440    	; 0x1c70 <__fp_zero>
    1ab8:	67 2f       	mov	r22, r23
    1aba:	78 2f       	mov	r23, r24
    1abc:	88 27       	eor	r24, r24
    1abe:	b8 5f       	subi	r27, 0xF8	; 248
    1ac0:	39 f0       	breq	.+14     	; 0x1ad0 <__fixunssfsi+0x46>
    1ac2:	b9 3f       	cpi	r27, 0xF9	; 249
    1ac4:	cc f3       	brlt	.-14     	; 0x1ab8 <__fixunssfsi+0x2e>
    1ac6:	86 95       	lsr	r24
    1ac8:	77 95       	ror	r23
    1aca:	67 95       	ror	r22
    1acc:	b3 95       	inc	r27
    1ace:	d9 f7       	brne	.-10     	; 0x1ac6 <__fixunssfsi+0x3c>
    1ad0:	3e f4       	brtc	.+14     	; 0x1ae0 <__fixunssfsi+0x56>
    1ad2:	90 95       	com	r25
    1ad4:	80 95       	com	r24
    1ad6:	70 95       	com	r23
    1ad8:	61 95       	neg	r22
    1ada:	7f 4f       	sbci	r23, 0xFF	; 255
    1adc:	8f 4f       	sbci	r24, 0xFF	; 255
    1ade:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae0:	08 95       	ret

00001ae2 <__floatunsisf>:
    1ae2:	e8 94       	clt
    1ae4:	09 c0       	rjmp	.+18     	; 0x1af8 <__floatsisf+0x12>

00001ae6 <__floatsisf>:
    1ae6:	97 fb       	bst	r25, 7
    1ae8:	3e f4       	brtc	.+14     	; 0x1af8 <__floatsisf+0x12>
    1aea:	90 95       	com	r25
    1aec:	80 95       	com	r24
    1aee:	70 95       	com	r23
    1af0:	61 95       	neg	r22
    1af2:	7f 4f       	sbci	r23, 0xFF	; 255
    1af4:	8f 4f       	sbci	r24, 0xFF	; 255
    1af6:	9f 4f       	sbci	r25, 0xFF	; 255
    1af8:	99 23       	and	r25, r25
    1afa:	a9 f0       	breq	.+42     	; 0x1b26 <__floatsisf+0x40>
    1afc:	f9 2f       	mov	r31, r25
    1afe:	96 e9       	ldi	r25, 0x96	; 150
    1b00:	bb 27       	eor	r27, r27
    1b02:	93 95       	inc	r25
    1b04:	f6 95       	lsr	r31
    1b06:	87 95       	ror	r24
    1b08:	77 95       	ror	r23
    1b0a:	67 95       	ror	r22
    1b0c:	b7 95       	ror	r27
    1b0e:	f1 11       	cpse	r31, r1
    1b10:	f8 cf       	rjmp	.-16     	; 0x1b02 <__floatsisf+0x1c>
    1b12:	fa f4       	brpl	.+62     	; 0x1b52 <__floatsisf+0x6c>
    1b14:	bb 0f       	add	r27, r27
    1b16:	11 f4       	brne	.+4      	; 0x1b1c <__floatsisf+0x36>
    1b18:	60 ff       	sbrs	r22, 0
    1b1a:	1b c0       	rjmp	.+54     	; 0x1b52 <__floatsisf+0x6c>
    1b1c:	6f 5f       	subi	r22, 0xFF	; 255
    1b1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b20:	8f 4f       	sbci	r24, 0xFF	; 255
    1b22:	9f 4f       	sbci	r25, 0xFF	; 255
    1b24:	16 c0       	rjmp	.+44     	; 0x1b52 <__floatsisf+0x6c>
    1b26:	88 23       	and	r24, r24
    1b28:	11 f0       	breq	.+4      	; 0x1b2e <__floatsisf+0x48>
    1b2a:	96 e9       	ldi	r25, 0x96	; 150
    1b2c:	11 c0       	rjmp	.+34     	; 0x1b50 <__floatsisf+0x6a>
    1b2e:	77 23       	and	r23, r23
    1b30:	21 f0       	breq	.+8      	; 0x1b3a <__floatsisf+0x54>
    1b32:	9e e8       	ldi	r25, 0x8E	; 142
    1b34:	87 2f       	mov	r24, r23
    1b36:	76 2f       	mov	r23, r22
    1b38:	05 c0       	rjmp	.+10     	; 0x1b44 <__floatsisf+0x5e>
    1b3a:	66 23       	and	r22, r22
    1b3c:	71 f0       	breq	.+28     	; 0x1b5a <__floatsisf+0x74>
    1b3e:	96 e8       	ldi	r25, 0x86	; 134
    1b40:	86 2f       	mov	r24, r22
    1b42:	70 e0       	ldi	r23, 0x00	; 0
    1b44:	60 e0       	ldi	r22, 0x00	; 0
    1b46:	2a f0       	brmi	.+10     	; 0x1b52 <__floatsisf+0x6c>
    1b48:	9a 95       	dec	r25
    1b4a:	66 0f       	add	r22, r22
    1b4c:	77 1f       	adc	r23, r23
    1b4e:	88 1f       	adc	r24, r24
    1b50:	da f7       	brpl	.-10     	; 0x1b48 <__floatsisf+0x62>
    1b52:	88 0f       	add	r24, r24
    1b54:	96 95       	lsr	r25
    1b56:	87 95       	ror	r24
    1b58:	97 f9       	bld	r25, 7
    1b5a:	08 95       	ret

00001b5c <__fp_arccos>:
    1b5c:	df 93       	push	r29
    1b5e:	cf 93       	push	r28
    1b60:	1f 93       	push	r17
    1b62:	0f 93       	push	r16
    1b64:	8b 01       	movw	r16, r22
    1b66:	ec 01       	movw	r28, r24
    1b68:	e9 eb       	ldi	r30, 0xB9	; 185
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	1b d0       	rcall	.+54     	; 0x1ba4 <__fp_powser>
    1b6e:	4d d0       	rcall	.+154    	; 0x1c0a <__fp_round>
    1b70:	98 01       	movw	r18, r16
    1b72:	ae 01       	movw	r20, r28
    1b74:	8b 01       	movw	r16, r22
    1b76:	ec 01       	movw	r28, r24
    1b78:	60 e0       	ldi	r22, 0x00	; 0
    1b7a:	70 e0       	ldi	r23, 0x00	; 0
    1b7c:	80 e8       	ldi	r24, 0x80	; 128
    1b7e:	9f e3       	ldi	r25, 0x3F	; 63
    1b80:	50 de       	rcall	.-864    	; 0x1822 <__subsf3>
    1b82:	eb d0       	rcall	.+470    	; 0x1d5a <sqrt>
    1b84:	98 01       	movw	r18, r16
    1b86:	ae 01       	movw	r20, r28
    1b88:	0f 91       	pop	r16
    1b8a:	1f 91       	pop	r17
    1b8c:	cf 91       	pop	r28
    1b8e:	df 91       	pop	r29
    1b90:	89 c0       	rjmp	.+274    	; 0x1ca4 <__mulsf3x>

00001b92 <__fp_inf>:
    1b92:	97 f9       	bld	r25, 7
    1b94:	9f 67       	ori	r25, 0x7F	; 127
    1b96:	80 e8       	ldi	r24, 0x80	; 128
    1b98:	70 e0       	ldi	r23, 0x00	; 0
    1b9a:	60 e0       	ldi	r22, 0x00	; 0
    1b9c:	08 95       	ret

00001b9e <__fp_nan>:
    1b9e:	9f ef       	ldi	r25, 0xFF	; 255
    1ba0:	80 ec       	ldi	r24, 0xC0	; 192
    1ba2:	08 95       	ret

00001ba4 <__fp_powser>:
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	1f 93       	push	r17
    1baa:	0f 93       	push	r16
    1bac:	ff 92       	push	r15
    1bae:	ef 92       	push	r14
    1bb0:	df 92       	push	r13
    1bb2:	7b 01       	movw	r14, r22
    1bb4:	8c 01       	movw	r16, r24
    1bb6:	68 94       	set
    1bb8:	05 c0       	rjmp	.+10     	; 0x1bc4 <__fp_powser+0x20>
    1bba:	da 2e       	mov	r13, r26
    1bbc:	ef 01       	movw	r28, r30
    1bbe:	72 d0       	rcall	.+228    	; 0x1ca4 <__mulsf3x>
    1bc0:	fe 01       	movw	r30, r28
    1bc2:	e8 94       	clt
    1bc4:	a5 91       	lpm	r26, Z+
    1bc6:	25 91       	lpm	r18, Z+
    1bc8:	35 91       	lpm	r19, Z+
    1bca:	45 91       	lpm	r20, Z+
    1bcc:	55 91       	lpm	r21, Z+
    1bce:	ae f3       	brts	.-22     	; 0x1bba <__fp_powser+0x16>
    1bd0:	ef 01       	movw	r28, r30
    1bd2:	39 de       	rcall	.-910    	; 0x1846 <__addsf3x>
    1bd4:	fe 01       	movw	r30, r28
    1bd6:	97 01       	movw	r18, r14
    1bd8:	a8 01       	movw	r20, r16
    1bda:	da 94       	dec	r13
    1bdc:	79 f7       	brne	.-34     	; 0x1bbc <__fp_powser+0x18>
    1bde:	df 90       	pop	r13
    1be0:	ef 90       	pop	r14
    1be2:	ff 90       	pop	r15
    1be4:	0f 91       	pop	r16
    1be6:	1f 91       	pop	r17
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	08 95       	ret

00001bee <__fp_pscA>:
    1bee:	00 24       	eor	r0, r0
    1bf0:	0a 94       	dec	r0
    1bf2:	16 16       	cp	r1, r22
    1bf4:	17 06       	cpc	r1, r23
    1bf6:	18 06       	cpc	r1, r24
    1bf8:	09 06       	cpc	r0, r25
    1bfa:	08 95       	ret

00001bfc <__fp_pscB>:
    1bfc:	00 24       	eor	r0, r0
    1bfe:	0a 94       	dec	r0
    1c00:	12 16       	cp	r1, r18
    1c02:	13 06       	cpc	r1, r19
    1c04:	14 06       	cpc	r1, r20
    1c06:	05 06       	cpc	r0, r21
    1c08:	08 95       	ret

00001c0a <__fp_round>:
    1c0a:	09 2e       	mov	r0, r25
    1c0c:	03 94       	inc	r0
    1c0e:	00 0c       	add	r0, r0
    1c10:	11 f4       	brne	.+4      	; 0x1c16 <__fp_round+0xc>
    1c12:	88 23       	and	r24, r24
    1c14:	52 f0       	brmi	.+20     	; 0x1c2a <__fp_round+0x20>
    1c16:	bb 0f       	add	r27, r27
    1c18:	40 f4       	brcc	.+16     	; 0x1c2a <__fp_round+0x20>
    1c1a:	bf 2b       	or	r27, r31
    1c1c:	11 f4       	brne	.+4      	; 0x1c22 <__fp_round+0x18>
    1c1e:	60 ff       	sbrs	r22, 0
    1c20:	04 c0       	rjmp	.+8      	; 0x1c2a <__fp_round+0x20>
    1c22:	6f 5f       	subi	r22, 0xFF	; 255
    1c24:	7f 4f       	sbci	r23, 0xFF	; 255
    1c26:	8f 4f       	sbci	r24, 0xFF	; 255
    1c28:	9f 4f       	sbci	r25, 0xFF	; 255
    1c2a:	08 95       	ret

00001c2c <__fp_split3>:
    1c2c:	57 fd       	sbrc	r21, 7
    1c2e:	90 58       	subi	r25, 0x80	; 128
    1c30:	44 0f       	add	r20, r20
    1c32:	55 1f       	adc	r21, r21
    1c34:	59 f0       	breq	.+22     	; 0x1c4c <__fp_splitA+0x10>
    1c36:	5f 3f       	cpi	r21, 0xFF	; 255
    1c38:	71 f0       	breq	.+28     	; 0x1c56 <__fp_splitA+0x1a>
    1c3a:	47 95       	ror	r20

00001c3c <__fp_splitA>:
    1c3c:	88 0f       	add	r24, r24
    1c3e:	97 fb       	bst	r25, 7
    1c40:	99 1f       	adc	r25, r25
    1c42:	61 f0       	breq	.+24     	; 0x1c5c <__fp_splitA+0x20>
    1c44:	9f 3f       	cpi	r25, 0xFF	; 255
    1c46:	79 f0       	breq	.+30     	; 0x1c66 <__fp_splitA+0x2a>
    1c48:	87 95       	ror	r24
    1c4a:	08 95       	ret
    1c4c:	12 16       	cp	r1, r18
    1c4e:	13 06       	cpc	r1, r19
    1c50:	14 06       	cpc	r1, r20
    1c52:	55 1f       	adc	r21, r21
    1c54:	f2 cf       	rjmp	.-28     	; 0x1c3a <__fp_split3+0xe>
    1c56:	46 95       	lsr	r20
    1c58:	f1 df       	rcall	.-30     	; 0x1c3c <__fp_splitA>
    1c5a:	08 c0       	rjmp	.+16     	; 0x1c6c <__fp_splitA+0x30>
    1c5c:	16 16       	cp	r1, r22
    1c5e:	17 06       	cpc	r1, r23
    1c60:	18 06       	cpc	r1, r24
    1c62:	99 1f       	adc	r25, r25
    1c64:	f1 cf       	rjmp	.-30     	; 0x1c48 <__fp_splitA+0xc>
    1c66:	86 95       	lsr	r24
    1c68:	71 05       	cpc	r23, r1
    1c6a:	61 05       	cpc	r22, r1
    1c6c:	08 94       	sec
    1c6e:	08 95       	ret

00001c70 <__fp_zero>:
    1c70:	e8 94       	clt

00001c72 <__fp_szero>:
    1c72:	bb 27       	eor	r27, r27
    1c74:	66 27       	eor	r22, r22
    1c76:	77 27       	eor	r23, r23
    1c78:	cb 01       	movw	r24, r22
    1c7a:	97 f9       	bld	r25, 7
    1c7c:	08 95       	ret

00001c7e <inverse>:
    1c7e:	9b 01       	movw	r18, r22
    1c80:	ac 01       	movw	r20, r24
    1c82:	60 e0       	ldi	r22, 0x00	; 0
    1c84:	70 e0       	ldi	r23, 0x00	; 0
    1c86:	80 e8       	ldi	r24, 0x80	; 128
    1c88:	9f e3       	ldi	r25, 0x3F	; 63
    1c8a:	92 ce       	rjmp	.-732    	; 0x19b0 <__divsf3>

00001c8c <__mulsf3>:
    1c8c:	0b d0       	rcall	.+22     	; 0x1ca4 <__mulsf3x>
    1c8e:	bd cf       	rjmp	.-134    	; 0x1c0a <__fp_round>
    1c90:	ae df       	rcall	.-164    	; 0x1bee <__fp_pscA>
    1c92:	28 f0       	brcs	.+10     	; 0x1c9e <__mulsf3+0x12>
    1c94:	b3 df       	rcall	.-154    	; 0x1bfc <__fp_pscB>
    1c96:	18 f0       	brcs	.+6      	; 0x1c9e <__mulsf3+0x12>
    1c98:	95 23       	and	r25, r21
    1c9a:	09 f0       	breq	.+2      	; 0x1c9e <__mulsf3+0x12>
    1c9c:	7a cf       	rjmp	.-268    	; 0x1b92 <__fp_inf>
    1c9e:	7f cf       	rjmp	.-258    	; 0x1b9e <__fp_nan>
    1ca0:	11 24       	eor	r1, r1
    1ca2:	e7 cf       	rjmp	.-50     	; 0x1c72 <__fp_szero>

00001ca4 <__mulsf3x>:
    1ca4:	c3 df       	rcall	.-122    	; 0x1c2c <__fp_split3>
    1ca6:	a0 f3       	brcs	.-24     	; 0x1c90 <__mulsf3+0x4>

00001ca8 <__mulsf3_pse>:
    1ca8:	95 9f       	mul	r25, r21
    1caa:	d1 f3       	breq	.-12     	; 0x1ca0 <__mulsf3+0x14>
    1cac:	95 0f       	add	r25, r21
    1cae:	50 e0       	ldi	r21, 0x00	; 0
    1cb0:	55 1f       	adc	r21, r21
    1cb2:	62 9f       	mul	r22, r18
    1cb4:	f0 01       	movw	r30, r0
    1cb6:	72 9f       	mul	r23, r18
    1cb8:	bb 27       	eor	r27, r27
    1cba:	f0 0d       	add	r31, r0
    1cbc:	b1 1d       	adc	r27, r1
    1cbe:	63 9f       	mul	r22, r19
    1cc0:	aa 27       	eor	r26, r26
    1cc2:	f0 0d       	add	r31, r0
    1cc4:	b1 1d       	adc	r27, r1
    1cc6:	aa 1f       	adc	r26, r26
    1cc8:	64 9f       	mul	r22, r20
    1cca:	66 27       	eor	r22, r22
    1ccc:	b0 0d       	add	r27, r0
    1cce:	a1 1d       	adc	r26, r1
    1cd0:	66 1f       	adc	r22, r22
    1cd2:	82 9f       	mul	r24, r18
    1cd4:	22 27       	eor	r18, r18
    1cd6:	b0 0d       	add	r27, r0
    1cd8:	a1 1d       	adc	r26, r1
    1cda:	62 1f       	adc	r22, r18
    1cdc:	73 9f       	mul	r23, r19
    1cde:	b0 0d       	add	r27, r0
    1ce0:	a1 1d       	adc	r26, r1
    1ce2:	62 1f       	adc	r22, r18
    1ce4:	83 9f       	mul	r24, r19
    1ce6:	a0 0d       	add	r26, r0
    1ce8:	61 1d       	adc	r22, r1
    1cea:	22 1f       	adc	r18, r18
    1cec:	74 9f       	mul	r23, r20
    1cee:	33 27       	eor	r19, r19
    1cf0:	a0 0d       	add	r26, r0
    1cf2:	61 1d       	adc	r22, r1
    1cf4:	23 1f       	adc	r18, r19
    1cf6:	84 9f       	mul	r24, r20
    1cf8:	60 0d       	add	r22, r0
    1cfa:	21 1d       	adc	r18, r1
    1cfc:	82 2f       	mov	r24, r18
    1cfe:	76 2f       	mov	r23, r22
    1d00:	6a 2f       	mov	r22, r26
    1d02:	11 24       	eor	r1, r1
    1d04:	9f 57       	subi	r25, 0x7F	; 127
    1d06:	50 40       	sbci	r21, 0x00	; 0
    1d08:	8a f0       	brmi	.+34     	; 0x1d2c <__mulsf3_pse+0x84>
    1d0a:	e1 f0       	breq	.+56     	; 0x1d44 <__mulsf3_pse+0x9c>
    1d0c:	88 23       	and	r24, r24
    1d0e:	4a f0       	brmi	.+18     	; 0x1d22 <__mulsf3_pse+0x7a>
    1d10:	ee 0f       	add	r30, r30
    1d12:	ff 1f       	adc	r31, r31
    1d14:	bb 1f       	adc	r27, r27
    1d16:	66 1f       	adc	r22, r22
    1d18:	77 1f       	adc	r23, r23
    1d1a:	88 1f       	adc	r24, r24
    1d1c:	91 50       	subi	r25, 0x01	; 1
    1d1e:	50 40       	sbci	r21, 0x00	; 0
    1d20:	a9 f7       	brne	.-22     	; 0x1d0c <__mulsf3_pse+0x64>
    1d22:	9e 3f       	cpi	r25, 0xFE	; 254
    1d24:	51 05       	cpc	r21, r1
    1d26:	70 f0       	brcs	.+28     	; 0x1d44 <__mulsf3_pse+0x9c>
    1d28:	34 cf       	rjmp	.-408    	; 0x1b92 <__fp_inf>
    1d2a:	a3 cf       	rjmp	.-186    	; 0x1c72 <__fp_szero>
    1d2c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d2e:	ec f3       	brlt	.-6      	; 0x1d2a <__mulsf3_pse+0x82>
    1d30:	98 3e       	cpi	r25, 0xE8	; 232
    1d32:	dc f3       	brlt	.-10     	; 0x1d2a <__mulsf3_pse+0x82>
    1d34:	86 95       	lsr	r24
    1d36:	77 95       	ror	r23
    1d38:	67 95       	ror	r22
    1d3a:	b7 95       	ror	r27
    1d3c:	f7 95       	ror	r31
    1d3e:	e7 95       	ror	r30
    1d40:	9f 5f       	subi	r25, 0xFF	; 255
    1d42:	c1 f7       	brne	.-16     	; 0x1d34 <__mulsf3_pse+0x8c>
    1d44:	fe 2b       	or	r31, r30
    1d46:	88 0f       	add	r24, r24
    1d48:	91 1d       	adc	r25, r1
    1d4a:	96 95       	lsr	r25
    1d4c:	87 95       	ror	r24
    1d4e:	97 f9       	bld	r25, 7
    1d50:	08 95       	ret
    1d52:	11 f4       	brne	.+4      	; 0x1d58 <__mulsf3_pse+0xb0>
    1d54:	0e f4       	brtc	.+2      	; 0x1d58 <__mulsf3_pse+0xb0>
    1d56:	23 cf       	rjmp	.-442    	; 0x1b9e <__fp_nan>
    1d58:	41 c0       	rjmp	.+130    	; 0x1ddc <__fp_mpack>

00001d5a <sqrt>:
    1d5a:	70 df       	rcall	.-288    	; 0x1c3c <__fp_splitA>
    1d5c:	d0 f3       	brcs	.-12     	; 0x1d52 <__mulsf3_pse+0xaa>
    1d5e:	99 23       	and	r25, r25
    1d60:	d9 f3       	breq	.-10     	; 0x1d58 <__mulsf3_pse+0xb0>
    1d62:	ce f3       	brts	.-14     	; 0x1d56 <__mulsf3_pse+0xae>
    1d64:	9f 57       	subi	r25, 0x7F	; 127
    1d66:	55 0b       	sbc	r21, r21
    1d68:	87 ff       	sbrs	r24, 7
    1d6a:	46 d0       	rcall	.+140    	; 0x1df8 <__fp_norm2>
    1d6c:	00 24       	eor	r0, r0
    1d6e:	a0 e6       	ldi	r26, 0x60	; 96
    1d70:	40 ea       	ldi	r20, 0xA0	; 160
    1d72:	90 01       	movw	r18, r0
    1d74:	80 58       	subi	r24, 0x80	; 128
    1d76:	56 95       	lsr	r21
    1d78:	97 95       	ror	r25
    1d7a:	28 f4       	brcc	.+10     	; 0x1d86 <sqrt+0x2c>
    1d7c:	80 5c       	subi	r24, 0xC0	; 192
    1d7e:	66 0f       	add	r22, r22
    1d80:	77 1f       	adc	r23, r23
    1d82:	88 1f       	adc	r24, r24
    1d84:	20 f0       	brcs	.+8      	; 0x1d8e <sqrt+0x34>
    1d86:	26 17       	cp	r18, r22
    1d88:	37 07       	cpc	r19, r23
    1d8a:	48 07       	cpc	r20, r24
    1d8c:	30 f4       	brcc	.+12     	; 0x1d9a <sqrt+0x40>
    1d8e:	62 1b       	sub	r22, r18
    1d90:	73 0b       	sbc	r23, r19
    1d92:	84 0b       	sbc	r24, r20
    1d94:	20 29       	or	r18, r0
    1d96:	31 29       	or	r19, r1
    1d98:	4a 2b       	or	r20, r26
    1d9a:	a6 95       	lsr	r26
    1d9c:	17 94       	ror	r1
    1d9e:	07 94       	ror	r0
    1da0:	20 25       	eor	r18, r0
    1da2:	31 25       	eor	r19, r1
    1da4:	4a 27       	eor	r20, r26
    1da6:	58 f7       	brcc	.-42     	; 0x1d7e <sqrt+0x24>
    1da8:	66 0f       	add	r22, r22
    1daa:	77 1f       	adc	r23, r23
    1dac:	88 1f       	adc	r24, r24
    1dae:	20 f0       	brcs	.+8      	; 0x1db8 <sqrt+0x5e>
    1db0:	26 17       	cp	r18, r22
    1db2:	37 07       	cpc	r19, r23
    1db4:	48 07       	cpc	r20, r24
    1db6:	30 f4       	brcc	.+12     	; 0x1dc4 <sqrt+0x6a>
    1db8:	62 0b       	sbc	r22, r18
    1dba:	73 0b       	sbc	r23, r19
    1dbc:	84 0b       	sbc	r24, r20
    1dbe:	20 0d       	add	r18, r0
    1dc0:	31 1d       	adc	r19, r1
    1dc2:	41 1d       	adc	r20, r1
    1dc4:	a0 95       	com	r26
    1dc6:	81 f7       	brne	.-32     	; 0x1da8 <sqrt+0x4e>
    1dc8:	b9 01       	movw	r22, r18
    1dca:	84 2f       	mov	r24, r20
    1dcc:	91 58       	subi	r25, 0x81	; 129
    1dce:	88 0f       	add	r24, r24
    1dd0:	96 95       	lsr	r25
    1dd2:	87 95       	ror	r24
    1dd4:	08 95       	ret

00001dd6 <square>:
    1dd6:	9b 01       	movw	r18, r22
    1dd8:	ac 01       	movw	r20, r24
    1dda:	58 cf       	rjmp	.-336    	; 0x1c8c <__mulsf3>

00001ddc <__fp_mpack>:
    1ddc:	9f 3f       	cpi	r25, 0xFF	; 255
    1dde:	31 f0       	breq	.+12     	; 0x1dec <__fp_mpack_finite+0xc>

00001de0 <__fp_mpack_finite>:
    1de0:	91 50       	subi	r25, 0x01	; 1
    1de2:	20 f4       	brcc	.+8      	; 0x1dec <__fp_mpack_finite+0xc>
    1de4:	87 95       	ror	r24
    1de6:	77 95       	ror	r23
    1de8:	67 95       	ror	r22
    1dea:	b7 95       	ror	r27
    1dec:	88 0f       	add	r24, r24
    1dee:	91 1d       	adc	r25, r1
    1df0:	96 95       	lsr	r25
    1df2:	87 95       	ror	r24
    1df4:	97 f9       	bld	r25, 7
    1df6:	08 95       	ret

00001df8 <__fp_norm2>:
    1df8:	91 50       	subi	r25, 0x01	; 1
    1dfa:	50 40       	sbci	r21, 0x00	; 0
    1dfc:	66 0f       	add	r22, r22
    1dfe:	77 1f       	adc	r23, r23
    1e00:	88 1f       	adc	r24, r24
    1e02:	d2 f7       	brpl	.-12     	; 0x1df8 <__fp_norm2>
    1e04:	08 95       	ret

00001e06 <__divmodsi4>:
    1e06:	05 2e       	mov	r0, r21
    1e08:	97 fb       	bst	r25, 7
    1e0a:	16 f4       	brtc	.+4      	; 0x1e10 <__divmodsi4+0xa>
    1e0c:	00 94       	com	r0
    1e0e:	0f d0       	rcall	.+30     	; 0x1e2e <__negsi2>
    1e10:	57 fd       	sbrc	r21, 7
    1e12:	05 d0       	rcall	.+10     	; 0x1e1e <__divmodsi4_neg2>
    1e14:	1e d0       	rcall	.+60     	; 0x1e52 <__udivmodsi4>
    1e16:	07 fc       	sbrc	r0, 7
    1e18:	02 d0       	rcall	.+4      	; 0x1e1e <__divmodsi4_neg2>
    1e1a:	46 f4       	brtc	.+16     	; 0x1e2c <__divmodsi4_exit>
    1e1c:	08 c0       	rjmp	.+16     	; 0x1e2e <__negsi2>

00001e1e <__divmodsi4_neg2>:
    1e1e:	50 95       	com	r21
    1e20:	40 95       	com	r20
    1e22:	30 95       	com	r19
    1e24:	21 95       	neg	r18
    1e26:	3f 4f       	sbci	r19, 0xFF	; 255
    1e28:	4f 4f       	sbci	r20, 0xFF	; 255
    1e2a:	5f 4f       	sbci	r21, 0xFF	; 255

00001e2c <__divmodsi4_exit>:
    1e2c:	08 95       	ret

00001e2e <__negsi2>:
    1e2e:	90 95       	com	r25
    1e30:	80 95       	com	r24
    1e32:	70 95       	com	r23
    1e34:	61 95       	neg	r22
    1e36:	7f 4f       	sbci	r23, 0xFF	; 255
    1e38:	8f 4f       	sbci	r24, 0xFF	; 255
    1e3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3c:	08 95       	ret

00001e3e <__muluhisi3>:
    1e3e:	2b d0       	rcall	.+86     	; 0x1e96 <__umulhisi3>
    1e40:	a5 9f       	mul	r26, r21
    1e42:	90 0d       	add	r25, r0
    1e44:	b4 9f       	mul	r27, r20
    1e46:	90 0d       	add	r25, r0
    1e48:	a4 9f       	mul	r26, r20
    1e4a:	80 0d       	add	r24, r0
    1e4c:	91 1d       	adc	r25, r1
    1e4e:	11 24       	eor	r1, r1
    1e50:	08 95       	ret

00001e52 <__udivmodsi4>:
    1e52:	a1 e2       	ldi	r26, 0x21	; 33
    1e54:	1a 2e       	mov	r1, r26
    1e56:	aa 1b       	sub	r26, r26
    1e58:	bb 1b       	sub	r27, r27
    1e5a:	fd 01       	movw	r30, r26
    1e5c:	0d c0       	rjmp	.+26     	; 0x1e78 <__udivmodsi4_ep>

00001e5e <__udivmodsi4_loop>:
    1e5e:	aa 1f       	adc	r26, r26
    1e60:	bb 1f       	adc	r27, r27
    1e62:	ee 1f       	adc	r30, r30
    1e64:	ff 1f       	adc	r31, r31
    1e66:	a2 17       	cp	r26, r18
    1e68:	b3 07       	cpc	r27, r19
    1e6a:	e4 07       	cpc	r30, r20
    1e6c:	f5 07       	cpc	r31, r21
    1e6e:	20 f0       	brcs	.+8      	; 0x1e78 <__udivmodsi4_ep>
    1e70:	a2 1b       	sub	r26, r18
    1e72:	b3 0b       	sbc	r27, r19
    1e74:	e4 0b       	sbc	r30, r20
    1e76:	f5 0b       	sbc	r31, r21

00001e78 <__udivmodsi4_ep>:
    1e78:	66 1f       	adc	r22, r22
    1e7a:	77 1f       	adc	r23, r23
    1e7c:	88 1f       	adc	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	1a 94       	dec	r1
    1e82:	69 f7       	brne	.-38     	; 0x1e5e <__udivmodsi4_loop>
    1e84:	60 95       	com	r22
    1e86:	70 95       	com	r23
    1e88:	80 95       	com	r24
    1e8a:	90 95       	com	r25
    1e8c:	9b 01       	movw	r18, r22
    1e8e:	ac 01       	movw	r20, r24
    1e90:	bd 01       	movw	r22, r26
    1e92:	cf 01       	movw	r24, r30
    1e94:	08 95       	ret

00001e96 <__umulhisi3>:
    1e96:	a2 9f       	mul	r26, r18
    1e98:	b0 01       	movw	r22, r0
    1e9a:	b3 9f       	mul	r27, r19
    1e9c:	c0 01       	movw	r24, r0
    1e9e:	a3 9f       	mul	r26, r19
    1ea0:	70 0d       	add	r23, r0
    1ea2:	81 1d       	adc	r24, r1
    1ea4:	11 24       	eor	r1, r1
    1ea6:	91 1d       	adc	r25, r1
    1ea8:	b2 9f       	mul	r27, r18
    1eaa:	70 0d       	add	r23, r0
    1eac:	81 1d       	adc	r24, r1
    1eae:	11 24       	eor	r1, r1
    1eb0:	91 1d       	adc	r25, r1
    1eb2:	08 95       	ret

00001eb4 <_exit>:
    1eb4:	f8 94       	cli

00001eb6 <__stop_program>:
    1eb6:	ff cf       	rjmp	.-2      	; 0x1eb6 <__stop_program>
