
Test_servo_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  000039fc  00003a90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000039fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000781  0080012c  0080012c  00003abc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003abc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00003aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f0d  00000000  00000000  00003bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000351  00000000  00000000  00005ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d0e  00000000  00000000  00005e32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007c4  00000000  00000000  00006b40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000055d  00000000  00000000  00007304  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002c7c  00000000  00000000  00007861  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  0000a4dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	70 c0       	rjmp	.+224    	; 0xe2 <__ctors_end>
       2:	00 00       	nop
       4:	8d c0       	rjmp	.+282    	; 0x120 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c 94 6b 12 	jmp	0x24d6	; 0x24d6 <__vector_2>
       c:	89 c0       	rjmp	.+274    	; 0x120 <__bad_interrupt>
       e:	00 00       	nop
      10:	87 c0       	rjmp	.+270    	; 0x120 <__bad_interrupt>
      12:	00 00       	nop
      14:	85 c0       	rjmp	.+266    	; 0x120 <__bad_interrupt>
      16:	00 00       	nop
      18:	83 c0       	rjmp	.+262    	; 0x120 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	81 c0       	rjmp	.+258    	; 0x120 <__bad_interrupt>
      1e:	00 00       	nop
      20:	7f c0       	rjmp	.+254    	; 0x120 <__bad_interrupt>
      22:	00 00       	nop
      24:	7d c0       	rjmp	.+250    	; 0x120 <__bad_interrupt>
      26:	00 00       	nop
      28:	7b c0       	rjmp	.+246    	; 0x120 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	79 c0       	rjmp	.+242    	; 0x120 <__bad_interrupt>
      2e:	00 00       	nop
      30:	77 c0       	rjmp	.+238    	; 0x120 <__bad_interrupt>
      32:	00 00       	nop
      34:	75 c0       	rjmp	.+234    	; 0x120 <__bad_interrupt>
      36:	00 00       	nop
      38:	73 c0       	rjmp	.+230    	; 0x120 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	71 c0       	rjmp	.+226    	; 0x120 <__bad_interrupt>
      3e:	00 00       	nop
      40:	6f c0       	rjmp	.+222    	; 0x120 <__bad_interrupt>
      42:	00 00       	nop
      44:	6d c0       	rjmp	.+218    	; 0x120 <__bad_interrupt>
      46:	00 00       	nop
      48:	79 c0       	rjmp	.+242    	; 0x13c <__vector_18>
      4a:	00 00       	nop
      4c:	69 c0       	rjmp	.+210    	; 0x120 <__bad_interrupt>
      4e:	00 00       	nop
      50:	67 c0       	rjmp	.+206    	; 0x120 <__bad_interrupt>
      52:	00 00       	nop
      54:	65 c0       	rjmp	.+202    	; 0x120 <__bad_interrupt>
      56:	00 00       	nop
      58:	63 c0       	rjmp	.+198    	; 0x120 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	61 c0       	rjmp	.+194    	; 0x120 <__bad_interrupt>
      5e:	00 00       	nop
      60:	5f c0       	rjmp	.+190    	; 0x120 <__bad_interrupt>
      62:	00 00       	nop
      64:	5d c0       	rjmp	.+186    	; 0x120 <__bad_interrupt>
      66:	00 00       	nop
      68:	5b c0       	rjmp	.+182    	; 0x120 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	59 c0       	rjmp	.+178    	; 0x120 <__bad_interrupt>
      6e:	00 00       	nop
      70:	57 c0       	rjmp	.+174    	; 0x120 <__bad_interrupt>
      72:	00 00       	nop
      74:	55 c0       	rjmp	.+170    	; 0x120 <__bad_interrupt>
      76:	00 00       	nop
      78:	53 c0       	rjmp	.+166    	; 0x120 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	51 c0       	rjmp	.+162    	; 0x120 <__bad_interrupt>
      7e:	00 00       	nop
      80:	4f c0       	rjmp	.+158    	; 0x120 <__bad_interrupt>
      82:	00 00       	nop
      84:	4d c0       	rjmp	.+154    	; 0x120 <__bad_interrupt>
      86:	00 00       	nop
      88:	4b c0       	rjmp	.+150    	; 0x120 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 07       	cpc	r19, r31
      ba:	2c 7a       	andi	r18, 0xAC	; 172
      bc:	a5 ba       	out	0x15, r10	; 21
      be:	6c c5       	rjmp	.+2776   	; 0xb98 <MoveRearRightLeg+0xac>
      c0:	90 da       	rcall	.-2784   	; 0xfffff5e2 <__eeprom_end+0xff7ef5e2>
      c2:	3b 93       	.word	0x933b	; ????
      c4:	65 fc       	sbrc	r6, 5
      c6:	8b bc       	out	0x2b, r8	; 43
      c8:	53 f8       	bld	r5, 3
      ca:	10 fd       	sbrc	r17, 0
      cc:	3c 56       	subi	r19, 0x6C	; 108
      ce:	92 83       	std	Z+2, r25	; 0x02
      d0:	4d bd       	out	0x2d, r20	; 45
      d2:	87 9d       	mul	r24, r7
      d4:	3a b6       	in	r3, 0x3a	; 58
      d6:	3d cb       	rjmp	.-2438   	; 0xfffff752 <__eeprom_end+0xff7ef752>
      d8:	c9 bf       	out	0x39, r28	; 57
      da:	5b be       	out	0x3b, r5	; 59
      dc:	73 da       	rcall	.-2842   	; 0xfffff5c4 <__eeprom_end+0xff7ef5c4>
      de:	0f c9       	rjmp	.-3554   	; 0xfffff2fe <__eeprom_end+0xff7ef2fe>
      e0:	3f 00       	.word	0x003f	; ????

000000e2 <__ctors_end>:
      e2:	11 24       	eor	r1, r1
      e4:	1f be       	out	0x3f, r1	; 63
      e6:	cf ef       	ldi	r28, 0xFF	; 255
      e8:	d0 e4       	ldi	r29, 0x40	; 64
      ea:	de bf       	out	0x3e, r29	; 62
      ec:	cd bf       	out	0x3d, r28	; 61

000000ee <__do_copy_data>:
      ee:	11 e0       	ldi	r17, 0x01	; 1
      f0:	a0 e0       	ldi	r26, 0x00	; 0
      f2:	b1 e0       	ldi	r27, 0x01	; 1
      f4:	ec ef       	ldi	r30, 0xFC	; 252
      f6:	f9 e3       	ldi	r31, 0x39	; 57
      f8:	00 e0       	ldi	r16, 0x00	; 0
      fa:	0b bf       	out	0x3b, r16	; 59
      fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x14>
      fe:	07 90       	elpm	r0, Z+
     100:	0d 92       	st	X+, r0
     102:	ac 32       	cpi	r26, 0x2C	; 44
     104:	b1 07       	cpc	r27, r17
     106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0x10>

00000108 <__do_clear_bss>:
     108:	28 e0       	ldi	r18, 0x08	; 8
     10a:	ac e2       	ldi	r26, 0x2C	; 44
     10c:	b1 e0       	ldi	r27, 0x01	; 1
     10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
     110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
     112:	ad 3a       	cpi	r26, 0xAD	; 173
     114:	b2 07       	cpc	r27, r18
     116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>
     118:	0e 94 8b 19 	call	0x3316	; 0x3316 <main>
     11c:	0c 94 fc 1c 	jmp	0x39f8	; 0x39f8 <_exit>

00000120 <__bad_interrupt>:
     120:	6f cf       	rjmp	.-290    	; 0x0 <__vectors>

00000122 <timer0Init>:
		// Vänta tills den sänt klart det sista
	}
	USART0RecieveMode();
	sei(); // Tillåt interrupts igen
	
}
     122:	85 b5       	in	r24, 0x25	; 37
     124:	84 60       	ori	r24, 0x04	; 4
     126:	85 bd       	out	0x25, r24	; 37
     128:	16 bc       	out	0x26, r1	; 38
     12a:	ee e6       	ldi	r30, 0x6E	; 110
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	81 60       	ori	r24, 0x01	; 1
     132:	80 83       	st	Z, r24
     134:	78 94       	sei
     136:	10 92 ac 08 	sts	0x08AC, r1
     13a:	08 95       	ret

0000013c <__vector_18>:
     13c:	1f 92       	push	r1
     13e:	0f 92       	push	r0
     140:	0f b6       	in	r0, 0x3f	; 63
     142:	0f 92       	push	r0
     144:	11 24       	eor	r1, r1
     146:	8f 93       	push	r24
     148:	80 91 ac 08 	lds	r24, 0x08AC
     14c:	8f 5f       	subi	r24, 0xFF	; 255
     14e:	80 93 ac 08 	sts	0x08AC, r24
     152:	8f 91       	pop	r24
     154:	0f 90       	pop	r0
     156:	0f be       	out	0x3f, r0	; 63
     158:	0f 90       	pop	r0
     15a:	1f 90       	pop	r1
     15c:	18 95       	reti

0000015e <initUSART>:
     15e:	84 e0       	ldi	r24, 0x04	; 4
     160:	8a b9       	out	0x0a, r24	; 10
     162:	1b b8       	out	0x0b, r1	; 11
     164:	10 92 c5 00 	sts	0x00C5, r1
     168:	10 92 c4 00 	sts	0x00C4, r1
     16c:	88 e1       	ldi	r24, 0x18	; 24
     16e:	80 93 c1 00 	sts	0x00C1, r24
     172:	86 e0       	ldi	r24, 0x06	; 6
     174:	80 93 c2 00 	sts	0x00C2, r24
     178:	08 95       	ret

0000017a <USARTWriteChar>:
     17a:	e0 ec       	ldi	r30, 0xC0	; 192
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	90 81       	ld	r25, Z
     180:	95 ff       	sbrs	r25, 5
     182:	fd cf       	rjmp	.-6      	; 0x17e <USARTWriteChar+0x4>
     184:	80 93 c6 00 	sts	0x00C6, r24
     188:	08 95       	ret

0000018a <USARTSendInstruction5>:
void USARTSendInstruction5(int ID, int instruction, int parameter0, int parameter1, int parameter2, int parameter3, int parameter4)
{
     18a:	cf 92       	push	r12
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	c8 2f       	mov	r28, r24
     19a:	d6 2f       	mov	r29, r22
     19c:	14 2f       	mov	r17, r20
     19e:	f2 2e       	mov	r15, r18
	PORTD = (0<<PORTD2);
}

void USART0SendMode()
{
	PORTD = (1<<PORTD2);
     1a0:	84 e0       	ldi	r24, 0x04	; 4
     1a2:	8b b9       	out	0x0b, r24	; 11
}
void USARTSendInstruction5(int ID, int instruction, int parameter0, int parameter1, int parameter2, int parameter3, int parameter4)
{
	// sätt USART till sändläge
	USART0SendMode();
	UCSR0A = UCSR0A | (0 << 6); // Gjorde så att vi kunde skicka en instruktion efter en instruktion/read.
     1a4:	e0 ec       	ldi	r30, 0xC0	; 192
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	80 83       	st	Z, r24
	USARTWriteChar(0xFF);
     1ac:	8f ef       	ldi	r24, 0xFF	; 255
     1ae:	e5 df       	rcall	.-54     	; 0x17a <USARTWriteChar>
	USARTWriteChar(0xFF);
     1b0:	8f ef       	ldi	r24, 0xFF	; 255
     1b2:	e3 df       	rcall	.-58     	; 0x17a <USARTWriteChar>
	USARTWriteChar(ID);
     1b4:	8c 2f       	mov	r24, r28
     1b6:	e1 df       	rcall	.-62     	; 0x17a <USARTWriteChar>
	USARTWriteChar(7); // Paketets längd.
     1b8:	87 e0       	ldi	r24, 0x07	; 7
     1ba:	df df       	rcall	.-66     	; 0x17a <USARTWriteChar>
	USARTWriteChar(instruction);
     1bc:	8d 2f       	mov	r24, r29
     1be:	dd df       	rcall	.-70     	; 0x17a <USARTWriteChar>
	USARTWriteChar(parameter0);
     1c0:	81 2f       	mov	r24, r17
     1c2:	db df       	rcall	.-74     	; 0x17a <USARTWriteChar>
	USARTWriteChar(parameter1);
     1c4:	8f 2d       	mov	r24, r15
     1c6:	d9 df       	rcall	.-78     	; 0x17a <USARTWriteChar>
	USARTWriteChar(parameter2);
     1c8:	80 2f       	mov	r24, r16
     1ca:	d7 df       	rcall	.-82     	; 0x17a <USARTWriteChar>
	USARTWriteChar(parameter3);
     1cc:	8e 2d       	mov	r24, r14
     1ce:	d5 df       	rcall	.-86     	; 0x17a <USARTWriteChar>
	USARTWriteChar(parameter4);
     1d0:	8c 2d       	mov	r24, r12
     1d2:	d3 df       	rcall	.-90     	; 0x17a <USARTWriteChar>
	cli();
     1d4:	f8 94       	cli
	USARTWriteChar(~(ID+7+instruction+parameter0+parameter1+parameter2+parameter3+parameter4)); // Checksum
     1d6:	87 e0       	ldi	r24, 0x07	; 7
     1d8:	8c 0d       	add	r24, r12
     1da:	e8 0e       	add	r14, r24
     1dc:	0e 0d       	add	r16, r14
     1de:	f0 0e       	add	r15, r16
     1e0:	1f 0d       	add	r17, r15
     1e2:	d1 0f       	add	r29, r17
     1e4:	8d 2f       	mov	r24, r29
     1e6:	8c 0f       	add	r24, r28
     1e8:	80 95       	com	r24
     1ea:	c7 df       	rcall	.-114    	; 0x17a <USARTWriteChar>
	while(!TXD0_FINISHED) //TXD0 sätts till 1 då all data shiftats ut ifrån usarten
     1ec:	e0 ec       	ldi	r30, 0xC0	; 192
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	80 81       	ld	r24, Z
     1f2:	86 ff       	sbrs	r24, 6
     1f4:	fd cf       	rjmp	.-6      	; 0x1f0 <USARTSendInstruction5+0x66>
int standardSpeed_g = 20;


void USART0RecieveMode() 
{
	PORTD = (0<<PORTD2);
     1f6:	1b b8       	out	0x0b, r1	; 11
		// Vänta tills den sänt klart det sista
	}
	;
	USART0RecieveMode();
 	//char test1 = RXD0_DATA; // För att läsa det som är i reciever bufferten, används nu för att readchar ska funka
	sei(); // Tillåt interrupts igen
     1f8:	78 94       	sei
	
}
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	1f 91       	pop	r17
     200:	0f 91       	pop	r16
     202:	ff 90       	pop	r15
     204:	ef 90       	pop	r14
     206:	cf 90       	pop	r12
     208:	08 95       	ret

0000020a <USARTReadChar>:


char USARTReadChar()
{
	//Vänta tills data är tillgänglig
	while(!RXD0_READY)
     20a:	e0 ec       	ldi	r30, 0xC0	; 192
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	80 81       	ld	r24, Z
     210:	88 23       	and	r24, r24
     212:	ec f7       	brge	.-6      	; 0x20e <USARTReadChar+0x4>
	{
		//Gör ingenting
	}
	return RXD0_DATA;
     214:	80 91 c6 00 	lds	r24, 0x00C6
}
     218:	08 95       	ret

0000021a <USARTReadStatusPacket>:

int USARTReadStatusPacket()
{
     21a:	ff 92       	push	r15
     21c:	0f 93       	push	r16
     21e:	1f 93       	push	r17
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
	int ValueOfParameters = 0;
	//if ((USARTReadChar() == 0xFF) & (USARTReadChar() == 0xFF)) // Kollar om två startbitar
	//{
		//char test = USARTReadChar();
		char Start1 = USARTReadChar();
     224:	f2 df       	rcall	.-28     	; 0x20a <USARTReadChar>
		char Start2 = USARTReadChar();
     226:	f1 df       	rcall	.-30     	; 0x20a <USARTReadChar>
		char ID = USARTReadChar();
     228:	f0 df       	rcall	.-32     	; 0x20a <USARTReadChar>
		char Length = USARTReadChar();
     22a:	ef df       	rcall	.-34     	; 0x20a <USARTReadChar>
     22c:	f8 2e       	mov	r15, r24
		char Error = USARTReadChar();
     22e:	ed df       	rcall	.-38     	; 0x20a <USARTReadChar>
		int HelpVariable = 0;
		// Läser av parametervärdena och sparar värdet i ValueOfParameters
		while (Length > 2) 
     230:	82 e0       	ldi	r24, 0x02	; 2
     232:	8f 15       	cp	r24, r15
     234:	a8 f4       	brcc	.+42     	; 0x260 <USARTReadStatusPacket+0x46>
     236:	c0 e0       	ldi	r28, 0x00	; 0
     238:	d0 e0       	ldi	r29, 0x00	; 0
	return RXD0_DATA;
}

int USARTReadStatusPacket()
{
	int ValueOfParameters = 0;
     23a:	00 e0       	ldi	r16, 0x00	; 0
     23c:	10 e0       	ldi	r17, 0x00	; 0
		char Error = USARTReadChar();
		int HelpVariable = 0;
		// Läser av parametervärdena och sparar värdet i ValueOfParameters
		while (Length > 2) 
		{
			ValueOfParameters = ValueOfParameters + (USARTReadChar() << (8*HelpVariable));
     23e:	e5 df       	rcall	.-54     	; 0x20a <USARTReadChar>
     240:	28 2f       	mov	r18, r24
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	0c 2e       	mov	r0, r28
     246:	02 c0       	rjmp	.+4      	; 0x24c <USARTReadStatusPacket+0x32>
     248:	22 0f       	add	r18, r18
     24a:	33 1f       	adc	r19, r19
     24c:	0a 94       	dec	r0
     24e:	e2 f7       	brpl	.-8      	; 0x248 <USARTReadStatusPacket+0x2e>
     250:	02 0f       	add	r16, r18
     252:	13 1f       	adc	r17, r19
			HelpVariable = HelpVariable + 1;
			Length = Length - 1;
     254:	fa 94       	dec	r15
     256:	28 96       	adiw	r28, 0x08	; 8
		char ID = USARTReadChar();
		char Length = USARTReadChar();
		char Error = USARTReadChar();
		int HelpVariable = 0;
		// Läser av parametervärdena och sparar värdet i ValueOfParameters
		while (Length > 2) 
     258:	82 e0       	ldi	r24, 0x02	; 2
     25a:	f8 12       	cpse	r15, r24
     25c:	f0 cf       	rjmp	.-32     	; 0x23e <USARTReadStatusPacket+0x24>
     25e:	02 c0       	rjmp	.+4      	; 0x264 <USARTReadStatusPacket+0x4a>
	return RXD0_DATA;
}

int USARTReadStatusPacket()
{
	int ValueOfParameters = 0;
     260:	00 e0       	ldi	r16, 0x00	; 0
     262:	10 e0       	ldi	r17, 0x00	; 0
			ValueOfParameters = ValueOfParameters + (USARTReadChar() << (8*HelpVariable));
			HelpVariable = HelpVariable + 1;
			Length = Length - 1;
		}
		
		char CheckSum = USARTReadChar();
     264:	d2 df       	rcall	.-92     	; 0x20a <USARTReadChar>
	//}
	return ValueOfParameters;
	
}
     266:	c8 01       	movw	r24, r16
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	1f 91       	pop	r17
     26e:	0f 91       	pop	r16
     270:	ff 90       	pop	r15
     272:	08 95       	ret

00000274 <MoveDynamixel>:

void MoveDynamixel(int ID,long int Degree,long int Velocity)
{
     274:	4f 92       	push	r4
     276:	5f 92       	push	r5
     278:	6f 92       	push	r6
     27a:	7f 92       	push	r7
     27c:	8f 92       	push	r8
     27e:	9f 92       	push	r9
     280:	af 92       	push	r10
     282:	bf 92       	push	r11
     284:	cf 92       	push	r12
     286:	df 92       	push	r13
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	0f 93       	push	r16
     28e:	1f 93       	push	r17
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	ec 01       	movw	r28, r24
     296:	68 01       	movw	r12, r16
     298:	79 01       	movw	r14, r18
	if ((Degree <= 300) & (Degree >= 0)) // Tillåtna grader är 0-300
     29a:	4d 32       	cpi	r20, 0x2D	; 45
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	58 07       	cpc	r21, r24
     2a0:	61 05       	cpc	r22, r1
     2a2:	71 05       	cpc	r23, r1
     2a4:	e0 f5       	brcc	.+120    	; 0x31e <MoveDynamixel+0xaa>
	{
		long int LowGoalPosition = ((Degree*1023)/300) & 0x00FF; // Gör om graden till ett tal mellan 0-1023 och delar upp det i LSB(byte) och MSB(byte)
     2a6:	af ef       	ldi	r26, 0xFF	; 255
     2a8:	b3 e0       	ldi	r27, 0x03	; 3
     2aa:	9a 01       	movw	r18, r20
     2ac:	ab 01       	movw	r20, r22
     2ae:	0e 94 c1 1c 	call	0x3982	; 0x3982 <__muluhisi3>
     2b2:	2c e2       	ldi	r18, 0x2C	; 44
     2b4:	31 e0       	ldi	r19, 0x01	; 1
     2b6:	40 e0       	ldi	r20, 0x00	; 0
     2b8:	50 e0       	ldi	r21, 0x00	; 0
     2ba:	0e 94 a5 1c 	call	0x394a	; 0x394a <__divmodsi4>
     2be:	49 01       	movw	r8, r18
     2c0:	5a 01       	movw	r10, r20
     2c2:	99 24       	eor	r9, r9
     2c4:	aa 24       	eor	r10, r10
     2c6:	bb 24       	eor	r11, r11
		long int HighGoalPosition = ((Degree*1023)/300) & 0xFF00;
		HighGoalPosition = (HighGoalPosition >> 8);
     2c8:	43 2e       	mov	r4, r19
     2ca:	51 2c       	mov	r5, r1
	
		long int LowAngleVelocity = 0;
		long int HighAngleVelocity = 0;
	
		if (Velocity >= 114) // Om RPM över 114 så rör vi oss med snabbaste möjliga hastigheten med spänningen som tillhandahålls
     2cc:	82 e7       	ldi	r24, 0x72	; 114
     2ce:	c8 16       	cp	r12, r24
     2d0:	d1 04       	cpc	r13, r1
     2d2:	e1 04       	cpc	r14, r1
     2d4:	f1 04       	cpc	r15, r1
     2d6:	a4 f4       	brge	.+40     	; 0x300 <MoveDynamixel+0x8c>
			LowAngleVelocity = 0;
			HighAngleVelocity = 0;
		}
		else
		{
			LowAngleVelocity = ((Velocity*1023)/114) & 0x00FF;
     2d8:	af ef       	ldi	r26, 0xFF	; 255
     2da:	b3 e0       	ldi	r27, 0x03	; 3
     2dc:	a7 01       	movw	r20, r14
     2de:	96 01       	movw	r18, r12
     2e0:	0e 94 c1 1c 	call	0x3982	; 0x3982 <__muluhisi3>
     2e4:	22 e7       	ldi	r18, 0x72	; 114
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	40 e0       	ldi	r20, 0x00	; 0
     2ea:	50 e0       	ldi	r21, 0x00	; 0
     2ec:	0e 94 a5 1c 	call	0x394a	; 0x394a <__divmodsi4>
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	ff 24       	eor	r15, r15
     2f6:	00 27       	eor	r16, r16
     2f8:	11 27       	eor	r17, r17
			HighAngleVelocity = ((Velocity*1023)/114) & 0xFF00;
			HighAngleVelocity = (HighAngleVelocity >> 8);
     2fa:	43 2f       	mov	r20, r19
     2fc:	50 e0       	ldi	r21, 0x00	; 0
     2fe:	06 c0       	rjmp	.+12     	; 0x30c <MoveDynamixel+0x98>
		long int HighAngleVelocity = 0;
	
		if (Velocity >= 114) // Om RPM över 114 så rör vi oss med snabbaste möjliga hastigheten med spänningen som tillhandahålls
		{
			LowAngleVelocity = 0;
			HighAngleVelocity = 0;
     300:	40 e0       	ldi	r20, 0x00	; 0
     302:	50 e0       	ldi	r21, 0x00	; 0
     304:	ba 01       	movw	r22, r20
		long int LowAngleVelocity = 0;
		long int HighAngleVelocity = 0;
	
		if (Velocity >= 114) // Om RPM över 114 så rör vi oss med snabbaste möjliga hastigheten med spänningen som tillhandahålls
		{
			LowAngleVelocity = 0;
     306:	e1 2c       	mov	r14, r1
     308:	f1 2c       	mov	r15, r1
     30a:	87 01       	movw	r16, r14
			LowAngleVelocity = ((Velocity*1023)/114) & 0x00FF;
			HighAngleVelocity = ((Velocity*1023)/114) & 0xFF00;
			HighAngleVelocity = (HighAngleVelocity >> 8);
		}
	
		USARTSendInstruction5(ID,INST_WRITE,P_GOAL_POSITION_L,LowGoalPosition ,HighGoalPosition, LowAngleVelocity, HighAngleVelocity);
     30c:	6a 01       	movw	r12, r20
     30e:	82 01       	movw	r16, r4
     310:	94 01       	movw	r18, r8
     312:	4e e1       	ldi	r20, 0x1E	; 30
     314:	50 e0       	ldi	r21, 0x00	; 0
     316:	63 e0       	ldi	r22, 0x03	; 3
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	ce 01       	movw	r24, r28
     31c:	36 df       	rcall	.-404    	; 0x18a <USARTSendInstruction5>
	}
	return;
}
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	1f 91       	pop	r17
     324:	0f 91       	pop	r16
     326:	ff 90       	pop	r15
     328:	ef 90       	pop	r14
     32a:	df 90       	pop	r13
     32c:	cf 90       	pop	r12
     32e:	bf 90       	pop	r11
     330:	af 90       	pop	r10
     332:	9f 90       	pop	r9
     334:	8f 90       	pop	r8
     336:	7f 90       	pop	r7
     338:	6f 90       	pop	r6
     33a:	5f 90       	pop	r5
     33c:	4f 90       	pop	r4
     33e:	08 95       	ret

00000340 <MoveFrontLeftLeg>:

void MoveFrontLeftLeg(float x, float y, float z, int speed)
{
     340:	4f 92       	push	r4
     342:	5f 92       	push	r5
     344:	6f 92       	push	r6
     346:	7f 92       	push	r7
     348:	8f 92       	push	r8
     34a:	9f 92       	push	r9
     34c:	af 92       	push	r10
     34e:	bf 92       	push	r11
     350:	cf 92       	push	r12
     352:	df 92       	push	r13
     354:	ef 92       	push	r14
     356:	ff 92       	push	r15
     358:	0f 93       	push	r16
     35a:	1f 93       	push	r17
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
     364:	60 97       	sbiw	r28, 0x10	; 16
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	f8 94       	cli
     36a:	de bf       	out	0x3e, r29	; 62
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	cd bf       	out	0x3d, r28	; 61
     370:	2b 01       	movw	r4, r22
     372:	3c 01       	movw	r6, r24
     374:	49 01       	movw	r8, r18
     376:	5a 01       	movw	r10, r20
     378:	e9 82       	std	Y+1, r14	; 0x01
     37a:	fa 82       	std	Y+2, r15	; 0x02
     37c:	0b 83       	std	Y+3, r16	; 0x03
     37e:	1c 83       	std	Y+4, r17	; 0x04
     380:	86 01       	movw	r16, r12
	long int theta1 = atan2f(-x,y)*180/PI;
     382:	90 58       	subi	r25, 0x80	; 128
     384:	0e 94 27 1a 	call	0x344e	; 0x344e <atan2>
     388:	6d 87       	std	Y+13, r22	; 0x0d
     38a:	7e 87       	std	Y+14, r23	; 0x0e
     38c:	8f 87       	std	Y+15, r24	; 0x0f
     38e:	98 8b       	std	Y+16, r25	; 0x10
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) + 
     390:	29 81       	ldd	r18, Y+1	; 0x01
     392:	3a 81       	ldd	r19, Y+2	; 0x02
     394:	4b 81       	ldd	r20, Y+3	; 0x03
     396:	5c 81       	ldd	r21, Y+4	; 0x04
     398:	ca 01       	movw	r24, r20
     39a:	b9 01       	movw	r22, r18
     39c:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     3a0:	6b 01       	movw	r12, r22
     3a2:	7c 01       	movw	r14, r24
     3a4:	a3 01       	movw	r20, r6
     3a6:	92 01       	movw	r18, r4
     3a8:	c3 01       	movw	r24, r6
     3aa:	b2 01       	movw	r22, r4
     3ac:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     3b0:	2b 01       	movw	r4, r22
     3b2:	3c 01       	movw	r6, r24
     3b4:	a5 01       	movw	r20, r10
     3b6:	94 01       	movw	r18, r8
     3b8:	c5 01       	movw	r24, r10
     3ba:	b4 01       	movw	r22, r8
     3bc:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     3c0:	9b 01       	movw	r18, r22
     3c2:	ac 01       	movw	r20, r24
     3c4:	c3 01       	movw	r24, r6
     3c6:	b2 01       	movw	r22, r4
     3c8:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
     3cc:	2b 01       	movw	r4, r22
     3ce:	3c 01       	movw	r6, r24
     3d0:	0e 94 4f 1c 	call	0x389e	; 0x389e <sqrt>
     3d4:	20 e0       	ldi	r18, 0x00	; 0
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	48 e4       	ldi	r20, 0x48	; 72
     3da:	52 e4       	ldi	r21, 0x42	; 66
     3dc:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
     3e0:	4b 01       	movw	r8, r22
     3e2:	5c 01       	movw	r10, r24
     3e4:	9b 01       	movw	r18, r22
     3e6:	ac 01       	movw	r20, r24
     3e8:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     3ec:	6d 83       	std	Y+5, r22	; 0x05
     3ee:	7e 83       	std	Y+6, r23	; 0x06
     3f0:	8f 83       	std	Y+7, r24	; 0x07
     3f2:	98 87       	std	Y+8, r25	; 0x08
     3f4:	9b 01       	movw	r18, r22
     3f6:	ac 01       	movw	r20, r24
     3f8:	c7 01       	movw	r24, r14
     3fa:	b6 01       	movw	r22, r12
     3fc:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
     400:	69 87       	std	Y+9, r22	; 0x09
     402:	7a 87       	std	Y+10, r23	; 0x0a
     404:	8b 87       	std	Y+11, r24	; 0x0b
     406:	9c 87       	std	Y+12, r25	; 0x0c
     408:	0e 94 4f 1c 	call	0x389e	; 0x389e <sqrt>
     40c:	9b 01       	movw	r18, r22
     40e:	ac 01       	movw	r20, r24
     410:	69 81       	ldd	r22, Y+1	; 0x01
     412:	7a 81       	ldd	r23, Y+2	; 0x02
     414:	8b 81       	ldd	r24, Y+3	; 0x03
     416:	9c 81       	ldd	r25, Y+4	; 0x04
     418:	90 58       	subi	r25, 0x80	; 128
     41a:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
     41e:	0e 94 a5 19 	call	0x334a	; 0x334a <acos>
     422:	69 83       	std	Y+1, r22	; 0x01
     424:	7a 83       	std	Y+2, r23	; 0x02
     426:	8b 83       	std	Y+3, r24	; 0x03
     428:	9c 83       	std	Y+4, r25	; 0x04
		acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
     42a:	20 e0       	ldi	r18, 0x00	; 0
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	48 e4       	ldi	r20, 0x48	; 72
     430:	52 e4       	ldi	r21, 0x42	; 66
     432:	c3 01       	movw	r24, r6
     434:	b2 01       	movw	r22, r4
     436:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
     43a:	0e 94 4f 1c 	call	0x389e	; 0x389e <sqrt>
     43e:	9b 01       	movw	r18, r22
     440:	ac 01       	movw	r20, r24
     442:	c5 01       	movw	r24, r10
     444:	b4 01       	movw	r22, r8
     446:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     44a:	9b 01       	movw	r18, r22
     44c:	ac 01       	movw	r20, r24
     44e:	c7 01       	movw	r24, r14
     450:	b6 01       	movw	r22, r12
     452:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
     456:	0e 94 4f 1c 	call	0x389e	; 0x389e <sqrt>
     45a:	2b 01       	movw	r4, r22
     45c:	3c 01       	movw	r6, r24
     45e:	20 e0       	ldi	r18, 0x00	; 0
     460:	38 e4       	ldi	r19, 0x48	; 72
     462:	4c e8       	ldi	r20, 0x8C	; 140
     464:	55 e4       	ldi	r21, 0x45	; 69
     466:	69 85       	ldd	r22, Y+9	; 0x09
     468:	7a 85       	ldd	r23, Y+10	; 0x0a
     46a:	8b 85       	ldd	r24, Y+11	; 0x0b
     46c:	9c 85       	ldd	r25, Y+12	; 0x0c
     46e:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	38 e0       	ldi	r19, 0x08	; 8
     476:	44 e8       	ldi	r20, 0x84	; 132
     478:	56 e4       	ldi	r21, 0x46	; 70
     47a:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
     47e:	4b 01       	movw	r8, r22
     480:	5c 01       	movw	r10, r24
     482:	a3 01       	movw	r20, r6
     484:	92 01       	movw	r18, r4
     486:	c3 01       	movw	r24, r6
     488:	b2 01       	movw	r22, r4
     48a:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	46 e8       	ldi	r20, 0x86	; 134
     494:	52 e4       	ldi	r21, 0x42	; 66
     496:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     49a:	9b 01       	movw	r18, r22
     49c:	ac 01       	movw	r20, r24
     49e:	c5 01       	movw	r24, r10
     4a0:	b4 01       	movw	r22, r8
     4a2:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
     4a6:	0e 94 a5 19 	call	0x334a	; 0x334a <acos>
     4aa:	2b 01       	movw	r4, r22
     4ac:	3c 01       	movw	r6, r24
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     4ae:	a7 01       	movw	r20, r14
     4b0:	96 01       	movw	r18, r12
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	7a e1       	ldi	r23, 0x1A	; 26
     4b6:	87 ea       	ldi	r24, 0xA7	; 167
     4b8:	96 e4       	ldi	r25, 0x46	; 70
     4ba:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
     4be:	2d 81       	ldd	r18, Y+5	; 0x05
     4c0:	3e 81       	ldd	r19, Y+6	; 0x06
     4c2:	4f 81       	ldd	r20, Y+7	; 0x07
     4c4:	58 85       	ldd	r21, Y+8	; 0x08
     4c6:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	38 e1       	ldi	r19, 0x18	; 24
     4ce:	48 e8       	ldi	r20, 0x88	; 136
     4d0:	56 e4       	ldi	r21, 0x46	; 70
     4d2:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
     4d6:	0e 94 a5 19 	call	0x334a	; 0x334a <acos>
     4da:	4b 01       	movw	r8, r22
     4dc:	5c 01       	movw	r10, r24
	long int ActuatorAngle1 =  theta1 + 105;
	long int ActuatorAngle2 =  theta2 + 75;
	long int ActuatorAngle3 =  theta3 + 1;
	
	
	MoveDynamixel(2,ActuatorAngle1,speed);
     4de:	68 01       	movw	r12, r16
     4e0:	ee 24       	eor	r14, r14
     4e2:	d7 fc       	sbrc	r13, 7
     4e4:	e0 94       	com	r14
     4e6:	fe 2c       	mov	r15, r14
	return;
}

void MoveFrontLeftLeg(float x, float y, float z, int speed)
{
	long int theta1 = atan2f(-x,y)*180/PI;
     4e8:	20 e0       	ldi	r18, 0x00	; 0
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	44 e3       	ldi	r20, 0x34	; 52
     4ee:	53 e4       	ldi	r21, 0x43	; 67
     4f0:	6d 85       	ldd	r22, Y+13	; 0x0d
     4f2:	7e 85       	ldd	r23, Y+14	; 0x0e
     4f4:	8f 85       	ldd	r24, Y+15	; 0x0f
     4f6:	98 89       	ldd	r25, Y+16	; 0x10
     4f8:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     4fc:	28 ed       	ldi	r18, 0xD8	; 216
     4fe:	3f e0       	ldi	r19, 0x0F	; 15
     500:	49 e4       	ldi	r20, 0x49	; 73
     502:	50 e4       	ldi	r21, 0x40	; 64
     504:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
     508:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) + 
		acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

	long int ActuatorAngle1 =  theta1 + 105;
     50c:	ab 01       	movw	r20, r22
     50e:	bc 01       	movw	r22, r24
     510:	47 59       	subi	r20, 0x97	; 151
     512:	5f 4f       	sbci	r21, 0xFF	; 255
     514:	6f 4f       	sbci	r22, 0xFF	; 255
     516:	7f 4f       	sbci	r23, 0xFF	; 255
	long int ActuatorAngle2 =  theta2 + 75;
	long int ActuatorAngle3 =  theta3 + 1;
	
	
	MoveDynamixel(2,ActuatorAngle1,speed);
     518:	97 01       	movw	r18, r14
     51a:	86 01       	movw	r16, r12
     51c:	82 e0       	ldi	r24, 0x02	; 2
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	a9 de       	rcall	.-686    	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
     522:	7b de       	rcall	.-778    	; 0x21a <USARTReadStatusPacket>
}

void MoveFrontLeftLeg(float x, float y, float z, int speed)
{
	long int theta1 = atan2f(-x,y)*180/PI;
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) + 
     524:	a3 01       	movw	r20, r6
     526:	92 01       	movw	r18, r4
     528:	69 81       	ldd	r22, Y+1	; 0x01
     52a:	7a 81       	ldd	r23, Y+2	; 0x02
     52c:	8b 81       	ldd	r24, Y+3	; 0x03
     52e:	9c 81       	ldd	r25, Y+4	; 0x04
     530:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
     534:	24 ee       	ldi	r18, 0xE4	; 228
     536:	3e e2       	ldi	r19, 0x2E	; 46
     538:	45 e6       	ldi	r20, 0x65	; 101
     53a:	52 e4       	ldi	r21, 0x42	; 66
     53c:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     540:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
		acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

	long int ActuatorAngle1 =  theta1 + 105;
	long int ActuatorAngle2 =  theta2 + 75;
     544:	ab 01       	movw	r20, r22
     546:	bc 01       	movw	r22, r24
     548:	45 5b       	subi	r20, 0xB5	; 181
     54a:	5f 4f       	sbci	r21, 0xFF	; 255
     54c:	6f 4f       	sbci	r22, 0xFF	; 255
     54e:	7f 4f       	sbci	r23, 0xFF	; 255
	long int ActuatorAngle3 =  theta3 + 1;
	
	
	MoveDynamixel(2,ActuatorAngle1,speed);
	USARTReadStatusPacket();
	MoveDynamixel(4,ActuatorAngle2,speed);
     550:	97 01       	movw	r18, r14
     552:	86 01       	movw	r16, r12
     554:	84 e0       	ldi	r24, 0x04	; 4
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	8d de       	rcall	.-742    	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
     55a:	5f de       	rcall	.-834    	; 0x21a <USARTReadStatusPacket>
{
	long int theta1 = atan2f(-x,y)*180/PI;
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) + 
		acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	44 e3       	ldi	r20, 0x34	; 52
     562:	53 e4       	ldi	r21, 0x43	; 67
     564:	c5 01       	movw	r24, r10
     566:	b4 01       	movw	r22, r8
     568:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     56c:	28 ed       	ldi	r18, 0xD8	; 216
     56e:	3f e0       	ldi	r19, 0x0F	; 15
     570:	49 e4       	ldi	r20, 0x49	; 73
     572:	50 e4       	ldi	r21, 0x40	; 64
     574:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
     578:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>

	long int ActuatorAngle1 =  theta1 + 105;
	long int ActuatorAngle2 =  theta2 + 75;
	long int ActuatorAngle3 =  theta3 + 1;
     57c:	ab 01       	movw	r20, r22
     57e:	bc 01       	movw	r22, r24
     580:	4f 5f       	subi	r20, 0xFF	; 255
     582:	5f 4f       	sbci	r21, 0xFF	; 255
     584:	6f 4f       	sbci	r22, 0xFF	; 255
     586:	7f 4f       	sbci	r23, 0xFF	; 255
	
	MoveDynamixel(2,ActuatorAngle1,speed);
	USARTReadStatusPacket();
	MoveDynamixel(4,ActuatorAngle2,speed);
	USARTReadStatusPacket();
	MoveDynamixel(6,ActuatorAngle3,speed);
     588:	97 01       	movw	r18, r14
     58a:	86 01       	movw	r16, r12
     58c:	86 e0       	ldi	r24, 0x06	; 6
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	71 de       	rcall	.-798    	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
     592:	43 de       	rcall	.-890    	; 0x21a <USARTReadStatusPacket>
	return;
}
     594:	60 96       	adiw	r28, 0x10	; 16
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	de bf       	out	0x3e, r29	; 62
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	cd bf       	out	0x3d, r28	; 61
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	1f 91       	pop	r17
     5a6:	0f 91       	pop	r16
     5a8:	ff 90       	pop	r15
     5aa:	ef 90       	pop	r14
     5ac:	df 90       	pop	r13
     5ae:	cf 90       	pop	r12
     5b0:	bf 90       	pop	r11
     5b2:	af 90       	pop	r10
     5b4:	9f 90       	pop	r9
     5b6:	8f 90       	pop	r8
     5b8:	7f 90       	pop	r7
     5ba:	6f 90       	pop	r6
     5bc:	5f 90       	pop	r5
     5be:	4f 90       	pop	r4
     5c0:	08 95       	ret

000005c2 <MoveFrontRightLeg>:

void MoveFrontRightLeg(float x, float y, float z, int speed)
{
     5c2:	4f 92       	push	r4
     5c4:	5f 92       	push	r5
     5c6:	6f 92       	push	r6
     5c8:	7f 92       	push	r7
     5ca:	8f 92       	push	r8
     5cc:	9f 92       	push	r9
     5ce:	af 92       	push	r10
     5d0:	bf 92       	push	r11
     5d2:	cf 92       	push	r12
     5d4:	df 92       	push	r13
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
     5e6:	60 97       	sbiw	r28, 0x10	; 16
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	f8 94       	cli
     5ec:	de bf       	out	0x3e, r29	; 62
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	cd bf       	out	0x3d, r28	; 61
     5f2:	2b 01       	movw	r4, r22
     5f4:	3c 01       	movw	r6, r24
     5f6:	49 01       	movw	r8, r18
     5f8:	5a 01       	movw	r10, r20
     5fa:	e9 82       	std	Y+1, r14	; 0x01
     5fc:	fa 82       	std	Y+2, r15	; 0x02
     5fe:	0b 83       	std	Y+3, r16	; 0x03
     600:	1c 83       	std	Y+4, r17	; 0x04
     602:	86 01       	movw	r16, r12
	long int theta1 = atan2f(-x,y)*180/PI;
     604:	90 58       	subi	r25, 0x80	; 128
     606:	0e 94 27 1a 	call	0x344e	; 0x344e <atan2>
     60a:	6d 87       	std	Y+13, r22	; 0x0d
     60c:	7e 87       	std	Y+14, r23	; 0x0e
     60e:	8f 87       	std	Y+15, r24	; 0x0f
     610:	98 8b       	std	Y+16, r25	; 0x10
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
     612:	29 81       	ldd	r18, Y+1	; 0x01
     614:	3a 81       	ldd	r19, Y+2	; 0x02
     616:	4b 81       	ldd	r20, Y+3	; 0x03
     618:	5c 81       	ldd	r21, Y+4	; 0x04
     61a:	ca 01       	movw	r24, r20
     61c:	b9 01       	movw	r22, r18
     61e:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     622:	6b 01       	movw	r12, r22
     624:	7c 01       	movw	r14, r24
     626:	a3 01       	movw	r20, r6
     628:	92 01       	movw	r18, r4
     62a:	c3 01       	movw	r24, r6
     62c:	b2 01       	movw	r22, r4
     62e:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     632:	2b 01       	movw	r4, r22
     634:	3c 01       	movw	r6, r24
     636:	a5 01       	movw	r20, r10
     638:	94 01       	movw	r18, r8
     63a:	c5 01       	movw	r24, r10
     63c:	b4 01       	movw	r22, r8
     63e:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     642:	9b 01       	movw	r18, r22
     644:	ac 01       	movw	r20, r24
     646:	c3 01       	movw	r24, r6
     648:	b2 01       	movw	r22, r4
     64a:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
     64e:	2b 01       	movw	r4, r22
     650:	3c 01       	movw	r6, r24
     652:	0e 94 4f 1c 	call	0x389e	; 0x389e <sqrt>
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	48 e4       	ldi	r20, 0x48	; 72
     65c:	52 e4       	ldi	r21, 0x42	; 66
     65e:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
     662:	4b 01       	movw	r8, r22
     664:	5c 01       	movw	r10, r24
     666:	9b 01       	movw	r18, r22
     668:	ac 01       	movw	r20, r24
     66a:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     66e:	6d 83       	std	Y+5, r22	; 0x05
     670:	7e 83       	std	Y+6, r23	; 0x06
     672:	8f 83       	std	Y+7, r24	; 0x07
     674:	98 87       	std	Y+8, r25	; 0x08
     676:	9b 01       	movw	r18, r22
     678:	ac 01       	movw	r20, r24
     67a:	c7 01       	movw	r24, r14
     67c:	b6 01       	movw	r22, r12
     67e:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
     682:	69 87       	std	Y+9, r22	; 0x09
     684:	7a 87       	std	Y+10, r23	; 0x0a
     686:	8b 87       	std	Y+11, r24	; 0x0b
     688:	9c 87       	std	Y+12, r25	; 0x0c
     68a:	0e 94 4f 1c 	call	0x389e	; 0x389e <sqrt>
     68e:	9b 01       	movw	r18, r22
     690:	ac 01       	movw	r20, r24
     692:	69 81       	ldd	r22, Y+1	; 0x01
     694:	7a 81       	ldd	r23, Y+2	; 0x02
     696:	8b 81       	ldd	r24, Y+3	; 0x03
     698:	9c 81       	ldd	r25, Y+4	; 0x04
     69a:	90 58       	subi	r25, 0x80	; 128
     69c:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
     6a0:	0e 94 a5 19 	call	0x334a	; 0x334a <acos>
     6a4:	69 83       	std	Y+1, r22	; 0x01
     6a6:	7a 83       	std	Y+2, r23	; 0x02
     6a8:	8b 83       	std	Y+3, r24	; 0x03
     6aa:	9c 83       	std	Y+4, r25	; 0x04
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	48 e4       	ldi	r20, 0x48	; 72
     6b2:	52 e4       	ldi	r21, 0x42	; 66
     6b4:	c3 01       	movw	r24, r6
     6b6:	b2 01       	movw	r22, r4
     6b8:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
     6bc:	0e 94 4f 1c 	call	0x389e	; 0x389e <sqrt>
     6c0:	9b 01       	movw	r18, r22
     6c2:	ac 01       	movw	r20, r24
     6c4:	c5 01       	movw	r24, r10
     6c6:	b4 01       	movw	r22, r8
     6c8:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     6cc:	9b 01       	movw	r18, r22
     6ce:	ac 01       	movw	r20, r24
     6d0:	c7 01       	movw	r24, r14
     6d2:	b6 01       	movw	r22, r12
     6d4:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
     6d8:	0e 94 4f 1c 	call	0x389e	; 0x389e <sqrt>
     6dc:	2b 01       	movw	r4, r22
     6de:	3c 01       	movw	r6, r24
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	38 e4       	ldi	r19, 0x48	; 72
     6e4:	4c e8       	ldi	r20, 0x8C	; 140
     6e6:	55 e4       	ldi	r21, 0x45	; 69
     6e8:	69 85       	ldd	r22, Y+9	; 0x09
     6ea:	7a 85       	ldd	r23, Y+10	; 0x0a
     6ec:	8b 85       	ldd	r24, Y+11	; 0x0b
     6ee:	9c 85       	ldd	r25, Y+12	; 0x0c
     6f0:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	38 e0       	ldi	r19, 0x08	; 8
     6f8:	44 e8       	ldi	r20, 0x84	; 132
     6fa:	56 e4       	ldi	r21, 0x46	; 70
     6fc:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
     700:	4b 01       	movw	r8, r22
     702:	5c 01       	movw	r10, r24
     704:	a3 01       	movw	r20, r6
     706:	92 01       	movw	r18, r4
     708:	c3 01       	movw	r24, r6
     70a:	b2 01       	movw	r22, r4
     70c:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	46 e8       	ldi	r20, 0x86	; 134
     716:	52 e4       	ldi	r21, 0x42	; 66
     718:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     71c:	9b 01       	movw	r18, r22
     71e:	ac 01       	movw	r20, r24
     720:	c5 01       	movw	r24, r10
     722:	b4 01       	movw	r22, r8
     724:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
     728:	0e 94 a5 19 	call	0x334a	; 0x334a <acos>
     72c:	2b 01       	movw	r4, r22
     72e:	3c 01       	movw	r6, r24
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     730:	a7 01       	movw	r20, r14
     732:	96 01       	movw	r18, r12
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	7a e1       	ldi	r23, 0x1A	; 26
     738:	87 ea       	ldi	r24, 0xA7	; 167
     73a:	96 e4       	ldi	r25, 0x46	; 70
     73c:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
     740:	2d 81       	ldd	r18, Y+5	; 0x05
     742:	3e 81       	ldd	r19, Y+6	; 0x06
     744:	4f 81       	ldd	r20, Y+7	; 0x07
     746:	58 85       	ldd	r21, Y+8	; 0x08
     748:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	38 e1       	ldi	r19, 0x18	; 24
     750:	48 e8       	ldi	r20, 0x88	; 136
     752:	56 e4       	ldi	r21, 0x46	; 70
     754:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
     758:	0e 94 a5 19 	call	0x334a	; 0x334a <acos>
     75c:	4b 01       	movw	r8, r22
     75e:	5c 01       	movw	r10, r24
	long int ActuatorAngle1 =  theta1 + 193;
	long int ActuatorAngle2 =  theta2 + 75;
	long int ActuatorAngle3 =  theta3 + 3;
	
	
	MoveDynamixel(8,ActuatorAngle1,speed);
     760:	68 01       	movw	r12, r16
     762:	ee 24       	eor	r14, r14
     764:	d7 fc       	sbrc	r13, 7
     766:	e0 94       	com	r14
     768:	fe 2c       	mov	r15, r14
	return;
}

void MoveFrontRightLeg(float x, float y, float z, int speed)
{
	long int theta1 = atan2f(-x,y)*180/PI;
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	44 e3       	ldi	r20, 0x34	; 52
     770:	53 e4       	ldi	r21, 0x43	; 67
     772:	6d 85       	ldd	r22, Y+13	; 0x0d
     774:	7e 85       	ldd	r23, Y+14	; 0x0e
     776:	8f 85       	ldd	r24, Y+15	; 0x0f
     778:	98 89       	ldd	r25, Y+16	; 0x10
     77a:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     77e:	28 ed       	ldi	r18, 0xD8	; 216
     780:	3f e0       	ldi	r19, 0x0F	; 15
     782:	49 e4       	ldi	r20, 0x49	; 73
     784:	50 e4       	ldi	r21, 0x40	; 64
     786:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
     78a:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

	long int ActuatorAngle1 =  theta1 + 193;
     78e:	ab 01       	movw	r20, r22
     790:	bc 01       	movw	r22, r24
     792:	4f 53       	subi	r20, 0x3F	; 63
     794:	5f 4f       	sbci	r21, 0xFF	; 255
     796:	6f 4f       	sbci	r22, 0xFF	; 255
     798:	7f 4f       	sbci	r23, 0xFF	; 255
	long int ActuatorAngle2 =  theta2 + 75;
	long int ActuatorAngle3 =  theta3 + 3;
	
	
	MoveDynamixel(8,ActuatorAngle1,speed);
     79a:	97 01       	movw	r18, r14
     79c:	86 01       	movw	r16, r12
     79e:	88 e0       	ldi	r24, 0x08	; 8
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	68 dd       	rcall	.-1328   	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
     7a4:	3a dd       	rcall	.-1420   	; 0x21a <USARTReadStatusPacket>
}

void MoveFrontRightLeg(float x, float y, float z, int speed)
{
	long int theta1 = atan2f(-x,y)*180/PI;
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
     7a6:	a3 01       	movw	r20, r6
     7a8:	92 01       	movw	r18, r4
     7aa:	69 81       	ldd	r22, Y+1	; 0x01
     7ac:	7a 81       	ldd	r23, Y+2	; 0x02
     7ae:	8b 81       	ldd	r24, Y+3	; 0x03
     7b0:	9c 81       	ldd	r25, Y+4	; 0x04
     7b2:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
     7b6:	24 ee       	ldi	r18, 0xE4	; 228
     7b8:	3e e2       	ldi	r19, 0x2E	; 46
     7ba:	45 e6       	ldi	r20, 0x65	; 101
     7bc:	52 e4       	ldi	r21, 0x42	; 66
     7be:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     7c2:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

	long int ActuatorAngle1 =  theta1 + 193;
	long int ActuatorAngle2 =  theta2 + 75;
     7c6:	ab 01       	movw	r20, r22
     7c8:	bc 01       	movw	r22, r24
     7ca:	45 5b       	subi	r20, 0xB5	; 181
     7cc:	5f 4f       	sbci	r21, 0xFF	; 255
     7ce:	6f 4f       	sbci	r22, 0xFF	; 255
     7d0:	7f 4f       	sbci	r23, 0xFF	; 255
	long int ActuatorAngle3 =  theta3 + 3;
	
	
	MoveDynamixel(8,ActuatorAngle1,speed);
	USARTReadStatusPacket();
	MoveDynamixel(10,ActuatorAngle2,speed);
     7d2:	97 01       	movw	r18, r14
     7d4:	86 01       	movw	r16, r12
     7d6:	8a e0       	ldi	r24, 0x0A	; 10
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	4c dd       	rcall	.-1384   	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
     7dc:	1e dd       	rcall	.-1476   	; 0x21a <USARTReadStatusPacket>
{
	long int theta1 = atan2f(-x,y)*180/PI;
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     7de:	20 e0       	ldi	r18, 0x00	; 0
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	44 e3       	ldi	r20, 0x34	; 52
     7e4:	53 e4       	ldi	r21, 0x43	; 67
     7e6:	c5 01       	movw	r24, r10
     7e8:	b4 01       	movw	r22, r8
     7ea:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     7ee:	28 ed       	ldi	r18, 0xD8	; 216
     7f0:	3f e0       	ldi	r19, 0x0F	; 15
     7f2:	49 e4       	ldi	r20, 0x49	; 73
     7f4:	50 e4       	ldi	r21, 0x40	; 64
     7f6:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
     7fa:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>

	long int ActuatorAngle1 =  theta1 + 193;
	long int ActuatorAngle2 =  theta2 + 75;
	long int ActuatorAngle3 =  theta3 + 3;
     7fe:	ab 01       	movw	r20, r22
     800:	bc 01       	movw	r22, r24
     802:	4d 5f       	subi	r20, 0xFD	; 253
     804:	5f 4f       	sbci	r21, 0xFF	; 255
     806:	6f 4f       	sbci	r22, 0xFF	; 255
     808:	7f 4f       	sbci	r23, 0xFF	; 255
	
	MoveDynamixel(8,ActuatorAngle1,speed);
	USARTReadStatusPacket();
	MoveDynamixel(10,ActuatorAngle2,speed);
	USARTReadStatusPacket();
	MoveDynamixel(12,ActuatorAngle3,speed);
     80a:	97 01       	movw	r18, r14
     80c:	86 01       	movw	r16, r12
     80e:	8c e0       	ldi	r24, 0x0C	; 12
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	30 dd       	rcall	.-1440   	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();	
     814:	02 dd       	rcall	.-1532   	; 0x21a <USARTReadStatusPacket>
	return;
}
     816:	60 96       	adiw	r28, 0x10	; 16
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	0f be       	out	0x3f, r0	; 63
     820:	cd bf       	out	0x3d, r28	; 61
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	ff 90       	pop	r15
     82c:	ef 90       	pop	r14
     82e:	df 90       	pop	r13
     830:	cf 90       	pop	r12
     832:	bf 90       	pop	r11
     834:	af 90       	pop	r10
     836:	9f 90       	pop	r9
     838:	8f 90       	pop	r8
     83a:	7f 90       	pop	r7
     83c:	6f 90       	pop	r6
     83e:	5f 90       	pop	r5
     840:	4f 90       	pop	r4
     842:	08 95       	ret

00000844 <MoveRearLeftLeg>:
void MoveRearLeftLeg(float x, float y, float z, int speed)
{
     844:	4f 92       	push	r4
     846:	5f 92       	push	r5
     848:	6f 92       	push	r6
     84a:	7f 92       	push	r7
     84c:	8f 92       	push	r8
     84e:	9f 92       	push	r9
     850:	af 92       	push	r10
     852:	bf 92       	push	r11
     854:	cf 92       	push	r12
     856:	df 92       	push	r13
     858:	ef 92       	push	r14
     85a:	ff 92       	push	r15
     85c:	0f 93       	push	r16
     85e:	1f 93       	push	r17
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62
     868:	60 97       	sbiw	r28, 0x10	; 16
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	f8 94       	cli
     86e:	de bf       	out	0x3e, r29	; 62
     870:	0f be       	out	0x3f, r0	; 63
     872:	cd bf       	out	0x3d, r28	; 61
     874:	2b 01       	movw	r4, r22
     876:	3c 01       	movw	r6, r24
     878:	49 01       	movw	r8, r18
     87a:	5a 01       	movw	r10, r20
     87c:	e9 82       	std	Y+1, r14	; 0x01
     87e:	fa 82       	std	Y+2, r15	; 0x02
     880:	0b 83       	std	Y+3, r16	; 0x03
     882:	1c 83       	std	Y+4, r17	; 0x04
     884:	86 01       	movw	r16, r12
	long int theta1 = atan2f(x,-y)*180/PI;
     886:	50 58       	subi	r21, 0x80	; 128
     888:	0e 94 27 1a 	call	0x344e	; 0x344e <atan2>
     88c:	6d 87       	std	Y+13, r22	; 0x0d
     88e:	7e 87       	std	Y+14, r23	; 0x0e
     890:	8f 87       	std	Y+15, r24	; 0x0f
     892:	98 8b       	std	Y+16, r25	; 0x10
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
     894:	29 81       	ldd	r18, Y+1	; 0x01
     896:	3a 81       	ldd	r19, Y+2	; 0x02
     898:	4b 81       	ldd	r20, Y+3	; 0x03
     89a:	5c 81       	ldd	r21, Y+4	; 0x04
     89c:	ca 01       	movw	r24, r20
     89e:	b9 01       	movw	r22, r18
     8a0:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     8a4:	6b 01       	movw	r12, r22
     8a6:	7c 01       	movw	r14, r24
     8a8:	a3 01       	movw	r20, r6
     8aa:	92 01       	movw	r18, r4
     8ac:	c3 01       	movw	r24, r6
     8ae:	b2 01       	movw	r22, r4
     8b0:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     8b4:	2b 01       	movw	r4, r22
     8b6:	3c 01       	movw	r6, r24
     8b8:	a5 01       	movw	r20, r10
     8ba:	94 01       	movw	r18, r8
     8bc:	c5 01       	movw	r24, r10
     8be:	b4 01       	movw	r22, r8
     8c0:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     8c4:	9b 01       	movw	r18, r22
     8c6:	ac 01       	movw	r20, r24
     8c8:	c3 01       	movw	r24, r6
     8ca:	b2 01       	movw	r22, r4
     8cc:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
     8d0:	2b 01       	movw	r4, r22
     8d2:	3c 01       	movw	r6, r24
     8d4:	0e 94 4f 1c 	call	0x389e	; 0x389e <sqrt>
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	48 e4       	ldi	r20, 0x48	; 72
     8de:	52 e4       	ldi	r21, 0x42	; 66
     8e0:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
     8e4:	4b 01       	movw	r8, r22
     8e6:	5c 01       	movw	r10, r24
     8e8:	9b 01       	movw	r18, r22
     8ea:	ac 01       	movw	r20, r24
     8ec:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     8f0:	6d 83       	std	Y+5, r22	; 0x05
     8f2:	7e 83       	std	Y+6, r23	; 0x06
     8f4:	8f 83       	std	Y+7, r24	; 0x07
     8f6:	98 87       	std	Y+8, r25	; 0x08
     8f8:	9b 01       	movw	r18, r22
     8fa:	ac 01       	movw	r20, r24
     8fc:	c7 01       	movw	r24, r14
     8fe:	b6 01       	movw	r22, r12
     900:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
     904:	69 87       	std	Y+9, r22	; 0x09
     906:	7a 87       	std	Y+10, r23	; 0x0a
     908:	8b 87       	std	Y+11, r24	; 0x0b
     90a:	9c 87       	std	Y+12, r25	; 0x0c
     90c:	0e 94 4f 1c 	call	0x389e	; 0x389e <sqrt>
     910:	9b 01       	movw	r18, r22
     912:	ac 01       	movw	r20, r24
     914:	69 81       	ldd	r22, Y+1	; 0x01
     916:	7a 81       	ldd	r23, Y+2	; 0x02
     918:	8b 81       	ldd	r24, Y+3	; 0x03
     91a:	9c 81       	ldd	r25, Y+4	; 0x04
     91c:	90 58       	subi	r25, 0x80	; 128
     91e:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
     922:	0e 94 a5 19 	call	0x334a	; 0x334a <acos>
     926:	69 83       	std	Y+1, r22	; 0x01
     928:	7a 83       	std	Y+2, r23	; 0x02
     92a:	8b 83       	std	Y+3, r24	; 0x03
     92c:	9c 83       	std	Y+4, r25	; 0x04
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	48 e4       	ldi	r20, 0x48	; 72
     934:	52 e4       	ldi	r21, 0x42	; 66
     936:	c3 01       	movw	r24, r6
     938:	b2 01       	movw	r22, r4
     93a:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
     93e:	0e 94 4f 1c 	call	0x389e	; 0x389e <sqrt>
     942:	9b 01       	movw	r18, r22
     944:	ac 01       	movw	r20, r24
     946:	c5 01       	movw	r24, r10
     948:	b4 01       	movw	r22, r8
     94a:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     94e:	9b 01       	movw	r18, r22
     950:	ac 01       	movw	r20, r24
     952:	c7 01       	movw	r24, r14
     954:	b6 01       	movw	r22, r12
     956:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
     95a:	0e 94 4f 1c 	call	0x389e	; 0x389e <sqrt>
     95e:	2b 01       	movw	r4, r22
     960:	3c 01       	movw	r6, r24
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	38 e4       	ldi	r19, 0x48	; 72
     966:	4c e8       	ldi	r20, 0x8C	; 140
     968:	55 e4       	ldi	r21, 0x45	; 69
     96a:	69 85       	ldd	r22, Y+9	; 0x09
     96c:	7a 85       	ldd	r23, Y+10	; 0x0a
     96e:	8b 85       	ldd	r24, Y+11	; 0x0b
     970:	9c 85       	ldd	r25, Y+12	; 0x0c
     972:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	38 e0       	ldi	r19, 0x08	; 8
     97a:	44 e8       	ldi	r20, 0x84	; 132
     97c:	56 e4       	ldi	r21, 0x46	; 70
     97e:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
     982:	4b 01       	movw	r8, r22
     984:	5c 01       	movw	r10, r24
     986:	a3 01       	movw	r20, r6
     988:	92 01       	movw	r18, r4
     98a:	c3 01       	movw	r24, r6
     98c:	b2 01       	movw	r22, r4
     98e:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	46 e8       	ldi	r20, 0x86	; 134
     998:	52 e4       	ldi	r21, 0x42	; 66
     99a:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     99e:	9b 01       	movw	r18, r22
     9a0:	ac 01       	movw	r20, r24
     9a2:	c5 01       	movw	r24, r10
     9a4:	b4 01       	movw	r22, r8
     9a6:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
     9aa:	0e 94 a5 19 	call	0x334a	; 0x334a <acos>
     9ae:	2b 01       	movw	r4, r22
     9b0:	3c 01       	movw	r6, r24
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     9b2:	a7 01       	movw	r20, r14
     9b4:	96 01       	movw	r18, r12
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	7a e1       	ldi	r23, 0x1A	; 26
     9ba:	87 ea       	ldi	r24, 0xA7	; 167
     9bc:	96 e4       	ldi	r25, 0x46	; 70
     9be:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
     9c2:	2d 81       	ldd	r18, Y+5	; 0x05
     9c4:	3e 81       	ldd	r19, Y+6	; 0x06
     9c6:	4f 81       	ldd	r20, Y+7	; 0x07
     9c8:	58 85       	ldd	r21, Y+8	; 0x08
     9ca:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	38 e1       	ldi	r19, 0x18	; 24
     9d2:	48 e8       	ldi	r20, 0x88	; 136
     9d4:	56 e4       	ldi	r21, 0x46	; 70
     9d6:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
     9da:	0e 94 a5 19 	call	0x334a	; 0x334a <acos>
     9de:	4b 01       	movw	r8, r22
     9e0:	5c 01       	movw	r10, r24
	long int ActuatorAngle1 =  theta1 + 195;
	long int ActuatorAngle2 =  225 - theta2;
	long int ActuatorAngle3 =  300 - theta3 ;
	
	
	MoveDynamixel(1,ActuatorAngle1,speed);
     9e2:	68 01       	movw	r12, r16
     9e4:	ee 24       	eor	r14, r14
     9e6:	d7 fc       	sbrc	r13, 7
     9e8:	e0 94       	com	r14
     9ea:	fe 2c       	mov	r15, r14
	USARTReadStatusPacket();	
	return;
}
void MoveRearLeftLeg(float x, float y, float z, int speed)
{
	long int theta1 = atan2f(x,-y)*180/PI;
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	44 e3       	ldi	r20, 0x34	; 52
     9f2:	53 e4       	ldi	r21, 0x43	; 67
     9f4:	6d 85       	ldd	r22, Y+13	; 0x0d
     9f6:	7e 85       	ldd	r23, Y+14	; 0x0e
     9f8:	8f 85       	ldd	r24, Y+15	; 0x0f
     9fa:	98 89       	ldd	r25, Y+16	; 0x10
     9fc:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     a00:	28 ed       	ldi	r18, 0xD8	; 216
     a02:	3f e0       	ldi	r19, 0x0F	; 15
     a04:	49 e4       	ldi	r20, 0x49	; 73
     a06:	50 e4       	ldi	r21, 0x40	; 64
     a08:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
     a0c:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

	long int ActuatorAngle1 =  theta1 + 195;
     a10:	ab 01       	movw	r20, r22
     a12:	bc 01       	movw	r22, r24
     a14:	4d 53       	subi	r20, 0x3D	; 61
     a16:	5f 4f       	sbci	r21, 0xFF	; 255
     a18:	6f 4f       	sbci	r22, 0xFF	; 255
     a1a:	7f 4f       	sbci	r23, 0xFF	; 255
	long int ActuatorAngle2 =  225 - theta2;
	long int ActuatorAngle3 =  300 - theta3 ;
	
	
	MoveDynamixel(1,ActuatorAngle1,speed);
     a1c:	97 01       	movw	r18, r14
     a1e:	86 01       	movw	r16, r12
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	27 dc       	rcall	.-1970   	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
     a26:	f9 db       	rcall	.-2062   	; 0x21a <USARTReadStatusPacket>
	return;
}
void MoveRearLeftLeg(float x, float y, float z, int speed)
{
	long int theta1 = atan2f(x,-y)*180/PI;
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
     a28:	a3 01       	movw	r20, r6
     a2a:	92 01       	movw	r18, r4
     a2c:	69 81       	ldd	r22, Y+1	; 0x01
     a2e:	7a 81       	ldd	r23, Y+2	; 0x02
     a30:	8b 81       	ldd	r24, Y+3	; 0x03
     a32:	9c 81       	ldd	r25, Y+4	; 0x04
     a34:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
     a38:	24 ee       	ldi	r18, 0xE4	; 228
     a3a:	3e e2       	ldi	r19, 0x2E	; 46
     a3c:	45 e6       	ldi	r20, 0x65	; 101
     a3e:	52 e4       	ldi	r21, 0x42	; 66
     a40:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     a44:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

	long int ActuatorAngle1 =  theta1 + 195;
	long int ActuatorAngle2 =  225 - theta2;
     a48:	0f 2e       	mov	r0, r31
     a4a:	f1 ee       	ldi	r31, 0xE1	; 225
     a4c:	4f 2e       	mov	r4, r31
     a4e:	51 2c       	mov	r5, r1
     a50:	61 2c       	mov	r6, r1
     a52:	71 2c       	mov	r7, r1
     a54:	f0 2d       	mov	r31, r0
     a56:	93 01       	movw	r18, r6
     a58:	82 01       	movw	r16, r4
     a5a:	06 1b       	sub	r16, r22
     a5c:	17 0b       	sbc	r17, r23
     a5e:	28 0b       	sbc	r18, r24
     a60:	39 0b       	sbc	r19, r25
     a62:	b9 01       	movw	r22, r18
     a64:	a8 01       	movw	r20, r16
	long int ActuatorAngle3 =  300 - theta3 ;
	
	
	MoveDynamixel(1,ActuatorAngle1,speed);
	USARTReadStatusPacket();
    MoveDynamixel(3,ActuatorAngle2,speed);
     a66:	97 01       	movw	r18, r14
     a68:	86 01       	movw	r16, r12
     a6a:	83 e0       	ldi	r24, 0x03	; 3
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	02 dc       	rcall	.-2044   	; 0x274 <MoveDynamixel>
    USARTReadStatusPacket();
     a70:	d4 db       	rcall	.-2136   	; 0x21a <USARTReadStatusPacket>
{
	long int theta1 = atan2f(x,-y)*180/PI;
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	44 e3       	ldi	r20, 0x34	; 52
     a78:	53 e4       	ldi	r21, 0x43	; 67
     a7a:	c5 01       	movw	r24, r10
     a7c:	b4 01       	movw	r22, r8
     a7e:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     a82:	28 ed       	ldi	r18, 0xD8	; 216
     a84:	3f e0       	ldi	r19, 0x0F	; 15
     a86:	49 e4       	ldi	r20, 0x49	; 73
     a88:	50 e4       	ldi	r21, 0x40	; 64
     a8a:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
     a8e:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>

	long int ActuatorAngle1 =  theta1 + 195;
	long int ActuatorAngle2 =  225 - theta2;
	long int ActuatorAngle3 =  300 - theta3 ;
     a92:	0f 2e       	mov	r0, r31
     a94:	fc e2       	ldi	r31, 0x2C	; 44
     a96:	8f 2e       	mov	r8, r31
     a98:	99 24       	eor	r9, r9
     a9a:	93 94       	inc	r9
     a9c:	a1 2c       	mov	r10, r1
     a9e:	b1 2c       	mov	r11, r1
     aa0:	f0 2d       	mov	r31, r0
     aa2:	95 01       	movw	r18, r10
     aa4:	84 01       	movw	r16, r8
     aa6:	06 1b       	sub	r16, r22
     aa8:	17 0b       	sbc	r17, r23
     aaa:	28 0b       	sbc	r18, r24
     aac:	39 0b       	sbc	r19, r25
     aae:	b9 01       	movw	r22, r18
     ab0:	a8 01       	movw	r20, r16
	
	MoveDynamixel(1,ActuatorAngle1,speed);
	USARTReadStatusPacket();
    MoveDynamixel(3,ActuatorAngle2,speed);
    USARTReadStatusPacket();
	MoveDynamixel(5,ActuatorAngle3,speed);
     ab2:	97 01       	movw	r18, r14
     ab4:	86 01       	movw	r16, r12
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	dc db       	rcall	.-2120   	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
     abc:	ae db       	rcall	.-2212   	; 0x21a <USARTReadStatusPacket>
	return;
}
     abe:	60 96       	adiw	r28, 0x10	; 16
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	f8 94       	cli
     ac4:	de bf       	out	0x3e, r29	; 62
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	cd bf       	out	0x3d, r28	; 61
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	1f 91       	pop	r17
     ad0:	0f 91       	pop	r16
     ad2:	ff 90       	pop	r15
     ad4:	ef 90       	pop	r14
     ad6:	df 90       	pop	r13
     ad8:	cf 90       	pop	r12
     ada:	bf 90       	pop	r11
     adc:	af 90       	pop	r10
     ade:	9f 90       	pop	r9
     ae0:	8f 90       	pop	r8
     ae2:	7f 90       	pop	r7
     ae4:	6f 90       	pop	r6
     ae6:	5f 90       	pop	r5
     ae8:	4f 90       	pop	r4
     aea:	08 95       	ret

00000aec <MoveRearRightLeg>:
void MoveRearRightLeg(float x, float y, float z, int speed)
{
     aec:	4f 92       	push	r4
     aee:	5f 92       	push	r5
     af0:	6f 92       	push	r6
     af2:	7f 92       	push	r7
     af4:	8f 92       	push	r8
     af6:	9f 92       	push	r9
     af8:	af 92       	push	r10
     afa:	bf 92       	push	r11
     afc:	cf 92       	push	r12
     afe:	df 92       	push	r13
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	60 97       	sbiw	r28, 0x10	; 16
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	de bf       	out	0x3e, r29	; 62
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	cd bf       	out	0x3d, r28	; 61
     b1c:	2b 01       	movw	r4, r22
     b1e:	3c 01       	movw	r6, r24
     b20:	49 01       	movw	r8, r18
     b22:	5a 01       	movw	r10, r20
     b24:	e9 82       	std	Y+1, r14	; 0x01
     b26:	fa 82       	std	Y+2, r15	; 0x02
     b28:	0b 83       	std	Y+3, r16	; 0x03
     b2a:	1c 83       	std	Y+4, r17	; 0x04
     b2c:	86 01       	movw	r16, r12
	long int theta1 = atan2f(x,-y)*180/PI;
     b2e:	50 58       	subi	r21, 0x80	; 128
     b30:	0e 94 27 1a 	call	0x344e	; 0x344e <atan2>
     b34:	6d 87       	std	Y+13, r22	; 0x0d
     b36:	7e 87       	std	Y+14, r23	; 0x0e
     b38:	8f 87       	std	Y+15, r24	; 0x0f
     b3a:	98 8b       	std	Y+16, r25	; 0x10
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
     b3c:	29 81       	ldd	r18, Y+1	; 0x01
     b3e:	3a 81       	ldd	r19, Y+2	; 0x02
     b40:	4b 81       	ldd	r20, Y+3	; 0x03
     b42:	5c 81       	ldd	r21, Y+4	; 0x04
     b44:	ca 01       	movw	r24, r20
     b46:	b9 01       	movw	r22, r18
     b48:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     b4c:	6b 01       	movw	r12, r22
     b4e:	7c 01       	movw	r14, r24
     b50:	a3 01       	movw	r20, r6
     b52:	92 01       	movw	r18, r4
     b54:	c3 01       	movw	r24, r6
     b56:	b2 01       	movw	r22, r4
     b58:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     b5c:	2b 01       	movw	r4, r22
     b5e:	3c 01       	movw	r6, r24
     b60:	a5 01       	movw	r20, r10
     b62:	94 01       	movw	r18, r8
     b64:	c5 01       	movw	r24, r10
     b66:	b4 01       	movw	r22, r8
     b68:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     b6c:	9b 01       	movw	r18, r22
     b6e:	ac 01       	movw	r20, r24
     b70:	c3 01       	movw	r24, r6
     b72:	b2 01       	movw	r22, r4
     b74:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
     b78:	2b 01       	movw	r4, r22
     b7a:	3c 01       	movw	r6, r24
     b7c:	0e 94 4f 1c 	call	0x389e	; 0x389e <sqrt>
     b80:	20 e0       	ldi	r18, 0x00	; 0
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	48 e4       	ldi	r20, 0x48	; 72
     b86:	52 e4       	ldi	r21, 0x42	; 66
     b88:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
     b8c:	4b 01       	movw	r8, r22
     b8e:	5c 01       	movw	r10, r24
     b90:	9b 01       	movw	r18, r22
     b92:	ac 01       	movw	r20, r24
     b94:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     b98:	6d 83       	std	Y+5, r22	; 0x05
     b9a:	7e 83       	std	Y+6, r23	; 0x06
     b9c:	8f 83       	std	Y+7, r24	; 0x07
     b9e:	98 87       	std	Y+8, r25	; 0x08
     ba0:	9b 01       	movw	r18, r22
     ba2:	ac 01       	movw	r20, r24
     ba4:	c7 01       	movw	r24, r14
     ba6:	b6 01       	movw	r22, r12
     ba8:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
     bac:	69 87       	std	Y+9, r22	; 0x09
     bae:	7a 87       	std	Y+10, r23	; 0x0a
     bb0:	8b 87       	std	Y+11, r24	; 0x0b
     bb2:	9c 87       	std	Y+12, r25	; 0x0c
     bb4:	0e 94 4f 1c 	call	0x389e	; 0x389e <sqrt>
     bb8:	9b 01       	movw	r18, r22
     bba:	ac 01       	movw	r20, r24
     bbc:	69 81       	ldd	r22, Y+1	; 0x01
     bbe:	7a 81       	ldd	r23, Y+2	; 0x02
     bc0:	8b 81       	ldd	r24, Y+3	; 0x03
     bc2:	9c 81       	ldd	r25, Y+4	; 0x04
     bc4:	90 58       	subi	r25, 0x80	; 128
     bc6:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
     bca:	0e 94 a5 19 	call	0x334a	; 0x334a <acos>
     bce:	69 83       	std	Y+1, r22	; 0x01
     bd0:	7a 83       	std	Y+2, r23	; 0x02
     bd2:	8b 83       	std	Y+3, r24	; 0x03
     bd4:	9c 83       	std	Y+4, r25	; 0x04
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	48 e4       	ldi	r20, 0x48	; 72
     bdc:	52 e4       	ldi	r21, 0x42	; 66
     bde:	c3 01       	movw	r24, r6
     be0:	b2 01       	movw	r22, r4
     be2:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
     be6:	0e 94 4f 1c 	call	0x389e	; 0x389e <sqrt>
     bea:	9b 01       	movw	r18, r22
     bec:	ac 01       	movw	r20, r24
     bee:	c5 01       	movw	r24, r10
     bf0:	b4 01       	movw	r22, r8
     bf2:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     bf6:	9b 01       	movw	r18, r22
     bf8:	ac 01       	movw	r20, r24
     bfa:	c7 01       	movw	r24, r14
     bfc:	b6 01       	movw	r22, r12
     bfe:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
     c02:	0e 94 4f 1c 	call	0x389e	; 0x389e <sqrt>
     c06:	2b 01       	movw	r4, r22
     c08:	3c 01       	movw	r6, r24
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	38 e4       	ldi	r19, 0x48	; 72
     c0e:	4c e8       	ldi	r20, 0x8C	; 140
     c10:	55 e4       	ldi	r21, 0x45	; 69
     c12:	69 85       	ldd	r22, Y+9	; 0x09
     c14:	7a 85       	ldd	r23, Y+10	; 0x0a
     c16:	8b 85       	ldd	r24, Y+11	; 0x0b
     c18:	9c 85       	ldd	r25, Y+12	; 0x0c
     c1a:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	38 e0       	ldi	r19, 0x08	; 8
     c22:	44 e8       	ldi	r20, 0x84	; 132
     c24:	56 e4       	ldi	r21, 0x46	; 70
     c26:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
     c2a:	4b 01       	movw	r8, r22
     c2c:	5c 01       	movw	r10, r24
     c2e:	a3 01       	movw	r20, r6
     c30:	92 01       	movw	r18, r4
     c32:	c3 01       	movw	r24, r6
     c34:	b2 01       	movw	r22, r4
     c36:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	46 e8       	ldi	r20, 0x86	; 134
     c40:	52 e4       	ldi	r21, 0x42	; 66
     c42:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     c46:	9b 01       	movw	r18, r22
     c48:	ac 01       	movw	r20, r24
     c4a:	c5 01       	movw	r24, r10
     c4c:	b4 01       	movw	r22, r8
     c4e:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
     c52:	0e 94 a5 19 	call	0x334a	; 0x334a <acos>
     c56:	2b 01       	movw	r4, r22
     c58:	3c 01       	movw	r6, r24
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     c5a:	a7 01       	movw	r20, r14
     c5c:	96 01       	movw	r18, r12
     c5e:	60 e0       	ldi	r22, 0x00	; 0
     c60:	7a e1       	ldi	r23, 0x1A	; 26
     c62:	87 ea       	ldi	r24, 0xA7	; 167
     c64:	96 e4       	ldi	r25, 0x46	; 70
     c66:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
     c6a:	2d 81       	ldd	r18, Y+5	; 0x05
     c6c:	3e 81       	ldd	r19, Y+6	; 0x06
     c6e:	4f 81       	ldd	r20, Y+7	; 0x07
     c70:	58 85       	ldd	r21, Y+8	; 0x08
     c72:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	38 e1       	ldi	r19, 0x18	; 24
     c7a:	48 e8       	ldi	r20, 0x88	; 136
     c7c:	56 e4       	ldi	r21, 0x46	; 70
     c7e:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
     c82:	0e 94 a5 19 	call	0x334a	; 0x334a <acos>
     c86:	4b 01       	movw	r8, r22
     c88:	5c 01       	movw	r10, r24
	long int ActuatorAngle1 =  theta1 + 105;
	long int ActuatorAngle2 =  225 - theta2;
	long int ActuatorAngle3 =  300 - theta3;
	
	
	MoveDynamixel(7,ActuatorAngle1,speed);
     c8a:	68 01       	movw	r12, r16
     c8c:	ee 24       	eor	r14, r14
     c8e:	d7 fc       	sbrc	r13, 7
     c90:	e0 94       	com	r14
     c92:	fe 2c       	mov	r15, r14
	USARTReadStatusPacket();
	return;
}
void MoveRearRightLeg(float x, float y, float z, int speed)
{
	long int theta1 = atan2f(x,-y)*180/PI;
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	44 e3       	ldi	r20, 0x34	; 52
     c9a:	53 e4       	ldi	r21, 0x43	; 67
     c9c:	6d 85       	ldd	r22, Y+13	; 0x0d
     c9e:	7e 85       	ldd	r23, Y+14	; 0x0e
     ca0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ca2:	98 89       	ldd	r25, Y+16	; 0x10
     ca4:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     ca8:	28 ed       	ldi	r18, 0xD8	; 216
     caa:	3f e0       	ldi	r19, 0x0F	; 15
     cac:	49 e4       	ldi	r20, 0x49	; 73
     cae:	50 e4       	ldi	r21, 0x40	; 64
     cb0:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
     cb4:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

	long int ActuatorAngle1 =  theta1 + 105;
     cb8:	ab 01       	movw	r20, r22
     cba:	bc 01       	movw	r22, r24
     cbc:	47 59       	subi	r20, 0x97	; 151
     cbe:	5f 4f       	sbci	r21, 0xFF	; 255
     cc0:	6f 4f       	sbci	r22, 0xFF	; 255
     cc2:	7f 4f       	sbci	r23, 0xFF	; 255
	long int ActuatorAngle2 =  225 - theta2;
	long int ActuatorAngle3 =  300 - theta3;
	
	
	MoveDynamixel(7,ActuatorAngle1,speed);
     cc4:	97 01       	movw	r18, r14
     cc6:	86 01       	movw	r16, r12
     cc8:	87 e0       	ldi	r24, 0x07	; 7
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	d3 da       	rcall	.-2650   	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
     cce:	a5 da       	rcall	.-2742   	; 0x21a <USARTReadStatusPacket>
	return;
}
void MoveRearRightLeg(float x, float y, float z, int speed)
{
	long int theta1 = atan2f(x,-y)*180/PI;
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
     cd0:	a3 01       	movw	r20, r6
     cd2:	92 01       	movw	r18, r4
     cd4:	69 81       	ldd	r22, Y+1	; 0x01
     cd6:	7a 81       	ldd	r23, Y+2	; 0x02
     cd8:	8b 81       	ldd	r24, Y+3	; 0x03
     cda:	9c 81       	ldd	r25, Y+4	; 0x04
     cdc:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
     ce0:	24 ee       	ldi	r18, 0xE4	; 228
     ce2:	3e e2       	ldi	r19, 0x2E	; 46
     ce4:	45 e6       	ldi	r20, 0x65	; 101
     ce6:	52 e4       	ldi	r21, 0x42	; 66
     ce8:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     cec:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

	long int ActuatorAngle1 =  theta1 + 105;
	long int ActuatorAngle2 =  225 - theta2;
     cf0:	0f 2e       	mov	r0, r31
     cf2:	f1 ee       	ldi	r31, 0xE1	; 225
     cf4:	4f 2e       	mov	r4, r31
     cf6:	51 2c       	mov	r5, r1
     cf8:	61 2c       	mov	r6, r1
     cfa:	71 2c       	mov	r7, r1
     cfc:	f0 2d       	mov	r31, r0
     cfe:	93 01       	movw	r18, r6
     d00:	82 01       	movw	r16, r4
     d02:	06 1b       	sub	r16, r22
     d04:	17 0b       	sbc	r17, r23
     d06:	28 0b       	sbc	r18, r24
     d08:	39 0b       	sbc	r19, r25
     d0a:	b9 01       	movw	r22, r18
     d0c:	a8 01       	movw	r20, r16
	long int ActuatorAngle3 =  300 - theta3;
	
	
	MoveDynamixel(7,ActuatorAngle1,speed);
	USARTReadStatusPacket();
	MoveDynamixel(9,ActuatorAngle2,speed);
     d0e:	97 01       	movw	r18, r14
     d10:	86 01       	movw	r16, r12
     d12:	89 e0       	ldi	r24, 0x09	; 9
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	ae da       	rcall	.-2724   	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
     d18:	80 da       	rcall	.-2816   	; 0x21a <USARTReadStatusPacket>
{
	long int theta1 = atan2f(x,-y)*180/PI;
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	44 e3       	ldi	r20, 0x34	; 52
     d20:	53 e4       	ldi	r21, 0x43	; 67
     d22:	c5 01       	movw	r24, r10
     d24:	b4 01       	movw	r22, r8
     d26:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
     d2a:	28 ed       	ldi	r18, 0xD8	; 216
     d2c:	3f e0       	ldi	r19, 0x0F	; 15
     d2e:	49 e4       	ldi	r20, 0x49	; 73
     d30:	50 e4       	ldi	r21, 0x40	; 64
     d32:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
     d36:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>

	long int ActuatorAngle1 =  theta1 + 105;
	long int ActuatorAngle2 =  225 - theta2;
	long int ActuatorAngle3 =  300 - theta3;
     d3a:	0f 2e       	mov	r0, r31
     d3c:	fc e2       	ldi	r31, 0x2C	; 44
     d3e:	8f 2e       	mov	r8, r31
     d40:	99 24       	eor	r9, r9
     d42:	93 94       	inc	r9
     d44:	a1 2c       	mov	r10, r1
     d46:	b1 2c       	mov	r11, r1
     d48:	f0 2d       	mov	r31, r0
     d4a:	95 01       	movw	r18, r10
     d4c:	84 01       	movw	r16, r8
     d4e:	06 1b       	sub	r16, r22
     d50:	17 0b       	sbc	r17, r23
     d52:	28 0b       	sbc	r18, r24
     d54:	39 0b       	sbc	r19, r25
     d56:	b9 01       	movw	r22, r18
     d58:	a8 01       	movw	r20, r16
	
	MoveDynamixel(7,ActuatorAngle1,speed);
	USARTReadStatusPacket();
	MoveDynamixel(9,ActuatorAngle2,speed);
	USARTReadStatusPacket();
	MoveDynamixel(11,ActuatorAngle3,speed);
     d5a:	97 01       	movw	r18, r14
     d5c:	86 01       	movw	r16, r12
     d5e:	8b e0       	ldi	r24, 0x0B	; 11
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	88 da       	rcall	.-2800   	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
     d64:	5a da       	rcall	.-2892   	; 0x21a <USARTReadStatusPacket>
	return;
}
     d66:	60 96       	adiw	r28, 0x10	; 16
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	cd bf       	out	0x3d, r28	; 61
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	ff 90       	pop	r15
     d7c:	ef 90       	pop	r14
     d7e:	df 90       	pop	r13
     d80:	cf 90       	pop	r12
     d82:	bf 90       	pop	r11
     d84:	af 90       	pop	r10
     d86:	9f 90       	pop	r9
     d88:	8f 90       	pop	r8
     d8a:	7f 90       	pop	r7
     d8c:	6f 90       	pop	r6
     d8e:	5f 90       	pop	r5
     d90:	4f 90       	pop	r4
     d92:	08 95       	ret

00000d94 <MoveToStartPosition>:

void MoveToStartPosition()
{
     d94:	4f 92       	push	r4
     d96:	5f 92       	push	r5
     d98:	6f 92       	push	r6
     d9a:	7f 92       	push	r7
     d9c:	8f 92       	push	r8
     d9e:	9f 92       	push	r9
     da0:	af 92       	push	r10
     da2:	bf 92       	push	r11
     da4:	cf 92       	push	r12
     da6:	df 92       	push	r13
     da8:	ef 92       	push	r14
     daa:	ff 92       	push	r15
     dac:	0f 93       	push	r16
     dae:	1f 93       	push	r17
    MoveFrontLeftLeg(-startPositionX_g,startPositionY_g,startPositionZ_g,standardSpeed_g);
     db0:	c0 90 22 01 	lds	r12, 0x0122
     db4:	d0 90 23 01 	lds	r13, 0x0123
     db8:	60 91 24 01 	lds	r22, 0x0124
     dbc:	70 91 25 01 	lds	r23, 0x0125
     dc0:	88 27       	eor	r24, r24
     dc2:	77 fd       	sbrc	r23, 7
     dc4:	80 95       	com	r24
     dc6:	98 2f       	mov	r25, r24
     dc8:	0e 94 15 1b 	call	0x362a	; 0x362a <__floatsisf>
     dcc:	2b 01       	movw	r4, r22
     dce:	3c 01       	movw	r6, r24
     dd0:	60 91 26 01 	lds	r22, 0x0126
     dd4:	70 91 27 01 	lds	r23, 0x0127
     dd8:	88 27       	eor	r24, r24
     dda:	77 fd       	sbrc	r23, 7
     ddc:	80 95       	com	r24
     dde:	98 2f       	mov	r25, r24
     de0:	0e 94 15 1b 	call	0x362a	; 0x362a <__floatsisf>
     de4:	4b 01       	movw	r8, r22
     de6:	5c 01       	movw	r10, r24
     de8:	60 91 28 01 	lds	r22, 0x0128
     dec:	70 91 29 01 	lds	r23, 0x0129
     df0:	71 95       	neg	r23
     df2:	61 95       	neg	r22
     df4:	71 09       	sbc	r23, r1
     df6:	88 27       	eor	r24, r24
     df8:	77 fd       	sbrc	r23, 7
     dfa:	80 95       	com	r24
     dfc:	98 2f       	mov	r25, r24
     dfe:	0e 94 15 1b 	call	0x362a	; 0x362a <__floatsisf>
     e02:	83 01       	movw	r16, r6
     e04:	72 01       	movw	r14, r4
     e06:	a5 01       	movw	r20, r10
     e08:	94 01       	movw	r18, r8
     e0a:	9a da       	rcall	.-2764   	; 0x340 <MoveFrontLeftLeg>
    MoveFrontRightLeg(startPositionX_g,startPositionY_g,startPositionZ_g,standardSpeed_g);
     e0c:	c0 90 22 01 	lds	r12, 0x0122
     e10:	d0 90 23 01 	lds	r13, 0x0123
     e14:	60 91 24 01 	lds	r22, 0x0124
     e18:	70 91 25 01 	lds	r23, 0x0125
     e1c:	88 27       	eor	r24, r24
     e1e:	77 fd       	sbrc	r23, 7
     e20:	80 95       	com	r24
     e22:	98 2f       	mov	r25, r24
     e24:	0e 94 15 1b 	call	0x362a	; 0x362a <__floatsisf>
     e28:	2b 01       	movw	r4, r22
     e2a:	3c 01       	movw	r6, r24
     e2c:	60 91 26 01 	lds	r22, 0x0126
     e30:	70 91 27 01 	lds	r23, 0x0127
     e34:	88 27       	eor	r24, r24
     e36:	77 fd       	sbrc	r23, 7
     e38:	80 95       	com	r24
     e3a:	98 2f       	mov	r25, r24
     e3c:	0e 94 15 1b 	call	0x362a	; 0x362a <__floatsisf>
     e40:	4b 01       	movw	r8, r22
     e42:	5c 01       	movw	r10, r24
     e44:	60 91 28 01 	lds	r22, 0x0128
     e48:	70 91 29 01 	lds	r23, 0x0129
     e4c:	88 27       	eor	r24, r24
     e4e:	77 fd       	sbrc	r23, 7
     e50:	80 95       	com	r24
     e52:	98 2f       	mov	r25, r24
     e54:	0e 94 15 1b 	call	0x362a	; 0x362a <__floatsisf>
     e58:	83 01       	movw	r16, r6
     e5a:	72 01       	movw	r14, r4
     e5c:	a5 01       	movw	r20, r10
     e5e:	94 01       	movw	r18, r8
     e60:	b0 db       	rcall	.-2208   	; 0x5c2 <MoveFrontRightLeg>
    MoveRearLeftLeg(-startPositionX_g,-startPositionY_g,startPositionZ_g,standardSpeed_g);
     e62:	c0 90 22 01 	lds	r12, 0x0122
     e66:	d0 90 23 01 	lds	r13, 0x0123
     e6a:	60 91 24 01 	lds	r22, 0x0124
     e6e:	70 91 25 01 	lds	r23, 0x0125
     e72:	88 27       	eor	r24, r24
     e74:	77 fd       	sbrc	r23, 7
     e76:	80 95       	com	r24
     e78:	98 2f       	mov	r25, r24
     e7a:	0e 94 15 1b 	call	0x362a	; 0x362a <__floatsisf>
     e7e:	2b 01       	movw	r4, r22
     e80:	3c 01       	movw	r6, r24
     e82:	60 91 26 01 	lds	r22, 0x0126
     e86:	70 91 27 01 	lds	r23, 0x0127
     e8a:	71 95       	neg	r23
     e8c:	61 95       	neg	r22
     e8e:	71 09       	sbc	r23, r1
     e90:	88 27       	eor	r24, r24
     e92:	77 fd       	sbrc	r23, 7
     e94:	80 95       	com	r24
     e96:	98 2f       	mov	r25, r24
     e98:	0e 94 15 1b 	call	0x362a	; 0x362a <__floatsisf>
     e9c:	4b 01       	movw	r8, r22
     e9e:	5c 01       	movw	r10, r24
     ea0:	60 91 28 01 	lds	r22, 0x0128
     ea4:	70 91 29 01 	lds	r23, 0x0129
     ea8:	71 95       	neg	r23
     eaa:	61 95       	neg	r22
     eac:	71 09       	sbc	r23, r1
     eae:	88 27       	eor	r24, r24
     eb0:	77 fd       	sbrc	r23, 7
     eb2:	80 95       	com	r24
     eb4:	98 2f       	mov	r25, r24
     eb6:	0e 94 15 1b 	call	0x362a	; 0x362a <__floatsisf>
     eba:	83 01       	movw	r16, r6
     ebc:	72 01       	movw	r14, r4
     ebe:	a5 01       	movw	r20, r10
     ec0:	94 01       	movw	r18, r8
     ec2:	c0 dc       	rcall	.-1664   	; 0x844 <MoveRearLeftLeg>
    MoveRearRightLeg(startPositionX_g,-startPositionY_g,startPositionZ_g,standardSpeed_g);
     ec4:	c0 90 22 01 	lds	r12, 0x0122
     ec8:	d0 90 23 01 	lds	r13, 0x0123
     ecc:	60 91 24 01 	lds	r22, 0x0124
     ed0:	70 91 25 01 	lds	r23, 0x0125
     ed4:	88 27       	eor	r24, r24
     ed6:	77 fd       	sbrc	r23, 7
     ed8:	80 95       	com	r24
     eda:	98 2f       	mov	r25, r24
     edc:	0e 94 15 1b 	call	0x362a	; 0x362a <__floatsisf>
     ee0:	2b 01       	movw	r4, r22
     ee2:	3c 01       	movw	r6, r24
     ee4:	60 91 26 01 	lds	r22, 0x0126
     ee8:	70 91 27 01 	lds	r23, 0x0127
     eec:	71 95       	neg	r23
     eee:	61 95       	neg	r22
     ef0:	71 09       	sbc	r23, r1
     ef2:	88 27       	eor	r24, r24
     ef4:	77 fd       	sbrc	r23, 7
     ef6:	80 95       	com	r24
     ef8:	98 2f       	mov	r25, r24
     efa:	0e 94 15 1b 	call	0x362a	; 0x362a <__floatsisf>
     efe:	4b 01       	movw	r8, r22
     f00:	5c 01       	movw	r10, r24
     f02:	60 91 28 01 	lds	r22, 0x0128
     f06:	70 91 29 01 	lds	r23, 0x0129
     f0a:	88 27       	eor	r24, r24
     f0c:	77 fd       	sbrc	r23, 7
     f0e:	80 95       	com	r24
     f10:	98 2f       	mov	r25, r24
     f12:	0e 94 15 1b 	call	0x362a	; 0x362a <__floatsisf>
     f16:	83 01       	movw	r16, r6
     f18:	72 01       	movw	r14, r4
     f1a:	a5 01       	movw	r20, r10
     f1c:	94 01       	movw	r18, r8
     f1e:	e6 dd       	rcall	.-1076   	; 0xaec <MoveRearRightLeg>
    return;
}
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	df 90       	pop	r13
     f2a:	cf 90       	pop	r12
     f2c:	bf 90       	pop	r11
     f2e:	af 90       	pop	r10
     f30:	9f 90       	pop	r9
     f32:	8f 90       	pop	r8
     f34:	7f 90       	pop	r7
     f36:	6f 90       	pop	r6
     f38:	5f 90       	pop	r5
     f3a:	4f 90       	pop	r4
     f3c:	08 95       	ret

00000f3e <CalcStraightPath>:
leg rearLeftLeg = {REAR_LEFT_LEG, 1, 3, 5};
leg rearRightLeg = {REAR_RIGHT_LEG, 7, 9, 11};


void CalcStraightPath(leg currentLeg, int numberOfPositions, int positionStart, float x1, float y1, float z1, float x2, float y2, float z2)
{
     f3e:	2f 92       	push	r2
     f40:	3f 92       	push	r3
     f42:	4f 92       	push	r4
     f44:	5f 92       	push	r5
     f46:	6f 92       	push	r6
     f48:	7f 92       	push	r7
     f4a:	8f 92       	push	r8
     f4c:	9f 92       	push	r9
     f4e:	af 92       	push	r10
     f50:	bf 92       	push	r11
     f52:	cf 92       	push	r12
     f54:	df 92       	push	r13
     f56:	ef 92       	push	r14
     f58:	ff 92       	push	r15
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	e8 97       	sbiw	r28, 0x38	; 56
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	de bf       	out	0x3e, r29	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	cd bf       	out	0x3d, r28	; 61
     f72:	29 83       	std	Y+1, r18	; 0x01
     f74:	3a 83       	std	Y+2, r19	; 0x02
     f76:	4b 83       	std	Y+3, r20	; 0x03
     f78:	5c 83       	std	Y+4, r21	; 0x04
     f7a:	6d 83       	std	Y+5, r22	; 0x05
     f7c:	7e 83       	std	Y+6, r23	; 0x06
     f7e:	8f 83       	std	Y+7, r24	; 0x07
     f80:	98 87       	std	Y+8, r25	; 0x08
     f82:	1c a7       	std	Y+44, r17	; 0x2c
     f84:	0b a7       	std	Y+43, r16	; 0x2b
     f86:	87 01       	movw	r16, r14
     f88:	61 96       	adiw	r28, 0x11	; 17
     f8a:	4c ac       	ldd	r4, Y+60	; 0x3c
     f8c:	5d ac       	ldd	r5, Y+61	; 0x3d
     f8e:	6e ac       	ldd	r6, Y+62	; 0x3e
     f90:	7f ac       	ldd	r7, Y+63	; 0x3f
     f92:	61 97       	sbiw	r28, 0x11	; 17
     f94:	29 81       	ldd	r18, Y+1	; 0x01
     f96:	3a 81       	ldd	r19, Y+2	; 0x02
     f98:	3e 8b       	std	Y+22, r19	; 0x16
     f9a:	2d 8b       	std	Y+21, r18	; 0x15
     f9c:	2b 80       	ldd	r2, Y+3	; 0x03
     f9e:	3c 80       	ldd	r3, Y+4	; 0x04
     fa0:	8d 80       	ldd	r8, Y+5	; 0x05
     fa2:	9e 80       	ldd	r9, Y+6	; 0x06
     fa4:	ef 80       	ldd	r14, Y+7	; 0x07
     fa6:	f8 84       	ldd	r15, Y+8	; 0x08
    long int theta1;
    long int theta2;
    long int theta3;
    if ((currentLeg.legNumber == FRONT_LEFT_LEG) | (currentLeg.legNumber == FRONT_RIGHT_LEG))
     fa8:	c9 01       	movw	r24, r18
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	02 97       	sbiw	r24, 0x02	; 2
     fae:	88 f4       	brcc	.+34     	; 0xfd2 <CalcStraightPath+0x94>
    {
        x1 *= -1;
     fb0:	d7 fa       	bst	r13, 7
     fb2:	d0 94       	com	r13
     fb4:	d7 f8       	bld	r13, 7
     fb6:	d0 94       	com	r13
        x2 *= -1;
     fb8:	69 96       	adiw	r28, 0x19	; 25
     fba:	8c ad       	ldd	r24, Y+60	; 0x3c
     fbc:	9d ad       	ldd	r25, Y+61	; 0x3d
     fbe:	ae ad       	ldd	r26, Y+62	; 0x3e
     fc0:	bf ad       	ldd	r27, Y+63	; 0x3f
     fc2:	69 97       	sbiw	r28, 0x19	; 25
     fc4:	b0 58       	subi	r27, 0x80	; 128
     fc6:	69 96       	adiw	r28, 0x19	; 25
     fc8:	8c af       	std	Y+60, r24	; 0x3c
     fca:	9d af       	std	Y+61, r25	; 0x3d
     fcc:	ae af       	std	Y+62, r26	; 0x3e
     fce:	bf af       	std	Y+63, r27	; 0x3f
     fd0:	69 97       	sbiw	r28, 0x19	; 25
    }
    if ((currentLeg.legNumber == REAR_RIGHT_LEG) | (currentLeg.legNumber == REAR_LEFT_LEG))
     fd2:	8d 89       	ldd	r24, Y+21	; 0x15
     fd4:	9e 89       	ldd	r25, Y+22	; 0x16
     fd6:	03 97       	sbiw	r24, 0x03	; 3
     fd8:	02 97       	sbiw	r24, 0x02	; 2
     fda:	88 f4       	brcc	.+34     	; 0xffe <CalcStraightPath+0xc0>
    {
        y1 *= -1;
     fdc:	77 fa       	bst	r7, 7
     fde:	70 94       	com	r7
     fe0:	77 f8       	bld	r7, 7
     fe2:	70 94       	com	r7
        y2 *= -1;
     fe4:	6d 96       	adiw	r28, 0x1d	; 29
     fe6:	2c ad       	ldd	r18, Y+60	; 0x3c
     fe8:	3d ad       	ldd	r19, Y+61	; 0x3d
     fea:	4e ad       	ldd	r20, Y+62	; 0x3e
     fec:	5f ad       	ldd	r21, Y+63	; 0x3f
     fee:	6d 97       	sbiw	r28, 0x1d	; 29
     ff0:	50 58       	subi	r21, 0x80	; 128
     ff2:	6d 96       	adiw	r28, 0x1d	; 29
     ff4:	2c af       	std	Y+60, r18	; 0x3c
     ff6:	3d af       	std	Y+61, r19	; 0x3d
     ff8:	4e af       	std	Y+62, r20	; 0x3e
     ffa:	5f af       	std	Y+63, r21	; 0x3f
     ffc:	6d 97       	sbiw	r28, 0x1d	; 29
    }
    float deltaX = (x2 - x1) / numberOfPositions;
     ffe:	4b a5       	ldd	r20, Y+43	; 0x2b
    1000:	5c a5       	ldd	r21, Y+44	; 0x2c
    1002:	ba 01       	movw	r22, r20
    1004:	88 27       	eor	r24, r24
    1006:	77 fd       	sbrc	r23, 7
    1008:	80 95       	com	r24
    100a:	98 2f       	mov	r25, r24
    100c:	0e 94 15 1b 	call	0x362a	; 0x362a <__floatsisf>
    1010:	69 87       	std	Y+9, r22	; 0x09
    1012:	7a 87       	std	Y+10, r23	; 0x0a
    1014:	8b 87       	std	Y+11, r24	; 0x0b
    1016:	9c 87       	std	Y+12, r25	; 0x0c
    1018:	a6 01       	movw	r20, r12
    101a:	95 01       	movw	r18, r10
    101c:	69 96       	adiw	r28, 0x19	; 25
    101e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1020:	7d ad       	ldd	r23, Y+61	; 0x3d
    1022:	8e ad       	ldd	r24, Y+62	; 0x3e
    1024:	9f ad       	ldd	r25, Y+63	; 0x3f
    1026:	69 97       	sbiw	r28, 0x19	; 25
    1028:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
    102c:	29 85       	ldd	r18, Y+9	; 0x09
    102e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1030:	4b 85       	ldd	r20, Y+11	; 0x0b
    1032:	5c 85       	ldd	r21, Y+12	; 0x0c
    1034:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
    1038:	6d a7       	std	Y+45, r22	; 0x2d
    103a:	7e a7       	std	Y+46, r23	; 0x2e
    103c:	8f a7       	std	Y+47, r24	; 0x2f
    103e:	98 ab       	std	Y+48, r25	; 0x30
    float deltaY = (y2 - y1) / numberOfPositions;
    1040:	a3 01       	movw	r20, r6
    1042:	92 01       	movw	r18, r4
    1044:	6d 96       	adiw	r28, 0x1d	; 29
    1046:	6c ad       	ldd	r22, Y+60	; 0x3c
    1048:	7d ad       	ldd	r23, Y+61	; 0x3d
    104a:	8e ad       	ldd	r24, Y+62	; 0x3e
    104c:	9f ad       	ldd	r25, Y+63	; 0x3f
    104e:	6d 97       	sbiw	r28, 0x1d	; 29
    1050:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
    1054:	29 85       	ldd	r18, Y+9	; 0x09
    1056:	3a 85       	ldd	r19, Y+10	; 0x0a
    1058:	4b 85       	ldd	r20, Y+11	; 0x0b
    105a:	5c 85       	ldd	r21, Y+12	; 0x0c
    105c:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
    1060:	69 ab       	std	Y+49, r22	; 0x31
    1062:	7a ab       	std	Y+50, r23	; 0x32
    1064:	8b ab       	std	Y+51, r24	; 0x33
    1066:	9c ab       	std	Y+52, r25	; 0x34
    float deltaZ = (z2 - z1) / numberOfPositions;
    1068:	65 96       	adiw	r28, 0x15	; 21
    106a:	2c ad       	ldd	r18, Y+60	; 0x3c
    106c:	3d ad       	ldd	r19, Y+61	; 0x3d
    106e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1070:	5f ad       	ldd	r21, Y+63	; 0x3f
    1072:	65 97       	sbiw	r28, 0x15	; 21
    1074:	a1 96       	adiw	r28, 0x21	; 33
    1076:	6c ad       	ldd	r22, Y+60	; 0x3c
    1078:	7d ad       	ldd	r23, Y+61	; 0x3d
    107a:	8e ad       	ldd	r24, Y+62	; 0x3e
    107c:	9f ad       	ldd	r25, Y+63	; 0x3f
    107e:	a1 97       	sbiw	r28, 0x21	; 33
    1080:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
    1084:	29 85       	ldd	r18, Y+9	; 0x09
    1086:	3a 85       	ldd	r19, Y+10	; 0x0a
    1088:	4b 85       	ldd	r20, Y+11	; 0x0b
    108a:	5c 85       	ldd	r21, Y+12	; 0x0c
    108c:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
    1090:	6d ab       	std	Y+53, r22	; 0x35
    1092:	7e ab       	std	Y+54, r23	; 0x36
    1094:	8f ab       	std	Y+55, r24	; 0x37
    1096:	98 af       	std	Y+56, r25	; 0x38
    float z = z1;
    
  
    
    
    for (int i = 0; i < numberOfPositions; i++)
    1098:	8b a5       	ldd	r24, Y+43	; 0x2b
    109a:	9c a5       	ldd	r25, Y+44	; 0x2c
    109c:	18 16       	cp	r1, r24
    109e:	19 06       	cpc	r1, r25
    10a0:	0c f0       	brlt	.+2      	; 0x10a4 <CalcStraightPath+0x166>
    10a2:	e2 c2       	rjmp	.+1476   	; 0x1668 <CalcStraightPath+0x72a>
    10a4:	24 e1       	ldi	r18, 0x14	; 20
    10a6:	22 9d       	mul	r18, r2
    10a8:	c0 01       	movw	r24, r0
    10aa:	23 9d       	mul	r18, r3
    10ac:	90 0d       	add	r25, r0
    10ae:	11 24       	eor	r1, r1
    10b0:	80 0f       	add	r24, r16
    10b2:	91 1f       	adc	r25, r17
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	dc 01       	movw	r26, r24
    10be:	a4 51       	subi	r26, 0x14	; 20
    10c0:	bb 4f       	sbci	r27, 0xFB	; 251
    10c2:	ba a3       	std	Y+34, r27	; 0x22
    10c4:	a9 a3       	std	Y+33, r26	; 0x21
    10c6:	28 9d       	mul	r18, r8
    10c8:	c0 01       	movw	r24, r0
    10ca:	29 9d       	mul	r18, r9
    10cc:	90 0d       	add	r25, r0
    10ce:	11 24       	eor	r1, r1
    10d0:	80 0f       	add	r24, r16
    10d2:	91 1f       	adc	r25, r17
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	fc 01       	movw	r30, r24
    10de:	e4 51       	subi	r30, 0x14	; 20
    10e0:	fb 4f       	sbci	r31, 0xFB	; 251
    10e2:	fe a3       	std	Y+38, r31	; 0x26
    10e4:	ed a3       	std	Y+37, r30	; 0x25
    10e6:	2e 9d       	mul	r18, r14
    10e8:	c0 01       	movw	r24, r0
    10ea:	2f 9d       	mul	r18, r15
    10ec:	90 0d       	add	r25, r0
    10ee:	11 24       	eor	r1, r1
    10f0:	80 0f       	add	r24, r16
    10f2:	91 1f       	adc	r25, r17
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	9c 01       	movw	r18, r24
    10fe:	24 51       	subi	r18, 0x14	; 20
    1100:	3b 4f       	sbci	r19, 0xFB	; 251
    1102:	3c a3       	std	Y+36, r19	; 0x24
    1104:	2b a3       	std	Y+35, r18	; 0x23
    1106:	00 0f       	add	r16, r16
    1108:	11 1f       	adc	r17, r17
    110a:	00 0f       	add	r16, r16
    110c:	11 1f       	adc	r17, r17
    110e:	04 58       	subi	r16, 0x84	; 132
    1110:	1e 4f       	sbci	r17, 0xFE	; 254
    1112:	21 2c       	mov	r2, r1
    1114:	31 2c       	mov	r3, r1
            }
            case REAR_LEFT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i+positionStart] = theta1 + 195;
                actuatorPositions_g[currentLeg.femurJoint][i+positionStart] =  225 - theta2;
                actuatorPositions_g[currentLeg.tibiaJoint][i+positionStart] =  300 - theta3;
    1116:	38 8e       	std	Y+24, r3	; 0x18
    1118:	2f 8a       	std	Y+23, r2	; 0x17
    111a:	18 01       	movw	r2, r16
    111c:	a9 86       	std	Y+9, r10	; 0x09
    111e:	ba 86       	std	Y+10, r11	; 0x0a
    1120:	cb 86       	std	Y+11, r12	; 0x0b
    1122:	dc 86       	std	Y+12, r13	; 0x0c
    1124:	4d 86       	std	Y+13, r4	; 0x0d
    1126:	5e 86       	std	Y+14, r5	; 0x0e
    1128:	6f 86       	std	Y+15, r6	; 0x0f
    112a:	78 8a       	std	Y+16, r7	; 0x10
  
    
    
    for (int i = 0; i < numberOfPositions; i++)
    {
        x = x + deltaX;
    112c:	2d a5       	ldd	r18, Y+45	; 0x2d
    112e:	3e a5       	ldd	r19, Y+46	; 0x2e
    1130:	4f a5       	ldd	r20, Y+47	; 0x2f
    1132:	58 a9       	ldd	r21, Y+48	; 0x30
    1134:	69 85       	ldd	r22, Y+9	; 0x09
    1136:	7a 85       	ldd	r23, Y+10	; 0x0a
    1138:	8b 85       	ldd	r24, Y+11	; 0x0b
    113a:	9c 85       	ldd	r25, Y+12	; 0x0c
    113c:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
    1140:	69 87       	std	Y+9, r22	; 0x09
    1142:	7a 87       	std	Y+10, r23	; 0x0a
    1144:	8b 87       	std	Y+11, r24	; 0x0b
    1146:	9c 87       	std	Y+12, r25	; 0x0c
        y = y + deltaY;
    1148:	29 a9       	ldd	r18, Y+49	; 0x31
    114a:	3a a9       	ldd	r19, Y+50	; 0x32
    114c:	4b a9       	ldd	r20, Y+51	; 0x33
    114e:	5c a9       	ldd	r21, Y+52	; 0x34
    1150:	6d 85       	ldd	r22, Y+13	; 0x0d
    1152:	7e 85       	ldd	r23, Y+14	; 0x0e
    1154:	8f 85       	ldd	r24, Y+15	; 0x0f
    1156:	98 89       	ldd	r25, Y+16	; 0x10
    1158:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
    115c:	6d 87       	std	Y+13, r22	; 0x0d
    115e:	7e 87       	std	Y+14, r23	; 0x0e
    1160:	8f 87       	std	Y+15, r24	; 0x0f
    1162:	98 8b       	std	Y+16, r25	; 0x10
        z = z + deltaZ;
    1164:	2d a9       	ldd	r18, Y+53	; 0x35
    1166:	3e a9       	ldd	r19, Y+54	; 0x36
    1168:	4f a9       	ldd	r20, Y+55	; 0x37
    116a:	58 ad       	ldd	r21, Y+56	; 0x38
    116c:	65 96       	adiw	r28, 0x15	; 21
    116e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1170:	7d ad       	ldd	r23, Y+61	; 0x3d
    1172:	8e ad       	ldd	r24, Y+62	; 0x3e
    1174:	9f ad       	ldd	r25, Y+63	; 0x3f
    1176:	65 97       	sbiw	r28, 0x15	; 21
    1178:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
    117c:	65 96       	adiw	r28, 0x15	; 21
    117e:	6c af       	std	Y+60, r22	; 0x3c
    1180:	7d af       	std	Y+61, r23	; 0x3d
    1182:	8e af       	std	Y+62, r24	; 0x3e
    1184:	9f af       	std	Y+63, r25	; 0x3f
    1186:	65 97       	sbiw	r28, 0x15	; 21
        
        // lös inverskinematik för lederna.
        theta1 = atan2f(x,y)*180/PI;
    1188:	2d 85       	ldd	r18, Y+13	; 0x0d
    118a:	3e 85       	ldd	r19, Y+14	; 0x0e
    118c:	4f 85       	ldd	r20, Y+15	; 0x0f
    118e:	58 89       	ldd	r21, Y+16	; 0x10
    1190:	69 85       	ldd	r22, Y+9	; 0x09
    1192:	7a 85       	ldd	r23, Y+10	; 0x0a
    1194:	8b 85       	ldd	r24, Y+11	; 0x0b
    1196:	9c 85       	ldd	r25, Y+12	; 0x0c
    1198:	0e 94 27 1a 	call	0x344e	; 0x344e <atan2>
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	44 e3       	ldi	r20, 0x34	; 52
    11a2:	53 e4       	ldi	r21, 0x43	; 67
    11a4:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
    11a8:	28 ed       	ldi	r18, 0xD8	; 216
    11aa:	3f e0       	ldi	r19, 0x0F	; 15
    11ac:	49 e4       	ldi	r20, 0x49	; 73
    11ae:	50 e4       	ldi	r21, 0x40	; 64
    11b0:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
    11b4:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    11b8:	6f a3       	std	Y+39, r22	; 0x27
    11ba:	78 a7       	std	Y+40, r23	; 0x28
    11bc:	89 a7       	std	Y+41, r24	; 0x29
    11be:	9a a7       	std	Y+42, r25	; 0x2a
        theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
    11c0:	65 96       	adiw	r28, 0x15	; 21
    11c2:	2c ad       	ldd	r18, Y+60	; 0x3c
    11c4:	3d ad       	ldd	r19, Y+61	; 0x3d
    11c6:	4e ad       	ldd	r20, Y+62	; 0x3e
    11c8:	5f ad       	ldd	r21, Y+63	; 0x3f
    11ca:	65 97       	sbiw	r28, 0x15	; 21
    11cc:	ca 01       	movw	r24, r20
    11ce:	b9 01       	movw	r22, r18
    11d0:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
    11d4:	69 8b       	std	Y+17, r22	; 0x11
    11d6:	7a 8b       	std	Y+18, r23	; 0x12
    11d8:	8b 8b       	std	Y+19, r24	; 0x13
    11da:	9c 8b       	std	Y+20, r25	; 0x14
    11dc:	29 85       	ldd	r18, Y+9	; 0x09
    11de:	3a 85       	ldd	r19, Y+10	; 0x0a
    11e0:	4b 85       	ldd	r20, Y+11	; 0x0b
    11e2:	5c 85       	ldd	r21, Y+12	; 0x0c
    11e4:	ca 01       	movw	r24, r20
    11e6:	b9 01       	movw	r22, r18
    11e8:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
    11ec:	6b 01       	movw	r12, r22
    11ee:	7c 01       	movw	r14, r24
    11f0:	2d 85       	ldd	r18, Y+13	; 0x0d
    11f2:	3e 85       	ldd	r19, Y+14	; 0x0e
    11f4:	4f 85       	ldd	r20, Y+15	; 0x0f
    11f6:	58 89       	ldd	r21, Y+16	; 0x10
    11f8:	ca 01       	movw	r24, r20
    11fa:	b9 01       	movw	r22, r18
    11fc:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
    1200:	9b 01       	movw	r18, r22
    1202:	ac 01       	movw	r20, r24
    1204:	c7 01       	movw	r24, r14
    1206:	b6 01       	movw	r22, r12
    1208:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
    120c:	69 8f       	std	Y+25, r22	; 0x19
    120e:	7a 8f       	std	Y+26, r23	; 0x1a
    1210:	8b 8f       	std	Y+27, r24	; 0x1b
    1212:	9c 8f       	std	Y+28, r25	; 0x1c
    1214:	0e 94 4f 1c 	call	0x389e	; 0x389e <sqrt>
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	48 e4       	ldi	r20, 0x48	; 72
    121e:	52 e4       	ldi	r21, 0x42	; 66
    1220:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
    1224:	6b 01       	movw	r12, r22
    1226:	7c 01       	movw	r14, r24
    1228:	9b 01       	movw	r18, r22
    122a:	ac 01       	movw	r20, r24
    122c:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
    1230:	6d 8f       	std	Y+29, r22	; 0x1d
    1232:	7e 8f       	std	Y+30, r23	; 0x1e
    1234:	8f 8f       	std	Y+31, r24	; 0x1f
    1236:	98 a3       	std	Y+32, r25	; 0x20
    1238:	9b 01       	movw	r18, r22
    123a:	ac 01       	movw	r20, r24
    123c:	69 89       	ldd	r22, Y+17	; 0x11
    123e:	7a 89       	ldd	r23, Y+18	; 0x12
    1240:	8b 89       	ldd	r24, Y+19	; 0x13
    1242:	9c 89       	ldd	r25, Y+20	; 0x14
    1244:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
    1248:	4b 01       	movw	r8, r22
    124a:	5c 01       	movw	r10, r24
    124c:	0e 94 4f 1c 	call	0x389e	; 0x389e <sqrt>
    1250:	9b 01       	movw	r18, r22
    1252:	ac 01       	movw	r20, r24
    1254:	65 96       	adiw	r28, 0x15	; 21
    1256:	6c ad       	ldd	r22, Y+60	; 0x3c
    1258:	7d ad       	ldd	r23, Y+61	; 0x3d
    125a:	8e ad       	ldd	r24, Y+62	; 0x3e
    125c:	9f ad       	ldd	r25, Y+63	; 0x3f
    125e:	65 97       	sbiw	r28, 0x15	; 21
    1260:	90 58       	subi	r25, 0x80	; 128
    1262:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
    1266:	0e 94 a5 19 	call	0x334a	; 0x334a <acos>
    126a:	2b 01       	movw	r4, r22
    126c:	3c 01       	movw	r6, r24
        acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	48 e4       	ldi	r20, 0x48	; 72
    1274:	52 e4       	ldi	r21, 0x42	; 66
    1276:	69 8d       	ldd	r22, Y+25	; 0x19
    1278:	7a 8d       	ldd	r23, Y+26	; 0x1a
    127a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    127c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    127e:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
    1282:	0e 94 4f 1c 	call	0x389e	; 0x389e <sqrt>
    1286:	9b 01       	movw	r18, r22
    1288:	ac 01       	movw	r20, r24
    128a:	c7 01       	movw	r24, r14
    128c:	b6 01       	movw	r22, r12
    128e:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
    1292:	9b 01       	movw	r18, r22
    1294:	ac 01       	movw	r20, r24
    1296:	69 89       	ldd	r22, Y+17	; 0x11
    1298:	7a 89       	ldd	r23, Y+18	; 0x12
    129a:	8b 89       	ldd	r24, Y+19	; 0x13
    129c:	9c 89       	ldd	r25, Y+20	; 0x14
    129e:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
    12a2:	0e 94 4f 1c 	call	0x389e	; 0x389e <sqrt>
    12a6:	6b 01       	movw	r12, r22
    12a8:	7c 01       	movw	r14, r24
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	38 e4       	ldi	r19, 0x48	; 72
    12ae:	4c e8       	ldi	r20, 0x8C	; 140
    12b0:	55 e4       	ldi	r21, 0x45	; 69
    12b2:	c5 01       	movw	r24, r10
    12b4:	b4 01       	movw	r22, r8
    12b6:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	38 e0       	ldi	r19, 0x08	; 8
    12be:	44 e8       	ldi	r20, 0x84	; 132
    12c0:	56 e4       	ldi	r21, 0x46	; 70
    12c2:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
    12c6:	4b 01       	movw	r8, r22
    12c8:	5c 01       	movw	r10, r24
    12ca:	a7 01       	movw	r20, r14
    12cc:	96 01       	movw	r18, r12
    12ce:	c7 01       	movw	r24, r14
    12d0:	b6 01       	movw	r22, r12
    12d2:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	46 e8       	ldi	r20, 0x86	; 134
    12dc:	52 e4       	ldi	r21, 0x42	; 66
    12de:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
    12e2:	9b 01       	movw	r18, r22
    12e4:	ac 01       	movw	r20, r24
    12e6:	c5 01       	movw	r24, r10
    12e8:	b4 01       	movw	r22, r8
    12ea:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
    12ee:	0e 94 a5 19 	call	0x334a	; 0x334a <acos>
    12f2:	9b 01       	movw	r18, r22
    12f4:	ac 01       	movw	r20, r24
        y = y + deltaY;
        z = z + deltaZ;
        
        // lös inverskinematik för lederna.
        theta1 = atan2f(x,y)*180/PI;
        theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
    12f6:	c3 01       	movw	r24, r6
    12f8:	b2 01       	movw	r22, r4
    12fa:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
    12fe:	24 ee       	ldi	r18, 0xE4	; 228
    1300:	3e e2       	ldi	r19, 0x2E	; 46
    1302:	45 e6       	ldi	r20, 0x65	; 101
    1304:	52 e4       	ldi	r21, 0x42	; 66
    1306:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
    130a:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    130e:	6b 01       	movw	r12, r22
    1310:	7c 01       	movw	r14, r24
        acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
        
        theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
    1312:	29 89       	ldd	r18, Y+17	; 0x11
    1314:	3a 89       	ldd	r19, Y+18	; 0x12
    1316:	4b 89       	ldd	r20, Y+19	; 0x13
    1318:	5c 89       	ldd	r21, Y+20	; 0x14
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	7a e1       	ldi	r23, 0x1A	; 26
    131e:	87 ea       	ldi	r24, 0xA7	; 167
    1320:	96 e4       	ldi	r25, 0x46	; 70
    1322:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
    1326:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1328:	3e 8d       	ldd	r19, Y+30	; 0x1e
    132a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    132c:	58 a1       	ldd	r21, Y+32	; 0x20
    132e:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	38 e1       	ldi	r19, 0x18	; 24
    1336:	48 e8       	ldi	r20, 0x88	; 136
    1338:	56 e4       	ldi	r21, 0x46	; 70
    133a:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
    133e:	0e 94 a5 19 	call	0x334a	; 0x334a <acos>
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	44 e3       	ldi	r20, 0x34	; 52
    1348:	53 e4       	ldi	r21, 0x43	; 67
    134a:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
    134e:	28 ed       	ldi	r18, 0xD8	; 216
    1350:	3f e0       	ldi	r19, 0x0F	; 15
    1352:	49 e4       	ldi	r20, 0x49	; 73
    1354:	50 e4       	ldi	r21, 0x40	; 64
    1356:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
    135a:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
        
        // spara resultatet i global array
        switch(currentLeg.legNumber)
    135e:	4d 89       	ldd	r20, Y+21	; 0x15
    1360:	5e 89       	ldd	r21, Y+22	; 0x16
    1362:	42 30       	cpi	r20, 0x02	; 2
    1364:	51 05       	cpc	r21, r1
    1366:	09 f4       	brne	.+2      	; 0x136a <CalcStraightPath+0x42c>
    1368:	5f c0       	rjmp	.+190    	; 0x1428 <CalcStraightPath+0x4ea>
    136a:	24 f4       	brge	.+8      	; 0x1374 <CalcStraightPath+0x436>
    136c:	41 30       	cpi	r20, 0x01	; 1
    136e:	51 05       	cpc	r21, r1
    1370:	59 f0       	breq	.+22     	; 0x1388 <CalcStraightPath+0x44a>
    1372:	5b c1       	rjmp	.+694    	; 0x162a <CalcStraightPath+0x6ec>
    1374:	ad 89       	ldd	r26, Y+21	; 0x15
    1376:	be 89       	ldd	r27, Y+22	; 0x16
    1378:	a3 30       	cpi	r26, 0x03	; 3
    137a:	b1 05       	cpc	r27, r1
    137c:	09 f4       	brne	.+2      	; 0x1380 <CalcStraightPath+0x442>
    137e:	a6 c0       	rjmp	.+332    	; 0x14cc <CalcStraightPath+0x58e>
    1380:	14 97       	sbiw	r26, 0x04	; 4
    1382:	09 f4       	brne	.+2      	; 0x1386 <CalcStraightPath+0x448>
    1384:	fb c0       	rjmp	.+502    	; 0x157c <CalcStraightPath+0x63e>
    1386:	51 c1       	rjmp	.+674    	; 0x162a <CalcStraightPath+0x6ec>
        {
            case FRONT_LEFT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i+positionStart] = theta1 + 105;
    1388:	0f a1       	ldd	r16, Y+39	; 0x27
    138a:	18 a5       	ldd	r17, Y+40	; 0x28
    138c:	29 a5       	ldd	r18, Y+41	; 0x29
    138e:	3a a5       	ldd	r19, Y+42	; 0x2a
    1390:	07 59       	subi	r16, 0x97	; 151
    1392:	1f 4f       	sbci	r17, 0xFF	; 255
    1394:	2f 4f       	sbci	r18, 0xFF	; 255
    1396:	3f 4f       	sbci	r19, 0xFF	; 255
    1398:	e9 a1       	ldd	r30, Y+33	; 0x21
    139a:	fa a1       	ldd	r31, Y+34	; 0x22
    139c:	00 83       	st	Z, r16
    139e:	11 83       	std	Z+1, r17	; 0x01
    13a0:	22 83       	std	Z+2, r18	; 0x02
    13a2:	33 83       	std	Z+3, r19	; 0x03
                actuatorPositions_g[currentLeg.femurJoint][i+positionStart] =  theta2 + 75;
    13a4:	fb e4       	ldi	r31, 0x4B	; 75
    13a6:	cf 0e       	add	r12, r31
    13a8:	d1 1c       	adc	r13, r1
    13aa:	e1 1c       	adc	r14, r1
    13ac:	f1 1c       	adc	r15, r1
    13ae:	ad a1       	ldd	r26, Y+37	; 0x25
    13b0:	be a1       	ldd	r27, Y+38	; 0x26
    13b2:	cd 92       	st	X+, r12
    13b4:	dd 92       	st	X+, r13
    13b6:	ed 92       	st	X+, r14
    13b8:	fc 92       	st	X, r15
    13ba:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.tibiaJoint][i+positionStart] =  theta3 + 1;
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	01 96       	adiw	r24, 0x01	; 1
    13c2:	a1 1d       	adc	r26, r1
    13c4:	b1 1d       	adc	r27, r1
    13c6:	eb a1       	ldd	r30, Y+35	; 0x23
    13c8:	fc a1       	ldd	r31, Y+36	; 0x24
    13ca:	80 83       	st	Z, r24
    13cc:	91 83       	std	Z+1, r25	; 0x01
    13ce:	a2 83       	std	Z+2, r26	; 0x02
    13d0:	b3 83       	std	Z+3, r27	; 0x03
                legPositions_g[FRONT_LEFT_LEG_X][i+positionStart] = x;
    13d2:	69 85       	ldd	r22, Y+9	; 0x09
    13d4:	7a 85       	ldd	r23, Y+10	; 0x0a
    13d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    13d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    13da:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    13de:	d1 01       	movw	r26, r2
    13e0:	6d 93       	st	X+, r22
    13e2:	7d 93       	st	X+, r23
    13e4:	8d 93       	st	X+, r24
    13e6:	9c 93       	st	X, r25
    13e8:	13 97       	sbiw	r26, 0x03	; 3
    13ea:	81 01       	movw	r16, r2
    13ec:	00 5b       	subi	r16, 0xB0	; 176
    13ee:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[FRONT_LEFT_LEG_Y][i+positionStart] = y;
    13f0:	6d 85       	ldd	r22, Y+13	; 0x0d
    13f2:	7e 85       	ldd	r23, Y+14	; 0x0e
    13f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    13f6:	98 89       	ldd	r25, Y+16	; 0x10
    13f8:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    13fc:	f8 01       	movw	r30, r16
    13fe:	60 83       	st	Z, r22
    1400:	71 83       	std	Z+1, r23	; 0x01
    1402:	82 83       	std	Z+2, r24	; 0x02
    1404:	93 83       	std	Z+3, r25	; 0x03
    1406:	00 5b       	subi	r16, 0xB0	; 176
    1408:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[FRONT_LEFT_LEG_Z][i+positionStart] = z;
    140a:	65 96       	adiw	r28, 0x15	; 21
    140c:	6c ad       	ldd	r22, Y+60	; 0x3c
    140e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1410:	8e ad       	ldd	r24, Y+62	; 0x3e
    1412:	9f ad       	ldd	r25, Y+63	; 0x3f
    1414:	65 97       	sbiw	r28, 0x15	; 21
    1416:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    141a:	d8 01       	movw	r26, r16
    141c:	6d 93       	st	X+, r22
    141e:	7d 93       	st	X+, r23
    1420:	8d 93       	st	X+, r24
    1422:	9c 93       	st	X, r25
    1424:	13 97       	sbiw	r26, 0x03	; 3
                break;
    1426:	01 c1       	rjmp	.+514    	; 0x162a <CalcStraightPath+0x6ec>
            }
            case FRONT_RIGHT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i+positionStart] = theta1 + 193;
    1428:	0f a1       	ldd	r16, Y+39	; 0x27
    142a:	18 a5       	ldd	r17, Y+40	; 0x28
    142c:	29 a5       	ldd	r18, Y+41	; 0x29
    142e:	3a a5       	ldd	r19, Y+42	; 0x2a
    1430:	0f 53       	subi	r16, 0x3F	; 63
    1432:	1f 4f       	sbci	r17, 0xFF	; 255
    1434:	2f 4f       	sbci	r18, 0xFF	; 255
    1436:	3f 4f       	sbci	r19, 0xFF	; 255
    1438:	e9 a1       	ldd	r30, Y+33	; 0x21
    143a:	fa a1       	ldd	r31, Y+34	; 0x22
    143c:	00 83       	st	Z, r16
    143e:	11 83       	std	Z+1, r17	; 0x01
    1440:	22 83       	std	Z+2, r18	; 0x02
    1442:	33 83       	std	Z+3, r19	; 0x03
                actuatorPositions_g[currentLeg.femurJoint][i+positionStart] =  theta2 + 75;
    1444:	fb e4       	ldi	r31, 0x4B	; 75
    1446:	cf 0e       	add	r12, r31
    1448:	d1 1c       	adc	r13, r1
    144a:	e1 1c       	adc	r14, r1
    144c:	f1 1c       	adc	r15, r1
    144e:	ad a1       	ldd	r26, Y+37	; 0x25
    1450:	be a1       	ldd	r27, Y+38	; 0x26
    1452:	cd 92       	st	X+, r12
    1454:	dd 92       	st	X+, r13
    1456:	ed 92       	st	X+, r14
    1458:	fc 92       	st	X, r15
    145a:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.tibiaJoint][i+positionStart] =  theta3 + 3;
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	03 96       	adiw	r24, 0x03	; 3
    1462:	a1 1d       	adc	r26, r1
    1464:	b1 1d       	adc	r27, r1
    1466:	eb a1       	ldd	r30, Y+35	; 0x23
    1468:	fc a1       	ldd	r31, Y+36	; 0x24
    146a:	80 83       	st	Z, r24
    146c:	91 83       	std	Z+1, r25	; 0x01
    146e:	a2 83       	std	Z+2, r26	; 0x02
    1470:	b3 83       	std	Z+3, r27	; 0x03
    1472:	81 01       	movw	r16, r2
    1474:	00 51       	subi	r16, 0x10	; 16
    1476:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[FRONT_RIGHT_LEG_X][i+positionStart] = x;
    1478:	69 85       	ldd	r22, Y+9	; 0x09
    147a:	7a 85       	ldd	r23, Y+10	; 0x0a
    147c:	8b 85       	ldd	r24, Y+11	; 0x0b
    147e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1480:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    1484:	d8 01       	movw	r26, r16
    1486:	6d 93       	st	X+, r22
    1488:	7d 93       	st	X+, r23
    148a:	8d 93       	st	X+, r24
    148c:	9c 93       	st	X, r25
    148e:	13 97       	sbiw	r26, 0x03	; 3
    1490:	00 5b       	subi	r16, 0xB0	; 176
    1492:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[FRONT_RIGHT_LEG_Y][i+positionStart] = y;
    1494:	6d 85       	ldd	r22, Y+13	; 0x0d
    1496:	7e 85       	ldd	r23, Y+14	; 0x0e
    1498:	8f 85       	ldd	r24, Y+15	; 0x0f
    149a:	98 89       	ldd	r25, Y+16	; 0x10
    149c:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    14a0:	f8 01       	movw	r30, r16
    14a2:	60 83       	st	Z, r22
    14a4:	71 83       	std	Z+1, r23	; 0x01
    14a6:	82 83       	std	Z+2, r24	; 0x02
    14a8:	93 83       	std	Z+3, r25	; 0x03
    14aa:	00 5b       	subi	r16, 0xB0	; 176
    14ac:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[FRONT_RIGHT_LEG_Z][i+positionStart] = z;
    14ae:	65 96       	adiw	r28, 0x15	; 21
    14b0:	6c ad       	ldd	r22, Y+60	; 0x3c
    14b2:	7d ad       	ldd	r23, Y+61	; 0x3d
    14b4:	8e ad       	ldd	r24, Y+62	; 0x3e
    14b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    14b8:	65 97       	sbiw	r28, 0x15	; 21
    14ba:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    14be:	d8 01       	movw	r26, r16
    14c0:	6d 93       	st	X+, r22
    14c2:	7d 93       	st	X+, r23
    14c4:	8d 93       	st	X+, r24
    14c6:	9c 93       	st	X, r25
    14c8:	13 97       	sbiw	r26, 0x03	; 3
                break;
    14ca:	af c0       	rjmp	.+350    	; 0x162a <CalcStraightPath+0x6ec>
            }
            case REAR_LEFT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i+positionStart] = theta1 + 195;
    14cc:	0f a1       	ldd	r16, Y+39	; 0x27
    14ce:	18 a5       	ldd	r17, Y+40	; 0x28
    14d0:	29 a5       	ldd	r18, Y+41	; 0x29
    14d2:	3a a5       	ldd	r19, Y+42	; 0x2a
    14d4:	0d 53       	subi	r16, 0x3D	; 61
    14d6:	1f 4f       	sbci	r17, 0xFF	; 255
    14d8:	2f 4f       	sbci	r18, 0xFF	; 255
    14da:	3f 4f       	sbci	r19, 0xFF	; 255
    14dc:	e9 a1       	ldd	r30, Y+33	; 0x21
    14de:	fa a1       	ldd	r31, Y+34	; 0x22
    14e0:	00 83       	st	Z, r16
    14e2:	11 83       	std	Z+1, r17	; 0x01
    14e4:	22 83       	std	Z+2, r18	; 0x02
    14e6:	33 83       	std	Z+3, r19	; 0x03
                actuatorPositions_g[currentLeg.femurJoint][i+positionStart] =  225 - theta2;
    14e8:	01 ee       	ldi	r16, 0xE1	; 225
    14ea:	10 e0       	ldi	r17, 0x00	; 0
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	0c 19       	sub	r16, r12
    14f2:	1d 09       	sbc	r17, r13
    14f4:	2e 09       	sbc	r18, r14
    14f6:	3f 09       	sbc	r19, r15
    14f8:	ad a1       	ldd	r26, Y+37	; 0x25
    14fa:	be a1       	ldd	r27, Y+38	; 0x26
    14fc:	0d 93       	st	X+, r16
    14fe:	1d 93       	st	X+, r17
    1500:	2d 93       	st	X+, r18
    1502:	3c 93       	st	X, r19
    1504:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.tibiaJoint][i+positionStart] =  300 - theta3;
    1506:	2c e2       	ldi	r18, 0x2C	; 44
    1508:	31 e0       	ldi	r19, 0x01	; 1
    150a:	40 e0       	ldi	r20, 0x00	; 0
    150c:	50 e0       	ldi	r21, 0x00	; 0
    150e:	26 1b       	sub	r18, r22
    1510:	37 0b       	sbc	r19, r23
    1512:	48 0b       	sbc	r20, r24
    1514:	59 0b       	sbc	r21, r25
    1516:	eb a1       	ldd	r30, Y+35	; 0x23
    1518:	fc a1       	ldd	r31, Y+36	; 0x24
    151a:	20 83       	st	Z, r18
    151c:	31 83       	std	Z+1, r19	; 0x01
    151e:	42 83       	std	Z+2, r20	; 0x02
    1520:	53 83       	std	Z+3, r21	; 0x03
    1522:	81 01       	movw	r16, r2
    1524:	00 52       	subi	r16, 0x20	; 32
    1526:	1e 4f       	sbci	r17, 0xFE	; 254
                legPositions_g[REAR_LEFT_LEG_X][i+positionStart] = x;
    1528:	69 85       	ldd	r22, Y+9	; 0x09
    152a:	7a 85       	ldd	r23, Y+10	; 0x0a
    152c:	8b 85       	ldd	r24, Y+11	; 0x0b
    152e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1530:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    1534:	d8 01       	movw	r26, r16
    1536:	6d 93       	st	X+, r22
    1538:	7d 93       	st	X+, r23
    153a:	8d 93       	st	X+, r24
    153c:	9c 93       	st	X, r25
    153e:	13 97       	sbiw	r26, 0x03	; 3
    1540:	00 5b       	subi	r16, 0xB0	; 176
    1542:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[REAR_LEFT_LEG_Y][i+positionStart] = y;
    1544:	6d 85       	ldd	r22, Y+13	; 0x0d
    1546:	7e 85       	ldd	r23, Y+14	; 0x0e
    1548:	8f 85       	ldd	r24, Y+15	; 0x0f
    154a:	98 89       	ldd	r25, Y+16	; 0x10
    154c:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    1550:	f8 01       	movw	r30, r16
    1552:	60 83       	st	Z, r22
    1554:	71 83       	std	Z+1, r23	; 0x01
    1556:	82 83       	std	Z+2, r24	; 0x02
    1558:	93 83       	std	Z+3, r25	; 0x03
    155a:	00 5b       	subi	r16, 0xB0	; 176
    155c:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[REAR_LEFT_LEG_Z][i+positionStart] = z;
    155e:	65 96       	adiw	r28, 0x15	; 21
    1560:	6c ad       	ldd	r22, Y+60	; 0x3c
    1562:	7d ad       	ldd	r23, Y+61	; 0x3d
    1564:	8e ad       	ldd	r24, Y+62	; 0x3e
    1566:	9f ad       	ldd	r25, Y+63	; 0x3f
    1568:	65 97       	sbiw	r28, 0x15	; 21
    156a:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    156e:	d8 01       	movw	r26, r16
    1570:	6d 93       	st	X+, r22
    1572:	7d 93       	st	X+, r23
    1574:	8d 93       	st	X+, r24
    1576:	9c 93       	st	X, r25
    1578:	13 97       	sbiw	r26, 0x03	; 3
                break;
    157a:	57 c0       	rjmp	.+174    	; 0x162a <CalcStraightPath+0x6ec>
            }
            case REAR_RIGHT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i+positionStart] = theta1 + 105;
    157c:	0f a1       	ldd	r16, Y+39	; 0x27
    157e:	18 a5       	ldd	r17, Y+40	; 0x28
    1580:	29 a5       	ldd	r18, Y+41	; 0x29
    1582:	3a a5       	ldd	r19, Y+42	; 0x2a
    1584:	07 59       	subi	r16, 0x97	; 151
    1586:	1f 4f       	sbci	r17, 0xFF	; 255
    1588:	2f 4f       	sbci	r18, 0xFF	; 255
    158a:	3f 4f       	sbci	r19, 0xFF	; 255
    158c:	e9 a1       	ldd	r30, Y+33	; 0x21
    158e:	fa a1       	ldd	r31, Y+34	; 0x22
    1590:	00 83       	st	Z, r16
    1592:	11 83       	std	Z+1, r17	; 0x01
    1594:	22 83       	std	Z+2, r18	; 0x02
    1596:	33 83       	std	Z+3, r19	; 0x03
                actuatorPositions_g[currentLeg.femurJoint][i+positionStart] =  225 - theta2;
    1598:	01 ee       	ldi	r16, 0xE1	; 225
    159a:	10 e0       	ldi	r17, 0x00	; 0
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	0c 19       	sub	r16, r12
    15a2:	1d 09       	sbc	r17, r13
    15a4:	2e 09       	sbc	r18, r14
    15a6:	3f 09       	sbc	r19, r15
    15a8:	ad a1       	ldd	r26, Y+37	; 0x25
    15aa:	be a1       	ldd	r27, Y+38	; 0x26
    15ac:	0d 93       	st	X+, r16
    15ae:	1d 93       	st	X+, r17
    15b0:	2d 93       	st	X+, r18
    15b2:	3c 93       	st	X, r19
    15b4:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.tibiaJoint][i+positionStart] =  300 - theta3;
    15b6:	2c e2       	ldi	r18, 0x2C	; 44
    15b8:	31 e0       	ldi	r19, 0x01	; 1
    15ba:	40 e0       	ldi	r20, 0x00	; 0
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	26 1b       	sub	r18, r22
    15c0:	37 0b       	sbc	r19, r23
    15c2:	48 0b       	sbc	r20, r24
    15c4:	59 0b       	sbc	r21, r25
    15c6:	eb a1       	ldd	r30, Y+35	; 0x23
    15c8:	fc a1       	ldd	r31, Y+36	; 0x24
    15ca:	20 83       	st	Z, r18
    15cc:	31 83       	std	Z+1, r19	; 0x01
    15ce:	42 83       	std	Z+2, r20	; 0x02
    15d0:	53 83       	std	Z+3, r21	; 0x03
    15d2:	81 01       	movw	r16, r2
    15d4:	00 53       	subi	r16, 0x30	; 48
    15d6:	1d 4f       	sbci	r17, 0xFD	; 253
                legPositions_g[REAR_RIGHT_LEG_X][i+positionStart] = x;
    15d8:	69 85       	ldd	r22, Y+9	; 0x09
    15da:	7a 85       	ldd	r23, Y+10	; 0x0a
    15dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    15de:	9c 85       	ldd	r25, Y+12	; 0x0c
    15e0:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    15e4:	d8 01       	movw	r26, r16
    15e6:	6d 93       	st	X+, r22
    15e8:	7d 93       	st	X+, r23
    15ea:	8d 93       	st	X+, r24
    15ec:	9c 93       	st	X, r25
    15ee:	13 97       	sbiw	r26, 0x03	; 3
    15f0:	00 5b       	subi	r16, 0xB0	; 176
    15f2:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[REAR_RIGHT_LEG_Y][i+positionStart] = y;
    15f4:	6d 85       	ldd	r22, Y+13	; 0x0d
    15f6:	7e 85       	ldd	r23, Y+14	; 0x0e
    15f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    15fa:	98 89       	ldd	r25, Y+16	; 0x10
    15fc:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    1600:	f8 01       	movw	r30, r16
    1602:	60 83       	st	Z, r22
    1604:	71 83       	std	Z+1, r23	; 0x01
    1606:	82 83       	std	Z+2, r24	; 0x02
    1608:	93 83       	std	Z+3, r25	; 0x03
    160a:	00 5b       	subi	r16, 0xB0	; 176
    160c:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[REAR_RIGHT_LEG_Z][i+positionStart] = z;
    160e:	65 96       	adiw	r28, 0x15	; 21
    1610:	6c ad       	ldd	r22, Y+60	; 0x3c
    1612:	7d ad       	ldd	r23, Y+61	; 0x3d
    1614:	8e ad       	ldd	r24, Y+62	; 0x3e
    1616:	9f ad       	ldd	r25, Y+63	; 0x3f
    1618:	65 97       	sbiw	r28, 0x15	; 21
    161a:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    161e:	d8 01       	movw	r26, r16
    1620:	6d 93       	st	X+, r22
    1622:	7d 93       	st	X+, r23
    1624:	8d 93       	st	X+, r24
    1626:	9c 93       	st	X, r25
    1628:	13 97       	sbiw	r26, 0x03	; 3
    float z = z1;
    
  
    
    
    for (int i = 0; i < numberOfPositions; i++)
    162a:	ef 89       	ldd	r30, Y+23	; 0x17
    162c:	f8 8d       	ldd	r31, Y+24	; 0x18
    162e:	31 96       	adiw	r30, 0x01	; 1
    1630:	f8 8f       	std	Y+24, r31	; 0x18
    1632:	ef 8b       	std	Y+23, r30	; 0x17
    1634:	29 a1       	ldd	r18, Y+33	; 0x21
    1636:	3a a1       	ldd	r19, Y+34	; 0x22
    1638:	2c 5f       	subi	r18, 0xFC	; 252
    163a:	3f 4f       	sbci	r19, 0xFF	; 255
    163c:	3a a3       	std	Y+34, r19	; 0x22
    163e:	29 a3       	std	Y+33, r18	; 0x21
    1640:	4d a1       	ldd	r20, Y+37	; 0x25
    1642:	5e a1       	ldd	r21, Y+38	; 0x26
    1644:	4c 5f       	subi	r20, 0xFC	; 252
    1646:	5f 4f       	sbci	r21, 0xFF	; 255
    1648:	5e a3       	std	Y+38, r21	; 0x26
    164a:	4d a3       	std	Y+37, r20	; 0x25
    164c:	8b a1       	ldd	r24, Y+35	; 0x23
    164e:	9c a1       	ldd	r25, Y+36	; 0x24
    1650:	04 96       	adiw	r24, 0x04	; 4
    1652:	9c a3       	std	Y+36, r25	; 0x24
    1654:	8b a3       	std	Y+35, r24	; 0x23
    1656:	94 e0       	ldi	r25, 0x04	; 4
    1658:	29 0e       	add	r2, r25
    165a:	31 1c       	adc	r3, r1
    165c:	ab a5       	ldd	r26, Y+43	; 0x2b
    165e:	bc a5       	ldd	r27, Y+44	; 0x2c
    1660:	ea 17       	cp	r30, r26
    1662:	fb 07       	cpc	r31, r27
    1664:	09 f0       	breq	.+2      	; 0x1668 <CalcStraightPath+0x72a>
    1666:	62 cd       	rjmp	.-1340   	; 0x112c <CalcStraightPath+0x1ee>
        
        
        
        
    }
}
    1668:	e8 96       	adiw	r28, 0x38	; 56
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	f8 94       	cli
    166e:	de bf       	out	0x3e, r29	; 62
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	cd bf       	out	0x3d, r28	; 61
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	ff 90       	pop	r15
    167e:	ef 90       	pop	r14
    1680:	df 90       	pop	r13
    1682:	cf 90       	pop	r12
    1684:	bf 90       	pop	r11
    1686:	af 90       	pop	r10
    1688:	9f 90       	pop	r9
    168a:	8f 90       	pop	r8
    168c:	7f 90       	pop	r7
    168e:	6f 90       	pop	r6
    1690:	5f 90       	pop	r5
    1692:	4f 90       	pop	r4
    1694:	3f 90       	pop	r3
    1696:	2f 90       	pop	r2
    1698:	08 95       	ret

0000169a <CalcCurvedPath>:

void CalcCurvedPath(leg currentLeg, int numberOfPositions, int positionStart, float x1, float y1, float z1, float x2, float y2, float z2)
{
    169a:	2f 92       	push	r2
    169c:	3f 92       	push	r3
    169e:	4f 92       	push	r4
    16a0:	5f 92       	push	r5
    16a2:	6f 92       	push	r6
    16a4:	7f 92       	push	r7
    16a6:	8f 92       	push	r8
    16a8:	9f 92       	push	r9
    16aa:	af 92       	push	r10
    16ac:	bf 92       	push	r11
    16ae:	cf 92       	push	r12
    16b0:	df 92       	push	r13
    16b2:	ef 92       	push	r14
    16b4:	ff 92       	push	r15
    16b6:	0f 93       	push	r16
    16b8:	1f 93       	push	r17
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	cc 54       	subi	r28, 0x4C	; 76
    16c4:	d1 09       	sbc	r29, r1
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	29 83       	std	Y+1, r18	; 0x01
    16d2:	3a 83       	std	Y+2, r19	; 0x02
    16d4:	4b 83       	std	Y+3, r20	; 0x03
    16d6:	5c 83       	std	Y+4, r21	; 0x04
    16d8:	6d 83       	std	Y+5, r22	; 0x05
    16da:	7e 83       	std	Y+6, r23	; 0x06
    16dc:	8f 83       	std	Y+7, r24	; 0x07
    16de:	98 87       	std	Y+8, r25	; 0x08
    16e0:	1c af       	std	Y+60, r17	; 0x3c
    16e2:	0b af       	std	Y+59, r16	; 0x3b
    16e4:	27 96       	adiw	r28, 0x07	; 7
    16e6:	ff ae       	std	Y+63, r15	; 0x3f
    16e8:	ee ae       	std	Y+62, r14	; 0x3e
    16ea:	27 97       	sbiw	r28, 0x07	; 7
    16ec:	a9 96       	adiw	r28, 0x29	; 41
    16ee:	4c ac       	ldd	r4, Y+60	; 0x3c
    16f0:	5d ac       	ldd	r5, Y+61	; 0x3d
    16f2:	6e ac       	ldd	r6, Y+62	; 0x3e
    16f4:	7f ac       	ldd	r7, Y+63	; 0x3f
    16f6:	a9 97       	sbiw	r28, 0x29	; 41
    16f8:	29 80       	ldd	r2, Y+1	; 0x01
    16fa:	3a 80       	ldd	r3, Y+2	; 0x02
    16fc:	2b 81       	ldd	r18, Y+3	; 0x03
    16fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1700:	29 96       	adiw	r28, 0x09	; 9
    1702:	3f af       	std	Y+63, r19	; 0x3f
    1704:	2e af       	std	Y+62, r18	; 0x3e
    1706:	29 97       	sbiw	r28, 0x09	; 9
    1708:	4d 81       	ldd	r20, Y+5	; 0x05
    170a:	5e 81       	ldd	r21, Y+6	; 0x06
    170c:	2b 96       	adiw	r28, 0x0b	; 11
    170e:	5f af       	std	Y+63, r21	; 0x3f
    1710:	4e af       	std	Y+62, r20	; 0x3e
    1712:	2b 97       	sbiw	r28, 0x0b	; 11
    1714:	8f 81       	ldd	r24, Y+7	; 0x07
    1716:	98 85       	ldd	r25, Y+8	; 0x08
    1718:	2d 96       	adiw	r28, 0x0d	; 13
    171a:	9f af       	std	Y+63, r25	; 0x3f
    171c:	8e af       	std	Y+62, r24	; 0x3e
    171e:	2d 97       	sbiw	r28, 0x0d	; 13
    long int theta1;
    long int theta2;
    long int theta3;
    if ((currentLeg.legNumber == FRONT_LEFT_LEG) | (currentLeg.legNumber == FRONT_RIGHT_LEG))
    1720:	c1 01       	movw	r24, r2
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	02 97       	sbiw	r24, 0x02	; 2
    1726:	88 f4       	brcc	.+34     	; 0x174a <CalcCurvedPath+0xb0>
    {
        x1 *= -1;
    1728:	d7 fa       	bst	r13, 7
    172a:	d0 94       	com	r13
    172c:	d7 f8       	bld	r13, 7
    172e:	d0 94       	com	r13
        x2 *= -1;
    1730:	ad 96       	adiw	r28, 0x2d	; 45
    1732:	2c ad       	ldd	r18, Y+60	; 0x3c
    1734:	3d ad       	ldd	r19, Y+61	; 0x3d
    1736:	4e ad       	ldd	r20, Y+62	; 0x3e
    1738:	5f ad       	ldd	r21, Y+63	; 0x3f
    173a:	ad 97       	sbiw	r28, 0x2d	; 45
    173c:	50 58       	subi	r21, 0x80	; 128
    173e:	ad 96       	adiw	r28, 0x2d	; 45
    1740:	2c af       	std	Y+60, r18	; 0x3c
    1742:	3d af       	std	Y+61, r19	; 0x3d
    1744:	4e af       	std	Y+62, r20	; 0x3e
    1746:	5f af       	std	Y+63, r21	; 0x3f
    1748:	ad 97       	sbiw	r28, 0x2d	; 45
    }
    if ((currentLeg.legNumber == REAR_RIGHT_LEG) | (currentLeg.legNumber == REAR_LEFT_LEG))
    174a:	c1 01       	movw	r24, r2
    174c:	03 97       	sbiw	r24, 0x03	; 3
    174e:	02 97       	sbiw	r24, 0x02	; 2
    1750:	d0 f4       	brcc	.+52     	; 0x1786 <CalcCurvedPath+0xec>
    {
        y1 *= -1;
    1752:	a5 96       	adiw	r28, 0x25	; 37
    1754:	8c ad       	ldd	r24, Y+60	; 0x3c
    1756:	9d ad       	ldd	r25, Y+61	; 0x3d
    1758:	ae ad       	ldd	r26, Y+62	; 0x3e
    175a:	bf ad       	ldd	r27, Y+63	; 0x3f
    175c:	a5 97       	sbiw	r28, 0x25	; 37
    175e:	b0 58       	subi	r27, 0x80	; 128
    1760:	a5 96       	adiw	r28, 0x25	; 37
    1762:	8c af       	std	Y+60, r24	; 0x3c
    1764:	9d af       	std	Y+61, r25	; 0x3d
    1766:	ae af       	std	Y+62, r26	; 0x3e
    1768:	bf af       	std	Y+63, r27	; 0x3f
    176a:	a5 97       	sbiw	r28, 0x25	; 37
        y2 *= -1;
    176c:	e1 96       	adiw	r28, 0x31	; 49
    176e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1770:	3d ad       	ldd	r19, Y+61	; 0x3d
    1772:	4e ad       	ldd	r20, Y+62	; 0x3e
    1774:	5f ad       	ldd	r21, Y+63	; 0x3f
    1776:	e1 97       	sbiw	r28, 0x31	; 49
    1778:	50 58       	subi	r21, 0x80	; 128
    177a:	e1 96       	adiw	r28, 0x31	; 49
    177c:	2c af       	std	Y+60, r18	; 0x3c
    177e:	3d af       	std	Y+61, r19	; 0x3d
    1780:	4e af       	std	Y+62, r20	; 0x3e
    1782:	5f af       	std	Y+63, r21	; 0x3f
    1784:	e1 97       	sbiw	r28, 0x31	; 49
    }
    float deltaX = (x2 - x1) / numberOfPositions;
    1786:	4b ad       	ldd	r20, Y+59	; 0x3b
    1788:	5c ad       	ldd	r21, Y+60	; 0x3c
    178a:	ba 01       	movw	r22, r20
    178c:	88 27       	eor	r24, r24
    178e:	77 fd       	sbrc	r23, 7
    1790:	80 95       	com	r24
    1792:	98 2f       	mov	r25, r24
    1794:	0e 94 15 1b 	call	0x362a	; 0x362a <__floatsisf>
    1798:	69 87       	std	Y+9, r22	; 0x09
    179a:	7a 87       	std	Y+10, r23	; 0x0a
    179c:	8b 87       	std	Y+11, r24	; 0x0b
    179e:	9c 87       	std	Y+12, r25	; 0x0c
    17a0:	a6 01       	movw	r20, r12
    17a2:	95 01       	movw	r18, r10
    17a4:	ad 96       	adiw	r28, 0x2d	; 45
    17a6:	6c ad       	ldd	r22, Y+60	; 0x3c
    17a8:	7d ad       	ldd	r23, Y+61	; 0x3d
    17aa:	8e ad       	ldd	r24, Y+62	; 0x3e
    17ac:	9f ad       	ldd	r25, Y+63	; 0x3f
    17ae:	ad 97       	sbiw	r28, 0x2d	; 45
    17b0:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
    17b4:	29 85       	ldd	r18, Y+9	; 0x09
    17b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    17b8:	4b 85       	ldd	r20, Y+11	; 0x0b
    17ba:	5c 85       	ldd	r21, Y+12	; 0x0c
    17bc:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
    17c0:	6f a7       	std	Y+47, r22	; 0x2f
    17c2:	78 ab       	std	Y+48, r23	; 0x30
    17c4:	89 ab       	std	Y+49, r24	; 0x31
    17c6:	9a ab       	std	Y+50, r25	; 0x32
    float deltaY = (y2 - y1) / numberOfPositions;
    17c8:	a5 96       	adiw	r28, 0x25	; 37
    17ca:	2c ad       	ldd	r18, Y+60	; 0x3c
    17cc:	3d ad       	ldd	r19, Y+61	; 0x3d
    17ce:	4e ad       	ldd	r20, Y+62	; 0x3e
    17d0:	5f ad       	ldd	r21, Y+63	; 0x3f
    17d2:	a5 97       	sbiw	r28, 0x25	; 37
    17d4:	e1 96       	adiw	r28, 0x31	; 49
    17d6:	6c ad       	ldd	r22, Y+60	; 0x3c
    17d8:	7d ad       	ldd	r23, Y+61	; 0x3d
    17da:	8e ad       	ldd	r24, Y+62	; 0x3e
    17dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    17de:	e1 97       	sbiw	r28, 0x31	; 49
    17e0:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
    17e4:	29 85       	ldd	r18, Y+9	; 0x09
    17e6:	3a 85       	ldd	r19, Y+10	; 0x0a
    17e8:	4b 85       	ldd	r20, Y+11	; 0x0b
    17ea:	5c 85       	ldd	r21, Y+12	; 0x0c
    17ec:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
    17f0:	6b ab       	std	Y+51, r22	; 0x33
    17f2:	7c ab       	std	Y+52, r23	; 0x34
    17f4:	8d ab       	std	Y+53, r24	; 0x35
    17f6:	9e ab       	std	Y+54, r25	; 0x36
    float deltaZBegin = (60 + z2 - z1) / (numberOfPositions / 2); // första halvan av sträckan ska benet röra sig mot en position 4cm över slutpositionen
    17f8:	8b ad       	ldd	r24, Y+59	; 0x3b
    17fa:	9c ad       	ldd	r25, Y+60	; 0x3c
    17fc:	99 23       	and	r25, r25
    17fe:	0c f4       	brge	.+2      	; 0x1802 <CalcCurvedPath+0x168>
    1800:	01 96       	adiw	r24, 0x01	; 1
    1802:	dc 01       	movw	r26, r24
    1804:	b5 95       	asr	r27
    1806:	a7 95       	ror	r26
    1808:	ba a7       	std	Y+42, r27	; 0x2a
    180a:	a9 a7       	std	Y+41, r26	; 0x29
    180c:	bd 01       	movw	r22, r26
    180e:	88 27       	eor	r24, r24
    1810:	77 fd       	sbrc	r23, 7
    1812:	80 95       	com	r24
    1814:	98 2f       	mov	r25, r24
    1816:	0e 94 15 1b 	call	0x362a	; 0x362a <__floatsisf>
    181a:	69 87       	std	Y+9, r22	; 0x09
    181c:	7a 87       	std	Y+10, r23	; 0x0a
    181e:	8b 87       	std	Y+11, r24	; 0x0b
    1820:	9c 87       	std	Y+12, r25	; 0x0c
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	40 e7       	ldi	r20, 0x70	; 112
    1828:	52 e4       	ldi	r21, 0x42	; 66
    182a:	e5 96       	adiw	r28, 0x35	; 53
    182c:	6c ad       	ldd	r22, Y+60	; 0x3c
    182e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1830:	8e ad       	ldd	r24, Y+62	; 0x3e
    1832:	9f ad       	ldd	r25, Y+63	; 0x3f
    1834:	e5 97       	sbiw	r28, 0x35	; 53
    1836:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
    183a:	a3 01       	movw	r20, r6
    183c:	92 01       	movw	r18, r4
    183e:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
    1842:	29 85       	ldd	r18, Y+9	; 0x09
    1844:	3a 85       	ldd	r19, Y+10	; 0x0a
    1846:	4b 85       	ldd	r20, Y+11	; 0x0b
    1848:	5c 85       	ldd	r21, Y+12	; 0x0c
    184a:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
    184e:	21 96       	adiw	r28, 0x01	; 1
    1850:	6c af       	std	Y+60, r22	; 0x3c
    1852:	7d af       	std	Y+61, r23	; 0x3d
    1854:	8e af       	std	Y+62, r24	; 0x3e
    1856:	9f af       	std	Y+63, r25	; 0x3f
    1858:	21 97       	sbiw	r28, 0x01	; 1
    float deltaZEnd = (z2 - z1 - 60) / (numberOfPositions / 2); // andra halvan av sträckan ska benet röra sig mot en position 4cm under slutpositionen -> benet får en triangelbana
    185a:	a3 01       	movw	r20, r6
    185c:	92 01       	movw	r18, r4
    185e:	e5 96       	adiw	r28, 0x35	; 53
    1860:	6c ad       	ldd	r22, Y+60	; 0x3c
    1862:	7d ad       	ldd	r23, Y+61	; 0x3d
    1864:	8e ad       	ldd	r24, Y+62	; 0x3e
    1866:	9f ad       	ldd	r25, Y+63	; 0x3f
    1868:	e5 97       	sbiw	r28, 0x35	; 53
    186a:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	40 e7       	ldi	r20, 0x70	; 112
    1874:	52 e4       	ldi	r21, 0x42	; 66
    1876:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
    187a:	29 85       	ldd	r18, Y+9	; 0x09
    187c:	3a 85       	ldd	r19, Y+10	; 0x0a
    187e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1880:	5c 85       	ldd	r21, Y+12	; 0x0c
    1882:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
    1886:	25 96       	adiw	r28, 0x05	; 5
    1888:	6c af       	std	Y+60, r22	; 0x3c
    188a:	7d af       	std	Y+61, r23	; 0x3d
    188c:	8e af       	std	Y+62, r24	; 0x3e
    188e:	9f af       	std	Y+63, r25	; 0x3f
    1890:	25 97       	sbiw	r28, 0x05	; 5
    float y = y1;
    float z = z1;
    
    
    // första halvan av rörelsen
    for (int i = 0; i < numberOfPositions / 2; i++)
    1892:	e9 a5       	ldd	r30, Y+41	; 0x29
    1894:	fa a5       	ldd	r31, Y+42	; 0x2a
    1896:	1e 16       	cp	r1, r30
    1898:	1f 06       	cpc	r1, r31
    189a:	0c f0       	brlt	.+2      	; 0x189e <CalcCurvedPath+0x204>
    189c:	04 c3       	rjmp	.+1544   	; 0x1ea6 <CalcCurvedPath+0x80c>
    189e:	24 e1       	ldi	r18, 0x14	; 20
    18a0:	29 96       	adiw	r28, 0x09	; 9
    18a2:	4e ad       	ldd	r20, Y+62	; 0x3e
    18a4:	5f ad       	ldd	r21, Y+63	; 0x3f
    18a6:	29 97       	sbiw	r28, 0x09	; 9
    18a8:	24 9f       	mul	r18, r20
    18aa:	c0 01       	movw	r24, r0
    18ac:	25 9f       	mul	r18, r21
    18ae:	90 0d       	add	r25, r0
    18b0:	11 24       	eor	r1, r1
    18b2:	27 96       	adiw	r28, 0x07	; 7
    18b4:	ae ad       	ldd	r26, Y+62	; 0x3e
    18b6:	bf ad       	ldd	r27, Y+63	; 0x3f
    18b8:	27 97       	sbiw	r28, 0x07	; 7
    18ba:	8a 0f       	add	r24, r26
    18bc:	9b 1f       	adc	r25, r27
    18be:	88 0f       	add	r24, r24
    18c0:	99 1f       	adc	r25, r25
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	fc 01       	movw	r30, r24
    18c8:	e4 51       	subi	r30, 0x14	; 20
    18ca:	fb 4f       	sbci	r31, 0xFB	; 251
    18cc:	fe a3       	std	Y+38, r31	; 0x26
    18ce:	ed a3       	std	Y+37, r30	; 0x25
    18d0:	2b 96       	adiw	r28, 0x0b	; 11
    18d2:	4e ad       	ldd	r20, Y+62	; 0x3e
    18d4:	5f ad       	ldd	r21, Y+63	; 0x3f
    18d6:	2b 97       	sbiw	r28, 0x0b	; 11
    18d8:	24 9f       	mul	r18, r20
    18da:	c0 01       	movw	r24, r0
    18dc:	25 9f       	mul	r18, r21
    18de:	90 0d       	add	r25, r0
    18e0:	11 24       	eor	r1, r1
    18e2:	8a 0f       	add	r24, r26
    18e4:	9b 1f       	adc	r25, r27
    18e6:	88 0f       	add	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	dc 01       	movw	r26, r24
    18f0:	a4 51       	subi	r26, 0x14	; 20
    18f2:	bb 4f       	sbci	r27, 0xFB	; 251
    18f4:	b8 a7       	std	Y+40, r27	; 0x28
    18f6:	af a3       	std	Y+39, r26	; 0x27
    18f8:	2d 96       	adiw	r28, 0x0d	; 13
    18fa:	ee ad       	ldd	r30, Y+62	; 0x3e
    18fc:	ff ad       	ldd	r31, Y+63	; 0x3f
    18fe:	2d 97       	sbiw	r28, 0x0d	; 13
    1900:	2e 9f       	mul	r18, r30
    1902:	c0 01       	movw	r24, r0
    1904:	2f 9f       	mul	r18, r31
    1906:	90 0d       	add	r25, r0
    1908:	11 24       	eor	r1, r1
    190a:	27 96       	adiw	r28, 0x07	; 7
    190c:	2e ad       	ldd	r18, Y+62	; 0x3e
    190e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1910:	27 97       	sbiw	r28, 0x07	; 7
    1912:	82 0f       	add	r24, r18
    1914:	93 1f       	adc	r25, r19
    1916:	88 0f       	add	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	ac 01       	movw	r20, r24
    1920:	44 51       	subi	r20, 0x14	; 20
    1922:	5b 4f       	sbci	r21, 0xFB	; 251
    1924:	5c a7       	std	Y+44, r21	; 0x2c
    1926:	4b a7       	std	Y+43, r20	; 0x2b
    1928:	89 01       	movw	r16, r18
    192a:	00 0f       	add	r16, r16
    192c:	11 1f       	adc	r17, r17
    192e:	00 0f       	add	r16, r16
    1930:	11 1f       	adc	r17, r17
    1932:	04 58       	subi	r16, 0x84	; 132
    1934:	1e 4f       	sbci	r17, 0xFE	; 254
    1936:	81 2c       	mov	r8, r1
    1938:	91 2c       	mov	r9, r1
            }
            case REAR_LEFT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i+positionStart] = theta1 + 195;
                actuatorPositions_g[currentLeg.femurJoint][i+positionStart] =  225 - theta2;
                actuatorPositions_g[currentLeg.tibiaJoint][i+positionStart] =  300 - theta3;
    193a:	9e 8a       	std	Y+22, r9	; 0x16
    193c:	8d 8a       	std	Y+21, r8	; 0x15
    193e:	3a 8e       	std	Y+26, r3	; 0x1a
    1940:	29 8e       	std	Y+25, r2	; 0x19
    1942:	18 01       	movw	r2, r16
    1944:	a9 86       	std	Y+9, r10	; 0x09
    1946:	ba 86       	std	Y+10, r11	; 0x0a
    1948:	cb 86       	std	Y+11, r12	; 0x0b
    194a:	dc 86       	std	Y+12, r13	; 0x0c
    194c:	4d 86       	std	Y+13, r4	; 0x0d
    194e:	5e 86       	std	Y+14, r5	; 0x0e
    1950:	6f 86       	std	Y+15, r6	; 0x0f
    1952:	78 8a       	std	Y+16, r7	; 0x10
    
    
    // första halvan av rörelsen
    for (int i = 0; i < numberOfPositions / 2; i++)
    {
        x = x + deltaX;
    1954:	2f a5       	ldd	r18, Y+47	; 0x2f
    1956:	38 a9       	ldd	r19, Y+48	; 0x30
    1958:	49 a9       	ldd	r20, Y+49	; 0x31
    195a:	5a a9       	ldd	r21, Y+50	; 0x32
    195c:	69 85       	ldd	r22, Y+9	; 0x09
    195e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1960:	8b 85       	ldd	r24, Y+11	; 0x0b
    1962:	9c 85       	ldd	r25, Y+12	; 0x0c
    1964:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
    1968:	69 87       	std	Y+9, r22	; 0x09
    196a:	7a 87       	std	Y+10, r23	; 0x0a
    196c:	8b 87       	std	Y+11, r24	; 0x0b
    196e:	9c 87       	std	Y+12, r25	; 0x0c
        y = y + deltaY;
    1970:	2b a9       	ldd	r18, Y+51	; 0x33
    1972:	3c a9       	ldd	r19, Y+52	; 0x34
    1974:	4d a9       	ldd	r20, Y+53	; 0x35
    1976:	5e a9       	ldd	r21, Y+54	; 0x36
    1978:	a5 96       	adiw	r28, 0x25	; 37
    197a:	6c ad       	ldd	r22, Y+60	; 0x3c
    197c:	7d ad       	ldd	r23, Y+61	; 0x3d
    197e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1980:	9f ad       	ldd	r25, Y+63	; 0x3f
    1982:	a5 97       	sbiw	r28, 0x25	; 37
    1984:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
    1988:	a5 96       	adiw	r28, 0x25	; 37
    198a:	6c af       	std	Y+60, r22	; 0x3c
    198c:	7d af       	std	Y+61, r23	; 0x3d
    198e:	8e af       	std	Y+62, r24	; 0x3e
    1990:	9f af       	std	Y+63, r25	; 0x3f
    1992:	a5 97       	sbiw	r28, 0x25	; 37
        z = z + deltaZBegin;
    1994:	21 96       	adiw	r28, 0x01	; 1
    1996:	2c ad       	ldd	r18, Y+60	; 0x3c
    1998:	3d ad       	ldd	r19, Y+61	; 0x3d
    199a:	4e ad       	ldd	r20, Y+62	; 0x3e
    199c:	5f ad       	ldd	r21, Y+63	; 0x3f
    199e:	21 97       	sbiw	r28, 0x01	; 1
    19a0:	6d 85       	ldd	r22, Y+13	; 0x0d
    19a2:	7e 85       	ldd	r23, Y+14	; 0x0e
    19a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19a6:	98 89       	ldd	r25, Y+16	; 0x10
    19a8:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
    19ac:	6d 87       	std	Y+13, r22	; 0x0d
    19ae:	7e 87       	std	Y+14, r23	; 0x0e
    19b0:	8f 87       	std	Y+15, r24	; 0x0f
    19b2:	98 8b       	std	Y+16, r25	; 0x10
        
        // lös inverskinematik för lederna.
        theta1 = atan2f(x,y)*180/PI;
    19b4:	a5 96       	adiw	r28, 0x25	; 37
    19b6:	2c ad       	ldd	r18, Y+60	; 0x3c
    19b8:	3d ad       	ldd	r19, Y+61	; 0x3d
    19ba:	4e ad       	ldd	r20, Y+62	; 0x3e
    19bc:	5f ad       	ldd	r21, Y+63	; 0x3f
    19be:	a5 97       	sbiw	r28, 0x25	; 37
    19c0:	69 85       	ldd	r22, Y+9	; 0x09
    19c2:	7a 85       	ldd	r23, Y+10	; 0x0a
    19c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    19c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    19c8:	0e 94 27 1a 	call	0x344e	; 0x344e <atan2>
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	44 e3       	ldi	r20, 0x34	; 52
    19d2:	53 e4       	ldi	r21, 0x43	; 67
    19d4:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
    19d8:	28 ed       	ldi	r18, 0xD8	; 216
    19da:	3f e0       	ldi	r19, 0x0F	; 15
    19dc:	49 e4       	ldi	r20, 0x49	; 73
    19de:	50 e4       	ldi	r21, 0x40	; 64
    19e0:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
    19e4:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    19e8:	6f ab       	std	Y+55, r22	; 0x37
    19ea:	78 af       	std	Y+56, r23	; 0x38
    19ec:	89 af       	std	Y+57, r24	; 0x39
    19ee:	9a af       	std	Y+58, r25	; 0x3a
        theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
    19f0:	2d 85       	ldd	r18, Y+13	; 0x0d
    19f2:	3e 85       	ldd	r19, Y+14	; 0x0e
    19f4:	4f 85       	ldd	r20, Y+15	; 0x0f
    19f6:	58 89       	ldd	r21, Y+16	; 0x10
    19f8:	ca 01       	movw	r24, r20
    19fa:	b9 01       	movw	r22, r18
    19fc:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
    1a00:	69 8b       	std	Y+17, r22	; 0x11
    1a02:	7a 8b       	std	Y+18, r23	; 0x12
    1a04:	8b 8b       	std	Y+19, r24	; 0x13
    1a06:	9c 8b       	std	Y+20, r25	; 0x14
    1a08:	29 85       	ldd	r18, Y+9	; 0x09
    1a0a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a0c:	4b 85       	ldd	r20, Y+11	; 0x0b
    1a0e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a10:	ca 01       	movw	r24, r20
    1a12:	b9 01       	movw	r22, r18
    1a14:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
    1a18:	6b 01       	movw	r12, r22
    1a1a:	7c 01       	movw	r14, r24
    1a1c:	a5 96       	adiw	r28, 0x25	; 37
    1a1e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1a20:	3d ad       	ldd	r19, Y+61	; 0x3d
    1a22:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a24:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a26:	a5 97       	sbiw	r28, 0x25	; 37
    1a28:	ca 01       	movw	r24, r20
    1a2a:	b9 01       	movw	r22, r18
    1a2c:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
    1a30:	9b 01       	movw	r18, r22
    1a32:	ac 01       	movw	r20, r24
    1a34:	c7 01       	movw	r24, r14
    1a36:	b6 01       	movw	r22, r12
    1a38:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
    1a3c:	6d 8f       	std	Y+29, r22	; 0x1d
    1a3e:	7e 8f       	std	Y+30, r23	; 0x1e
    1a40:	8f 8f       	std	Y+31, r24	; 0x1f
    1a42:	98 a3       	std	Y+32, r25	; 0x20
    1a44:	0e 94 4f 1c 	call	0x389e	; 0x389e <sqrt>
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	48 e4       	ldi	r20, 0x48	; 72
    1a4e:	52 e4       	ldi	r21, 0x42	; 66
    1a50:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
    1a54:	6b 01       	movw	r12, r22
    1a56:	7c 01       	movw	r14, r24
    1a58:	9b 01       	movw	r18, r22
    1a5a:	ac 01       	movw	r20, r24
    1a5c:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
    1a60:	69 a3       	std	Y+33, r22	; 0x21
    1a62:	7a a3       	std	Y+34, r23	; 0x22
    1a64:	8b a3       	std	Y+35, r24	; 0x23
    1a66:	9c a3       	std	Y+36, r25	; 0x24
    1a68:	9b 01       	movw	r18, r22
    1a6a:	ac 01       	movw	r20, r24
    1a6c:	69 89       	ldd	r22, Y+17	; 0x11
    1a6e:	7a 89       	ldd	r23, Y+18	; 0x12
    1a70:	8b 89       	ldd	r24, Y+19	; 0x13
    1a72:	9c 89       	ldd	r25, Y+20	; 0x14
    1a74:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
    1a78:	4b 01       	movw	r8, r22
    1a7a:	5c 01       	movw	r10, r24
    1a7c:	0e 94 4f 1c 	call	0x389e	; 0x389e <sqrt>
    1a80:	9b 01       	movw	r18, r22
    1a82:	ac 01       	movw	r20, r24
    1a84:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a86:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a8a:	98 89       	ldd	r25, Y+16	; 0x10
    1a8c:	90 58       	subi	r25, 0x80	; 128
    1a8e:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
    1a92:	0e 94 a5 19 	call	0x334a	; 0x334a <acos>
    1a96:	2b 01       	movw	r4, r22
    1a98:	3c 01       	movw	r6, r24
        acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	48 e4       	ldi	r20, 0x48	; 72
    1aa0:	52 e4       	ldi	r21, 0x42	; 66
    1aa2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1aa4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1aa6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1aa8:	98 a1       	ldd	r25, Y+32	; 0x20
    1aaa:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
    1aae:	0e 94 4f 1c 	call	0x389e	; 0x389e <sqrt>
    1ab2:	9b 01       	movw	r18, r22
    1ab4:	ac 01       	movw	r20, r24
    1ab6:	c7 01       	movw	r24, r14
    1ab8:	b6 01       	movw	r22, r12
    1aba:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
    1abe:	9b 01       	movw	r18, r22
    1ac0:	ac 01       	movw	r20, r24
    1ac2:	69 89       	ldd	r22, Y+17	; 0x11
    1ac4:	7a 89       	ldd	r23, Y+18	; 0x12
    1ac6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ac8:	9c 89       	ldd	r25, Y+20	; 0x14
    1aca:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
    1ace:	0e 94 4f 1c 	call	0x389e	; 0x389e <sqrt>
    1ad2:	6b 01       	movw	r12, r22
    1ad4:	7c 01       	movw	r14, r24
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	38 e4       	ldi	r19, 0x48	; 72
    1ada:	4c e8       	ldi	r20, 0x8C	; 140
    1adc:	55 e4       	ldi	r21, 0x45	; 69
    1ade:	c5 01       	movw	r24, r10
    1ae0:	b4 01       	movw	r22, r8
    1ae2:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	38 e0       	ldi	r19, 0x08	; 8
    1aea:	44 e8       	ldi	r20, 0x84	; 132
    1aec:	56 e4       	ldi	r21, 0x46	; 70
    1aee:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
    1af2:	4b 01       	movw	r8, r22
    1af4:	5c 01       	movw	r10, r24
    1af6:	a7 01       	movw	r20, r14
    1af8:	96 01       	movw	r18, r12
    1afa:	c7 01       	movw	r24, r14
    1afc:	b6 01       	movw	r22, r12
    1afe:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	46 e8       	ldi	r20, 0x86	; 134
    1b08:	52 e4       	ldi	r21, 0x42	; 66
    1b0a:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
    1b0e:	9b 01       	movw	r18, r22
    1b10:	ac 01       	movw	r20, r24
    1b12:	c5 01       	movw	r24, r10
    1b14:	b4 01       	movw	r22, r8
    1b16:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
    1b1a:	0e 94 a5 19 	call	0x334a	; 0x334a <acos>
    1b1e:	9b 01       	movw	r18, r22
    1b20:	ac 01       	movw	r20, r24
        y = y + deltaY;
        z = z + deltaZBegin;
        
        // lös inverskinematik för lederna.
        theta1 = atan2f(x,y)*180/PI;
        theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
    1b22:	c3 01       	movw	r24, r6
    1b24:	b2 01       	movw	r22, r4
    1b26:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
    1b2a:	24 ee       	ldi	r18, 0xE4	; 228
    1b2c:	3e e2       	ldi	r19, 0x2E	; 46
    1b2e:	45 e6       	ldi	r20, 0x65	; 101
    1b30:	52 e4       	ldi	r21, 0x42	; 66
    1b32:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
    1b36:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    1b3a:	6b 01       	movw	r12, r22
    1b3c:	7c 01       	movw	r14, r24
        acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
        
        theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
    1b3e:	29 89       	ldd	r18, Y+17	; 0x11
    1b40:	3a 89       	ldd	r19, Y+18	; 0x12
    1b42:	4b 89       	ldd	r20, Y+19	; 0x13
    1b44:	5c 89       	ldd	r21, Y+20	; 0x14
    1b46:	60 e0       	ldi	r22, 0x00	; 0
    1b48:	7a e1       	ldi	r23, 0x1A	; 26
    1b4a:	87 ea       	ldi	r24, 0xA7	; 167
    1b4c:	96 e4       	ldi	r25, 0x46	; 70
    1b4e:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
    1b52:	29 a1       	ldd	r18, Y+33	; 0x21
    1b54:	3a a1       	ldd	r19, Y+34	; 0x22
    1b56:	4b a1       	ldd	r20, Y+35	; 0x23
    1b58:	5c a1       	ldd	r21, Y+36	; 0x24
    1b5a:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	38 e1       	ldi	r19, 0x18	; 24
    1b62:	48 e8       	ldi	r20, 0x88	; 136
    1b64:	56 e4       	ldi	r21, 0x46	; 70
    1b66:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
    1b6a:	0e 94 a5 19 	call	0x334a	; 0x334a <acos>
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	44 e3       	ldi	r20, 0x34	; 52
    1b74:	53 e4       	ldi	r21, 0x43	; 67
    1b76:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
    1b7a:	28 ed       	ldi	r18, 0xD8	; 216
    1b7c:	3f e0       	ldi	r19, 0x0F	; 15
    1b7e:	49 e4       	ldi	r20, 0x49	; 73
    1b80:	50 e4       	ldi	r21, 0x40	; 64
    1b82:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
    1b86:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
        
        // spara resultatet i global array
        switch(currentLeg.legNumber)
    1b8a:	a9 8d       	ldd	r26, Y+25	; 0x19
    1b8c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1b8e:	a2 30       	cpi	r26, 0x02	; 2
    1b90:	b1 05       	cpc	r27, r1
    1b92:	09 f4       	brne	.+2      	; 0x1b96 <CalcCurvedPath+0x4fc>
    1b94:	5e c0       	rjmp	.+188    	; 0x1c52 <CalcCurvedPath+0x5b8>
    1b96:	1c f4       	brge	.+6      	; 0x1b9e <CalcCurvedPath+0x504>
    1b98:	11 97       	sbiw	r26, 0x01	; 1
    1b9a:	59 f0       	breq	.+22     	; 0x1bb2 <CalcCurvedPath+0x518>
    1b9c:	5b c1       	rjmp	.+694    	; 0x1e54 <CalcCurvedPath+0x7ba>
    1b9e:	e9 8d       	ldd	r30, Y+25	; 0x19
    1ba0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1ba2:	e3 30       	cpi	r30, 0x03	; 3
    1ba4:	f1 05       	cpc	r31, r1
    1ba6:	09 f4       	brne	.+2      	; 0x1baa <CalcCurvedPath+0x510>
    1ba8:	a6 c0       	rjmp	.+332    	; 0x1cf6 <CalcCurvedPath+0x65c>
    1baa:	34 97       	sbiw	r30, 0x04	; 4
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <CalcCurvedPath+0x516>
    1bae:	fb c0       	rjmp	.+502    	; 0x1da6 <CalcCurvedPath+0x70c>
    1bb0:	51 c1       	rjmp	.+674    	; 0x1e54 <CalcCurvedPath+0x7ba>
        {
            case FRONT_LEFT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i+positionStart] = theta1 + 105;
    1bb2:	0f a9       	ldd	r16, Y+55	; 0x37
    1bb4:	18 ad       	ldd	r17, Y+56	; 0x38
    1bb6:	29 ad       	ldd	r18, Y+57	; 0x39
    1bb8:	3a ad       	ldd	r19, Y+58	; 0x3a
    1bba:	07 59       	subi	r16, 0x97	; 151
    1bbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbe:	2f 4f       	sbci	r18, 0xFF	; 255
    1bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc2:	ad a1       	ldd	r26, Y+37	; 0x25
    1bc4:	be a1       	ldd	r27, Y+38	; 0x26
    1bc6:	0d 93       	st	X+, r16
    1bc8:	1d 93       	st	X+, r17
    1bca:	2d 93       	st	X+, r18
    1bcc:	3c 93       	st	X, r19
    1bce:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.femurJoint][i+positionStart] =  theta2 + 75;
    1bd0:	bb e4       	ldi	r27, 0x4B	; 75
    1bd2:	cb 0e       	add	r12, r27
    1bd4:	d1 1c       	adc	r13, r1
    1bd6:	e1 1c       	adc	r14, r1
    1bd8:	f1 1c       	adc	r15, r1
    1bda:	ef a1       	ldd	r30, Y+39	; 0x27
    1bdc:	f8 a5       	ldd	r31, Y+40	; 0x28
    1bde:	c0 82       	st	Z, r12
    1be0:	d1 82       	std	Z+1, r13	; 0x01
    1be2:	e2 82       	std	Z+2, r14	; 0x02
    1be4:	f3 82       	std	Z+3, r15	; 0x03
                actuatorPositions_g[currentLeg.tibiaJoint][i+positionStart] =  theta3 + 1;
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	01 96       	adiw	r24, 0x01	; 1
    1bec:	a1 1d       	adc	r26, r1
    1bee:	b1 1d       	adc	r27, r1
    1bf0:	eb a5       	ldd	r30, Y+43	; 0x2b
    1bf2:	fc a5       	ldd	r31, Y+44	; 0x2c
    1bf4:	80 83       	st	Z, r24
    1bf6:	91 83       	std	Z+1, r25	; 0x01
    1bf8:	a2 83       	std	Z+2, r26	; 0x02
    1bfa:	b3 83       	std	Z+3, r27	; 0x03
                legPositions_g[FRONT_LEFT_LEG_X][i+positionStart] = x;
    1bfc:	69 85       	ldd	r22, Y+9	; 0x09
    1bfe:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c00:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c02:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c04:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    1c08:	d1 01       	movw	r26, r2
    1c0a:	6d 93       	st	X+, r22
    1c0c:	7d 93       	st	X+, r23
    1c0e:	8d 93       	st	X+, r24
    1c10:	9c 93       	st	X, r25
    1c12:	13 97       	sbiw	r26, 0x03	; 3
    1c14:	81 01       	movw	r16, r2
    1c16:	00 5b       	subi	r16, 0xB0	; 176
    1c18:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[FRONT_LEFT_LEG_Y][i+positionStart] = y;
    1c1a:	a5 96       	adiw	r28, 0x25	; 37
    1c1c:	6c ad       	ldd	r22, Y+60	; 0x3c
    1c1e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1c20:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c22:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c24:	a5 97       	sbiw	r28, 0x25	; 37
    1c26:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    1c2a:	f8 01       	movw	r30, r16
    1c2c:	60 83       	st	Z, r22
    1c2e:	71 83       	std	Z+1, r23	; 0x01
    1c30:	82 83       	std	Z+2, r24	; 0x02
    1c32:	93 83       	std	Z+3, r25	; 0x03
    1c34:	00 5b       	subi	r16, 0xB0	; 176
    1c36:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[FRONT_LEFT_LEG_Z][i+positionStart] = z;
    1c38:	6d 85       	ldd	r22, Y+13	; 0x0d
    1c3a:	7e 85       	ldd	r23, Y+14	; 0x0e
    1c3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c3e:	98 89       	ldd	r25, Y+16	; 0x10
    1c40:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    1c44:	d8 01       	movw	r26, r16
    1c46:	6d 93       	st	X+, r22
    1c48:	7d 93       	st	X+, r23
    1c4a:	8d 93       	st	X+, r24
    1c4c:	9c 93       	st	X, r25
    1c4e:	13 97       	sbiw	r26, 0x03	; 3
                break;
    1c50:	01 c1       	rjmp	.+514    	; 0x1e54 <CalcCurvedPath+0x7ba>
            }
            case FRONT_RIGHT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i+positionStart] = theta1 + 193;
    1c52:	0f a9       	ldd	r16, Y+55	; 0x37
    1c54:	18 ad       	ldd	r17, Y+56	; 0x38
    1c56:	29 ad       	ldd	r18, Y+57	; 0x39
    1c58:	3a ad       	ldd	r19, Y+58	; 0x3a
    1c5a:	0f 53       	subi	r16, 0x3F	; 63
    1c5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5e:	2f 4f       	sbci	r18, 0xFF	; 255
    1c60:	3f 4f       	sbci	r19, 0xFF	; 255
    1c62:	ed a1       	ldd	r30, Y+37	; 0x25
    1c64:	fe a1       	ldd	r31, Y+38	; 0x26
    1c66:	00 83       	st	Z, r16
    1c68:	11 83       	std	Z+1, r17	; 0x01
    1c6a:	22 83       	std	Z+2, r18	; 0x02
    1c6c:	33 83       	std	Z+3, r19	; 0x03
                actuatorPositions_g[currentLeg.femurJoint][i+positionStart] =  theta2 + 75;
    1c6e:	fb e4       	ldi	r31, 0x4B	; 75
    1c70:	cf 0e       	add	r12, r31
    1c72:	d1 1c       	adc	r13, r1
    1c74:	e1 1c       	adc	r14, r1
    1c76:	f1 1c       	adc	r15, r1
    1c78:	af a1       	ldd	r26, Y+39	; 0x27
    1c7a:	b8 a5       	ldd	r27, Y+40	; 0x28
    1c7c:	cd 92       	st	X+, r12
    1c7e:	dd 92       	st	X+, r13
    1c80:	ed 92       	st	X+, r14
    1c82:	fc 92       	st	X, r15
    1c84:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.tibiaJoint][i+positionStart] =  theta3 + 3;
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	03 96       	adiw	r24, 0x03	; 3
    1c8c:	a1 1d       	adc	r26, r1
    1c8e:	b1 1d       	adc	r27, r1
    1c90:	eb a5       	ldd	r30, Y+43	; 0x2b
    1c92:	fc a5       	ldd	r31, Y+44	; 0x2c
    1c94:	80 83       	st	Z, r24
    1c96:	91 83       	std	Z+1, r25	; 0x01
    1c98:	a2 83       	std	Z+2, r26	; 0x02
    1c9a:	b3 83       	std	Z+3, r27	; 0x03
    1c9c:	81 01       	movw	r16, r2
    1c9e:	00 51       	subi	r16, 0x10	; 16
    1ca0:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[FRONT_RIGHT_LEG_X][i+positionStart] = x;
    1ca2:	69 85       	ldd	r22, Y+9	; 0x09
    1ca4:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ca6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ca8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1caa:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    1cae:	d8 01       	movw	r26, r16
    1cb0:	6d 93       	st	X+, r22
    1cb2:	7d 93       	st	X+, r23
    1cb4:	8d 93       	st	X+, r24
    1cb6:	9c 93       	st	X, r25
    1cb8:	13 97       	sbiw	r26, 0x03	; 3
    1cba:	00 5b       	subi	r16, 0xB0	; 176
    1cbc:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[FRONT_RIGHT_LEG_Y][i+positionStart] = y;
    1cbe:	a5 96       	adiw	r28, 0x25	; 37
    1cc0:	6c ad       	ldd	r22, Y+60	; 0x3c
    1cc2:	7d ad       	ldd	r23, Y+61	; 0x3d
    1cc4:	8e ad       	ldd	r24, Y+62	; 0x3e
    1cc6:	9f ad       	ldd	r25, Y+63	; 0x3f
    1cc8:	a5 97       	sbiw	r28, 0x25	; 37
    1cca:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    1cce:	f8 01       	movw	r30, r16
    1cd0:	60 83       	st	Z, r22
    1cd2:	71 83       	std	Z+1, r23	; 0x01
    1cd4:	82 83       	std	Z+2, r24	; 0x02
    1cd6:	93 83       	std	Z+3, r25	; 0x03
    1cd8:	00 5b       	subi	r16, 0xB0	; 176
    1cda:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[FRONT_RIGHT_LEG_Z][i+positionStart] = z;
    1cdc:	6d 85       	ldd	r22, Y+13	; 0x0d
    1cde:	7e 85       	ldd	r23, Y+14	; 0x0e
    1ce0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ce2:	98 89       	ldd	r25, Y+16	; 0x10
    1ce4:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    1ce8:	d8 01       	movw	r26, r16
    1cea:	6d 93       	st	X+, r22
    1cec:	7d 93       	st	X+, r23
    1cee:	8d 93       	st	X+, r24
    1cf0:	9c 93       	st	X, r25
    1cf2:	13 97       	sbiw	r26, 0x03	; 3
                break;
    1cf4:	af c0       	rjmp	.+350    	; 0x1e54 <CalcCurvedPath+0x7ba>
            }
            case REAR_LEFT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i+positionStart] = theta1 + 195;
    1cf6:	0f a9       	ldd	r16, Y+55	; 0x37
    1cf8:	18 ad       	ldd	r17, Y+56	; 0x38
    1cfa:	29 ad       	ldd	r18, Y+57	; 0x39
    1cfc:	3a ad       	ldd	r19, Y+58	; 0x3a
    1cfe:	0d 53       	subi	r16, 0x3D	; 61
    1d00:	1f 4f       	sbci	r17, 0xFF	; 255
    1d02:	2f 4f       	sbci	r18, 0xFF	; 255
    1d04:	3f 4f       	sbci	r19, 0xFF	; 255
    1d06:	ed a1       	ldd	r30, Y+37	; 0x25
    1d08:	fe a1       	ldd	r31, Y+38	; 0x26
    1d0a:	00 83       	st	Z, r16
    1d0c:	11 83       	std	Z+1, r17	; 0x01
    1d0e:	22 83       	std	Z+2, r18	; 0x02
    1d10:	33 83       	std	Z+3, r19	; 0x03
                actuatorPositions_g[currentLeg.femurJoint][i+positionStart] =  225 - theta2;
    1d12:	01 ee       	ldi	r16, 0xE1	; 225
    1d14:	10 e0       	ldi	r17, 0x00	; 0
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	0c 19       	sub	r16, r12
    1d1c:	1d 09       	sbc	r17, r13
    1d1e:	2e 09       	sbc	r18, r14
    1d20:	3f 09       	sbc	r19, r15
    1d22:	af a1       	ldd	r26, Y+39	; 0x27
    1d24:	b8 a5       	ldd	r27, Y+40	; 0x28
    1d26:	0d 93       	st	X+, r16
    1d28:	1d 93       	st	X+, r17
    1d2a:	2d 93       	st	X+, r18
    1d2c:	3c 93       	st	X, r19
    1d2e:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.tibiaJoint][i+positionStart] =  300 - theta3;
    1d30:	2c e2       	ldi	r18, 0x2C	; 44
    1d32:	31 e0       	ldi	r19, 0x01	; 1
    1d34:	40 e0       	ldi	r20, 0x00	; 0
    1d36:	50 e0       	ldi	r21, 0x00	; 0
    1d38:	26 1b       	sub	r18, r22
    1d3a:	37 0b       	sbc	r19, r23
    1d3c:	48 0b       	sbc	r20, r24
    1d3e:	59 0b       	sbc	r21, r25
    1d40:	eb a5       	ldd	r30, Y+43	; 0x2b
    1d42:	fc a5       	ldd	r31, Y+44	; 0x2c
    1d44:	20 83       	st	Z, r18
    1d46:	31 83       	std	Z+1, r19	; 0x01
    1d48:	42 83       	std	Z+2, r20	; 0x02
    1d4a:	53 83       	std	Z+3, r21	; 0x03
    1d4c:	81 01       	movw	r16, r2
    1d4e:	00 52       	subi	r16, 0x20	; 32
    1d50:	1e 4f       	sbci	r17, 0xFE	; 254
                legPositions_g[REAR_LEFT_LEG_X][i+positionStart] = x;
    1d52:	69 85       	ldd	r22, Y+9	; 0x09
    1d54:	7a 85       	ldd	r23, Y+10	; 0x0a
    1d56:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d58:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d5a:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    1d5e:	d8 01       	movw	r26, r16
    1d60:	6d 93       	st	X+, r22
    1d62:	7d 93       	st	X+, r23
    1d64:	8d 93       	st	X+, r24
    1d66:	9c 93       	st	X, r25
    1d68:	13 97       	sbiw	r26, 0x03	; 3
    1d6a:	00 5b       	subi	r16, 0xB0	; 176
    1d6c:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[REAR_LEFT_LEG_Y][i+positionStart] = y;
    1d6e:	a5 96       	adiw	r28, 0x25	; 37
    1d70:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d72:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d74:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d76:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d78:	a5 97       	sbiw	r28, 0x25	; 37
    1d7a:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    1d7e:	f8 01       	movw	r30, r16
    1d80:	60 83       	st	Z, r22
    1d82:	71 83       	std	Z+1, r23	; 0x01
    1d84:	82 83       	std	Z+2, r24	; 0x02
    1d86:	93 83       	std	Z+3, r25	; 0x03
    1d88:	00 5b       	subi	r16, 0xB0	; 176
    1d8a:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[REAR_LEFT_LEG_Z][i+positionStart] = z;
    1d8c:	6d 85       	ldd	r22, Y+13	; 0x0d
    1d8e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1d90:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d92:	98 89       	ldd	r25, Y+16	; 0x10
    1d94:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    1d98:	d8 01       	movw	r26, r16
    1d9a:	6d 93       	st	X+, r22
    1d9c:	7d 93       	st	X+, r23
    1d9e:	8d 93       	st	X+, r24
    1da0:	9c 93       	st	X, r25
    1da2:	13 97       	sbiw	r26, 0x03	; 3
                break;
    1da4:	57 c0       	rjmp	.+174    	; 0x1e54 <CalcCurvedPath+0x7ba>
            }
            case REAR_RIGHT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i+positionStart] = theta1 + 105;
    1da6:	0f a9       	ldd	r16, Y+55	; 0x37
    1da8:	18 ad       	ldd	r17, Y+56	; 0x38
    1daa:	29 ad       	ldd	r18, Y+57	; 0x39
    1dac:	3a ad       	ldd	r19, Y+58	; 0x3a
    1dae:	07 59       	subi	r16, 0x97	; 151
    1db0:	1f 4f       	sbci	r17, 0xFF	; 255
    1db2:	2f 4f       	sbci	r18, 0xFF	; 255
    1db4:	3f 4f       	sbci	r19, 0xFF	; 255
    1db6:	ed a1       	ldd	r30, Y+37	; 0x25
    1db8:	fe a1       	ldd	r31, Y+38	; 0x26
    1dba:	00 83       	st	Z, r16
    1dbc:	11 83       	std	Z+1, r17	; 0x01
    1dbe:	22 83       	std	Z+2, r18	; 0x02
    1dc0:	33 83       	std	Z+3, r19	; 0x03
                actuatorPositions_g[currentLeg.femurJoint][i+positionStart] =  225 - theta2;
    1dc2:	01 ee       	ldi	r16, 0xE1	; 225
    1dc4:	10 e0       	ldi	r17, 0x00	; 0
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	0c 19       	sub	r16, r12
    1dcc:	1d 09       	sbc	r17, r13
    1dce:	2e 09       	sbc	r18, r14
    1dd0:	3f 09       	sbc	r19, r15
    1dd2:	af a1       	ldd	r26, Y+39	; 0x27
    1dd4:	b8 a5       	ldd	r27, Y+40	; 0x28
    1dd6:	0d 93       	st	X+, r16
    1dd8:	1d 93       	st	X+, r17
    1dda:	2d 93       	st	X+, r18
    1ddc:	3c 93       	st	X, r19
    1dde:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.tibiaJoint][i+positionStart] =  300 - theta3;
    1de0:	2c e2       	ldi	r18, 0x2C	; 44
    1de2:	31 e0       	ldi	r19, 0x01	; 1
    1de4:	40 e0       	ldi	r20, 0x00	; 0
    1de6:	50 e0       	ldi	r21, 0x00	; 0
    1de8:	26 1b       	sub	r18, r22
    1dea:	37 0b       	sbc	r19, r23
    1dec:	48 0b       	sbc	r20, r24
    1dee:	59 0b       	sbc	r21, r25
    1df0:	eb a5       	ldd	r30, Y+43	; 0x2b
    1df2:	fc a5       	ldd	r31, Y+44	; 0x2c
    1df4:	20 83       	st	Z, r18
    1df6:	31 83       	std	Z+1, r19	; 0x01
    1df8:	42 83       	std	Z+2, r20	; 0x02
    1dfa:	53 83       	std	Z+3, r21	; 0x03
    1dfc:	81 01       	movw	r16, r2
    1dfe:	00 53       	subi	r16, 0x30	; 48
    1e00:	1d 4f       	sbci	r17, 0xFD	; 253
                legPositions_g[REAR_RIGHT_LEG_X][i+positionStart] = x;
    1e02:	69 85       	ldd	r22, Y+9	; 0x09
    1e04:	7a 85       	ldd	r23, Y+10	; 0x0a
    1e06:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e08:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e0a:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    1e0e:	d8 01       	movw	r26, r16
    1e10:	6d 93       	st	X+, r22
    1e12:	7d 93       	st	X+, r23
    1e14:	8d 93       	st	X+, r24
    1e16:	9c 93       	st	X, r25
    1e18:	13 97       	sbiw	r26, 0x03	; 3
    1e1a:	00 5b       	subi	r16, 0xB0	; 176
    1e1c:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[REAR_RIGHT_LEG_Y][i+positionStart] = y;
    1e1e:	a5 96       	adiw	r28, 0x25	; 37
    1e20:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e22:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e24:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e26:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e28:	a5 97       	sbiw	r28, 0x25	; 37
    1e2a:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    1e2e:	f8 01       	movw	r30, r16
    1e30:	60 83       	st	Z, r22
    1e32:	71 83       	std	Z+1, r23	; 0x01
    1e34:	82 83       	std	Z+2, r24	; 0x02
    1e36:	93 83       	std	Z+3, r25	; 0x03
    1e38:	00 5b       	subi	r16, 0xB0	; 176
    1e3a:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[REAR_RIGHT_LEG_Z][i+positionStart] = z;
    1e3c:	6d 85       	ldd	r22, Y+13	; 0x0d
    1e3e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1e40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e42:	98 89       	ldd	r25, Y+16	; 0x10
    1e44:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    1e48:	d8 01       	movw	r26, r16
    1e4a:	6d 93       	st	X+, r22
    1e4c:	7d 93       	st	X+, r23
    1e4e:	8d 93       	st	X+, r24
    1e50:	9c 93       	st	X, r25
    1e52:	13 97       	sbiw	r26, 0x03	; 3
    float y = y1;
    float z = z1;
    
    
    // första halvan av rörelsen
    for (int i = 0; i < numberOfPositions / 2; i++)
    1e54:	ed 89       	ldd	r30, Y+21	; 0x15
    1e56:	fe 89       	ldd	r31, Y+22	; 0x16
    1e58:	31 96       	adiw	r30, 0x01	; 1
    1e5a:	fe 8b       	std	Y+22, r31	; 0x16
    1e5c:	ed 8b       	std	Y+21, r30	; 0x15
    1e5e:	2d a1       	ldd	r18, Y+37	; 0x25
    1e60:	3e a1       	ldd	r19, Y+38	; 0x26
    1e62:	2c 5f       	subi	r18, 0xFC	; 252
    1e64:	3f 4f       	sbci	r19, 0xFF	; 255
    1e66:	3e a3       	std	Y+38, r19	; 0x26
    1e68:	2d a3       	std	Y+37, r18	; 0x25
    1e6a:	4f a1       	ldd	r20, Y+39	; 0x27
    1e6c:	58 a5       	ldd	r21, Y+40	; 0x28
    1e6e:	4c 5f       	subi	r20, 0xFC	; 252
    1e70:	5f 4f       	sbci	r21, 0xFF	; 255
    1e72:	58 a7       	std	Y+40, r21	; 0x28
    1e74:	4f a3       	std	Y+39, r20	; 0x27
    1e76:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e78:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e7a:	04 96       	adiw	r24, 0x04	; 4
    1e7c:	9c a7       	std	Y+44, r25	; 0x2c
    1e7e:	8b a7       	std	Y+43, r24	; 0x2b
    1e80:	94 e0       	ldi	r25, 0x04	; 4
    1e82:	29 0e       	add	r2, r25
    1e84:	31 1c       	adc	r3, r1
    1e86:	a9 a5       	ldd	r26, Y+41	; 0x29
    1e88:	ba a5       	ldd	r27, Y+42	; 0x2a
    1e8a:	ea 17       	cp	r30, r26
    1e8c:	fb 07       	cpc	r31, r27
    1e8e:	09 f0       	breq	.+2      	; 0x1e92 <CalcCurvedPath+0x7f8>
    1e90:	61 cd       	rjmp	.-1342   	; 0x1954 <CalcCurvedPath+0x2ba>
    1e92:	29 8c       	ldd	r2, Y+25	; 0x19
    1e94:	3a 8c       	ldd	r3, Y+26	; 0x1a
    1e96:	a9 84       	ldd	r10, Y+9	; 0x09
    1e98:	ba 84       	ldd	r11, Y+10	; 0x0a
    1e9a:	cb 84       	ldd	r12, Y+11	; 0x0b
    1e9c:	dc 84       	ldd	r13, Y+12	; 0x0c
    1e9e:	4d 84       	ldd	r4, Y+13	; 0x0d
    1ea0:	5e 84       	ldd	r5, Y+14	; 0x0e
    1ea2:	6f 84       	ldd	r6, Y+15	; 0x0f
    1ea4:	78 88       	ldd	r7, Y+16	; 0x10
                break;
            }
        }
    }
    
    for (int i = numberOfPositions/2; i < numberOfPositions; i++)
    1ea6:	eb ad       	ldd	r30, Y+59	; 0x3b
    1ea8:	fc ad       	ldd	r31, Y+60	; 0x3c
    1eaa:	29 a5       	ldd	r18, Y+41	; 0x29
    1eac:	3a a5       	ldd	r19, Y+42	; 0x2a
    1eae:	2e 17       	cp	r18, r30
    1eb0:	3f 07       	cpc	r19, r31
    1eb2:	0c f0       	brlt	.+2      	; 0x1eb6 <CalcCurvedPath+0x81c>
    1eb4:	f6 c2       	rjmp	.+1516   	; 0x24a2 <CalcCurvedPath+0xe08>
        // spara resultatet i global array
       switch(currentLeg.legNumber)
       {
           case FRONT_LEFT_LEG:
           {
               actuatorPositions_g[currentLeg.coxaJoint][i+positionStart] = theta1 + 105;
    1eb6:	89 01       	movw	r16, r18
    1eb8:	27 96       	adiw	r28, 0x07	; 7
    1eba:	4e ad       	ldd	r20, Y+62	; 0x3e
    1ebc:	5f ad       	ldd	r21, Y+63	; 0x3f
    1ebe:	27 97       	sbiw	r28, 0x07	; 7
    1ec0:	04 0f       	add	r16, r20
    1ec2:	15 1f       	adc	r17, r21
    1ec4:	24 e1       	ldi	r18, 0x14	; 20
    1ec6:	29 96       	adiw	r28, 0x09	; 9
    1ec8:	ae ad       	ldd	r26, Y+62	; 0x3e
    1eca:	bf ad       	ldd	r27, Y+63	; 0x3f
    1ecc:	29 97       	sbiw	r28, 0x09	; 9
    1ece:	2a 9f       	mul	r18, r26
    1ed0:	c0 01       	movw	r24, r0
    1ed2:	2b 9f       	mul	r18, r27
    1ed4:	90 0d       	add	r25, r0
    1ed6:	11 24       	eor	r1, r1
    1ed8:	80 0f       	add	r24, r16
    1eda:	91 1f       	adc	r25, r17
    1edc:	88 0f       	add	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	fc 01       	movw	r30, r24
    1ee6:	e4 51       	subi	r30, 0x14	; 20
    1ee8:	fb 4f       	sbci	r31, 0xFB	; 251
    1eea:	4f 01       	movw	r8, r30
    1eec:	2b 96       	adiw	r28, 0x0b	; 11
    1eee:	4e ad       	ldd	r20, Y+62	; 0x3e
    1ef0:	5f ad       	ldd	r21, Y+63	; 0x3f
    1ef2:	2b 97       	sbiw	r28, 0x0b	; 11
    1ef4:	24 9f       	mul	r18, r20
    1ef6:	c0 01       	movw	r24, r0
    1ef8:	25 9f       	mul	r18, r21
    1efa:	90 0d       	add	r25, r0
    1efc:	11 24       	eor	r1, r1
    1efe:	80 0f       	add	r24, r16
    1f00:	91 1f       	adc	r25, r17
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	a4 51       	subi	r26, 0x14	; 20
    1f0e:	bb 4f       	sbci	r27, 0xFB	; 251
    1f10:	be a3       	std	Y+38, r27	; 0x26
    1f12:	ad a3       	std	Y+37, r26	; 0x25
    1f14:	2d 96       	adiw	r28, 0x0d	; 13
    1f16:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f18:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f1a:	2d 97       	sbiw	r28, 0x0d	; 13
    1f1c:	2e 9f       	mul	r18, r30
    1f1e:	c0 01       	movw	r24, r0
    1f20:	2f 9f       	mul	r18, r31
    1f22:	90 0d       	add	r25, r0
    1f24:	11 24       	eor	r1, r1
    1f26:	80 0f       	add	r24, r16
    1f28:	91 1f       	adc	r25, r17
    1f2a:	88 0f       	add	r24, r24
    1f2c:	99 1f       	adc	r25, r25
    1f2e:	88 0f       	add	r24, r24
    1f30:	99 1f       	adc	r25, r25
    1f32:	9c 01       	movw	r18, r24
    1f34:	24 51       	subi	r18, 0x14	; 20
    1f36:	3b 4f       	sbci	r19, 0xFB	; 251
    1f38:	3a a3       	std	Y+34, r19	; 0x22
    1f3a:	29 a3       	std	Y+33, r18	; 0x21
    1f3c:	00 0f       	add	r16, r16
    1f3e:	11 1f       	adc	r17, r17
    1f40:	00 0f       	add	r16, r16
    1f42:	11 1f       	adc	r17, r17
    1f44:	04 58       	subi	r16, 0x84	; 132
    1f46:	1e 4f       	sbci	r17, 0xFE	; 254
           }
           case REAR_LEFT_LEG:
           {
               actuatorPositions_g[currentLeg.coxaJoint][i+positionStart] = theta1 + 195;
               actuatorPositions_g[currentLeg.femurJoint][i+positionStart] =  225 - theta2;
               actuatorPositions_g[currentLeg.tibiaJoint][i+positionStart] =  300 - theta3;
    1f48:	3e 8e       	std	Y+30, r3	; 0x1e
    1f4a:	2d 8e       	std	Y+29, r2	; 0x1d
    1f4c:	98 a6       	std	Y+40, r9	; 0x28
    1f4e:	8f a2       	std	Y+39, r8	; 0x27
    1f50:	18 01       	movw	r2, r16
    1f52:	a9 86       	std	Y+9, r10	; 0x09
    1f54:	ba 86       	std	Y+10, r11	; 0x0a
    1f56:	cb 86       	std	Y+11, r12	; 0x0b
    1f58:	dc 86       	std	Y+12, r13	; 0x0c
    1f5a:	4d 86       	std	Y+13, r4	; 0x0d
    1f5c:	5e 86       	std	Y+14, r5	; 0x0e
    1f5e:	6f 86       	std	Y+15, r6	; 0x0f
    1f60:	78 8a       	std	Y+16, r7	; 0x10
        }
    }
    
    for (int i = numberOfPositions/2; i < numberOfPositions; i++)
    {
        x = x + deltaX;
    1f62:	2f a5       	ldd	r18, Y+47	; 0x2f
    1f64:	38 a9       	ldd	r19, Y+48	; 0x30
    1f66:	49 a9       	ldd	r20, Y+49	; 0x31
    1f68:	5a a9       	ldd	r21, Y+50	; 0x32
    1f6a:	69 85       	ldd	r22, Y+9	; 0x09
    1f6c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1f6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f70:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f72:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
    1f76:	69 87       	std	Y+9, r22	; 0x09
    1f78:	7a 87       	std	Y+10, r23	; 0x0a
    1f7a:	8b 87       	std	Y+11, r24	; 0x0b
    1f7c:	9c 87       	std	Y+12, r25	; 0x0c
        y = y + deltaY;
    1f7e:	2b a9       	ldd	r18, Y+51	; 0x33
    1f80:	3c a9       	ldd	r19, Y+52	; 0x34
    1f82:	4d a9       	ldd	r20, Y+53	; 0x35
    1f84:	5e a9       	ldd	r21, Y+54	; 0x36
    1f86:	a5 96       	adiw	r28, 0x25	; 37
    1f88:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f8a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f8c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f8e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f90:	a5 97       	sbiw	r28, 0x25	; 37
    1f92:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
    1f96:	a5 96       	adiw	r28, 0x25	; 37
    1f98:	6c af       	std	Y+60, r22	; 0x3c
    1f9a:	7d af       	std	Y+61, r23	; 0x3d
    1f9c:	8e af       	std	Y+62, r24	; 0x3e
    1f9e:	9f af       	std	Y+63, r25	; 0x3f
    1fa0:	a5 97       	sbiw	r28, 0x25	; 37
        z = z + deltaZEnd;
    1fa2:	25 96       	adiw	r28, 0x05	; 5
    1fa4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1fa6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1fa8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1faa:	5f ad       	ldd	r21, Y+63	; 0x3f
    1fac:	25 97       	sbiw	r28, 0x05	; 5
    1fae:	6d 85       	ldd	r22, Y+13	; 0x0d
    1fb0:	7e 85       	ldd	r23, Y+14	; 0x0e
    1fb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fb4:	98 89       	ldd	r25, Y+16	; 0x10
    1fb6:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
    1fba:	6d 87       	std	Y+13, r22	; 0x0d
    1fbc:	7e 87       	std	Y+14, r23	; 0x0e
    1fbe:	8f 87       	std	Y+15, r24	; 0x0f
    1fc0:	98 8b       	std	Y+16, r25	; 0x10
        
        // lös inverskinematik för lederna.
        theta1 = atan2f(x,y)*180/PI;
    1fc2:	a5 96       	adiw	r28, 0x25	; 37
    1fc4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1fc6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1fc8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1fca:	5f ad       	ldd	r21, Y+63	; 0x3f
    1fcc:	a5 97       	sbiw	r28, 0x25	; 37
    1fce:	69 85       	ldd	r22, Y+9	; 0x09
    1fd0:	7a 85       	ldd	r23, Y+10	; 0x0a
    1fd2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fd4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fd6:	0e 94 27 1a 	call	0x344e	; 0x344e <atan2>
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	44 e3       	ldi	r20, 0x34	; 52
    1fe0:	53 e4       	ldi	r21, 0x43	; 67
    1fe2:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
    1fe6:	28 ed       	ldi	r18, 0xD8	; 216
    1fe8:	3f e0       	ldi	r19, 0x0F	; 15
    1fea:	49 e4       	ldi	r20, 0x49	; 73
    1fec:	50 e4       	ldi	r21, 0x40	; 64
    1fee:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
    1ff2:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    1ff6:	6b a7       	std	Y+43, r22	; 0x2b
    1ff8:	7c a7       	std	Y+44, r23	; 0x2c
    1ffa:	8d a7       	std	Y+45, r24	; 0x2d
    1ffc:	9e a7       	std	Y+46, r25	; 0x2e
        theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
    1ffe:	2d 85       	ldd	r18, Y+13	; 0x0d
    2000:	3e 85       	ldd	r19, Y+14	; 0x0e
    2002:	4f 85       	ldd	r20, Y+15	; 0x0f
    2004:	58 89       	ldd	r21, Y+16	; 0x10
    2006:	ca 01       	movw	r24, r20
    2008:	b9 01       	movw	r22, r18
    200a:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
    200e:	69 8b       	std	Y+17, r22	; 0x11
    2010:	7a 8b       	std	Y+18, r23	; 0x12
    2012:	8b 8b       	std	Y+19, r24	; 0x13
    2014:	9c 8b       	std	Y+20, r25	; 0x14
    2016:	29 85       	ldd	r18, Y+9	; 0x09
    2018:	3a 85       	ldd	r19, Y+10	; 0x0a
    201a:	4b 85       	ldd	r20, Y+11	; 0x0b
    201c:	5c 85       	ldd	r21, Y+12	; 0x0c
    201e:	ca 01       	movw	r24, r20
    2020:	b9 01       	movw	r22, r18
    2022:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
    2026:	6b 01       	movw	r12, r22
    2028:	7c 01       	movw	r14, r24
    202a:	a5 96       	adiw	r28, 0x25	; 37
    202c:	2c ad       	ldd	r18, Y+60	; 0x3c
    202e:	3d ad       	ldd	r19, Y+61	; 0x3d
    2030:	4e ad       	ldd	r20, Y+62	; 0x3e
    2032:	5f ad       	ldd	r21, Y+63	; 0x3f
    2034:	a5 97       	sbiw	r28, 0x25	; 37
    2036:	ca 01       	movw	r24, r20
    2038:	b9 01       	movw	r22, r18
    203a:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
    203e:	9b 01       	movw	r18, r22
    2040:	ac 01       	movw	r20, r24
    2042:	c7 01       	movw	r24, r14
    2044:	b6 01       	movw	r22, r12
    2046:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
    204a:	6d 8b       	std	Y+21, r22	; 0x15
    204c:	7e 8b       	std	Y+22, r23	; 0x16
    204e:	8f 8b       	std	Y+23, r24	; 0x17
    2050:	98 8f       	std	Y+24, r25	; 0x18
    2052:	0e 94 4f 1c 	call	0x389e	; 0x389e <sqrt>
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	48 e4       	ldi	r20, 0x48	; 72
    205c:	52 e4       	ldi	r21, 0x42	; 66
    205e:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
    2062:	6b 01       	movw	r12, r22
    2064:	7c 01       	movw	r14, r24
    2066:	9b 01       	movw	r18, r22
    2068:	ac 01       	movw	r20, r24
    206a:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
    206e:	69 8f       	std	Y+25, r22	; 0x19
    2070:	7a 8f       	std	Y+26, r23	; 0x1a
    2072:	8b 8f       	std	Y+27, r24	; 0x1b
    2074:	9c 8f       	std	Y+28, r25	; 0x1c
    2076:	9b 01       	movw	r18, r22
    2078:	ac 01       	movw	r20, r24
    207a:	69 89       	ldd	r22, Y+17	; 0x11
    207c:	7a 89       	ldd	r23, Y+18	; 0x12
    207e:	8b 89       	ldd	r24, Y+19	; 0x13
    2080:	9c 89       	ldd	r25, Y+20	; 0x14
    2082:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
    2086:	4b 01       	movw	r8, r22
    2088:	5c 01       	movw	r10, r24
    208a:	0e 94 4f 1c 	call	0x389e	; 0x389e <sqrt>
    208e:	9b 01       	movw	r18, r22
    2090:	ac 01       	movw	r20, r24
    2092:	6d 85       	ldd	r22, Y+13	; 0x0d
    2094:	7e 85       	ldd	r23, Y+14	; 0x0e
    2096:	8f 85       	ldd	r24, Y+15	; 0x0f
    2098:	98 89       	ldd	r25, Y+16	; 0x10
    209a:	90 58       	subi	r25, 0x80	; 128
    209c:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
    20a0:	0e 94 a5 19 	call	0x334a	; 0x334a <acos>
    20a4:	2b 01       	movw	r4, r22
    20a6:	3c 01       	movw	r6, r24
        acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	48 e4       	ldi	r20, 0x48	; 72
    20ae:	52 e4       	ldi	r21, 0x42	; 66
    20b0:	6d 89       	ldd	r22, Y+21	; 0x15
    20b2:	7e 89       	ldd	r23, Y+22	; 0x16
    20b4:	8f 89       	ldd	r24, Y+23	; 0x17
    20b6:	98 8d       	ldd	r25, Y+24	; 0x18
    20b8:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
    20bc:	0e 94 4f 1c 	call	0x389e	; 0x389e <sqrt>
    20c0:	9b 01       	movw	r18, r22
    20c2:	ac 01       	movw	r20, r24
    20c4:	c7 01       	movw	r24, r14
    20c6:	b6 01       	movw	r22, r12
    20c8:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
    20cc:	9b 01       	movw	r18, r22
    20ce:	ac 01       	movw	r20, r24
    20d0:	69 89       	ldd	r22, Y+17	; 0x11
    20d2:	7a 89       	ldd	r23, Y+18	; 0x12
    20d4:	8b 89       	ldd	r24, Y+19	; 0x13
    20d6:	9c 89       	ldd	r25, Y+20	; 0x14
    20d8:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
    20dc:	0e 94 4f 1c 	call	0x389e	; 0x389e <sqrt>
    20e0:	6b 01       	movw	r12, r22
    20e2:	7c 01       	movw	r14, r24
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	38 e4       	ldi	r19, 0x48	; 72
    20e8:	4c e8       	ldi	r20, 0x8C	; 140
    20ea:	55 e4       	ldi	r21, 0x45	; 69
    20ec:	c5 01       	movw	r24, r10
    20ee:	b4 01       	movw	r22, r8
    20f0:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	38 e0       	ldi	r19, 0x08	; 8
    20f8:	44 e8       	ldi	r20, 0x84	; 132
    20fa:	56 e4       	ldi	r21, 0x46	; 70
    20fc:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
    2100:	4b 01       	movw	r8, r22
    2102:	5c 01       	movw	r10, r24
    2104:	a7 01       	movw	r20, r14
    2106:	96 01       	movw	r18, r12
    2108:	c7 01       	movw	r24, r14
    210a:	b6 01       	movw	r22, r12
    210c:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	46 e8       	ldi	r20, 0x86	; 134
    2116:	52 e4       	ldi	r21, 0x42	; 66
    2118:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
    211c:	9b 01       	movw	r18, r22
    211e:	ac 01       	movw	r20, r24
    2120:	c5 01       	movw	r24, r10
    2122:	b4 01       	movw	r22, r8
    2124:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
    2128:	0e 94 a5 19 	call	0x334a	; 0x334a <acos>
    212c:	9b 01       	movw	r18, r22
    212e:	ac 01       	movw	r20, r24
        y = y + deltaY;
        z = z + deltaZEnd;
        
        // lös inverskinematik för lederna.
        theta1 = atan2f(x,y)*180/PI;
        theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
    2130:	c3 01       	movw	r24, r6
    2132:	b2 01       	movw	r22, r4
    2134:	0e 94 b4 19 	call	0x3368	; 0x3368 <__addsf3>
    2138:	24 ee       	ldi	r18, 0xE4	; 228
    213a:	3e e2       	ldi	r19, 0x2E	; 46
    213c:	45 e6       	ldi	r20, 0x65	; 101
    213e:	52 e4       	ldi	r21, 0x42	; 66
    2140:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
    2144:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    2148:	6b 01       	movw	r12, r22
    214a:	7c 01       	movw	r14, r24
        acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
        
        theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
    214c:	29 89       	ldd	r18, Y+17	; 0x11
    214e:	3a 89       	ldd	r19, Y+18	; 0x12
    2150:	4b 89       	ldd	r20, Y+19	; 0x13
    2152:	5c 89       	ldd	r21, Y+20	; 0x14
    2154:	60 e0       	ldi	r22, 0x00	; 0
    2156:	7a e1       	ldi	r23, 0x1A	; 26
    2158:	87 ea       	ldi	r24, 0xA7	; 167
    215a:	96 e4       	ldi	r25, 0x46	; 70
    215c:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
    2160:	29 8d       	ldd	r18, Y+25	; 0x19
    2162:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2164:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2166:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2168:	0e 94 b3 19 	call	0x3366	; 0x3366 <__subsf3>
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	38 e1       	ldi	r19, 0x18	; 24
    2170:	48 e8       	ldi	r20, 0x88	; 136
    2172:	56 e4       	ldi	r21, 0x46	; 70
    2174:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
    2178:	0e 94 a5 19 	call	0x334a	; 0x334a <acos>
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	44 e3       	ldi	r20, 0x34	; 52
    2182:	53 e4       	ldi	r21, 0x43	; 67
    2184:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__mulsf3>
    2188:	28 ed       	ldi	r18, 0xD8	; 216
    218a:	3f e0       	ldi	r19, 0x0F	; 15
    218c:	49 e4       	ldi	r20, 0x49	; 73
    218e:	50 e4       	ldi	r21, 0x40	; 64
    2190:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__divsf3>
    2194:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
        
        // spara resultatet i global array
       switch(currentLeg.legNumber)
    2198:	4d 8d       	ldd	r20, Y+29	; 0x1d
    219a:	5e 8d       	ldd	r21, Y+30	; 0x1e
    219c:	42 30       	cpi	r20, 0x02	; 2
    219e:	51 05       	cpc	r21, r1
    21a0:	09 f4       	brne	.+2      	; 0x21a4 <CalcCurvedPath+0xb0a>
    21a2:	5f c0       	rjmp	.+190    	; 0x2262 <CalcCurvedPath+0xbc8>
    21a4:	24 f4       	brge	.+8      	; 0x21ae <CalcCurvedPath+0xb14>
    21a6:	41 30       	cpi	r20, 0x01	; 1
    21a8:	51 05       	cpc	r21, r1
    21aa:	59 f0       	breq	.+22     	; 0x21c2 <CalcCurvedPath+0xb28>
    21ac:	5b c1       	rjmp	.+694    	; 0x2464 <CalcCurvedPath+0xdca>
    21ae:	ad 8d       	ldd	r26, Y+29	; 0x1d
    21b0:	be 8d       	ldd	r27, Y+30	; 0x1e
    21b2:	a3 30       	cpi	r26, 0x03	; 3
    21b4:	b1 05       	cpc	r27, r1
    21b6:	09 f4       	brne	.+2      	; 0x21ba <CalcCurvedPath+0xb20>
    21b8:	a6 c0       	rjmp	.+332    	; 0x2306 <CalcCurvedPath+0xc6c>
    21ba:	14 97       	sbiw	r26, 0x04	; 4
    21bc:	09 f4       	brne	.+2      	; 0x21c0 <CalcCurvedPath+0xb26>
    21be:	fb c0       	rjmp	.+502    	; 0x23b6 <CalcCurvedPath+0xd1c>
    21c0:	51 c1       	rjmp	.+674    	; 0x2464 <CalcCurvedPath+0xdca>
       {
           case FRONT_LEFT_LEG:
           {
               actuatorPositions_g[currentLeg.coxaJoint][i+positionStart] = theta1 + 105;
    21c2:	0b a5       	ldd	r16, Y+43	; 0x2b
    21c4:	1c a5       	ldd	r17, Y+44	; 0x2c
    21c6:	2d a5       	ldd	r18, Y+45	; 0x2d
    21c8:	3e a5       	ldd	r19, Y+46	; 0x2e
    21ca:	07 59       	subi	r16, 0x97	; 151
    21cc:	1f 4f       	sbci	r17, 0xFF	; 255
    21ce:	2f 4f       	sbci	r18, 0xFF	; 255
    21d0:	3f 4f       	sbci	r19, 0xFF	; 255
    21d2:	ef a1       	ldd	r30, Y+39	; 0x27
    21d4:	f8 a5       	ldd	r31, Y+40	; 0x28
    21d6:	00 83       	st	Z, r16
    21d8:	11 83       	std	Z+1, r17	; 0x01
    21da:	22 83       	std	Z+2, r18	; 0x02
    21dc:	33 83       	std	Z+3, r19	; 0x03
               actuatorPositions_g[currentLeg.femurJoint][i+positionStart] =  theta2 + 75;
    21de:	fb e4       	ldi	r31, 0x4B	; 75
    21e0:	cf 0e       	add	r12, r31
    21e2:	d1 1c       	adc	r13, r1
    21e4:	e1 1c       	adc	r14, r1
    21e6:	f1 1c       	adc	r15, r1
    21e8:	ad a1       	ldd	r26, Y+37	; 0x25
    21ea:	be a1       	ldd	r27, Y+38	; 0x26
    21ec:	cd 92       	st	X+, r12
    21ee:	dd 92       	st	X+, r13
    21f0:	ed 92       	st	X+, r14
    21f2:	fc 92       	st	X, r15
    21f4:	13 97       	sbiw	r26, 0x03	; 3
               actuatorPositions_g[currentLeg.tibiaJoint][i+positionStart] =  theta3 + 1;
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	01 96       	adiw	r24, 0x01	; 1
    21fc:	a1 1d       	adc	r26, r1
    21fe:	b1 1d       	adc	r27, r1
    2200:	e9 a1       	ldd	r30, Y+33	; 0x21
    2202:	fa a1       	ldd	r31, Y+34	; 0x22
    2204:	80 83       	st	Z, r24
    2206:	91 83       	std	Z+1, r25	; 0x01
    2208:	a2 83       	std	Z+2, r26	; 0x02
    220a:	b3 83       	std	Z+3, r27	; 0x03
               legPositions_g[FRONT_LEFT_LEG_X][i+positionStart] = x;
    220c:	69 85       	ldd	r22, Y+9	; 0x09
    220e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2210:	8b 85       	ldd	r24, Y+11	; 0x0b
    2212:	9c 85       	ldd	r25, Y+12	; 0x0c
    2214:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    2218:	d1 01       	movw	r26, r2
    221a:	6d 93       	st	X+, r22
    221c:	7d 93       	st	X+, r23
    221e:	8d 93       	st	X+, r24
    2220:	9c 93       	st	X, r25
    2222:	13 97       	sbiw	r26, 0x03	; 3
    2224:	81 01       	movw	r16, r2
    2226:	00 5b       	subi	r16, 0xB0	; 176
    2228:	1f 4f       	sbci	r17, 0xFF	; 255
               legPositions_g[FRONT_LEFT_LEG_Y][i+positionStart] = y;
    222a:	a5 96       	adiw	r28, 0x25	; 37
    222c:	6c ad       	ldd	r22, Y+60	; 0x3c
    222e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2230:	8e ad       	ldd	r24, Y+62	; 0x3e
    2232:	9f ad       	ldd	r25, Y+63	; 0x3f
    2234:	a5 97       	sbiw	r28, 0x25	; 37
    2236:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    223a:	f8 01       	movw	r30, r16
    223c:	60 83       	st	Z, r22
    223e:	71 83       	std	Z+1, r23	; 0x01
    2240:	82 83       	std	Z+2, r24	; 0x02
    2242:	93 83       	std	Z+3, r25	; 0x03
    2244:	00 5b       	subi	r16, 0xB0	; 176
    2246:	1f 4f       	sbci	r17, 0xFF	; 255
               legPositions_g[FRONT_LEFT_LEG_Z][i+positionStart] = z;
    2248:	6d 85       	ldd	r22, Y+13	; 0x0d
    224a:	7e 85       	ldd	r23, Y+14	; 0x0e
    224c:	8f 85       	ldd	r24, Y+15	; 0x0f
    224e:	98 89       	ldd	r25, Y+16	; 0x10
    2250:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    2254:	d8 01       	movw	r26, r16
    2256:	6d 93       	st	X+, r22
    2258:	7d 93       	st	X+, r23
    225a:	8d 93       	st	X+, r24
    225c:	9c 93       	st	X, r25
    225e:	13 97       	sbiw	r26, 0x03	; 3
               break;
    2260:	01 c1       	rjmp	.+514    	; 0x2464 <CalcCurvedPath+0xdca>
           }
           case FRONT_RIGHT_LEG:
           {
               actuatorPositions_g[currentLeg.coxaJoint][i+positionStart] = theta1 + 193;
    2262:	0b a5       	ldd	r16, Y+43	; 0x2b
    2264:	1c a5       	ldd	r17, Y+44	; 0x2c
    2266:	2d a5       	ldd	r18, Y+45	; 0x2d
    2268:	3e a5       	ldd	r19, Y+46	; 0x2e
    226a:	0f 53       	subi	r16, 0x3F	; 63
    226c:	1f 4f       	sbci	r17, 0xFF	; 255
    226e:	2f 4f       	sbci	r18, 0xFF	; 255
    2270:	3f 4f       	sbci	r19, 0xFF	; 255
    2272:	ef a1       	ldd	r30, Y+39	; 0x27
    2274:	f8 a5       	ldd	r31, Y+40	; 0x28
    2276:	00 83       	st	Z, r16
    2278:	11 83       	std	Z+1, r17	; 0x01
    227a:	22 83       	std	Z+2, r18	; 0x02
    227c:	33 83       	std	Z+3, r19	; 0x03
               actuatorPositions_g[currentLeg.femurJoint][i+positionStart] =  theta2 + 75;
    227e:	fb e4       	ldi	r31, 0x4B	; 75
    2280:	cf 0e       	add	r12, r31
    2282:	d1 1c       	adc	r13, r1
    2284:	e1 1c       	adc	r14, r1
    2286:	f1 1c       	adc	r15, r1
    2288:	ad a1       	ldd	r26, Y+37	; 0x25
    228a:	be a1       	ldd	r27, Y+38	; 0x26
    228c:	cd 92       	st	X+, r12
    228e:	dd 92       	st	X+, r13
    2290:	ed 92       	st	X+, r14
    2292:	fc 92       	st	X, r15
    2294:	13 97       	sbiw	r26, 0x03	; 3
               actuatorPositions_g[currentLeg.tibiaJoint][i+positionStart] =  theta3 + 3;
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	03 96       	adiw	r24, 0x03	; 3
    229c:	a1 1d       	adc	r26, r1
    229e:	b1 1d       	adc	r27, r1
    22a0:	e9 a1       	ldd	r30, Y+33	; 0x21
    22a2:	fa a1       	ldd	r31, Y+34	; 0x22
    22a4:	80 83       	st	Z, r24
    22a6:	91 83       	std	Z+1, r25	; 0x01
    22a8:	a2 83       	std	Z+2, r26	; 0x02
    22aa:	b3 83       	std	Z+3, r27	; 0x03
    22ac:	81 01       	movw	r16, r2
    22ae:	00 51       	subi	r16, 0x10	; 16
    22b0:	1f 4f       	sbci	r17, 0xFF	; 255
               legPositions_g[FRONT_RIGHT_LEG_X][i+positionStart] = x;
    22b2:	69 85       	ldd	r22, Y+9	; 0x09
    22b4:	7a 85       	ldd	r23, Y+10	; 0x0a
    22b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    22b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    22ba:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    22be:	d8 01       	movw	r26, r16
    22c0:	6d 93       	st	X+, r22
    22c2:	7d 93       	st	X+, r23
    22c4:	8d 93       	st	X+, r24
    22c6:	9c 93       	st	X, r25
    22c8:	13 97       	sbiw	r26, 0x03	; 3
    22ca:	00 5b       	subi	r16, 0xB0	; 176
    22cc:	1f 4f       	sbci	r17, 0xFF	; 255
               legPositions_g[FRONT_RIGHT_LEG_Y][i+positionStart] = y;
    22ce:	a5 96       	adiw	r28, 0x25	; 37
    22d0:	6c ad       	ldd	r22, Y+60	; 0x3c
    22d2:	7d ad       	ldd	r23, Y+61	; 0x3d
    22d4:	8e ad       	ldd	r24, Y+62	; 0x3e
    22d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    22d8:	a5 97       	sbiw	r28, 0x25	; 37
    22da:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    22de:	f8 01       	movw	r30, r16
    22e0:	60 83       	st	Z, r22
    22e2:	71 83       	std	Z+1, r23	; 0x01
    22e4:	82 83       	std	Z+2, r24	; 0x02
    22e6:	93 83       	std	Z+3, r25	; 0x03
    22e8:	00 5b       	subi	r16, 0xB0	; 176
    22ea:	1f 4f       	sbci	r17, 0xFF	; 255
               legPositions_g[FRONT_RIGHT_LEG_Z][i+positionStart] = z;
    22ec:	6d 85       	ldd	r22, Y+13	; 0x0d
    22ee:	7e 85       	ldd	r23, Y+14	; 0x0e
    22f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    22f2:	98 89       	ldd	r25, Y+16	; 0x10
    22f4:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    22f8:	d8 01       	movw	r26, r16
    22fa:	6d 93       	st	X+, r22
    22fc:	7d 93       	st	X+, r23
    22fe:	8d 93       	st	X+, r24
    2300:	9c 93       	st	X, r25
    2302:	13 97       	sbiw	r26, 0x03	; 3
               break;
    2304:	af c0       	rjmp	.+350    	; 0x2464 <CalcCurvedPath+0xdca>
           }
           case REAR_LEFT_LEG:
           {
               actuatorPositions_g[currentLeg.coxaJoint][i+positionStart] = theta1 + 195;
    2306:	0b a5       	ldd	r16, Y+43	; 0x2b
    2308:	1c a5       	ldd	r17, Y+44	; 0x2c
    230a:	2d a5       	ldd	r18, Y+45	; 0x2d
    230c:	3e a5       	ldd	r19, Y+46	; 0x2e
    230e:	0d 53       	subi	r16, 0x3D	; 61
    2310:	1f 4f       	sbci	r17, 0xFF	; 255
    2312:	2f 4f       	sbci	r18, 0xFF	; 255
    2314:	3f 4f       	sbci	r19, 0xFF	; 255
    2316:	ef a1       	ldd	r30, Y+39	; 0x27
    2318:	f8 a5       	ldd	r31, Y+40	; 0x28
    231a:	00 83       	st	Z, r16
    231c:	11 83       	std	Z+1, r17	; 0x01
    231e:	22 83       	std	Z+2, r18	; 0x02
    2320:	33 83       	std	Z+3, r19	; 0x03
               actuatorPositions_g[currentLeg.femurJoint][i+positionStart] =  225 - theta2;
    2322:	01 ee       	ldi	r16, 0xE1	; 225
    2324:	10 e0       	ldi	r17, 0x00	; 0
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	0c 19       	sub	r16, r12
    232c:	1d 09       	sbc	r17, r13
    232e:	2e 09       	sbc	r18, r14
    2330:	3f 09       	sbc	r19, r15
    2332:	ad a1       	ldd	r26, Y+37	; 0x25
    2334:	be a1       	ldd	r27, Y+38	; 0x26
    2336:	0d 93       	st	X+, r16
    2338:	1d 93       	st	X+, r17
    233a:	2d 93       	st	X+, r18
    233c:	3c 93       	st	X, r19
    233e:	13 97       	sbiw	r26, 0x03	; 3
               actuatorPositions_g[currentLeg.tibiaJoint][i+positionStart] =  300 - theta3;
    2340:	2c e2       	ldi	r18, 0x2C	; 44
    2342:	31 e0       	ldi	r19, 0x01	; 1
    2344:	40 e0       	ldi	r20, 0x00	; 0
    2346:	50 e0       	ldi	r21, 0x00	; 0
    2348:	26 1b       	sub	r18, r22
    234a:	37 0b       	sbc	r19, r23
    234c:	48 0b       	sbc	r20, r24
    234e:	59 0b       	sbc	r21, r25
    2350:	e9 a1       	ldd	r30, Y+33	; 0x21
    2352:	fa a1       	ldd	r31, Y+34	; 0x22
    2354:	20 83       	st	Z, r18
    2356:	31 83       	std	Z+1, r19	; 0x01
    2358:	42 83       	std	Z+2, r20	; 0x02
    235a:	53 83       	std	Z+3, r21	; 0x03
    235c:	81 01       	movw	r16, r2
    235e:	00 52       	subi	r16, 0x20	; 32
    2360:	1e 4f       	sbci	r17, 0xFE	; 254
               legPositions_g[REAR_LEFT_LEG_X][i+positionStart] = x;
    2362:	69 85       	ldd	r22, Y+9	; 0x09
    2364:	7a 85       	ldd	r23, Y+10	; 0x0a
    2366:	8b 85       	ldd	r24, Y+11	; 0x0b
    2368:	9c 85       	ldd	r25, Y+12	; 0x0c
    236a:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    236e:	d8 01       	movw	r26, r16
    2370:	6d 93       	st	X+, r22
    2372:	7d 93       	st	X+, r23
    2374:	8d 93       	st	X+, r24
    2376:	9c 93       	st	X, r25
    2378:	13 97       	sbiw	r26, 0x03	; 3
    237a:	00 5b       	subi	r16, 0xB0	; 176
    237c:	1f 4f       	sbci	r17, 0xFF	; 255
               legPositions_g[REAR_LEFT_LEG_Y][i+positionStart] = y;
    237e:	a5 96       	adiw	r28, 0x25	; 37
    2380:	6c ad       	ldd	r22, Y+60	; 0x3c
    2382:	7d ad       	ldd	r23, Y+61	; 0x3d
    2384:	8e ad       	ldd	r24, Y+62	; 0x3e
    2386:	9f ad       	ldd	r25, Y+63	; 0x3f
    2388:	a5 97       	sbiw	r28, 0x25	; 37
    238a:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    238e:	f8 01       	movw	r30, r16
    2390:	60 83       	st	Z, r22
    2392:	71 83       	std	Z+1, r23	; 0x01
    2394:	82 83       	std	Z+2, r24	; 0x02
    2396:	93 83       	std	Z+3, r25	; 0x03
    2398:	00 5b       	subi	r16, 0xB0	; 176
    239a:	1f 4f       	sbci	r17, 0xFF	; 255
               legPositions_g[REAR_LEFT_LEG_Z][i+positionStart] = z;
    239c:	6d 85       	ldd	r22, Y+13	; 0x0d
    239e:	7e 85       	ldd	r23, Y+14	; 0x0e
    23a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23a2:	98 89       	ldd	r25, Y+16	; 0x10
    23a4:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    23a8:	d8 01       	movw	r26, r16
    23aa:	6d 93       	st	X+, r22
    23ac:	7d 93       	st	X+, r23
    23ae:	8d 93       	st	X+, r24
    23b0:	9c 93       	st	X, r25
    23b2:	13 97       	sbiw	r26, 0x03	; 3
               break;
    23b4:	57 c0       	rjmp	.+174    	; 0x2464 <CalcCurvedPath+0xdca>
           }
           case REAR_RIGHT_LEG:
           {
               actuatorPositions_g[currentLeg.coxaJoint][i+positionStart] = theta1 + 105;
    23b6:	0b a5       	ldd	r16, Y+43	; 0x2b
    23b8:	1c a5       	ldd	r17, Y+44	; 0x2c
    23ba:	2d a5       	ldd	r18, Y+45	; 0x2d
    23bc:	3e a5       	ldd	r19, Y+46	; 0x2e
    23be:	07 59       	subi	r16, 0x97	; 151
    23c0:	1f 4f       	sbci	r17, 0xFF	; 255
    23c2:	2f 4f       	sbci	r18, 0xFF	; 255
    23c4:	3f 4f       	sbci	r19, 0xFF	; 255
    23c6:	ef a1       	ldd	r30, Y+39	; 0x27
    23c8:	f8 a5       	ldd	r31, Y+40	; 0x28
    23ca:	00 83       	st	Z, r16
    23cc:	11 83       	std	Z+1, r17	; 0x01
    23ce:	22 83       	std	Z+2, r18	; 0x02
    23d0:	33 83       	std	Z+3, r19	; 0x03
               actuatorPositions_g[currentLeg.femurJoint][i+positionStart] =  225 - theta2;
    23d2:	01 ee       	ldi	r16, 0xE1	; 225
    23d4:	10 e0       	ldi	r17, 0x00	; 0
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	0c 19       	sub	r16, r12
    23dc:	1d 09       	sbc	r17, r13
    23de:	2e 09       	sbc	r18, r14
    23e0:	3f 09       	sbc	r19, r15
    23e2:	ad a1       	ldd	r26, Y+37	; 0x25
    23e4:	be a1       	ldd	r27, Y+38	; 0x26
    23e6:	0d 93       	st	X+, r16
    23e8:	1d 93       	st	X+, r17
    23ea:	2d 93       	st	X+, r18
    23ec:	3c 93       	st	X, r19
    23ee:	13 97       	sbiw	r26, 0x03	; 3
               actuatorPositions_g[currentLeg.tibiaJoint][i+positionStart] =  300 - theta3;
    23f0:	2c e2       	ldi	r18, 0x2C	; 44
    23f2:	31 e0       	ldi	r19, 0x01	; 1
    23f4:	40 e0       	ldi	r20, 0x00	; 0
    23f6:	50 e0       	ldi	r21, 0x00	; 0
    23f8:	26 1b       	sub	r18, r22
    23fa:	37 0b       	sbc	r19, r23
    23fc:	48 0b       	sbc	r20, r24
    23fe:	59 0b       	sbc	r21, r25
    2400:	e9 a1       	ldd	r30, Y+33	; 0x21
    2402:	fa a1       	ldd	r31, Y+34	; 0x22
    2404:	20 83       	st	Z, r18
    2406:	31 83       	std	Z+1, r19	; 0x01
    2408:	42 83       	std	Z+2, r20	; 0x02
    240a:	53 83       	std	Z+3, r21	; 0x03
    240c:	81 01       	movw	r16, r2
    240e:	00 53       	subi	r16, 0x30	; 48
    2410:	1d 4f       	sbci	r17, 0xFD	; 253
               legPositions_g[REAR_RIGHT_LEG_X][i+positionStart] = x;
    2412:	69 85       	ldd	r22, Y+9	; 0x09
    2414:	7a 85       	ldd	r23, Y+10	; 0x0a
    2416:	8b 85       	ldd	r24, Y+11	; 0x0b
    2418:	9c 85       	ldd	r25, Y+12	; 0x0c
    241a:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    241e:	d8 01       	movw	r26, r16
    2420:	6d 93       	st	X+, r22
    2422:	7d 93       	st	X+, r23
    2424:	8d 93       	st	X+, r24
    2426:	9c 93       	st	X, r25
    2428:	13 97       	sbiw	r26, 0x03	; 3
    242a:	00 5b       	subi	r16, 0xB0	; 176
    242c:	1f 4f       	sbci	r17, 0xFF	; 255
               legPositions_g[REAR_RIGHT_LEG_Y][i+positionStart] = y;
    242e:	a5 96       	adiw	r28, 0x25	; 37
    2430:	6c ad       	ldd	r22, Y+60	; 0x3c
    2432:	7d ad       	ldd	r23, Y+61	; 0x3d
    2434:	8e ad       	ldd	r24, Y+62	; 0x3e
    2436:	9f ad       	ldd	r25, Y+63	; 0x3f
    2438:	a5 97       	sbiw	r28, 0x25	; 37
    243a:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    243e:	f8 01       	movw	r30, r16
    2440:	60 83       	st	Z, r22
    2442:	71 83       	std	Z+1, r23	; 0x01
    2444:	82 83       	std	Z+2, r24	; 0x02
    2446:	93 83       	std	Z+3, r25	; 0x03
    2448:	00 5b       	subi	r16, 0xB0	; 176
    244a:	1f 4f       	sbci	r17, 0xFF	; 255
               legPositions_g[REAR_RIGHT_LEG_Z][i+positionStart] = z;
    244c:	6d 85       	ldd	r22, Y+13	; 0x0d
    244e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2450:	8f 85       	ldd	r24, Y+15	; 0x0f
    2452:	98 89       	ldd	r25, Y+16	; 0x10
    2454:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__fixsfsi>
    2458:	d8 01       	movw	r26, r16
    245a:	6d 93       	st	X+, r22
    245c:	7d 93       	st	X+, r23
    245e:	8d 93       	st	X+, r24
    2460:	9c 93       	st	X, r25
    2462:	13 97       	sbiw	r26, 0x03	; 3
                break;
            }
        }
    }
    
    for (int i = numberOfPositions/2; i < numberOfPositions; i++)
    2464:	e9 a5       	ldd	r30, Y+41	; 0x29
    2466:	fa a5       	ldd	r31, Y+42	; 0x2a
    2468:	31 96       	adiw	r30, 0x01	; 1
    246a:	fa a7       	std	Y+42, r31	; 0x2a
    246c:	e9 a7       	std	Y+41, r30	; 0x29
    246e:	2f a1       	ldd	r18, Y+39	; 0x27
    2470:	38 a5       	ldd	r19, Y+40	; 0x28
    2472:	2c 5f       	subi	r18, 0xFC	; 252
    2474:	3f 4f       	sbci	r19, 0xFF	; 255
    2476:	38 a7       	std	Y+40, r19	; 0x28
    2478:	2f a3       	std	Y+39, r18	; 0x27
    247a:	4d a1       	ldd	r20, Y+37	; 0x25
    247c:	5e a1       	ldd	r21, Y+38	; 0x26
    247e:	4c 5f       	subi	r20, 0xFC	; 252
    2480:	5f 4f       	sbci	r21, 0xFF	; 255
    2482:	5e a3       	std	Y+38, r21	; 0x26
    2484:	4d a3       	std	Y+37, r20	; 0x25
    2486:	89 a1       	ldd	r24, Y+33	; 0x21
    2488:	9a a1       	ldd	r25, Y+34	; 0x22
    248a:	04 96       	adiw	r24, 0x04	; 4
    248c:	9a a3       	std	Y+34, r25	; 0x22
    248e:	89 a3       	std	Y+33, r24	; 0x21
    2490:	94 e0       	ldi	r25, 0x04	; 4
    2492:	29 0e       	add	r2, r25
    2494:	31 1c       	adc	r3, r1
    2496:	ab ad       	ldd	r26, Y+59	; 0x3b
    2498:	bc ad       	ldd	r27, Y+60	; 0x3c
    249a:	ea 17       	cp	r30, r26
    249c:	fb 07       	cpc	r31, r27
    249e:	09 f0       	breq	.+2      	; 0x24a2 <CalcCurvedPath+0xe08>
    24a0:	60 cd       	rjmp	.-1344   	; 0x1f62 <CalcCurvedPath+0x8c8>
               legPositions_g[REAR_RIGHT_LEG_Z][i+positionStart] = z;
               break;
           }
       }
    }
}
    24a2:	c4 5b       	subi	r28, 0xB4	; 180
    24a4:	df 4f       	sbci	r29, 0xFF	; 255
    24a6:	0f b6       	in	r0, 0x3f	; 63
    24a8:	f8 94       	cli
    24aa:	de bf       	out	0x3e, r29	; 62
    24ac:	0f be       	out	0x3f, r0	; 63
    24ae:	cd bf       	out	0x3d, r28	; 61
    24b0:	df 91       	pop	r29
    24b2:	cf 91       	pop	r28
    24b4:	1f 91       	pop	r17
    24b6:	0f 91       	pop	r16
    24b8:	ff 90       	pop	r15
    24ba:	ef 90       	pop	r14
    24bc:	df 90       	pop	r13
    24be:	cf 90       	pop	r12
    24c0:	bf 90       	pop	r11
    24c2:	af 90       	pop	r10
    24c4:	9f 90       	pop	r9
    24c6:	8f 90       	pop	r8
    24c8:	7f 90       	pop	r7
    24ca:	6f 90       	pop	r6
    24cc:	5f 90       	pop	r5
    24ce:	4f 90       	pop	r4
    24d0:	3f 90       	pop	r3
    24d2:	2f 90       	pop	r2
    24d4:	08 95       	ret

000024d6 <__vector_2>:

// För att testa gången
int Direction = 0;
ISR(INT1_vect)
{	
    24d6:	1f 92       	push	r1
    24d8:	0f 92       	push	r0
    24da:	0f b6       	in	r0, 0x3f	; 63
    24dc:	0f 92       	push	r0
    24de:	11 24       	eor	r1, r1
    24e0:	0b b6       	in	r0, 0x3b	; 59
    24e2:	0f 92       	push	r0
    24e4:	0f 93       	push	r16
    24e6:	1f 93       	push	r17
    24e8:	2f 93       	push	r18
    24ea:	3f 93       	push	r19
    24ec:	4f 93       	push	r20
    24ee:	5f 93       	push	r21
    24f0:	6f 93       	push	r22
    24f2:	7f 93       	push	r23
    24f4:	8f 93       	push	r24
    24f6:	9f 93       	push	r25
    24f8:	af 93       	push	r26
    24fa:	bf 93       	push	r27
    24fc:	cf 93       	push	r28
    24fe:	ef 93       	push	r30
    2500:	ff 93       	push	r31
	MoveDynamixel(frontLeftLeg.coxaJoint, actuatorPositions_g[frontLeftLeg.coxaJoint][currentPos_g],20);
    2502:	80 91 1a 01 	lds	r24, 0x011A
    2506:	90 91 1b 01 	lds	r25, 0x011B
    250a:	c4 e1       	ldi	r28, 0x14	; 20
    250c:	c8 9f       	mul	r28, r24
    250e:	f0 01       	movw	r30, r0
    2510:	c9 9f       	mul	r28, r25
    2512:	f0 0d       	add	r31, r0
    2514:	11 24       	eor	r1, r1
    2516:	20 91 20 01 	lds	r18, 0x0120
    251a:	30 91 21 01 	lds	r19, 0x0121
    251e:	e2 0f       	add	r30, r18
    2520:	f3 1f       	adc	r31, r19
    2522:	ee 0f       	add	r30, r30
    2524:	ff 1f       	adc	r31, r31
    2526:	ee 0f       	add	r30, r30
    2528:	ff 1f       	adc	r31, r31
    252a:	e4 51       	subi	r30, 0x14	; 20
    252c:	fb 4f       	sbci	r31, 0xFB	; 251
    252e:	40 81       	ld	r20, Z
    2530:	51 81       	ldd	r21, Z+1	; 0x01
    2532:	62 81       	ldd	r22, Z+2	; 0x02
    2534:	73 81       	ldd	r23, Z+3	; 0x03
    2536:	04 e1       	ldi	r16, 0x14	; 20
    2538:	10 e0       	ldi	r17, 0x00	; 0
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    2542:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(frontLeftLeg.femurJoint, actuatorPositions_g[frontLeftLeg.femurJoint][currentPos_g],20);
    2546:	80 91 1c 01 	lds	r24, 0x011C
    254a:	90 91 1d 01 	lds	r25, 0x011D
    254e:	c8 9f       	mul	r28, r24
    2550:	f0 01       	movw	r30, r0
    2552:	c9 9f       	mul	r28, r25
    2554:	f0 0d       	add	r31, r0
    2556:	11 24       	eor	r1, r1
    2558:	20 91 20 01 	lds	r18, 0x0120
    255c:	30 91 21 01 	lds	r19, 0x0121
    2560:	e2 0f       	add	r30, r18
    2562:	f3 1f       	adc	r31, r19
    2564:	ee 0f       	add	r30, r30
    2566:	ff 1f       	adc	r31, r31
    2568:	ee 0f       	add	r30, r30
    256a:	ff 1f       	adc	r31, r31
    256c:	e4 51       	subi	r30, 0x14	; 20
    256e:	fb 4f       	sbci	r31, 0xFB	; 251
    2570:	40 81       	ld	r20, Z
    2572:	51 81       	ldd	r21, Z+1	; 0x01
    2574:	62 81       	ldd	r22, Z+2	; 0x02
    2576:	73 81       	ldd	r23, Z+3	; 0x03
    2578:	04 e1       	ldi	r16, 0x14	; 20
    257a:	10 e0       	ldi	r17, 0x00	; 0
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    2584:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(frontLeftLeg.tibiaJoint, actuatorPositions_g[frontLeftLeg.tibiaJoint][currentPos_g],20);
    2588:	80 91 1e 01 	lds	r24, 0x011E
    258c:	90 91 1f 01 	lds	r25, 0x011F
    2590:	c8 9f       	mul	r28, r24
    2592:	f0 01       	movw	r30, r0
    2594:	c9 9f       	mul	r28, r25
    2596:	f0 0d       	add	r31, r0
    2598:	11 24       	eor	r1, r1
    259a:	20 91 20 01 	lds	r18, 0x0120
    259e:	30 91 21 01 	lds	r19, 0x0121
    25a2:	e2 0f       	add	r30, r18
    25a4:	f3 1f       	adc	r31, r19
    25a6:	ee 0f       	add	r30, r30
    25a8:	ff 1f       	adc	r31, r31
    25aa:	ee 0f       	add	r30, r30
    25ac:	ff 1f       	adc	r31, r31
    25ae:	e4 51       	subi	r30, 0x14	; 20
    25b0:	fb 4f       	sbci	r31, 0xFB	; 251
    25b2:	40 81       	ld	r20, Z
    25b4:	51 81       	ldd	r21, Z+1	; 0x01
    25b6:	62 81       	ldd	r22, Z+2	; 0x02
    25b8:	73 81       	ldd	r23, Z+3	; 0x03
    25ba:	04 e1       	ldi	r16, 0x14	; 20
    25bc:	10 e0       	ldi	r17, 0x00	; 0
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    25c6:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
   
    MoveDynamixel(frontRightLeg.coxaJoint, actuatorPositions_g[frontRightLeg.coxaJoint][currentPos_g],20);
    25ca:	80 91 12 01 	lds	r24, 0x0112
    25ce:	90 91 13 01 	lds	r25, 0x0113
    25d2:	c8 9f       	mul	r28, r24
    25d4:	f0 01       	movw	r30, r0
    25d6:	c9 9f       	mul	r28, r25
    25d8:	f0 0d       	add	r31, r0
    25da:	11 24       	eor	r1, r1
    25dc:	20 91 20 01 	lds	r18, 0x0120
    25e0:	30 91 21 01 	lds	r19, 0x0121
    25e4:	e2 0f       	add	r30, r18
    25e6:	f3 1f       	adc	r31, r19
    25e8:	ee 0f       	add	r30, r30
    25ea:	ff 1f       	adc	r31, r31
    25ec:	ee 0f       	add	r30, r30
    25ee:	ff 1f       	adc	r31, r31
    25f0:	e4 51       	subi	r30, 0x14	; 20
    25f2:	fb 4f       	sbci	r31, 0xFB	; 251
    25f4:	40 81       	ld	r20, Z
    25f6:	51 81       	ldd	r21, Z+1	; 0x01
    25f8:	62 81       	ldd	r22, Z+2	; 0x02
    25fa:	73 81       	ldd	r23, Z+3	; 0x03
    25fc:	04 e1       	ldi	r16, 0x14	; 20
    25fe:	10 e0       	ldi	r17, 0x00	; 0
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    2608:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(frontRightLeg.femurJoint, actuatorPositions_g[frontRightLeg.femurJoint][currentPos_g],20);
    260c:	80 91 14 01 	lds	r24, 0x0114
    2610:	90 91 15 01 	lds	r25, 0x0115
    2614:	c8 9f       	mul	r28, r24
    2616:	f0 01       	movw	r30, r0
    2618:	c9 9f       	mul	r28, r25
    261a:	f0 0d       	add	r31, r0
    261c:	11 24       	eor	r1, r1
    261e:	20 91 20 01 	lds	r18, 0x0120
    2622:	30 91 21 01 	lds	r19, 0x0121
    2626:	e2 0f       	add	r30, r18
    2628:	f3 1f       	adc	r31, r19
    262a:	ee 0f       	add	r30, r30
    262c:	ff 1f       	adc	r31, r31
    262e:	ee 0f       	add	r30, r30
    2630:	ff 1f       	adc	r31, r31
    2632:	e4 51       	subi	r30, 0x14	; 20
    2634:	fb 4f       	sbci	r31, 0xFB	; 251
    2636:	40 81       	ld	r20, Z
    2638:	51 81       	ldd	r21, Z+1	; 0x01
    263a:	62 81       	ldd	r22, Z+2	; 0x02
    263c:	73 81       	ldd	r23, Z+3	; 0x03
    263e:	04 e1       	ldi	r16, 0x14	; 20
    2640:	10 e0       	ldi	r17, 0x00	; 0
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    264a:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(frontRightLeg.tibiaJoint, actuatorPositions_g[frontRightLeg.tibiaJoint][currentPos_g],20);
    264e:	80 91 16 01 	lds	r24, 0x0116
    2652:	90 91 17 01 	lds	r25, 0x0117
    2656:	c8 9f       	mul	r28, r24
    2658:	f0 01       	movw	r30, r0
    265a:	c9 9f       	mul	r28, r25
    265c:	f0 0d       	add	r31, r0
    265e:	11 24       	eor	r1, r1
    2660:	20 91 20 01 	lds	r18, 0x0120
    2664:	30 91 21 01 	lds	r19, 0x0121
    2668:	e2 0f       	add	r30, r18
    266a:	f3 1f       	adc	r31, r19
    266c:	ee 0f       	add	r30, r30
    266e:	ff 1f       	adc	r31, r31
    2670:	ee 0f       	add	r30, r30
    2672:	ff 1f       	adc	r31, r31
    2674:	e4 51       	subi	r30, 0x14	; 20
    2676:	fb 4f       	sbci	r31, 0xFB	; 251
    2678:	40 81       	ld	r20, Z
    267a:	51 81       	ldd	r21, Z+1	; 0x01
    267c:	62 81       	ldd	r22, Z+2	; 0x02
    267e:	73 81       	ldd	r23, Z+3	; 0x03
    2680:	04 e1       	ldi	r16, 0x14	; 20
    2682:	10 e0       	ldi	r17, 0x00	; 0
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    268c:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
    
    MoveDynamixel(rearRightLeg.coxaJoint, actuatorPositions_g[rearRightLeg.coxaJoint][currentPos_g],20);
    2690:	80 91 02 01 	lds	r24, 0x0102
    2694:	90 91 03 01 	lds	r25, 0x0103
    2698:	c8 9f       	mul	r28, r24
    269a:	f0 01       	movw	r30, r0
    269c:	c9 9f       	mul	r28, r25
    269e:	f0 0d       	add	r31, r0
    26a0:	11 24       	eor	r1, r1
    26a2:	20 91 20 01 	lds	r18, 0x0120
    26a6:	30 91 21 01 	lds	r19, 0x0121
    26aa:	e2 0f       	add	r30, r18
    26ac:	f3 1f       	adc	r31, r19
    26ae:	ee 0f       	add	r30, r30
    26b0:	ff 1f       	adc	r31, r31
    26b2:	ee 0f       	add	r30, r30
    26b4:	ff 1f       	adc	r31, r31
    26b6:	e4 51       	subi	r30, 0x14	; 20
    26b8:	fb 4f       	sbci	r31, 0xFB	; 251
    26ba:	40 81       	ld	r20, Z
    26bc:	51 81       	ldd	r21, Z+1	; 0x01
    26be:	62 81       	ldd	r22, Z+2	; 0x02
    26c0:	73 81       	ldd	r23, Z+3	; 0x03
    26c2:	04 e1       	ldi	r16, 0x14	; 20
    26c4:	10 e0       	ldi	r17, 0x00	; 0
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    26ce:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(rearRightLeg.femurJoint, actuatorPositions_g[rearRightLeg.femurJoint][currentPos_g],20);
    26d2:	80 91 04 01 	lds	r24, 0x0104
    26d6:	90 91 05 01 	lds	r25, 0x0105
    26da:	c8 9f       	mul	r28, r24
    26dc:	f0 01       	movw	r30, r0
    26de:	c9 9f       	mul	r28, r25
    26e0:	f0 0d       	add	r31, r0
    26e2:	11 24       	eor	r1, r1
    26e4:	20 91 20 01 	lds	r18, 0x0120
    26e8:	30 91 21 01 	lds	r19, 0x0121
    26ec:	e2 0f       	add	r30, r18
    26ee:	f3 1f       	adc	r31, r19
    26f0:	ee 0f       	add	r30, r30
    26f2:	ff 1f       	adc	r31, r31
    26f4:	ee 0f       	add	r30, r30
    26f6:	ff 1f       	adc	r31, r31
    26f8:	e4 51       	subi	r30, 0x14	; 20
    26fa:	fb 4f       	sbci	r31, 0xFB	; 251
    26fc:	40 81       	ld	r20, Z
    26fe:	51 81       	ldd	r21, Z+1	; 0x01
    2700:	62 81       	ldd	r22, Z+2	; 0x02
    2702:	73 81       	ldd	r23, Z+3	; 0x03
    2704:	04 e1       	ldi	r16, 0x14	; 20
    2706:	10 e0       	ldi	r17, 0x00	; 0
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    2710:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(rearRightLeg.tibiaJoint, actuatorPositions_g[rearRightLeg.tibiaJoint][currentPos_g],20);
    2714:	80 91 06 01 	lds	r24, 0x0106
    2718:	90 91 07 01 	lds	r25, 0x0107
    271c:	c8 9f       	mul	r28, r24
    271e:	f0 01       	movw	r30, r0
    2720:	c9 9f       	mul	r28, r25
    2722:	f0 0d       	add	r31, r0
    2724:	11 24       	eor	r1, r1
    2726:	20 91 20 01 	lds	r18, 0x0120
    272a:	30 91 21 01 	lds	r19, 0x0121
    272e:	e2 0f       	add	r30, r18
    2730:	f3 1f       	adc	r31, r19
    2732:	ee 0f       	add	r30, r30
    2734:	ff 1f       	adc	r31, r31
    2736:	ee 0f       	add	r30, r30
    2738:	ff 1f       	adc	r31, r31
    273a:	e4 51       	subi	r30, 0x14	; 20
    273c:	fb 4f       	sbci	r31, 0xFB	; 251
    273e:	40 81       	ld	r20, Z
    2740:	51 81       	ldd	r21, Z+1	; 0x01
    2742:	62 81       	ldd	r22, Z+2	; 0x02
    2744:	73 81       	ldd	r23, Z+3	; 0x03
    2746:	04 e1       	ldi	r16, 0x14	; 20
    2748:	10 e0       	ldi	r17, 0x00	; 0
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    2752:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
    
    MoveDynamixel(rearLeftLeg.coxaJoint, actuatorPositions_g[rearLeftLeg.coxaJoint][currentPos_g],20);
    2756:	80 91 0a 01 	lds	r24, 0x010A
    275a:	90 91 0b 01 	lds	r25, 0x010B
    275e:	c8 9f       	mul	r28, r24
    2760:	f0 01       	movw	r30, r0
    2762:	c9 9f       	mul	r28, r25
    2764:	f0 0d       	add	r31, r0
    2766:	11 24       	eor	r1, r1
    2768:	20 91 20 01 	lds	r18, 0x0120
    276c:	30 91 21 01 	lds	r19, 0x0121
    2770:	e2 0f       	add	r30, r18
    2772:	f3 1f       	adc	r31, r19
    2774:	ee 0f       	add	r30, r30
    2776:	ff 1f       	adc	r31, r31
    2778:	ee 0f       	add	r30, r30
    277a:	ff 1f       	adc	r31, r31
    277c:	e4 51       	subi	r30, 0x14	; 20
    277e:	fb 4f       	sbci	r31, 0xFB	; 251
    2780:	40 81       	ld	r20, Z
    2782:	51 81       	ldd	r21, Z+1	; 0x01
    2784:	62 81       	ldd	r22, Z+2	; 0x02
    2786:	73 81       	ldd	r23, Z+3	; 0x03
    2788:	04 e1       	ldi	r16, 0x14	; 20
    278a:	10 e0       	ldi	r17, 0x00	; 0
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    2794:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(rearLeftLeg.femurJoint, actuatorPositions_g[rearLeftLeg.femurJoint][currentPos_g],20);
    2798:	80 91 0c 01 	lds	r24, 0x010C
    279c:	90 91 0d 01 	lds	r25, 0x010D
    27a0:	c8 9f       	mul	r28, r24
    27a2:	f0 01       	movw	r30, r0
    27a4:	c9 9f       	mul	r28, r25
    27a6:	f0 0d       	add	r31, r0
    27a8:	11 24       	eor	r1, r1
    27aa:	20 91 20 01 	lds	r18, 0x0120
    27ae:	30 91 21 01 	lds	r19, 0x0121
    27b2:	e2 0f       	add	r30, r18
    27b4:	f3 1f       	adc	r31, r19
    27b6:	ee 0f       	add	r30, r30
    27b8:	ff 1f       	adc	r31, r31
    27ba:	ee 0f       	add	r30, r30
    27bc:	ff 1f       	adc	r31, r31
    27be:	e4 51       	subi	r30, 0x14	; 20
    27c0:	fb 4f       	sbci	r31, 0xFB	; 251
    27c2:	40 81       	ld	r20, Z
    27c4:	51 81       	ldd	r21, Z+1	; 0x01
    27c6:	62 81       	ldd	r22, Z+2	; 0x02
    27c8:	73 81       	ldd	r23, Z+3	; 0x03
    27ca:	04 e1       	ldi	r16, 0x14	; 20
    27cc:	10 e0       	ldi	r17, 0x00	; 0
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    27d6:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(rearLeftLeg.tibiaJoint, actuatorPositions_g[rearLeftLeg.tibiaJoint][currentPos_g],20);
    27da:	80 91 0e 01 	lds	r24, 0x010E
    27de:	90 91 0f 01 	lds	r25, 0x010F
    27e2:	c8 9f       	mul	r28, r24
    27e4:	f0 01       	movw	r30, r0
    27e6:	c9 9f       	mul	r28, r25
    27e8:	f0 0d       	add	r31, r0
    27ea:	11 24       	eor	r1, r1
    27ec:	20 91 20 01 	lds	r18, 0x0120
    27f0:	30 91 21 01 	lds	r19, 0x0121
    27f4:	e2 0f       	add	r30, r18
    27f6:	f3 1f       	adc	r31, r19
    27f8:	ee 0f       	add	r30, r30
    27fa:	ff 1f       	adc	r31, r31
    27fc:	ee 0f       	add	r30, r30
    27fe:	ff 1f       	adc	r31, r31
    2800:	e4 51       	subi	r30, 0x14	; 20
    2802:	fb 4f       	sbci	r31, 0xFB	; 251
    2804:	40 81       	ld	r20, Z
    2806:	51 81       	ldd	r21, Z+1	; 0x01
    2808:	62 81       	ldd	r22, Z+2	; 0x02
    280a:	73 81       	ldd	r23, Z+3	; 0x03
    280c:	04 e1       	ldi	r16, 0x14	; 20
    280e:	10 e0       	ldi	r17, 0x00	; 0
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    2818:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
                break;
            }
        }
        
    }*/
    currentPos_g++;
    281c:	80 91 20 01 	lds	r24, 0x0120
    2820:	90 91 21 01 	lds	r25, 0x0121
    2824:	01 96       	adiw	r24, 0x01	; 1
    if (currentPos_g > 20)
    2826:	85 31       	cpi	r24, 0x15	; 21
    2828:	91 05       	cpc	r25, r1
    282a:	2c f4       	brge	.+10     	; 0x2836 <__vector_2+0x360>
                break;
            }
        }
        
    }*/
    currentPos_g++;
    282c:	90 93 21 01 	sts	0x0121, r25
    2830:	80 93 20 01 	sts	0x0120, r24
    2834:	06 c0       	rjmp	.+12     	; 0x2842 <__vector_2+0x36c>
    if (currentPos_g > 20)
    {
        currentPos_g = 1;
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	90 93 21 01 	sts	0x0121, r25
    283e:	80 93 20 01 	sts	0x0120, r24
    }
    return;
} 
    2842:	ff 91       	pop	r31
    2844:	ef 91       	pop	r30
    2846:	cf 91       	pop	r28
    2848:	bf 91       	pop	r27
    284a:	af 91       	pop	r26
    284c:	9f 91       	pop	r25
    284e:	8f 91       	pop	r24
    2850:	7f 91       	pop	r23
    2852:	6f 91       	pop	r22
    2854:	5f 91       	pop	r21
    2856:	4f 91       	pop	r20
    2858:	3f 91       	pop	r19
    285a:	2f 91       	pop	r18
    285c:	1f 91       	pop	r17
    285e:	0f 91       	pop	r16
    2860:	0f 90       	pop	r0
    2862:	0b be       	out	0x3b, r0	; 59
    2864:	0f 90       	pop	r0
    2866:	0f be       	out	0x3f, r0	; 63
    2868:	0f 90       	pop	r0
    286a:	1f 90       	pop	r1
    286c:	18 95       	reti

0000286e <move>:


void move()
{
    286e:	0f 93       	push	r16
    2870:	1f 93       	push	r17
    2872:	cf 93       	push	r28
    
    MoveDynamixel(frontLeftLeg.coxaJoint, actuatorPositions_g[frontLeftLeg.coxaJoint][currentPos_g],20);
    2874:	80 91 1a 01 	lds	r24, 0x011A
    2878:	90 91 1b 01 	lds	r25, 0x011B
    287c:	c4 e1       	ldi	r28, 0x14	; 20
    287e:	c8 9f       	mul	r28, r24
    2880:	f0 01       	movw	r30, r0
    2882:	c9 9f       	mul	r28, r25
    2884:	f0 0d       	add	r31, r0
    2886:	11 24       	eor	r1, r1
    2888:	20 91 20 01 	lds	r18, 0x0120
    288c:	30 91 21 01 	lds	r19, 0x0121
    2890:	e2 0f       	add	r30, r18
    2892:	f3 1f       	adc	r31, r19
    2894:	ee 0f       	add	r30, r30
    2896:	ff 1f       	adc	r31, r31
    2898:	ee 0f       	add	r30, r30
    289a:	ff 1f       	adc	r31, r31
    289c:	e4 51       	subi	r30, 0x14	; 20
    289e:	fb 4f       	sbci	r31, 0xFB	; 251
    28a0:	40 81       	ld	r20, Z
    28a2:	51 81       	ldd	r21, Z+1	; 0x01
    28a4:	62 81       	ldd	r22, Z+2	; 0x02
    28a6:	73 81       	ldd	r23, Z+3	; 0x03
    28a8:	04 e1       	ldi	r16, 0x14	; 20
    28aa:	10 e0       	ldi	r17, 0x00	; 0
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    28b4:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(frontLeftLeg.femurJoint, actuatorPositions_g[frontLeftLeg.femurJoint][currentPos_g],20);
    28b8:	80 91 1c 01 	lds	r24, 0x011C
    28bc:	90 91 1d 01 	lds	r25, 0x011D
    28c0:	c8 9f       	mul	r28, r24
    28c2:	f0 01       	movw	r30, r0
    28c4:	c9 9f       	mul	r28, r25
    28c6:	f0 0d       	add	r31, r0
    28c8:	11 24       	eor	r1, r1
    28ca:	20 91 20 01 	lds	r18, 0x0120
    28ce:	30 91 21 01 	lds	r19, 0x0121
    28d2:	e2 0f       	add	r30, r18
    28d4:	f3 1f       	adc	r31, r19
    28d6:	ee 0f       	add	r30, r30
    28d8:	ff 1f       	adc	r31, r31
    28da:	ee 0f       	add	r30, r30
    28dc:	ff 1f       	adc	r31, r31
    28de:	e4 51       	subi	r30, 0x14	; 20
    28e0:	fb 4f       	sbci	r31, 0xFB	; 251
    28e2:	40 81       	ld	r20, Z
    28e4:	51 81       	ldd	r21, Z+1	; 0x01
    28e6:	62 81       	ldd	r22, Z+2	; 0x02
    28e8:	73 81       	ldd	r23, Z+3	; 0x03
    28ea:	04 e1       	ldi	r16, 0x14	; 20
    28ec:	10 e0       	ldi	r17, 0x00	; 0
    28ee:	20 e0       	ldi	r18, 0x00	; 0
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    28f6:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(frontLeftLeg.tibiaJoint, actuatorPositions_g[frontLeftLeg.tibiaJoint][currentPos_g],20);
    28fa:	80 91 1e 01 	lds	r24, 0x011E
    28fe:	90 91 1f 01 	lds	r25, 0x011F
    2902:	c8 9f       	mul	r28, r24
    2904:	f0 01       	movw	r30, r0
    2906:	c9 9f       	mul	r28, r25
    2908:	f0 0d       	add	r31, r0
    290a:	11 24       	eor	r1, r1
    290c:	20 91 20 01 	lds	r18, 0x0120
    2910:	30 91 21 01 	lds	r19, 0x0121
    2914:	e2 0f       	add	r30, r18
    2916:	f3 1f       	adc	r31, r19
    2918:	ee 0f       	add	r30, r30
    291a:	ff 1f       	adc	r31, r31
    291c:	ee 0f       	add	r30, r30
    291e:	ff 1f       	adc	r31, r31
    2920:	e4 51       	subi	r30, 0x14	; 20
    2922:	fb 4f       	sbci	r31, 0xFB	; 251
    2924:	40 81       	ld	r20, Z
    2926:	51 81       	ldd	r21, Z+1	; 0x01
    2928:	62 81       	ldd	r22, Z+2	; 0x02
    292a:	73 81       	ldd	r23, Z+3	; 0x03
    292c:	04 e1       	ldi	r16, 0x14	; 20
    292e:	10 e0       	ldi	r17, 0x00	; 0
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    2938:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
   
    MoveDynamixel(frontRightLeg.coxaJoint, actuatorPositions_g[frontRightLeg.coxaJoint][currentPos_g],20);
    293c:	80 91 12 01 	lds	r24, 0x0112
    2940:	90 91 13 01 	lds	r25, 0x0113
    2944:	c8 9f       	mul	r28, r24
    2946:	f0 01       	movw	r30, r0
    2948:	c9 9f       	mul	r28, r25
    294a:	f0 0d       	add	r31, r0
    294c:	11 24       	eor	r1, r1
    294e:	20 91 20 01 	lds	r18, 0x0120
    2952:	30 91 21 01 	lds	r19, 0x0121
    2956:	e2 0f       	add	r30, r18
    2958:	f3 1f       	adc	r31, r19
    295a:	ee 0f       	add	r30, r30
    295c:	ff 1f       	adc	r31, r31
    295e:	ee 0f       	add	r30, r30
    2960:	ff 1f       	adc	r31, r31
    2962:	e4 51       	subi	r30, 0x14	; 20
    2964:	fb 4f       	sbci	r31, 0xFB	; 251
    2966:	40 81       	ld	r20, Z
    2968:	51 81       	ldd	r21, Z+1	; 0x01
    296a:	62 81       	ldd	r22, Z+2	; 0x02
    296c:	73 81       	ldd	r23, Z+3	; 0x03
    296e:	04 e1       	ldi	r16, 0x14	; 20
    2970:	10 e0       	ldi	r17, 0x00	; 0
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    297a:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(frontRightLeg.femurJoint, actuatorPositions_g[frontRightLeg.femurJoint][currentPos_g],20);
    297e:	80 91 14 01 	lds	r24, 0x0114
    2982:	90 91 15 01 	lds	r25, 0x0115
    2986:	c8 9f       	mul	r28, r24
    2988:	f0 01       	movw	r30, r0
    298a:	c9 9f       	mul	r28, r25
    298c:	f0 0d       	add	r31, r0
    298e:	11 24       	eor	r1, r1
    2990:	20 91 20 01 	lds	r18, 0x0120
    2994:	30 91 21 01 	lds	r19, 0x0121
    2998:	e2 0f       	add	r30, r18
    299a:	f3 1f       	adc	r31, r19
    299c:	ee 0f       	add	r30, r30
    299e:	ff 1f       	adc	r31, r31
    29a0:	ee 0f       	add	r30, r30
    29a2:	ff 1f       	adc	r31, r31
    29a4:	e4 51       	subi	r30, 0x14	; 20
    29a6:	fb 4f       	sbci	r31, 0xFB	; 251
    29a8:	40 81       	ld	r20, Z
    29aa:	51 81       	ldd	r21, Z+1	; 0x01
    29ac:	62 81       	ldd	r22, Z+2	; 0x02
    29ae:	73 81       	ldd	r23, Z+3	; 0x03
    29b0:	04 e1       	ldi	r16, 0x14	; 20
    29b2:	10 e0       	ldi	r17, 0x00	; 0
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    29bc:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(frontRightLeg.tibiaJoint, actuatorPositions_g[frontRightLeg.tibiaJoint][currentPos_g],20);
    29c0:	80 91 16 01 	lds	r24, 0x0116
    29c4:	90 91 17 01 	lds	r25, 0x0117
    29c8:	c8 9f       	mul	r28, r24
    29ca:	f0 01       	movw	r30, r0
    29cc:	c9 9f       	mul	r28, r25
    29ce:	f0 0d       	add	r31, r0
    29d0:	11 24       	eor	r1, r1
    29d2:	20 91 20 01 	lds	r18, 0x0120
    29d6:	30 91 21 01 	lds	r19, 0x0121
    29da:	e2 0f       	add	r30, r18
    29dc:	f3 1f       	adc	r31, r19
    29de:	ee 0f       	add	r30, r30
    29e0:	ff 1f       	adc	r31, r31
    29e2:	ee 0f       	add	r30, r30
    29e4:	ff 1f       	adc	r31, r31
    29e6:	e4 51       	subi	r30, 0x14	; 20
    29e8:	fb 4f       	sbci	r31, 0xFB	; 251
    29ea:	40 81       	ld	r20, Z
    29ec:	51 81       	ldd	r21, Z+1	; 0x01
    29ee:	62 81       	ldd	r22, Z+2	; 0x02
    29f0:	73 81       	ldd	r23, Z+3	; 0x03
    29f2:	04 e1       	ldi	r16, 0x14	; 20
    29f4:	10 e0       	ldi	r17, 0x00	; 0
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    29fe:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
    
    MoveDynamixel(rearRightLeg.coxaJoint, actuatorPositions_g[rearRightLeg.coxaJoint][currentPos_g],20);
    2a02:	80 91 02 01 	lds	r24, 0x0102
    2a06:	90 91 03 01 	lds	r25, 0x0103
    2a0a:	c8 9f       	mul	r28, r24
    2a0c:	f0 01       	movw	r30, r0
    2a0e:	c9 9f       	mul	r28, r25
    2a10:	f0 0d       	add	r31, r0
    2a12:	11 24       	eor	r1, r1
    2a14:	20 91 20 01 	lds	r18, 0x0120
    2a18:	30 91 21 01 	lds	r19, 0x0121
    2a1c:	e2 0f       	add	r30, r18
    2a1e:	f3 1f       	adc	r31, r19
    2a20:	ee 0f       	add	r30, r30
    2a22:	ff 1f       	adc	r31, r31
    2a24:	ee 0f       	add	r30, r30
    2a26:	ff 1f       	adc	r31, r31
    2a28:	e4 51       	subi	r30, 0x14	; 20
    2a2a:	fb 4f       	sbci	r31, 0xFB	; 251
    2a2c:	40 81       	ld	r20, Z
    2a2e:	51 81       	ldd	r21, Z+1	; 0x01
    2a30:	62 81       	ldd	r22, Z+2	; 0x02
    2a32:	73 81       	ldd	r23, Z+3	; 0x03
    2a34:	04 e1       	ldi	r16, 0x14	; 20
    2a36:	10 e0       	ldi	r17, 0x00	; 0
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    2a40:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(rearRightLeg.femurJoint, actuatorPositions_g[rearRightLeg.femurJoint][currentPos_g],20);
    2a44:	80 91 04 01 	lds	r24, 0x0104
    2a48:	90 91 05 01 	lds	r25, 0x0105
    2a4c:	c8 9f       	mul	r28, r24
    2a4e:	f0 01       	movw	r30, r0
    2a50:	c9 9f       	mul	r28, r25
    2a52:	f0 0d       	add	r31, r0
    2a54:	11 24       	eor	r1, r1
    2a56:	20 91 20 01 	lds	r18, 0x0120
    2a5a:	30 91 21 01 	lds	r19, 0x0121
    2a5e:	e2 0f       	add	r30, r18
    2a60:	f3 1f       	adc	r31, r19
    2a62:	ee 0f       	add	r30, r30
    2a64:	ff 1f       	adc	r31, r31
    2a66:	ee 0f       	add	r30, r30
    2a68:	ff 1f       	adc	r31, r31
    2a6a:	e4 51       	subi	r30, 0x14	; 20
    2a6c:	fb 4f       	sbci	r31, 0xFB	; 251
    2a6e:	40 81       	ld	r20, Z
    2a70:	51 81       	ldd	r21, Z+1	; 0x01
    2a72:	62 81       	ldd	r22, Z+2	; 0x02
    2a74:	73 81       	ldd	r23, Z+3	; 0x03
    2a76:	04 e1       	ldi	r16, 0x14	; 20
    2a78:	10 e0       	ldi	r17, 0x00	; 0
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    2a82:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(rearRightLeg.tibiaJoint, actuatorPositions_g[rearRightLeg.tibiaJoint][currentPos_g],20);
    2a86:	80 91 06 01 	lds	r24, 0x0106
    2a8a:	90 91 07 01 	lds	r25, 0x0107
    2a8e:	c8 9f       	mul	r28, r24
    2a90:	f0 01       	movw	r30, r0
    2a92:	c9 9f       	mul	r28, r25
    2a94:	f0 0d       	add	r31, r0
    2a96:	11 24       	eor	r1, r1
    2a98:	20 91 20 01 	lds	r18, 0x0120
    2a9c:	30 91 21 01 	lds	r19, 0x0121
    2aa0:	e2 0f       	add	r30, r18
    2aa2:	f3 1f       	adc	r31, r19
    2aa4:	ee 0f       	add	r30, r30
    2aa6:	ff 1f       	adc	r31, r31
    2aa8:	ee 0f       	add	r30, r30
    2aaa:	ff 1f       	adc	r31, r31
    2aac:	e4 51       	subi	r30, 0x14	; 20
    2aae:	fb 4f       	sbci	r31, 0xFB	; 251
    2ab0:	40 81       	ld	r20, Z
    2ab2:	51 81       	ldd	r21, Z+1	; 0x01
    2ab4:	62 81       	ldd	r22, Z+2	; 0x02
    2ab6:	73 81       	ldd	r23, Z+3	; 0x03
    2ab8:	04 e1       	ldi	r16, 0x14	; 20
    2aba:	10 e0       	ldi	r17, 0x00	; 0
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    2ac4:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
    
    MoveDynamixel(rearLeftLeg.coxaJoint, actuatorPositions_g[rearLeftLeg.coxaJoint][currentPos_g],20);
    2ac8:	80 91 0a 01 	lds	r24, 0x010A
    2acc:	90 91 0b 01 	lds	r25, 0x010B
    2ad0:	c8 9f       	mul	r28, r24
    2ad2:	f0 01       	movw	r30, r0
    2ad4:	c9 9f       	mul	r28, r25
    2ad6:	f0 0d       	add	r31, r0
    2ad8:	11 24       	eor	r1, r1
    2ada:	20 91 20 01 	lds	r18, 0x0120
    2ade:	30 91 21 01 	lds	r19, 0x0121
    2ae2:	e2 0f       	add	r30, r18
    2ae4:	f3 1f       	adc	r31, r19
    2ae6:	ee 0f       	add	r30, r30
    2ae8:	ff 1f       	adc	r31, r31
    2aea:	ee 0f       	add	r30, r30
    2aec:	ff 1f       	adc	r31, r31
    2aee:	e4 51       	subi	r30, 0x14	; 20
    2af0:	fb 4f       	sbci	r31, 0xFB	; 251
    2af2:	40 81       	ld	r20, Z
    2af4:	51 81       	ldd	r21, Z+1	; 0x01
    2af6:	62 81       	ldd	r22, Z+2	; 0x02
    2af8:	73 81       	ldd	r23, Z+3	; 0x03
    2afa:	04 e1       	ldi	r16, 0x14	; 20
    2afc:	10 e0       	ldi	r17, 0x00	; 0
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    2b06:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(rearLeftLeg.femurJoint, actuatorPositions_g[rearLeftLeg.femurJoint][currentPos_g],20);
    2b0a:	80 91 0c 01 	lds	r24, 0x010C
    2b0e:	90 91 0d 01 	lds	r25, 0x010D
    2b12:	c8 9f       	mul	r28, r24
    2b14:	f0 01       	movw	r30, r0
    2b16:	c9 9f       	mul	r28, r25
    2b18:	f0 0d       	add	r31, r0
    2b1a:	11 24       	eor	r1, r1
    2b1c:	20 91 20 01 	lds	r18, 0x0120
    2b20:	30 91 21 01 	lds	r19, 0x0121
    2b24:	e2 0f       	add	r30, r18
    2b26:	f3 1f       	adc	r31, r19
    2b28:	ee 0f       	add	r30, r30
    2b2a:	ff 1f       	adc	r31, r31
    2b2c:	ee 0f       	add	r30, r30
    2b2e:	ff 1f       	adc	r31, r31
    2b30:	e4 51       	subi	r30, 0x14	; 20
    2b32:	fb 4f       	sbci	r31, 0xFB	; 251
    2b34:	40 81       	ld	r20, Z
    2b36:	51 81       	ldd	r21, Z+1	; 0x01
    2b38:	62 81       	ldd	r22, Z+2	; 0x02
    2b3a:	73 81       	ldd	r23, Z+3	; 0x03
    2b3c:	04 e1       	ldi	r16, 0x14	; 20
    2b3e:	10 e0       	ldi	r17, 0x00	; 0
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    2b48:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(rearLeftLeg.tibiaJoint, actuatorPositions_g[rearLeftLeg.tibiaJoint][currentPos_g],20);
    2b4c:	80 91 0e 01 	lds	r24, 0x010E
    2b50:	90 91 0f 01 	lds	r25, 0x010F
    2b54:	c8 9f       	mul	r28, r24
    2b56:	f0 01       	movw	r30, r0
    2b58:	c9 9f       	mul	r28, r25
    2b5a:	f0 0d       	add	r31, r0
    2b5c:	11 24       	eor	r1, r1
    2b5e:	20 91 20 01 	lds	r18, 0x0120
    2b62:	30 91 21 01 	lds	r19, 0x0121
    2b66:	e2 0f       	add	r30, r18
    2b68:	f3 1f       	adc	r31, r19
    2b6a:	ee 0f       	add	r30, r30
    2b6c:	ff 1f       	adc	r31, r31
    2b6e:	ee 0f       	add	r30, r30
    2b70:	ff 1f       	adc	r31, r31
    2b72:	e4 51       	subi	r30, 0x14	; 20
    2b74:	fb 4f       	sbci	r31, 0xFB	; 251
    2b76:	40 81       	ld	r20, Z
    2b78:	51 81       	ldd	r21, Z+1	; 0x01
    2b7a:	62 81       	ldd	r22, Z+2	; 0x02
    2b7c:	73 81       	ldd	r23, Z+3	; 0x03
    2b7e:	04 e1       	ldi	r16, 0x14	; 20
    2b80:	10 e0       	ldi	r17, 0x00	; 0
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    2b8a:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
   
   
   
    currentPos_g++;
    2b8e:	80 91 20 01 	lds	r24, 0x0120
    2b92:	90 91 21 01 	lds	r25, 0x0121
    2b96:	01 96       	adiw	r24, 0x01	; 1
    if (currentPos_g > 20)
    2b98:	85 31       	cpi	r24, 0x15	; 21
    2b9a:	91 05       	cpc	r25, r1
    2b9c:	2c f4       	brge	.+10     	; 0x2ba8 <move+0x33a>
	MoveDynamixel(rearLeftLeg.tibiaJoint, actuatorPositions_g[rearLeftLeg.tibiaJoint][currentPos_g],20);
	USARTReadStatusPacket();
   
   
   
    currentPos_g++;
    2b9e:	90 93 21 01 	sts	0x0121, r25
    2ba2:	80 93 20 01 	sts	0x0120, r24
    2ba6:	06 c0       	rjmp	.+12     	; 0x2bb4 <move+0x346>
    if (currentPos_g > 20)
    {
        currentPos_g = 1;
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	90 93 21 01 	sts	0x0121, r25
    2bb0:	80 93 20 01 	sts	0x0120, r24
    }
    return;
}
    2bb4:	cf 91       	pop	r28
    2bb6:	1f 91       	pop	r17
    2bb8:	0f 91       	pop	r16
    2bba:	08 95       	ret

00002bbc <MakeTrotGait>:

MakeTrotGait()
{
    2bbc:	8f 92       	push	r8
    2bbe:	9f 92       	push	r9
    2bc0:	af 92       	push	r10
    2bc2:	bf 92       	push	r11
    2bc4:	cf 92       	push	r12
    2bc6:	df 92       	push	r13
    2bc8:	ef 92       	push	r14
    2bca:	ff 92       	push	r15
    2bcc:	0f 93       	push	r16
    2bce:	1f 93       	push	r17
    2bd0:	cf 93       	push	r28
    2bd2:	df 93       	push	r29
    CalcCurvedPath(frontLeftLeg,10,1,-startPositionX_g,startPositionY_g-stepLength_g/2,startPositionZ_g,-startPositionX_g,startPositionY_g+stepLength_g/2,startPositionZ_g);
    2bd4:	c0 91 2a 01 	lds	r28, 0x012A
    2bd8:	d0 91 2b 01 	lds	r29, 0x012B
    2bdc:	dd 23       	and	r29, r29
    2bde:	0c f4       	brge	.+2      	; 0x2be2 <MakeTrotGait+0x26>
    2be0:	21 96       	adiw	r28, 0x01	; 1
    2be2:	d5 95       	asr	r29
    2be4:	c7 95       	ror	r28
    2be6:	00 91 26 01 	lds	r16, 0x0126
    2bea:	10 91 27 01 	lds	r17, 0x0127
    2bee:	60 91 24 01 	lds	r22, 0x0124
    2bf2:	70 91 25 01 	lds	r23, 0x0125
    2bf6:	88 27       	eor	r24, r24
    2bf8:	77 fd       	sbrc	r23, 7
    2bfa:	80 95       	com	r24
    2bfc:	98 2f       	mov	r25, r24
    2bfe:	15 d5       	rcall	.+2602   	; 0x362a <__floatsisf>
    2c00:	b6 2e       	mov	r11, r22
    2c02:	a7 2e       	mov	r10, r23
    2c04:	98 2e       	mov	r9, r24
    2c06:	89 2e       	mov	r8, r25
    2c08:	60 91 28 01 	lds	r22, 0x0128
    2c0c:	70 91 29 01 	lds	r23, 0x0129
    2c10:	71 95       	neg	r23
    2c12:	61 95       	neg	r22
    2c14:	71 09       	sbc	r23, r1
    2c16:	88 27       	eor	r24, r24
    2c18:	77 fd       	sbrc	r23, 7
    2c1a:	80 95       	com	r24
    2c1c:	98 2f       	mov	r25, r24
    2c1e:	05 d5       	rcall	.+2570   	; 0x362a <__floatsisf>
    2c20:	c6 2e       	mov	r12, r22
    2c22:	d7 2e       	mov	r13, r23
    2c24:	e8 2e       	mov	r14, r24
    2c26:	f9 2e       	mov	r15, r25
    2c28:	8f 92       	push	r8
    2c2a:	9f 92       	push	r9
    2c2c:	af 92       	push	r10
    2c2e:	bf 92       	push	r11
    2c30:	be 01       	movw	r22, r28
    2c32:	60 0f       	add	r22, r16
    2c34:	71 1f       	adc	r23, r17
    2c36:	88 27       	eor	r24, r24
    2c38:	77 fd       	sbrc	r23, 7
    2c3a:	80 95       	com	r24
    2c3c:	98 2f       	mov	r25, r24
    2c3e:	f5 d4       	rcall	.+2538   	; 0x362a <__floatsisf>
    2c40:	9f 93       	push	r25
    2c42:	8f 93       	push	r24
    2c44:	7f 93       	push	r23
    2c46:	6f 93       	push	r22
    2c48:	ff 92       	push	r15
    2c4a:	ef 92       	push	r14
    2c4c:	df 92       	push	r13
    2c4e:	cf 92       	push	r12
    2c50:	8f 92       	push	r8
    2c52:	9f 92       	push	r9
    2c54:	af 92       	push	r10
    2c56:	bf 92       	push	r11
    2c58:	b8 01       	movw	r22, r16
    2c5a:	6c 1b       	sub	r22, r28
    2c5c:	7d 0b       	sbc	r23, r29
    2c5e:	88 27       	eor	r24, r24
    2c60:	77 fd       	sbrc	r23, 7
    2c62:	80 95       	com	r24
    2c64:	98 2f       	mov	r25, r24
    2c66:	e1 d4       	rcall	.+2498   	; 0x362a <__floatsisf>
    2c68:	9f 93       	push	r25
    2c6a:	8f 93       	push	r24
    2c6c:	7f 93       	push	r23
    2c6e:	6f 93       	push	r22
    2c70:	ac 2c       	mov	r10, r12
    2c72:	bd 2c       	mov	r11, r13
    2c74:	ce 2c       	mov	r12, r14
    2c76:	df 2c       	mov	r13, r15
    2c78:	ee 24       	eor	r14, r14
    2c7a:	e3 94       	inc	r14
    2c7c:	f1 2c       	mov	r15, r1
    2c7e:	0a e0       	ldi	r16, 0x0A	; 10
    2c80:	10 e0       	ldi	r17, 0x00	; 0
    2c82:	20 91 18 01 	lds	r18, 0x0118
    2c86:	30 91 19 01 	lds	r19, 0x0119
    2c8a:	40 91 1a 01 	lds	r20, 0x011A
    2c8e:	50 91 1b 01 	lds	r21, 0x011B
    2c92:	60 91 1c 01 	lds	r22, 0x011C
    2c96:	70 91 1d 01 	lds	r23, 0x011D
    2c9a:	80 91 1e 01 	lds	r24, 0x011E
    2c9e:	90 91 1f 01 	lds	r25, 0x011F
    2ca2:	0e 94 4d 0b 	call	0x169a	; 0x169a <CalcCurvedPath>
    CalcStraightPath(frontLeftLeg,10,11,-startPositionX_g,startPositionY_g+stepLength_g/2,startPositionZ_g,-startPositionX_g,startPositionY_g-stepLength_g/2,startPositionZ_g);
    2ca6:	00 91 26 01 	lds	r16, 0x0126
    2caa:	10 91 27 01 	lds	r17, 0x0127
    2cae:	c0 91 2a 01 	lds	r28, 0x012A
    2cb2:	d0 91 2b 01 	lds	r29, 0x012B
    2cb6:	8d b7       	in	r24, 0x3d	; 61
    2cb8:	9e b7       	in	r25, 0x3e	; 62
    2cba:	44 96       	adiw	r24, 0x14	; 20
    2cbc:	0f b6       	in	r0, 0x3f	; 63
    2cbe:	f8 94       	cli
    2cc0:	9e bf       	out	0x3e, r25	; 62
    2cc2:	0f be       	out	0x3f, r0	; 63
    2cc4:	8d bf       	out	0x3d, r24	; 61
    2cc6:	dd 23       	and	r29, r29
    2cc8:	0c f4       	brge	.+2      	; 0x2ccc <MakeTrotGait+0x110>
    2cca:	21 96       	adiw	r28, 0x01	; 1
    2ccc:	d5 95       	asr	r29
    2cce:	c7 95       	ror	r28
    2cd0:	60 91 24 01 	lds	r22, 0x0124
    2cd4:	70 91 25 01 	lds	r23, 0x0125
    2cd8:	88 27       	eor	r24, r24
    2cda:	77 fd       	sbrc	r23, 7
    2cdc:	80 95       	com	r24
    2cde:	98 2f       	mov	r25, r24
    2ce0:	a4 d4       	rcall	.+2376   	; 0x362a <__floatsisf>
    2ce2:	b6 2e       	mov	r11, r22
    2ce4:	a7 2e       	mov	r10, r23
    2ce6:	98 2e       	mov	r9, r24
    2ce8:	89 2e       	mov	r8, r25
    2cea:	60 91 28 01 	lds	r22, 0x0128
    2cee:	70 91 29 01 	lds	r23, 0x0129
    2cf2:	71 95       	neg	r23
    2cf4:	61 95       	neg	r22
    2cf6:	71 09       	sbc	r23, r1
    2cf8:	88 27       	eor	r24, r24
    2cfa:	77 fd       	sbrc	r23, 7
    2cfc:	80 95       	com	r24
    2cfe:	98 2f       	mov	r25, r24
    2d00:	94 d4       	rcall	.+2344   	; 0x362a <__floatsisf>
    2d02:	c6 2e       	mov	r12, r22
    2d04:	d7 2e       	mov	r13, r23
    2d06:	e8 2e       	mov	r14, r24
    2d08:	f9 2e       	mov	r15, r25
    2d0a:	8f 92       	push	r8
    2d0c:	9f 92       	push	r9
    2d0e:	af 92       	push	r10
    2d10:	bf 92       	push	r11
    2d12:	b8 01       	movw	r22, r16
    2d14:	6c 1b       	sub	r22, r28
    2d16:	7d 0b       	sbc	r23, r29
    2d18:	88 27       	eor	r24, r24
    2d1a:	77 fd       	sbrc	r23, 7
    2d1c:	80 95       	com	r24
    2d1e:	98 2f       	mov	r25, r24
    2d20:	84 d4       	rcall	.+2312   	; 0x362a <__floatsisf>
    2d22:	9f 93       	push	r25
    2d24:	8f 93       	push	r24
    2d26:	7f 93       	push	r23
    2d28:	6f 93       	push	r22
    2d2a:	ff 92       	push	r15
    2d2c:	ef 92       	push	r14
    2d2e:	df 92       	push	r13
    2d30:	cf 92       	push	r12
    2d32:	8f 92       	push	r8
    2d34:	9f 92       	push	r9
    2d36:	af 92       	push	r10
    2d38:	bf 92       	push	r11
    2d3a:	b8 01       	movw	r22, r16
    2d3c:	6c 0f       	add	r22, r28
    2d3e:	7d 1f       	adc	r23, r29
    2d40:	88 27       	eor	r24, r24
    2d42:	77 fd       	sbrc	r23, 7
    2d44:	80 95       	com	r24
    2d46:	98 2f       	mov	r25, r24
    2d48:	70 d4       	rcall	.+2272   	; 0x362a <__floatsisf>
    2d4a:	9f 93       	push	r25
    2d4c:	8f 93       	push	r24
    2d4e:	7f 93       	push	r23
    2d50:	6f 93       	push	r22
    2d52:	ac 2c       	mov	r10, r12
    2d54:	bd 2c       	mov	r11, r13
    2d56:	ce 2c       	mov	r12, r14
    2d58:	df 2c       	mov	r13, r15
    2d5a:	0f 2e       	mov	r0, r31
    2d5c:	fb e0       	ldi	r31, 0x0B	; 11
    2d5e:	ef 2e       	mov	r14, r31
    2d60:	f1 2c       	mov	r15, r1
    2d62:	f0 2d       	mov	r31, r0
    2d64:	0a e0       	ldi	r16, 0x0A	; 10
    2d66:	10 e0       	ldi	r17, 0x00	; 0
    2d68:	20 91 18 01 	lds	r18, 0x0118
    2d6c:	30 91 19 01 	lds	r19, 0x0119
    2d70:	40 91 1a 01 	lds	r20, 0x011A
    2d74:	50 91 1b 01 	lds	r21, 0x011B
    2d78:	60 91 1c 01 	lds	r22, 0x011C
    2d7c:	70 91 1d 01 	lds	r23, 0x011D
    2d80:	80 91 1e 01 	lds	r24, 0x011E
    2d84:	90 91 1f 01 	lds	r25, 0x011F
    2d88:	0e 94 9f 07 	call	0xf3e	; 0xf3e <CalcStraightPath>
    
    CalcCurvedPath(rearRightLeg,10,1,startPositionX_g,-startPositionY_g-stepLength_g/2,startPositionZ_g,startPositionX_g,-startPositionY_g+stepLength_g/2,startPositionZ_g);
    2d8c:	c0 91 2a 01 	lds	r28, 0x012A
    2d90:	d0 91 2b 01 	lds	r29, 0x012B
    2d94:	8d b7       	in	r24, 0x3d	; 61
    2d96:	9e b7       	in	r25, 0x3e	; 62
    2d98:	44 96       	adiw	r24, 0x14	; 20
    2d9a:	0f b6       	in	r0, 0x3f	; 63
    2d9c:	f8 94       	cli
    2d9e:	9e bf       	out	0x3e, r25	; 62
    2da0:	0f be       	out	0x3f, r0	; 63
    2da2:	8d bf       	out	0x3d, r24	; 61
    2da4:	dd 23       	and	r29, r29
    2da6:	0c f4       	brge	.+2      	; 0x2daa <MakeTrotGait+0x1ee>
    2da8:	21 96       	adiw	r28, 0x01	; 1
    2daa:	d5 95       	asr	r29
    2dac:	c7 95       	ror	r28
    2dae:	00 91 26 01 	lds	r16, 0x0126
    2db2:	10 91 27 01 	lds	r17, 0x0127
    2db6:	60 91 24 01 	lds	r22, 0x0124
    2dba:	70 91 25 01 	lds	r23, 0x0125
    2dbe:	88 27       	eor	r24, r24
    2dc0:	77 fd       	sbrc	r23, 7
    2dc2:	80 95       	com	r24
    2dc4:	98 2f       	mov	r25, r24
    2dc6:	31 d4       	rcall	.+2146   	; 0x362a <__floatsisf>
    2dc8:	b6 2e       	mov	r11, r22
    2dca:	a7 2e       	mov	r10, r23
    2dcc:	98 2e       	mov	r9, r24
    2dce:	89 2e       	mov	r8, r25
    2dd0:	60 91 28 01 	lds	r22, 0x0128
    2dd4:	70 91 29 01 	lds	r23, 0x0129
    2dd8:	88 27       	eor	r24, r24
    2dda:	77 fd       	sbrc	r23, 7
    2ddc:	80 95       	com	r24
    2dde:	98 2f       	mov	r25, r24
    2de0:	24 d4       	rcall	.+2120   	; 0x362a <__floatsisf>
    2de2:	c6 2e       	mov	r12, r22
    2de4:	d7 2e       	mov	r13, r23
    2de6:	e8 2e       	mov	r14, r24
    2de8:	f9 2e       	mov	r15, r25
    2dea:	8f 92       	push	r8
    2dec:	9f 92       	push	r9
    2dee:	af 92       	push	r10
    2df0:	bf 92       	push	r11
    2df2:	be 01       	movw	r22, r28
    2df4:	60 1b       	sub	r22, r16
    2df6:	71 0b       	sbc	r23, r17
    2df8:	88 27       	eor	r24, r24
    2dfa:	77 fd       	sbrc	r23, 7
    2dfc:	80 95       	com	r24
    2dfe:	98 2f       	mov	r25, r24
    2e00:	14 d4       	rcall	.+2088   	; 0x362a <__floatsisf>
    2e02:	9f 93       	push	r25
    2e04:	8f 93       	push	r24
    2e06:	7f 93       	push	r23
    2e08:	6f 93       	push	r22
    2e0a:	ff 92       	push	r15
    2e0c:	ef 92       	push	r14
    2e0e:	df 92       	push	r13
    2e10:	cf 92       	push	r12
    2e12:	8f 92       	push	r8
    2e14:	9f 92       	push	r9
    2e16:	af 92       	push	r10
    2e18:	bf 92       	push	r11
    2e1a:	66 27       	eor	r22, r22
    2e1c:	77 27       	eor	r23, r23
    2e1e:	60 1b       	sub	r22, r16
    2e20:	71 0b       	sbc	r23, r17
    2e22:	6c 1b       	sub	r22, r28
    2e24:	7d 0b       	sbc	r23, r29
    2e26:	88 27       	eor	r24, r24
    2e28:	77 fd       	sbrc	r23, 7
    2e2a:	80 95       	com	r24
    2e2c:	98 2f       	mov	r25, r24
    2e2e:	fd d3       	rcall	.+2042   	; 0x362a <__floatsisf>
    2e30:	9f 93       	push	r25
    2e32:	8f 93       	push	r24
    2e34:	7f 93       	push	r23
    2e36:	6f 93       	push	r22
    2e38:	ac 2c       	mov	r10, r12
    2e3a:	bd 2c       	mov	r11, r13
    2e3c:	ce 2c       	mov	r12, r14
    2e3e:	df 2c       	mov	r13, r15
    2e40:	ee 24       	eor	r14, r14
    2e42:	e3 94       	inc	r14
    2e44:	f1 2c       	mov	r15, r1
    2e46:	0a e0       	ldi	r16, 0x0A	; 10
    2e48:	10 e0       	ldi	r17, 0x00	; 0
    2e4a:	20 91 00 01 	lds	r18, 0x0100
    2e4e:	30 91 01 01 	lds	r19, 0x0101
    2e52:	40 91 02 01 	lds	r20, 0x0102
    2e56:	50 91 03 01 	lds	r21, 0x0103
    2e5a:	60 91 04 01 	lds	r22, 0x0104
    2e5e:	70 91 05 01 	lds	r23, 0x0105
    2e62:	80 91 06 01 	lds	r24, 0x0106
    2e66:	90 91 07 01 	lds	r25, 0x0107
    2e6a:	0e 94 4d 0b 	call	0x169a	; 0x169a <CalcCurvedPath>
    CalcStraightPath(rearRightLeg,10,11,startPositionX_g,-startPositionY_g+stepLength_g/2,startPositionZ_g,startPositionX_g,-startPositionY_g-stepLength_g/2,startPositionZ_g);
    2e6e:	c0 91 26 01 	lds	r28, 0x0126
    2e72:	d0 91 27 01 	lds	r29, 0x0127
    2e76:	00 91 2a 01 	lds	r16, 0x012A
    2e7a:	10 91 2b 01 	lds	r17, 0x012B
    2e7e:	8d b7       	in	r24, 0x3d	; 61
    2e80:	9e b7       	in	r25, 0x3e	; 62
    2e82:	44 96       	adiw	r24, 0x14	; 20
    2e84:	0f b6       	in	r0, 0x3f	; 63
    2e86:	f8 94       	cli
    2e88:	9e bf       	out	0x3e, r25	; 62
    2e8a:	0f be       	out	0x3f, r0	; 63
    2e8c:	8d bf       	out	0x3d, r24	; 61
    2e8e:	11 23       	and	r17, r17
    2e90:	14 f4       	brge	.+4      	; 0x2e96 <MakeTrotGait+0x2da>
    2e92:	0f 5f       	subi	r16, 0xFF	; 255
    2e94:	1f 4f       	sbci	r17, 0xFF	; 255
    2e96:	15 95       	asr	r17
    2e98:	07 95       	ror	r16
    2e9a:	60 91 24 01 	lds	r22, 0x0124
    2e9e:	70 91 25 01 	lds	r23, 0x0125
    2ea2:	88 27       	eor	r24, r24
    2ea4:	77 fd       	sbrc	r23, 7
    2ea6:	80 95       	com	r24
    2ea8:	98 2f       	mov	r25, r24
    2eaa:	bf d3       	rcall	.+1918   	; 0x362a <__floatsisf>
    2eac:	b6 2e       	mov	r11, r22
    2eae:	a7 2e       	mov	r10, r23
    2eb0:	98 2e       	mov	r9, r24
    2eb2:	89 2e       	mov	r8, r25
    2eb4:	60 91 28 01 	lds	r22, 0x0128
    2eb8:	70 91 29 01 	lds	r23, 0x0129
    2ebc:	88 27       	eor	r24, r24
    2ebe:	77 fd       	sbrc	r23, 7
    2ec0:	80 95       	com	r24
    2ec2:	98 2f       	mov	r25, r24
    2ec4:	b2 d3       	rcall	.+1892   	; 0x362a <__floatsisf>
    2ec6:	c6 2e       	mov	r12, r22
    2ec8:	d7 2e       	mov	r13, r23
    2eca:	e8 2e       	mov	r14, r24
    2ecc:	f9 2e       	mov	r15, r25
    2ece:	8f 92       	push	r8
    2ed0:	9f 92       	push	r9
    2ed2:	af 92       	push	r10
    2ed4:	bf 92       	push	r11
    2ed6:	66 27       	eor	r22, r22
    2ed8:	77 27       	eor	r23, r23
    2eda:	6c 1b       	sub	r22, r28
    2edc:	7d 0b       	sbc	r23, r29
    2ede:	60 1b       	sub	r22, r16
    2ee0:	71 0b       	sbc	r23, r17
    2ee2:	88 27       	eor	r24, r24
    2ee4:	77 fd       	sbrc	r23, 7
    2ee6:	80 95       	com	r24
    2ee8:	98 2f       	mov	r25, r24
    2eea:	9f d3       	rcall	.+1854   	; 0x362a <__floatsisf>
    2eec:	9f 93       	push	r25
    2eee:	8f 93       	push	r24
    2ef0:	7f 93       	push	r23
    2ef2:	6f 93       	push	r22
    2ef4:	ff 92       	push	r15
    2ef6:	ef 92       	push	r14
    2ef8:	df 92       	push	r13
    2efa:	cf 92       	push	r12
    2efc:	8f 92       	push	r8
    2efe:	9f 92       	push	r9
    2f00:	af 92       	push	r10
    2f02:	bf 92       	push	r11
    2f04:	b8 01       	movw	r22, r16
    2f06:	6c 1b       	sub	r22, r28
    2f08:	7d 0b       	sbc	r23, r29
    2f0a:	88 27       	eor	r24, r24
    2f0c:	77 fd       	sbrc	r23, 7
    2f0e:	80 95       	com	r24
    2f10:	98 2f       	mov	r25, r24
    2f12:	8b d3       	rcall	.+1814   	; 0x362a <__floatsisf>
    2f14:	9f 93       	push	r25
    2f16:	8f 93       	push	r24
    2f18:	7f 93       	push	r23
    2f1a:	6f 93       	push	r22
    2f1c:	ac 2c       	mov	r10, r12
    2f1e:	bd 2c       	mov	r11, r13
    2f20:	ce 2c       	mov	r12, r14
    2f22:	df 2c       	mov	r13, r15
    2f24:	0f 2e       	mov	r0, r31
    2f26:	fb e0       	ldi	r31, 0x0B	; 11
    2f28:	ef 2e       	mov	r14, r31
    2f2a:	f1 2c       	mov	r15, r1
    2f2c:	f0 2d       	mov	r31, r0
    2f2e:	0a e0       	ldi	r16, 0x0A	; 10
    2f30:	10 e0       	ldi	r17, 0x00	; 0
    2f32:	20 91 00 01 	lds	r18, 0x0100
    2f36:	30 91 01 01 	lds	r19, 0x0101
    2f3a:	40 91 02 01 	lds	r20, 0x0102
    2f3e:	50 91 03 01 	lds	r21, 0x0103
    2f42:	60 91 04 01 	lds	r22, 0x0104
    2f46:	70 91 05 01 	lds	r23, 0x0105
    2f4a:	80 91 06 01 	lds	r24, 0x0106
    2f4e:	90 91 07 01 	lds	r25, 0x0107
    2f52:	0e 94 9f 07 	call	0xf3e	; 0xf3e <CalcStraightPath>
    
    CalcStraightPath(rearLeftLeg,10,1,-startPositionX_g,-startPositionY_g+stepLength_g/2,startPositionZ_g,-startPositionX_g,-startPositionY_g-stepLength_g/2,startPositionZ_g);
    2f56:	c0 91 26 01 	lds	r28, 0x0126
    2f5a:	d0 91 27 01 	lds	r29, 0x0127
    2f5e:	00 91 2a 01 	lds	r16, 0x012A
    2f62:	10 91 2b 01 	lds	r17, 0x012B
    2f66:	8d b7       	in	r24, 0x3d	; 61
    2f68:	9e b7       	in	r25, 0x3e	; 62
    2f6a:	44 96       	adiw	r24, 0x14	; 20
    2f6c:	0f b6       	in	r0, 0x3f	; 63
    2f6e:	f8 94       	cli
    2f70:	9e bf       	out	0x3e, r25	; 62
    2f72:	0f be       	out	0x3f, r0	; 63
    2f74:	8d bf       	out	0x3d, r24	; 61
    2f76:	11 23       	and	r17, r17
    2f78:	14 f4       	brge	.+4      	; 0x2f7e <MakeTrotGait+0x3c2>
    2f7a:	0f 5f       	subi	r16, 0xFF	; 255
    2f7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f7e:	15 95       	asr	r17
    2f80:	07 95       	ror	r16
    2f82:	60 91 24 01 	lds	r22, 0x0124
    2f86:	70 91 25 01 	lds	r23, 0x0125
    2f8a:	88 27       	eor	r24, r24
    2f8c:	77 fd       	sbrc	r23, 7
    2f8e:	80 95       	com	r24
    2f90:	98 2f       	mov	r25, r24
    2f92:	4b d3       	rcall	.+1686   	; 0x362a <__floatsisf>
    2f94:	b6 2e       	mov	r11, r22
    2f96:	a7 2e       	mov	r10, r23
    2f98:	98 2e       	mov	r9, r24
    2f9a:	89 2e       	mov	r8, r25
    2f9c:	60 91 28 01 	lds	r22, 0x0128
    2fa0:	70 91 29 01 	lds	r23, 0x0129
    2fa4:	71 95       	neg	r23
    2fa6:	61 95       	neg	r22
    2fa8:	71 09       	sbc	r23, r1
    2faa:	88 27       	eor	r24, r24
    2fac:	77 fd       	sbrc	r23, 7
    2fae:	80 95       	com	r24
    2fb0:	98 2f       	mov	r25, r24
    2fb2:	3b d3       	rcall	.+1654   	; 0x362a <__floatsisf>
    2fb4:	c6 2e       	mov	r12, r22
    2fb6:	d7 2e       	mov	r13, r23
    2fb8:	e8 2e       	mov	r14, r24
    2fba:	f9 2e       	mov	r15, r25
    2fbc:	8f 92       	push	r8
    2fbe:	9f 92       	push	r9
    2fc0:	af 92       	push	r10
    2fc2:	bf 92       	push	r11
    2fc4:	66 27       	eor	r22, r22
    2fc6:	77 27       	eor	r23, r23
    2fc8:	6c 1b       	sub	r22, r28
    2fca:	7d 0b       	sbc	r23, r29
    2fcc:	60 1b       	sub	r22, r16
    2fce:	71 0b       	sbc	r23, r17
    2fd0:	88 27       	eor	r24, r24
    2fd2:	77 fd       	sbrc	r23, 7
    2fd4:	80 95       	com	r24
    2fd6:	98 2f       	mov	r25, r24
    2fd8:	28 d3       	rcall	.+1616   	; 0x362a <__floatsisf>
    2fda:	9f 93       	push	r25
    2fdc:	8f 93       	push	r24
    2fde:	7f 93       	push	r23
    2fe0:	6f 93       	push	r22
    2fe2:	ff 92       	push	r15
    2fe4:	ef 92       	push	r14
    2fe6:	df 92       	push	r13
    2fe8:	cf 92       	push	r12
    2fea:	8f 92       	push	r8
    2fec:	9f 92       	push	r9
    2fee:	af 92       	push	r10
    2ff0:	bf 92       	push	r11
    2ff2:	b8 01       	movw	r22, r16
    2ff4:	6c 1b       	sub	r22, r28
    2ff6:	7d 0b       	sbc	r23, r29
    2ff8:	88 27       	eor	r24, r24
    2ffa:	77 fd       	sbrc	r23, 7
    2ffc:	80 95       	com	r24
    2ffe:	98 2f       	mov	r25, r24
    3000:	14 d3       	rcall	.+1576   	; 0x362a <__floatsisf>
    3002:	9f 93       	push	r25
    3004:	8f 93       	push	r24
    3006:	7f 93       	push	r23
    3008:	6f 93       	push	r22
    300a:	ac 2c       	mov	r10, r12
    300c:	bd 2c       	mov	r11, r13
    300e:	ce 2c       	mov	r12, r14
    3010:	df 2c       	mov	r13, r15
    3012:	ee 24       	eor	r14, r14
    3014:	e3 94       	inc	r14
    3016:	f1 2c       	mov	r15, r1
    3018:	0a e0       	ldi	r16, 0x0A	; 10
    301a:	10 e0       	ldi	r17, 0x00	; 0
    301c:	20 91 08 01 	lds	r18, 0x0108
    3020:	30 91 09 01 	lds	r19, 0x0109
    3024:	40 91 0a 01 	lds	r20, 0x010A
    3028:	50 91 0b 01 	lds	r21, 0x010B
    302c:	60 91 0c 01 	lds	r22, 0x010C
    3030:	70 91 0d 01 	lds	r23, 0x010D
    3034:	80 91 0e 01 	lds	r24, 0x010E
    3038:	90 91 0f 01 	lds	r25, 0x010F
    303c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <CalcStraightPath>
    CalcCurvedPath(rearLeftLeg,10,11,-startPositionX_g,-startPositionY_g-stepLength_g/2,startPositionZ_g,-startPositionX_g,-startPositionY_g+stepLength_g/2,startPositionZ_g);
    3040:	c0 91 2a 01 	lds	r28, 0x012A
    3044:	d0 91 2b 01 	lds	r29, 0x012B
    3048:	8d b7       	in	r24, 0x3d	; 61
    304a:	9e b7       	in	r25, 0x3e	; 62
    304c:	44 96       	adiw	r24, 0x14	; 20
    304e:	0f b6       	in	r0, 0x3f	; 63
    3050:	f8 94       	cli
    3052:	9e bf       	out	0x3e, r25	; 62
    3054:	0f be       	out	0x3f, r0	; 63
    3056:	8d bf       	out	0x3d, r24	; 61
    3058:	dd 23       	and	r29, r29
    305a:	0c f4       	brge	.+2      	; 0x305e <MakeTrotGait+0x4a2>
    305c:	21 96       	adiw	r28, 0x01	; 1
    305e:	d5 95       	asr	r29
    3060:	c7 95       	ror	r28
    3062:	00 91 26 01 	lds	r16, 0x0126
    3066:	10 91 27 01 	lds	r17, 0x0127
    306a:	60 91 24 01 	lds	r22, 0x0124
    306e:	70 91 25 01 	lds	r23, 0x0125
    3072:	88 27       	eor	r24, r24
    3074:	77 fd       	sbrc	r23, 7
    3076:	80 95       	com	r24
    3078:	98 2f       	mov	r25, r24
    307a:	d7 d2       	rcall	.+1454   	; 0x362a <__floatsisf>
    307c:	b6 2e       	mov	r11, r22
    307e:	a7 2e       	mov	r10, r23
    3080:	98 2e       	mov	r9, r24
    3082:	89 2e       	mov	r8, r25
    3084:	60 91 28 01 	lds	r22, 0x0128
    3088:	70 91 29 01 	lds	r23, 0x0129
    308c:	71 95       	neg	r23
    308e:	61 95       	neg	r22
    3090:	71 09       	sbc	r23, r1
    3092:	88 27       	eor	r24, r24
    3094:	77 fd       	sbrc	r23, 7
    3096:	80 95       	com	r24
    3098:	98 2f       	mov	r25, r24
    309a:	c7 d2       	rcall	.+1422   	; 0x362a <__floatsisf>
    309c:	c6 2e       	mov	r12, r22
    309e:	d7 2e       	mov	r13, r23
    30a0:	e8 2e       	mov	r14, r24
    30a2:	f9 2e       	mov	r15, r25
    30a4:	8f 92       	push	r8
    30a6:	9f 92       	push	r9
    30a8:	af 92       	push	r10
    30aa:	bf 92       	push	r11
    30ac:	be 01       	movw	r22, r28
    30ae:	60 1b       	sub	r22, r16
    30b0:	71 0b       	sbc	r23, r17
    30b2:	88 27       	eor	r24, r24
    30b4:	77 fd       	sbrc	r23, 7
    30b6:	80 95       	com	r24
    30b8:	98 2f       	mov	r25, r24
    30ba:	b7 d2       	rcall	.+1390   	; 0x362a <__floatsisf>
    30bc:	9f 93       	push	r25
    30be:	8f 93       	push	r24
    30c0:	7f 93       	push	r23
    30c2:	6f 93       	push	r22
    30c4:	ff 92       	push	r15
    30c6:	ef 92       	push	r14
    30c8:	df 92       	push	r13
    30ca:	cf 92       	push	r12
    30cc:	8f 92       	push	r8
    30ce:	9f 92       	push	r9
    30d0:	af 92       	push	r10
    30d2:	bf 92       	push	r11
    30d4:	66 27       	eor	r22, r22
    30d6:	77 27       	eor	r23, r23
    30d8:	60 1b       	sub	r22, r16
    30da:	71 0b       	sbc	r23, r17
    30dc:	6c 1b       	sub	r22, r28
    30de:	7d 0b       	sbc	r23, r29
    30e0:	88 27       	eor	r24, r24
    30e2:	77 fd       	sbrc	r23, 7
    30e4:	80 95       	com	r24
    30e6:	98 2f       	mov	r25, r24
    30e8:	a0 d2       	rcall	.+1344   	; 0x362a <__floatsisf>
    30ea:	9f 93       	push	r25
    30ec:	8f 93       	push	r24
    30ee:	7f 93       	push	r23
    30f0:	6f 93       	push	r22
    30f2:	ac 2c       	mov	r10, r12
    30f4:	bd 2c       	mov	r11, r13
    30f6:	ce 2c       	mov	r12, r14
    30f8:	df 2c       	mov	r13, r15
    30fa:	0f 2e       	mov	r0, r31
    30fc:	fb e0       	ldi	r31, 0x0B	; 11
    30fe:	ef 2e       	mov	r14, r31
    3100:	f1 2c       	mov	r15, r1
    3102:	f0 2d       	mov	r31, r0
    3104:	0a e0       	ldi	r16, 0x0A	; 10
    3106:	10 e0       	ldi	r17, 0x00	; 0
    3108:	20 91 08 01 	lds	r18, 0x0108
    310c:	30 91 09 01 	lds	r19, 0x0109
    3110:	40 91 0a 01 	lds	r20, 0x010A
    3114:	50 91 0b 01 	lds	r21, 0x010B
    3118:	60 91 0c 01 	lds	r22, 0x010C
    311c:	70 91 0d 01 	lds	r23, 0x010D
    3120:	80 91 0e 01 	lds	r24, 0x010E
    3124:	90 91 0f 01 	lds	r25, 0x010F
    3128:	0e 94 4d 0b 	call	0x169a	; 0x169a <CalcCurvedPath>
    
    CalcStraightPath(frontRightLeg,10,1,startPositionX_g,startPositionY_g+stepLength_g/2,startPositionZ_g,startPositionX_g,startPositionY_g-stepLength_g/2,startPositionZ_g);
    312c:	00 91 26 01 	lds	r16, 0x0126
    3130:	10 91 27 01 	lds	r17, 0x0127
    3134:	c0 91 2a 01 	lds	r28, 0x012A
    3138:	d0 91 2b 01 	lds	r29, 0x012B
    313c:	8d b7       	in	r24, 0x3d	; 61
    313e:	9e b7       	in	r25, 0x3e	; 62
    3140:	44 96       	adiw	r24, 0x14	; 20
    3142:	0f b6       	in	r0, 0x3f	; 63
    3144:	f8 94       	cli
    3146:	9e bf       	out	0x3e, r25	; 62
    3148:	0f be       	out	0x3f, r0	; 63
    314a:	8d bf       	out	0x3d, r24	; 61
    314c:	dd 23       	and	r29, r29
    314e:	0c f4       	brge	.+2      	; 0x3152 <MakeTrotGait+0x596>
    3150:	21 96       	adiw	r28, 0x01	; 1
    3152:	d5 95       	asr	r29
    3154:	c7 95       	ror	r28
    3156:	60 91 24 01 	lds	r22, 0x0124
    315a:	70 91 25 01 	lds	r23, 0x0125
    315e:	88 27       	eor	r24, r24
    3160:	77 fd       	sbrc	r23, 7
    3162:	80 95       	com	r24
    3164:	98 2f       	mov	r25, r24
    3166:	61 d2       	rcall	.+1218   	; 0x362a <__floatsisf>
    3168:	b6 2e       	mov	r11, r22
    316a:	a7 2e       	mov	r10, r23
    316c:	98 2e       	mov	r9, r24
    316e:	89 2e       	mov	r8, r25
    3170:	60 91 28 01 	lds	r22, 0x0128
    3174:	70 91 29 01 	lds	r23, 0x0129
    3178:	88 27       	eor	r24, r24
    317a:	77 fd       	sbrc	r23, 7
    317c:	80 95       	com	r24
    317e:	98 2f       	mov	r25, r24
    3180:	54 d2       	rcall	.+1192   	; 0x362a <__floatsisf>
    3182:	c6 2e       	mov	r12, r22
    3184:	d7 2e       	mov	r13, r23
    3186:	e8 2e       	mov	r14, r24
    3188:	f9 2e       	mov	r15, r25
    318a:	8f 92       	push	r8
    318c:	9f 92       	push	r9
    318e:	af 92       	push	r10
    3190:	bf 92       	push	r11
    3192:	b8 01       	movw	r22, r16
    3194:	6c 1b       	sub	r22, r28
    3196:	7d 0b       	sbc	r23, r29
    3198:	88 27       	eor	r24, r24
    319a:	77 fd       	sbrc	r23, 7
    319c:	80 95       	com	r24
    319e:	98 2f       	mov	r25, r24
    31a0:	44 d2       	rcall	.+1160   	; 0x362a <__floatsisf>
    31a2:	9f 93       	push	r25
    31a4:	8f 93       	push	r24
    31a6:	7f 93       	push	r23
    31a8:	6f 93       	push	r22
    31aa:	ff 92       	push	r15
    31ac:	ef 92       	push	r14
    31ae:	df 92       	push	r13
    31b0:	cf 92       	push	r12
    31b2:	8f 92       	push	r8
    31b4:	9f 92       	push	r9
    31b6:	af 92       	push	r10
    31b8:	bf 92       	push	r11
    31ba:	b8 01       	movw	r22, r16
    31bc:	6c 0f       	add	r22, r28
    31be:	7d 1f       	adc	r23, r29
    31c0:	88 27       	eor	r24, r24
    31c2:	77 fd       	sbrc	r23, 7
    31c4:	80 95       	com	r24
    31c6:	98 2f       	mov	r25, r24
    31c8:	30 d2       	rcall	.+1120   	; 0x362a <__floatsisf>
    31ca:	9f 93       	push	r25
    31cc:	8f 93       	push	r24
    31ce:	7f 93       	push	r23
    31d0:	6f 93       	push	r22
    31d2:	ac 2c       	mov	r10, r12
    31d4:	bd 2c       	mov	r11, r13
    31d6:	ce 2c       	mov	r12, r14
    31d8:	df 2c       	mov	r13, r15
    31da:	ee 24       	eor	r14, r14
    31dc:	e3 94       	inc	r14
    31de:	f1 2c       	mov	r15, r1
    31e0:	0a e0       	ldi	r16, 0x0A	; 10
    31e2:	10 e0       	ldi	r17, 0x00	; 0
    31e4:	20 91 10 01 	lds	r18, 0x0110
    31e8:	30 91 11 01 	lds	r19, 0x0111
    31ec:	40 91 12 01 	lds	r20, 0x0112
    31f0:	50 91 13 01 	lds	r21, 0x0113
    31f4:	60 91 14 01 	lds	r22, 0x0114
    31f8:	70 91 15 01 	lds	r23, 0x0115
    31fc:	80 91 16 01 	lds	r24, 0x0116
    3200:	90 91 17 01 	lds	r25, 0x0117
    3204:	0e 94 9f 07 	call	0xf3e	; 0xf3e <CalcStraightPath>
    CalcCurvedPath(frontRightLeg,10,11,startPositionX_g,startPositionY_g-stepLength_g/2,startPositionZ_g,startPositionX_g,startPositionY_g+stepLength_g/2,startPositionZ_g);
    3208:	c0 90 2a 01 	lds	r12, 0x012A
    320c:	d0 90 2b 01 	lds	r13, 0x012B
    3210:	8d b7       	in	r24, 0x3d	; 61
    3212:	9e b7       	in	r25, 0x3e	; 62
    3214:	44 96       	adiw	r24, 0x14	; 20
    3216:	0f b6       	in	r0, 0x3f	; 63
    3218:	f8 94       	cli
    321a:	9e bf       	out	0x3e, r25	; 62
    321c:	0f be       	out	0x3f, r0	; 63
    321e:	8d bf       	out	0x3d, r24	; 61
    3220:	dd 20       	and	r13, r13
    3222:	1c f4       	brge	.+6      	; 0x322a <MakeTrotGait+0x66e>
    3224:	9f ef       	ldi	r25, 0xFF	; 255
    3226:	c9 1a       	sub	r12, r25
    3228:	d9 0a       	sbc	r13, r25
    322a:	d5 94       	asr	r13
    322c:	c7 94       	ror	r12
    322e:	a0 90 26 01 	lds	r10, 0x0126
    3232:	b0 90 27 01 	lds	r11, 0x0127
    3236:	60 91 24 01 	lds	r22, 0x0124
    323a:	70 91 25 01 	lds	r23, 0x0125
    323e:	88 27       	eor	r24, r24
    3240:	77 fd       	sbrc	r23, 7
    3242:	80 95       	com	r24
    3244:	98 2f       	mov	r25, r24
    3246:	f1 d1       	rcall	.+994    	; 0x362a <__floatsisf>
    3248:	f6 2e       	mov	r15, r22
    324a:	e7 2e       	mov	r14, r23
    324c:	98 2e       	mov	r9, r24
    324e:	89 2e       	mov	r8, r25
    3250:	60 91 28 01 	lds	r22, 0x0128
    3254:	70 91 29 01 	lds	r23, 0x0129
    3258:	88 27       	eor	r24, r24
    325a:	77 fd       	sbrc	r23, 7
    325c:	80 95       	com	r24
    325e:	98 2f       	mov	r25, r24
    3260:	e4 d1       	rcall	.+968    	; 0x362a <__floatsisf>
    3262:	06 2f       	mov	r16, r22
    3264:	17 2f       	mov	r17, r23
    3266:	d8 2f       	mov	r29, r24
    3268:	c9 2f       	mov	r28, r25
    326a:	8f 92       	push	r8
    326c:	9f 92       	push	r9
    326e:	ef 92       	push	r14
    3270:	ff 92       	push	r15
    3272:	b6 01       	movw	r22, r12
    3274:	6a 0d       	add	r22, r10
    3276:	7b 1d       	adc	r23, r11
    3278:	88 27       	eor	r24, r24
    327a:	77 fd       	sbrc	r23, 7
    327c:	80 95       	com	r24
    327e:	98 2f       	mov	r25, r24
    3280:	d4 d1       	rcall	.+936    	; 0x362a <__floatsisf>
    3282:	9f 93       	push	r25
    3284:	8f 93       	push	r24
    3286:	7f 93       	push	r23
    3288:	6f 93       	push	r22
    328a:	cf 93       	push	r28
    328c:	df 93       	push	r29
    328e:	1f 93       	push	r17
    3290:	0f 93       	push	r16
    3292:	8f 92       	push	r8
    3294:	9f 92       	push	r9
    3296:	ef 92       	push	r14
    3298:	ff 92       	push	r15
    329a:	b5 01       	movw	r22, r10
    329c:	6c 19       	sub	r22, r12
    329e:	7d 09       	sbc	r23, r13
    32a0:	88 27       	eor	r24, r24
    32a2:	77 fd       	sbrc	r23, 7
    32a4:	80 95       	com	r24
    32a6:	98 2f       	mov	r25, r24
    32a8:	c0 d1       	rcall	.+896    	; 0x362a <__floatsisf>
    32aa:	9f 93       	push	r25
    32ac:	8f 93       	push	r24
    32ae:	7f 93       	push	r23
    32b0:	6f 93       	push	r22
    32b2:	a0 2e       	mov	r10, r16
    32b4:	b1 2e       	mov	r11, r17
    32b6:	cd 2e       	mov	r12, r29
    32b8:	dc 2e       	mov	r13, r28
    32ba:	0f 2e       	mov	r0, r31
    32bc:	fb e0       	ldi	r31, 0x0B	; 11
    32be:	ef 2e       	mov	r14, r31
    32c0:	f1 2c       	mov	r15, r1
    32c2:	f0 2d       	mov	r31, r0
    32c4:	0a e0       	ldi	r16, 0x0A	; 10
    32c6:	10 e0       	ldi	r17, 0x00	; 0
    32c8:	20 91 10 01 	lds	r18, 0x0110
    32cc:	30 91 11 01 	lds	r19, 0x0111
    32d0:	40 91 12 01 	lds	r20, 0x0112
    32d4:	50 91 13 01 	lds	r21, 0x0113
    32d8:	60 91 14 01 	lds	r22, 0x0114
    32dc:	70 91 15 01 	lds	r23, 0x0115
    32e0:	80 91 16 01 	lds	r24, 0x0116
    32e4:	90 91 17 01 	lds	r25, 0x0117
    32e8:	0e 94 4d 0b 	call	0x169a	; 0x169a <CalcCurvedPath>
    32ec:	8d b7       	in	r24, 0x3d	; 61
    32ee:	9e b7       	in	r25, 0x3e	; 62
    32f0:	44 96       	adiw	r24, 0x14	; 20
    32f2:	0f b6       	in	r0, 0x3f	; 63
    32f4:	f8 94       	cli
    32f6:	9e bf       	out	0x3e, r25	; 62
    32f8:	0f be       	out	0x3f, r0	; 63
    32fa:	8d bf       	out	0x3d, r24	; 61

}
    32fc:	df 91       	pop	r29
    32fe:	cf 91       	pop	r28
    3300:	1f 91       	pop	r17
    3302:	0f 91       	pop	r16
    3304:	ff 90       	pop	r15
    3306:	ef 90       	pop	r14
    3308:	df 90       	pop	r13
    330a:	cf 90       	pop	r12
    330c:	bf 90       	pop	r11
    330e:	af 90       	pop	r10
    3310:	9f 90       	pop	r9
    3312:	8f 90       	pop	r8
    3314:	08 95       	ret

00003316 <main>:


int main(void)
{
	initUSART();
    3316:	0e 94 af 00 	call	0x15e	; 0x15e <initUSART>
	cli();
    331a:	f8 94       	cli
	EICRA = 0b1100; // Stigande flank på INT1 genererar avbrott
    331c:	8c e0       	ldi	r24, 0x0C	; 12
    331e:	80 93 69 00 	sts	0x0069, r24
	EIMSK = (EIMSK | 2); // Möjliggör externa avbrott på INT0, pinne 40  
    3322:	e9 9a       	sbi	0x1d, 1	; 29
	DDRA = 0;
    3324:	11 b8       	out	0x01, r1	; 1
	// MCUCR = (MCUCR | (1 << PUD)); Något som testades för att se om det gjorde något
	//PORTA |= (1 << PORTA0);
	 // Möjliggör globala avbrott
	sei();
    3326:	78 94       	sei
	MoveDynamixel(3,225 - 45, 10);
	USARTReadStatusPacket();
	MoveDynamixel(5,120 - 45 ,10);
	USARTReadStatusPacket();
	*/
    timer0Init();
    3328:	0e 94 91 00 	call	0x122	; 0x122 <timer0Init>
            	totOverflow_g = 0;
            	
        	}
    	}
	}*/
	MakeTrotGait();
    332c:	47 dc       	rcall	.-1906   	; 0x2bbc <MakeTrotGait>
    MoveToStartPosition();
    332e:	0e 94 ca 06 	call	0xd94	; 0xd94 <MoveToStartPosition>
    while (1)
    {
        // kolla om antalet overflows är mer än 52
    	if (totOverflow_g >= 12)
    3332:	80 91 ac 08 	lds	r24, 0x08AC
    3336:	8c 30       	cpi	r24, 0x0C	; 12
    3338:	e0 f3       	brcs	.-8      	; 0x3332 <main+0x1c>
    	{
        	// när detta skett ska timern räkna upp ytterligare 53 tick för att exakt 50ms ska ha passerat
        	if (TCNT0 >= 53)
    333a:	86 b5       	in	r24, 0x26	; 38
    333c:	85 33       	cpi	r24, 0x35	; 53
    333e:	c8 f3       	brcs	.-14     	; 0x3332 <main+0x1c>
        	{
            	// xor-tilldelning med en etta gör att biten togglas
            	move();
    3340:	96 da       	rcall	.-2772   	; 0x286e <move>
            	TCNT0 = 0;			// Återställ räknaren
    3342:	16 bc       	out	0x26, r1	; 38
            	totOverflow_g = 0;
    3344:	10 92 ac 08 	sts	0x08AC, r1
    3348:	f4 cf       	rjmp	.-24     	; 0x3332 <main+0x1c>

0000334a <acos>:
    334a:	9f 93       	push	r25
    334c:	9f 77       	andi	r25, 0x7F	; 127
    334e:	a8 d1       	rcall	.+848    	; 0x36a0 <__fp_arccos>
    3350:	0f 90       	pop	r0
    3352:	00 20       	and	r0, r0
    3354:	3a f4       	brpl	.+14     	; 0x3364 <acos+0x1a>
    3356:	90 58       	subi	r25, 0x80	; 128
    3358:	a2 ea       	ldi	r26, 0xA2	; 162
    335a:	2a ed       	ldi	r18, 0xDA	; 218
    335c:	3f e0       	ldi	r19, 0x0F	; 15
    335e:	49 e4       	ldi	r20, 0x49	; 73
    3360:	50 e4       	ldi	r21, 0x40	; 64
    3362:	13 d0       	rcall	.+38     	; 0x338a <__addsf3x>
    3364:	f4 c1       	rjmp	.+1000   	; 0x374e <__fp_round>

00003366 <__subsf3>:
    3366:	50 58       	subi	r21, 0x80	; 128

00003368 <__addsf3>:
    3368:	bb 27       	eor	r27, r27
    336a:	aa 27       	eor	r26, r26
    336c:	0e d0       	rcall	.+28     	; 0x338a <__addsf3x>
    336e:	ef c1       	rjmp	.+990    	; 0x374e <__fp_round>
    3370:	e0 d1       	rcall	.+960    	; 0x3732 <__fp_pscA>
    3372:	30 f0       	brcs	.+12     	; 0x3380 <__addsf3+0x18>
    3374:	e5 d1       	rcall	.+970    	; 0x3740 <__fp_pscB>
    3376:	20 f0       	brcs	.+8      	; 0x3380 <__addsf3+0x18>
    3378:	31 f4       	brne	.+12     	; 0x3386 <__addsf3+0x1e>
    337a:	9f 3f       	cpi	r25, 0xFF	; 255
    337c:	11 f4       	brne	.+4      	; 0x3382 <__addsf3+0x1a>
    337e:	1e f4       	brtc	.+6      	; 0x3386 <__addsf3+0x1e>
    3380:	b0 c1       	rjmp	.+864    	; 0x36e2 <__fp_nan>
    3382:	0e f4       	brtc	.+2      	; 0x3386 <__addsf3+0x1e>
    3384:	e0 95       	com	r30
    3386:	e7 fb       	bst	r30, 7
    3388:	a6 c1       	rjmp	.+844    	; 0x36d6 <__fp_inf>

0000338a <__addsf3x>:
    338a:	e9 2f       	mov	r30, r25
    338c:	f1 d1       	rcall	.+994    	; 0x3770 <__fp_split3>
    338e:	80 f3       	brcs	.-32     	; 0x3370 <__addsf3+0x8>
    3390:	ba 17       	cp	r27, r26
    3392:	62 07       	cpc	r22, r18
    3394:	73 07       	cpc	r23, r19
    3396:	84 07       	cpc	r24, r20
    3398:	95 07       	cpc	r25, r21
    339a:	18 f0       	brcs	.+6      	; 0x33a2 <__addsf3x+0x18>
    339c:	71 f4       	brne	.+28     	; 0x33ba <__addsf3x+0x30>
    339e:	9e f5       	brtc	.+102    	; 0x3406 <__addsf3x+0x7c>
    33a0:	09 c2       	rjmp	.+1042   	; 0x37b4 <__fp_zero>
    33a2:	0e f4       	brtc	.+2      	; 0x33a6 <__addsf3x+0x1c>
    33a4:	e0 95       	com	r30
    33a6:	0b 2e       	mov	r0, r27
    33a8:	ba 2f       	mov	r27, r26
    33aa:	a0 2d       	mov	r26, r0
    33ac:	0b 01       	movw	r0, r22
    33ae:	b9 01       	movw	r22, r18
    33b0:	90 01       	movw	r18, r0
    33b2:	0c 01       	movw	r0, r24
    33b4:	ca 01       	movw	r24, r20
    33b6:	a0 01       	movw	r20, r0
    33b8:	11 24       	eor	r1, r1
    33ba:	ff 27       	eor	r31, r31
    33bc:	59 1b       	sub	r21, r25
    33be:	99 f0       	breq	.+38     	; 0x33e6 <__addsf3x+0x5c>
    33c0:	59 3f       	cpi	r21, 0xF9	; 249
    33c2:	50 f4       	brcc	.+20     	; 0x33d8 <__addsf3x+0x4e>
    33c4:	50 3e       	cpi	r21, 0xE0	; 224
    33c6:	68 f1       	brcs	.+90     	; 0x3422 <__addsf3x+0x98>
    33c8:	1a 16       	cp	r1, r26
    33ca:	f0 40       	sbci	r31, 0x00	; 0
    33cc:	a2 2f       	mov	r26, r18
    33ce:	23 2f       	mov	r18, r19
    33d0:	34 2f       	mov	r19, r20
    33d2:	44 27       	eor	r20, r20
    33d4:	58 5f       	subi	r21, 0xF8	; 248
    33d6:	f3 cf       	rjmp	.-26     	; 0x33be <__addsf3x+0x34>
    33d8:	46 95       	lsr	r20
    33da:	37 95       	ror	r19
    33dc:	27 95       	ror	r18
    33de:	a7 95       	ror	r26
    33e0:	f0 40       	sbci	r31, 0x00	; 0
    33e2:	53 95       	inc	r21
    33e4:	c9 f7       	brne	.-14     	; 0x33d8 <__addsf3x+0x4e>
    33e6:	7e f4       	brtc	.+30     	; 0x3406 <__addsf3x+0x7c>
    33e8:	1f 16       	cp	r1, r31
    33ea:	ba 0b       	sbc	r27, r26
    33ec:	62 0b       	sbc	r22, r18
    33ee:	73 0b       	sbc	r23, r19
    33f0:	84 0b       	sbc	r24, r20
    33f2:	ba f0       	brmi	.+46     	; 0x3422 <__addsf3x+0x98>
    33f4:	91 50       	subi	r25, 0x01	; 1
    33f6:	a1 f0       	breq	.+40     	; 0x3420 <__addsf3x+0x96>
    33f8:	ff 0f       	add	r31, r31
    33fa:	bb 1f       	adc	r27, r27
    33fc:	66 1f       	adc	r22, r22
    33fe:	77 1f       	adc	r23, r23
    3400:	88 1f       	adc	r24, r24
    3402:	c2 f7       	brpl	.-16     	; 0x33f4 <__addsf3x+0x6a>
    3404:	0e c0       	rjmp	.+28     	; 0x3422 <__addsf3x+0x98>
    3406:	ba 0f       	add	r27, r26
    3408:	62 1f       	adc	r22, r18
    340a:	73 1f       	adc	r23, r19
    340c:	84 1f       	adc	r24, r20
    340e:	48 f4       	brcc	.+18     	; 0x3422 <__addsf3x+0x98>
    3410:	87 95       	ror	r24
    3412:	77 95       	ror	r23
    3414:	67 95       	ror	r22
    3416:	b7 95       	ror	r27
    3418:	f7 95       	ror	r31
    341a:	9e 3f       	cpi	r25, 0xFE	; 254
    341c:	08 f0       	brcs	.+2      	; 0x3420 <__addsf3x+0x96>
    341e:	b3 cf       	rjmp	.-154    	; 0x3386 <__addsf3+0x1e>
    3420:	93 95       	inc	r25
    3422:	88 0f       	add	r24, r24
    3424:	08 f0       	brcs	.+2      	; 0x3428 <__addsf3x+0x9e>
    3426:	99 27       	eor	r25, r25
    3428:	ee 0f       	add	r30, r30
    342a:	97 95       	ror	r25
    342c:	87 95       	ror	r24
    342e:	08 95       	ret
    3430:	80 d1       	rcall	.+768    	; 0x3732 <__fp_pscA>
    3432:	58 f0       	brcs	.+22     	; 0x344a <__addsf3x+0xc0>
    3434:	80 e8       	ldi	r24, 0x80	; 128
    3436:	91 e0       	ldi	r25, 0x01	; 1
    3438:	09 f4       	brne	.+2      	; 0x343c <__addsf3x+0xb2>
    343a:	9e ef       	ldi	r25, 0xFE	; 254
    343c:	81 d1       	rcall	.+770    	; 0x3740 <__fp_pscB>
    343e:	28 f0       	brcs	.+10     	; 0x344a <__addsf3x+0xc0>
    3440:	40 e8       	ldi	r20, 0x80	; 128
    3442:	51 e0       	ldi	r21, 0x01	; 1
    3444:	59 f4       	brne	.+22     	; 0x345c <atan2+0xe>
    3446:	5e ef       	ldi	r21, 0xFE	; 254
    3448:	09 c0       	rjmp	.+18     	; 0x345c <atan2+0xe>
    344a:	4b c1       	rjmp	.+662    	; 0x36e2 <__fp_nan>
    344c:	b3 c1       	rjmp	.+870    	; 0x37b4 <__fp_zero>

0000344e <atan2>:
    344e:	e9 2f       	mov	r30, r25
    3450:	e0 78       	andi	r30, 0x80	; 128
    3452:	8e d1       	rcall	.+796    	; 0x3770 <__fp_split3>
    3454:	68 f3       	brcs	.-38     	; 0x3430 <__addsf3x+0xa6>
    3456:	09 2e       	mov	r0, r25
    3458:	05 2a       	or	r0, r21
    345a:	c1 f3       	breq	.-16     	; 0x344c <__addsf3x+0xc2>
    345c:	26 17       	cp	r18, r22
    345e:	37 07       	cpc	r19, r23
    3460:	48 07       	cpc	r20, r24
    3462:	59 07       	cpc	r21, r25
    3464:	38 f0       	brcs	.+14     	; 0x3474 <atan2+0x26>
    3466:	0e 2e       	mov	r0, r30
    3468:	07 f8       	bld	r0, 7
    346a:	e0 25       	eor	r30, r0
    346c:	69 f0       	breq	.+26     	; 0x3488 <atan2+0x3a>
    346e:	e0 25       	eor	r30, r0
    3470:	e0 64       	ori	r30, 0x40	; 64
    3472:	0a c0       	rjmp	.+20     	; 0x3488 <atan2+0x3a>
    3474:	ef 63       	ori	r30, 0x3F	; 63
    3476:	07 f8       	bld	r0, 7
    3478:	00 94       	com	r0
    347a:	07 fa       	bst	r0, 7
    347c:	db 01       	movw	r26, r22
    347e:	b9 01       	movw	r22, r18
    3480:	9d 01       	movw	r18, r26
    3482:	dc 01       	movw	r26, r24
    3484:	ca 01       	movw	r24, r20
    3486:	ad 01       	movw	r20, r26
    3488:	ef 93       	push	r30
    348a:	43 d0       	rcall	.+134    	; 0x3512 <__divsf3_pse>
    348c:	60 d1       	rcall	.+704    	; 0x374e <__fp_round>
    348e:	0a d0       	rcall	.+20     	; 0x34a4 <atan>
    3490:	5f 91       	pop	r21
    3492:	55 23       	and	r21, r21
    3494:	31 f0       	breq	.+12     	; 0x34a2 <atan2+0x54>
    3496:	2b ed       	ldi	r18, 0xDB	; 219
    3498:	3f e0       	ldi	r19, 0x0F	; 15
    349a:	49 e4       	ldi	r20, 0x49	; 73
    349c:	50 fd       	sbrc	r21, 0
    349e:	49 ec       	ldi	r20, 0xC9	; 201
    34a0:	63 cf       	rjmp	.-314    	; 0x3368 <__addsf3>
    34a2:	08 95       	ret

000034a4 <atan>:
    34a4:	df 93       	push	r29
    34a6:	dd 27       	eor	r29, r29
    34a8:	b9 2f       	mov	r27, r25
    34aa:	bf 77       	andi	r27, 0x7F	; 127
    34ac:	40 e8       	ldi	r20, 0x80	; 128
    34ae:	5f e3       	ldi	r21, 0x3F	; 63
    34b0:	16 16       	cp	r1, r22
    34b2:	17 06       	cpc	r1, r23
    34b4:	48 07       	cpc	r20, r24
    34b6:	5b 07       	cpc	r21, r27
    34b8:	10 f4       	brcc	.+4      	; 0x34be <atan+0x1a>
    34ba:	d9 2f       	mov	r29, r25
    34bc:	82 d1       	rcall	.+772    	; 0x37c2 <inverse>
    34be:	9f 93       	push	r25
    34c0:	8f 93       	push	r24
    34c2:	7f 93       	push	r23
    34c4:	6f 93       	push	r22
    34c6:	29 d2       	rcall	.+1106   	; 0x391a <square>
    34c8:	ec e8       	ldi	r30, 0x8C	; 140
    34ca:	f0 e0       	ldi	r31, 0x00	; 0
    34cc:	0d d1       	rcall	.+538    	; 0x36e8 <__fp_powser>
    34ce:	3f d1       	rcall	.+638    	; 0x374e <__fp_round>
    34d0:	2f 91       	pop	r18
    34d2:	3f 91       	pop	r19
    34d4:	4f 91       	pop	r20
    34d6:	5f 91       	pop	r21
    34d8:	87 d1       	rcall	.+782    	; 0x37e8 <__mulsf3x>
    34da:	dd 23       	and	r29, r29
    34dc:	49 f0       	breq	.+18     	; 0x34f0 <atan+0x4c>
    34de:	90 58       	subi	r25, 0x80	; 128
    34e0:	a2 ea       	ldi	r26, 0xA2	; 162
    34e2:	2a ed       	ldi	r18, 0xDA	; 218
    34e4:	3f e0       	ldi	r19, 0x0F	; 15
    34e6:	49 ec       	ldi	r20, 0xC9	; 201
    34e8:	5f e3       	ldi	r21, 0x3F	; 63
    34ea:	d0 78       	andi	r29, 0x80	; 128
    34ec:	5d 27       	eor	r21, r29
    34ee:	4d df       	rcall	.-358    	; 0x338a <__addsf3x>
    34f0:	df 91       	pop	r29
    34f2:	2d c1       	rjmp	.+602    	; 0x374e <__fp_round>

000034f4 <__divsf3>:
    34f4:	0c d0       	rcall	.+24     	; 0x350e <__divsf3x>
    34f6:	2b c1       	rjmp	.+598    	; 0x374e <__fp_round>
    34f8:	23 d1       	rcall	.+582    	; 0x3740 <__fp_pscB>
    34fa:	40 f0       	brcs	.+16     	; 0x350c <__divsf3+0x18>
    34fc:	1a d1       	rcall	.+564    	; 0x3732 <__fp_pscA>
    34fe:	30 f0       	brcs	.+12     	; 0x350c <__divsf3+0x18>
    3500:	21 f4       	brne	.+8      	; 0x350a <__divsf3+0x16>
    3502:	5f 3f       	cpi	r21, 0xFF	; 255
    3504:	19 f0       	breq	.+6      	; 0x350c <__divsf3+0x18>
    3506:	e7 c0       	rjmp	.+462    	; 0x36d6 <__fp_inf>
    3508:	51 11       	cpse	r21, r1
    350a:	55 c1       	rjmp	.+682    	; 0x37b6 <__fp_szero>
    350c:	ea c0       	rjmp	.+468    	; 0x36e2 <__fp_nan>

0000350e <__divsf3x>:
    350e:	30 d1       	rcall	.+608    	; 0x3770 <__fp_split3>
    3510:	98 f3       	brcs	.-26     	; 0x34f8 <__divsf3+0x4>

00003512 <__divsf3_pse>:
    3512:	99 23       	and	r25, r25
    3514:	c9 f3       	breq	.-14     	; 0x3508 <__divsf3+0x14>
    3516:	55 23       	and	r21, r21
    3518:	b1 f3       	breq	.-20     	; 0x3506 <__divsf3+0x12>
    351a:	95 1b       	sub	r25, r21
    351c:	55 0b       	sbc	r21, r21
    351e:	bb 27       	eor	r27, r27
    3520:	aa 27       	eor	r26, r26
    3522:	62 17       	cp	r22, r18
    3524:	73 07       	cpc	r23, r19
    3526:	84 07       	cpc	r24, r20
    3528:	38 f0       	brcs	.+14     	; 0x3538 <__divsf3_pse+0x26>
    352a:	9f 5f       	subi	r25, 0xFF	; 255
    352c:	5f 4f       	sbci	r21, 0xFF	; 255
    352e:	22 0f       	add	r18, r18
    3530:	33 1f       	adc	r19, r19
    3532:	44 1f       	adc	r20, r20
    3534:	aa 1f       	adc	r26, r26
    3536:	a9 f3       	breq	.-22     	; 0x3522 <__divsf3_pse+0x10>
    3538:	33 d0       	rcall	.+102    	; 0x35a0 <__divsf3_pse+0x8e>
    353a:	0e 2e       	mov	r0, r30
    353c:	3a f0       	brmi	.+14     	; 0x354c <__divsf3_pse+0x3a>
    353e:	e0 e8       	ldi	r30, 0x80	; 128
    3540:	30 d0       	rcall	.+96     	; 0x35a2 <__divsf3_pse+0x90>
    3542:	91 50       	subi	r25, 0x01	; 1
    3544:	50 40       	sbci	r21, 0x00	; 0
    3546:	e6 95       	lsr	r30
    3548:	00 1c       	adc	r0, r0
    354a:	ca f7       	brpl	.-14     	; 0x353e <__divsf3_pse+0x2c>
    354c:	29 d0       	rcall	.+82     	; 0x35a0 <__divsf3_pse+0x8e>
    354e:	fe 2f       	mov	r31, r30
    3550:	27 d0       	rcall	.+78     	; 0x35a0 <__divsf3_pse+0x8e>
    3552:	66 0f       	add	r22, r22
    3554:	77 1f       	adc	r23, r23
    3556:	88 1f       	adc	r24, r24
    3558:	bb 1f       	adc	r27, r27
    355a:	26 17       	cp	r18, r22
    355c:	37 07       	cpc	r19, r23
    355e:	48 07       	cpc	r20, r24
    3560:	ab 07       	cpc	r26, r27
    3562:	b0 e8       	ldi	r27, 0x80	; 128
    3564:	09 f0       	breq	.+2      	; 0x3568 <__divsf3_pse+0x56>
    3566:	bb 0b       	sbc	r27, r27
    3568:	80 2d       	mov	r24, r0
    356a:	bf 01       	movw	r22, r30
    356c:	ff 27       	eor	r31, r31
    356e:	93 58       	subi	r25, 0x83	; 131
    3570:	5f 4f       	sbci	r21, 0xFF	; 255
    3572:	2a f0       	brmi	.+10     	; 0x357e <__divsf3_pse+0x6c>
    3574:	9e 3f       	cpi	r25, 0xFE	; 254
    3576:	51 05       	cpc	r21, r1
    3578:	68 f0       	brcs	.+26     	; 0x3594 <__divsf3_pse+0x82>
    357a:	ad c0       	rjmp	.+346    	; 0x36d6 <__fp_inf>
    357c:	1c c1       	rjmp	.+568    	; 0x37b6 <__fp_szero>
    357e:	5f 3f       	cpi	r21, 0xFF	; 255
    3580:	ec f3       	brlt	.-6      	; 0x357c <__divsf3_pse+0x6a>
    3582:	98 3e       	cpi	r25, 0xE8	; 232
    3584:	dc f3       	brlt	.-10     	; 0x357c <__divsf3_pse+0x6a>
    3586:	86 95       	lsr	r24
    3588:	77 95       	ror	r23
    358a:	67 95       	ror	r22
    358c:	b7 95       	ror	r27
    358e:	f7 95       	ror	r31
    3590:	9f 5f       	subi	r25, 0xFF	; 255
    3592:	c9 f7       	brne	.-14     	; 0x3586 <__divsf3_pse+0x74>
    3594:	88 0f       	add	r24, r24
    3596:	91 1d       	adc	r25, r1
    3598:	96 95       	lsr	r25
    359a:	87 95       	ror	r24
    359c:	97 f9       	bld	r25, 7
    359e:	08 95       	ret
    35a0:	e1 e0       	ldi	r30, 0x01	; 1
    35a2:	66 0f       	add	r22, r22
    35a4:	77 1f       	adc	r23, r23
    35a6:	88 1f       	adc	r24, r24
    35a8:	bb 1f       	adc	r27, r27
    35aa:	62 17       	cp	r22, r18
    35ac:	73 07       	cpc	r23, r19
    35ae:	84 07       	cpc	r24, r20
    35b0:	ba 07       	cpc	r27, r26
    35b2:	20 f0       	brcs	.+8      	; 0x35bc <__divsf3_pse+0xaa>
    35b4:	62 1b       	sub	r22, r18
    35b6:	73 0b       	sbc	r23, r19
    35b8:	84 0b       	sbc	r24, r20
    35ba:	ba 0b       	sbc	r27, r26
    35bc:	ee 1f       	adc	r30, r30
    35be:	88 f7       	brcc	.-30     	; 0x35a2 <__divsf3_pse+0x90>
    35c0:	e0 95       	com	r30
    35c2:	08 95       	ret

000035c4 <__fixsfsi>:
    35c4:	04 d0       	rcall	.+8      	; 0x35ce <__fixunssfsi>
    35c6:	68 94       	set
    35c8:	b1 11       	cpse	r27, r1
    35ca:	f5 c0       	rjmp	.+490    	; 0x37b6 <__fp_szero>
    35cc:	08 95       	ret

000035ce <__fixunssfsi>:
    35ce:	d8 d0       	rcall	.+432    	; 0x3780 <__fp_splitA>
    35d0:	88 f0       	brcs	.+34     	; 0x35f4 <__fixunssfsi+0x26>
    35d2:	9f 57       	subi	r25, 0x7F	; 127
    35d4:	90 f0       	brcs	.+36     	; 0x35fa <__fixunssfsi+0x2c>
    35d6:	b9 2f       	mov	r27, r25
    35d8:	99 27       	eor	r25, r25
    35da:	b7 51       	subi	r27, 0x17	; 23
    35dc:	a0 f0       	brcs	.+40     	; 0x3606 <__fixunssfsi+0x38>
    35de:	d1 f0       	breq	.+52     	; 0x3614 <__fixunssfsi+0x46>
    35e0:	66 0f       	add	r22, r22
    35e2:	77 1f       	adc	r23, r23
    35e4:	88 1f       	adc	r24, r24
    35e6:	99 1f       	adc	r25, r25
    35e8:	1a f0       	brmi	.+6      	; 0x35f0 <__fixunssfsi+0x22>
    35ea:	ba 95       	dec	r27
    35ec:	c9 f7       	brne	.-14     	; 0x35e0 <__fixunssfsi+0x12>
    35ee:	12 c0       	rjmp	.+36     	; 0x3614 <__fixunssfsi+0x46>
    35f0:	b1 30       	cpi	r27, 0x01	; 1
    35f2:	81 f0       	breq	.+32     	; 0x3614 <__fixunssfsi+0x46>
    35f4:	df d0       	rcall	.+446    	; 0x37b4 <__fp_zero>
    35f6:	b1 e0       	ldi	r27, 0x01	; 1
    35f8:	08 95       	ret
    35fa:	dc c0       	rjmp	.+440    	; 0x37b4 <__fp_zero>
    35fc:	67 2f       	mov	r22, r23
    35fe:	78 2f       	mov	r23, r24
    3600:	88 27       	eor	r24, r24
    3602:	b8 5f       	subi	r27, 0xF8	; 248
    3604:	39 f0       	breq	.+14     	; 0x3614 <__fixunssfsi+0x46>
    3606:	b9 3f       	cpi	r27, 0xF9	; 249
    3608:	cc f3       	brlt	.-14     	; 0x35fc <__fixunssfsi+0x2e>
    360a:	86 95       	lsr	r24
    360c:	77 95       	ror	r23
    360e:	67 95       	ror	r22
    3610:	b3 95       	inc	r27
    3612:	d9 f7       	brne	.-10     	; 0x360a <__fixunssfsi+0x3c>
    3614:	3e f4       	brtc	.+14     	; 0x3624 <__fixunssfsi+0x56>
    3616:	90 95       	com	r25
    3618:	80 95       	com	r24
    361a:	70 95       	com	r23
    361c:	61 95       	neg	r22
    361e:	7f 4f       	sbci	r23, 0xFF	; 255
    3620:	8f 4f       	sbci	r24, 0xFF	; 255
    3622:	9f 4f       	sbci	r25, 0xFF	; 255
    3624:	08 95       	ret

00003626 <__floatunsisf>:
    3626:	e8 94       	clt
    3628:	09 c0       	rjmp	.+18     	; 0x363c <__floatsisf+0x12>

0000362a <__floatsisf>:
    362a:	97 fb       	bst	r25, 7
    362c:	3e f4       	brtc	.+14     	; 0x363c <__floatsisf+0x12>
    362e:	90 95       	com	r25
    3630:	80 95       	com	r24
    3632:	70 95       	com	r23
    3634:	61 95       	neg	r22
    3636:	7f 4f       	sbci	r23, 0xFF	; 255
    3638:	8f 4f       	sbci	r24, 0xFF	; 255
    363a:	9f 4f       	sbci	r25, 0xFF	; 255
    363c:	99 23       	and	r25, r25
    363e:	a9 f0       	breq	.+42     	; 0x366a <__floatsisf+0x40>
    3640:	f9 2f       	mov	r31, r25
    3642:	96 e9       	ldi	r25, 0x96	; 150
    3644:	bb 27       	eor	r27, r27
    3646:	93 95       	inc	r25
    3648:	f6 95       	lsr	r31
    364a:	87 95       	ror	r24
    364c:	77 95       	ror	r23
    364e:	67 95       	ror	r22
    3650:	b7 95       	ror	r27
    3652:	f1 11       	cpse	r31, r1
    3654:	f8 cf       	rjmp	.-16     	; 0x3646 <__floatsisf+0x1c>
    3656:	fa f4       	brpl	.+62     	; 0x3696 <__floatsisf+0x6c>
    3658:	bb 0f       	add	r27, r27
    365a:	11 f4       	brne	.+4      	; 0x3660 <__floatsisf+0x36>
    365c:	60 ff       	sbrs	r22, 0
    365e:	1b c0       	rjmp	.+54     	; 0x3696 <__floatsisf+0x6c>
    3660:	6f 5f       	subi	r22, 0xFF	; 255
    3662:	7f 4f       	sbci	r23, 0xFF	; 255
    3664:	8f 4f       	sbci	r24, 0xFF	; 255
    3666:	9f 4f       	sbci	r25, 0xFF	; 255
    3668:	16 c0       	rjmp	.+44     	; 0x3696 <__floatsisf+0x6c>
    366a:	88 23       	and	r24, r24
    366c:	11 f0       	breq	.+4      	; 0x3672 <__floatsisf+0x48>
    366e:	96 e9       	ldi	r25, 0x96	; 150
    3670:	11 c0       	rjmp	.+34     	; 0x3694 <__floatsisf+0x6a>
    3672:	77 23       	and	r23, r23
    3674:	21 f0       	breq	.+8      	; 0x367e <__floatsisf+0x54>
    3676:	9e e8       	ldi	r25, 0x8E	; 142
    3678:	87 2f       	mov	r24, r23
    367a:	76 2f       	mov	r23, r22
    367c:	05 c0       	rjmp	.+10     	; 0x3688 <__floatsisf+0x5e>
    367e:	66 23       	and	r22, r22
    3680:	71 f0       	breq	.+28     	; 0x369e <__floatsisf+0x74>
    3682:	96 e8       	ldi	r25, 0x86	; 134
    3684:	86 2f       	mov	r24, r22
    3686:	70 e0       	ldi	r23, 0x00	; 0
    3688:	60 e0       	ldi	r22, 0x00	; 0
    368a:	2a f0       	brmi	.+10     	; 0x3696 <__floatsisf+0x6c>
    368c:	9a 95       	dec	r25
    368e:	66 0f       	add	r22, r22
    3690:	77 1f       	adc	r23, r23
    3692:	88 1f       	adc	r24, r24
    3694:	da f7       	brpl	.-10     	; 0x368c <__floatsisf+0x62>
    3696:	88 0f       	add	r24, r24
    3698:	96 95       	lsr	r25
    369a:	87 95       	ror	r24
    369c:	97 f9       	bld	r25, 7
    369e:	08 95       	ret

000036a0 <__fp_arccos>:
    36a0:	df 93       	push	r29
    36a2:	cf 93       	push	r28
    36a4:	1f 93       	push	r17
    36a6:	0f 93       	push	r16
    36a8:	8b 01       	movw	r16, r22
    36aa:	ec 01       	movw	r28, r24
    36ac:	e9 eb       	ldi	r30, 0xB9	; 185
    36ae:	f0 e0       	ldi	r31, 0x00	; 0
    36b0:	1b d0       	rcall	.+54     	; 0x36e8 <__fp_powser>
    36b2:	4d d0       	rcall	.+154    	; 0x374e <__fp_round>
    36b4:	98 01       	movw	r18, r16
    36b6:	ae 01       	movw	r20, r28
    36b8:	8b 01       	movw	r16, r22
    36ba:	ec 01       	movw	r28, r24
    36bc:	60 e0       	ldi	r22, 0x00	; 0
    36be:	70 e0       	ldi	r23, 0x00	; 0
    36c0:	80 e8       	ldi	r24, 0x80	; 128
    36c2:	9f e3       	ldi	r25, 0x3F	; 63
    36c4:	50 de       	rcall	.-864    	; 0x3366 <__subsf3>
    36c6:	eb d0       	rcall	.+470    	; 0x389e <sqrt>
    36c8:	98 01       	movw	r18, r16
    36ca:	ae 01       	movw	r20, r28
    36cc:	0f 91       	pop	r16
    36ce:	1f 91       	pop	r17
    36d0:	cf 91       	pop	r28
    36d2:	df 91       	pop	r29
    36d4:	89 c0       	rjmp	.+274    	; 0x37e8 <__mulsf3x>

000036d6 <__fp_inf>:
    36d6:	97 f9       	bld	r25, 7
    36d8:	9f 67       	ori	r25, 0x7F	; 127
    36da:	80 e8       	ldi	r24, 0x80	; 128
    36dc:	70 e0       	ldi	r23, 0x00	; 0
    36de:	60 e0       	ldi	r22, 0x00	; 0
    36e0:	08 95       	ret

000036e2 <__fp_nan>:
    36e2:	9f ef       	ldi	r25, 0xFF	; 255
    36e4:	80 ec       	ldi	r24, 0xC0	; 192
    36e6:	08 95       	ret

000036e8 <__fp_powser>:
    36e8:	df 93       	push	r29
    36ea:	cf 93       	push	r28
    36ec:	1f 93       	push	r17
    36ee:	0f 93       	push	r16
    36f0:	ff 92       	push	r15
    36f2:	ef 92       	push	r14
    36f4:	df 92       	push	r13
    36f6:	7b 01       	movw	r14, r22
    36f8:	8c 01       	movw	r16, r24
    36fa:	68 94       	set
    36fc:	05 c0       	rjmp	.+10     	; 0x3708 <__fp_powser+0x20>
    36fe:	da 2e       	mov	r13, r26
    3700:	ef 01       	movw	r28, r30
    3702:	72 d0       	rcall	.+228    	; 0x37e8 <__mulsf3x>
    3704:	fe 01       	movw	r30, r28
    3706:	e8 94       	clt
    3708:	a5 91       	lpm	r26, Z+
    370a:	25 91       	lpm	r18, Z+
    370c:	35 91       	lpm	r19, Z+
    370e:	45 91       	lpm	r20, Z+
    3710:	55 91       	lpm	r21, Z+
    3712:	ae f3       	brts	.-22     	; 0x36fe <__fp_powser+0x16>
    3714:	ef 01       	movw	r28, r30
    3716:	39 de       	rcall	.-910    	; 0x338a <__addsf3x>
    3718:	fe 01       	movw	r30, r28
    371a:	97 01       	movw	r18, r14
    371c:	a8 01       	movw	r20, r16
    371e:	da 94       	dec	r13
    3720:	79 f7       	brne	.-34     	; 0x3700 <__fp_powser+0x18>
    3722:	df 90       	pop	r13
    3724:	ef 90       	pop	r14
    3726:	ff 90       	pop	r15
    3728:	0f 91       	pop	r16
    372a:	1f 91       	pop	r17
    372c:	cf 91       	pop	r28
    372e:	df 91       	pop	r29
    3730:	08 95       	ret

00003732 <__fp_pscA>:
    3732:	00 24       	eor	r0, r0
    3734:	0a 94       	dec	r0
    3736:	16 16       	cp	r1, r22
    3738:	17 06       	cpc	r1, r23
    373a:	18 06       	cpc	r1, r24
    373c:	09 06       	cpc	r0, r25
    373e:	08 95       	ret

00003740 <__fp_pscB>:
    3740:	00 24       	eor	r0, r0
    3742:	0a 94       	dec	r0
    3744:	12 16       	cp	r1, r18
    3746:	13 06       	cpc	r1, r19
    3748:	14 06       	cpc	r1, r20
    374a:	05 06       	cpc	r0, r21
    374c:	08 95       	ret

0000374e <__fp_round>:
    374e:	09 2e       	mov	r0, r25
    3750:	03 94       	inc	r0
    3752:	00 0c       	add	r0, r0
    3754:	11 f4       	brne	.+4      	; 0x375a <__fp_round+0xc>
    3756:	88 23       	and	r24, r24
    3758:	52 f0       	brmi	.+20     	; 0x376e <__fp_round+0x20>
    375a:	bb 0f       	add	r27, r27
    375c:	40 f4       	brcc	.+16     	; 0x376e <__fp_round+0x20>
    375e:	bf 2b       	or	r27, r31
    3760:	11 f4       	brne	.+4      	; 0x3766 <__fp_round+0x18>
    3762:	60 ff       	sbrs	r22, 0
    3764:	04 c0       	rjmp	.+8      	; 0x376e <__fp_round+0x20>
    3766:	6f 5f       	subi	r22, 0xFF	; 255
    3768:	7f 4f       	sbci	r23, 0xFF	; 255
    376a:	8f 4f       	sbci	r24, 0xFF	; 255
    376c:	9f 4f       	sbci	r25, 0xFF	; 255
    376e:	08 95       	ret

00003770 <__fp_split3>:
    3770:	57 fd       	sbrc	r21, 7
    3772:	90 58       	subi	r25, 0x80	; 128
    3774:	44 0f       	add	r20, r20
    3776:	55 1f       	adc	r21, r21
    3778:	59 f0       	breq	.+22     	; 0x3790 <__fp_splitA+0x10>
    377a:	5f 3f       	cpi	r21, 0xFF	; 255
    377c:	71 f0       	breq	.+28     	; 0x379a <__fp_splitA+0x1a>
    377e:	47 95       	ror	r20

00003780 <__fp_splitA>:
    3780:	88 0f       	add	r24, r24
    3782:	97 fb       	bst	r25, 7
    3784:	99 1f       	adc	r25, r25
    3786:	61 f0       	breq	.+24     	; 0x37a0 <__fp_splitA+0x20>
    3788:	9f 3f       	cpi	r25, 0xFF	; 255
    378a:	79 f0       	breq	.+30     	; 0x37aa <__fp_splitA+0x2a>
    378c:	87 95       	ror	r24
    378e:	08 95       	ret
    3790:	12 16       	cp	r1, r18
    3792:	13 06       	cpc	r1, r19
    3794:	14 06       	cpc	r1, r20
    3796:	55 1f       	adc	r21, r21
    3798:	f2 cf       	rjmp	.-28     	; 0x377e <__fp_split3+0xe>
    379a:	46 95       	lsr	r20
    379c:	f1 df       	rcall	.-30     	; 0x3780 <__fp_splitA>
    379e:	08 c0       	rjmp	.+16     	; 0x37b0 <__fp_splitA+0x30>
    37a0:	16 16       	cp	r1, r22
    37a2:	17 06       	cpc	r1, r23
    37a4:	18 06       	cpc	r1, r24
    37a6:	99 1f       	adc	r25, r25
    37a8:	f1 cf       	rjmp	.-30     	; 0x378c <__fp_splitA+0xc>
    37aa:	86 95       	lsr	r24
    37ac:	71 05       	cpc	r23, r1
    37ae:	61 05       	cpc	r22, r1
    37b0:	08 94       	sec
    37b2:	08 95       	ret

000037b4 <__fp_zero>:
    37b4:	e8 94       	clt

000037b6 <__fp_szero>:
    37b6:	bb 27       	eor	r27, r27
    37b8:	66 27       	eor	r22, r22
    37ba:	77 27       	eor	r23, r23
    37bc:	cb 01       	movw	r24, r22
    37be:	97 f9       	bld	r25, 7
    37c0:	08 95       	ret

000037c2 <inverse>:
    37c2:	9b 01       	movw	r18, r22
    37c4:	ac 01       	movw	r20, r24
    37c6:	60 e0       	ldi	r22, 0x00	; 0
    37c8:	70 e0       	ldi	r23, 0x00	; 0
    37ca:	80 e8       	ldi	r24, 0x80	; 128
    37cc:	9f e3       	ldi	r25, 0x3F	; 63
    37ce:	92 ce       	rjmp	.-732    	; 0x34f4 <__divsf3>

000037d0 <__mulsf3>:
    37d0:	0b d0       	rcall	.+22     	; 0x37e8 <__mulsf3x>
    37d2:	bd cf       	rjmp	.-134    	; 0x374e <__fp_round>
    37d4:	ae df       	rcall	.-164    	; 0x3732 <__fp_pscA>
    37d6:	28 f0       	brcs	.+10     	; 0x37e2 <__mulsf3+0x12>
    37d8:	b3 df       	rcall	.-154    	; 0x3740 <__fp_pscB>
    37da:	18 f0       	brcs	.+6      	; 0x37e2 <__mulsf3+0x12>
    37dc:	95 23       	and	r25, r21
    37de:	09 f0       	breq	.+2      	; 0x37e2 <__mulsf3+0x12>
    37e0:	7a cf       	rjmp	.-268    	; 0x36d6 <__fp_inf>
    37e2:	7f cf       	rjmp	.-258    	; 0x36e2 <__fp_nan>
    37e4:	11 24       	eor	r1, r1
    37e6:	e7 cf       	rjmp	.-50     	; 0x37b6 <__fp_szero>

000037e8 <__mulsf3x>:
    37e8:	c3 df       	rcall	.-122    	; 0x3770 <__fp_split3>
    37ea:	a0 f3       	brcs	.-24     	; 0x37d4 <__mulsf3+0x4>

000037ec <__mulsf3_pse>:
    37ec:	95 9f       	mul	r25, r21
    37ee:	d1 f3       	breq	.-12     	; 0x37e4 <__mulsf3+0x14>
    37f0:	95 0f       	add	r25, r21
    37f2:	50 e0       	ldi	r21, 0x00	; 0
    37f4:	55 1f       	adc	r21, r21
    37f6:	62 9f       	mul	r22, r18
    37f8:	f0 01       	movw	r30, r0
    37fa:	72 9f       	mul	r23, r18
    37fc:	bb 27       	eor	r27, r27
    37fe:	f0 0d       	add	r31, r0
    3800:	b1 1d       	adc	r27, r1
    3802:	63 9f       	mul	r22, r19
    3804:	aa 27       	eor	r26, r26
    3806:	f0 0d       	add	r31, r0
    3808:	b1 1d       	adc	r27, r1
    380a:	aa 1f       	adc	r26, r26
    380c:	64 9f       	mul	r22, r20
    380e:	66 27       	eor	r22, r22
    3810:	b0 0d       	add	r27, r0
    3812:	a1 1d       	adc	r26, r1
    3814:	66 1f       	adc	r22, r22
    3816:	82 9f       	mul	r24, r18
    3818:	22 27       	eor	r18, r18
    381a:	b0 0d       	add	r27, r0
    381c:	a1 1d       	adc	r26, r1
    381e:	62 1f       	adc	r22, r18
    3820:	73 9f       	mul	r23, r19
    3822:	b0 0d       	add	r27, r0
    3824:	a1 1d       	adc	r26, r1
    3826:	62 1f       	adc	r22, r18
    3828:	83 9f       	mul	r24, r19
    382a:	a0 0d       	add	r26, r0
    382c:	61 1d       	adc	r22, r1
    382e:	22 1f       	adc	r18, r18
    3830:	74 9f       	mul	r23, r20
    3832:	33 27       	eor	r19, r19
    3834:	a0 0d       	add	r26, r0
    3836:	61 1d       	adc	r22, r1
    3838:	23 1f       	adc	r18, r19
    383a:	84 9f       	mul	r24, r20
    383c:	60 0d       	add	r22, r0
    383e:	21 1d       	adc	r18, r1
    3840:	82 2f       	mov	r24, r18
    3842:	76 2f       	mov	r23, r22
    3844:	6a 2f       	mov	r22, r26
    3846:	11 24       	eor	r1, r1
    3848:	9f 57       	subi	r25, 0x7F	; 127
    384a:	50 40       	sbci	r21, 0x00	; 0
    384c:	8a f0       	brmi	.+34     	; 0x3870 <__mulsf3_pse+0x84>
    384e:	e1 f0       	breq	.+56     	; 0x3888 <__mulsf3_pse+0x9c>
    3850:	88 23       	and	r24, r24
    3852:	4a f0       	brmi	.+18     	; 0x3866 <__mulsf3_pse+0x7a>
    3854:	ee 0f       	add	r30, r30
    3856:	ff 1f       	adc	r31, r31
    3858:	bb 1f       	adc	r27, r27
    385a:	66 1f       	adc	r22, r22
    385c:	77 1f       	adc	r23, r23
    385e:	88 1f       	adc	r24, r24
    3860:	91 50       	subi	r25, 0x01	; 1
    3862:	50 40       	sbci	r21, 0x00	; 0
    3864:	a9 f7       	brne	.-22     	; 0x3850 <__mulsf3_pse+0x64>
    3866:	9e 3f       	cpi	r25, 0xFE	; 254
    3868:	51 05       	cpc	r21, r1
    386a:	70 f0       	brcs	.+28     	; 0x3888 <__mulsf3_pse+0x9c>
    386c:	34 cf       	rjmp	.-408    	; 0x36d6 <__fp_inf>
    386e:	a3 cf       	rjmp	.-186    	; 0x37b6 <__fp_szero>
    3870:	5f 3f       	cpi	r21, 0xFF	; 255
    3872:	ec f3       	brlt	.-6      	; 0x386e <__mulsf3_pse+0x82>
    3874:	98 3e       	cpi	r25, 0xE8	; 232
    3876:	dc f3       	brlt	.-10     	; 0x386e <__mulsf3_pse+0x82>
    3878:	86 95       	lsr	r24
    387a:	77 95       	ror	r23
    387c:	67 95       	ror	r22
    387e:	b7 95       	ror	r27
    3880:	f7 95       	ror	r31
    3882:	e7 95       	ror	r30
    3884:	9f 5f       	subi	r25, 0xFF	; 255
    3886:	c1 f7       	brne	.-16     	; 0x3878 <__mulsf3_pse+0x8c>
    3888:	fe 2b       	or	r31, r30
    388a:	88 0f       	add	r24, r24
    388c:	91 1d       	adc	r25, r1
    388e:	96 95       	lsr	r25
    3890:	87 95       	ror	r24
    3892:	97 f9       	bld	r25, 7
    3894:	08 95       	ret
    3896:	11 f4       	brne	.+4      	; 0x389c <__mulsf3_pse+0xb0>
    3898:	0e f4       	brtc	.+2      	; 0x389c <__mulsf3_pse+0xb0>
    389a:	23 cf       	rjmp	.-442    	; 0x36e2 <__fp_nan>
    389c:	41 c0       	rjmp	.+130    	; 0x3920 <__fp_mpack>

0000389e <sqrt>:
    389e:	70 df       	rcall	.-288    	; 0x3780 <__fp_splitA>
    38a0:	d0 f3       	brcs	.-12     	; 0x3896 <__mulsf3_pse+0xaa>
    38a2:	99 23       	and	r25, r25
    38a4:	d9 f3       	breq	.-10     	; 0x389c <__mulsf3_pse+0xb0>
    38a6:	ce f3       	brts	.-14     	; 0x389a <__mulsf3_pse+0xae>
    38a8:	9f 57       	subi	r25, 0x7F	; 127
    38aa:	55 0b       	sbc	r21, r21
    38ac:	87 ff       	sbrs	r24, 7
    38ae:	46 d0       	rcall	.+140    	; 0x393c <__fp_norm2>
    38b0:	00 24       	eor	r0, r0
    38b2:	a0 e6       	ldi	r26, 0x60	; 96
    38b4:	40 ea       	ldi	r20, 0xA0	; 160
    38b6:	90 01       	movw	r18, r0
    38b8:	80 58       	subi	r24, 0x80	; 128
    38ba:	56 95       	lsr	r21
    38bc:	97 95       	ror	r25
    38be:	28 f4       	brcc	.+10     	; 0x38ca <sqrt+0x2c>
    38c0:	80 5c       	subi	r24, 0xC0	; 192
    38c2:	66 0f       	add	r22, r22
    38c4:	77 1f       	adc	r23, r23
    38c6:	88 1f       	adc	r24, r24
    38c8:	20 f0       	brcs	.+8      	; 0x38d2 <sqrt+0x34>
    38ca:	26 17       	cp	r18, r22
    38cc:	37 07       	cpc	r19, r23
    38ce:	48 07       	cpc	r20, r24
    38d0:	30 f4       	brcc	.+12     	; 0x38de <sqrt+0x40>
    38d2:	62 1b       	sub	r22, r18
    38d4:	73 0b       	sbc	r23, r19
    38d6:	84 0b       	sbc	r24, r20
    38d8:	20 29       	or	r18, r0
    38da:	31 29       	or	r19, r1
    38dc:	4a 2b       	or	r20, r26
    38de:	a6 95       	lsr	r26
    38e0:	17 94       	ror	r1
    38e2:	07 94       	ror	r0
    38e4:	20 25       	eor	r18, r0
    38e6:	31 25       	eor	r19, r1
    38e8:	4a 27       	eor	r20, r26
    38ea:	58 f7       	brcc	.-42     	; 0x38c2 <sqrt+0x24>
    38ec:	66 0f       	add	r22, r22
    38ee:	77 1f       	adc	r23, r23
    38f0:	88 1f       	adc	r24, r24
    38f2:	20 f0       	brcs	.+8      	; 0x38fc <sqrt+0x5e>
    38f4:	26 17       	cp	r18, r22
    38f6:	37 07       	cpc	r19, r23
    38f8:	48 07       	cpc	r20, r24
    38fa:	30 f4       	brcc	.+12     	; 0x3908 <sqrt+0x6a>
    38fc:	62 0b       	sbc	r22, r18
    38fe:	73 0b       	sbc	r23, r19
    3900:	84 0b       	sbc	r24, r20
    3902:	20 0d       	add	r18, r0
    3904:	31 1d       	adc	r19, r1
    3906:	41 1d       	adc	r20, r1
    3908:	a0 95       	com	r26
    390a:	81 f7       	brne	.-32     	; 0x38ec <sqrt+0x4e>
    390c:	b9 01       	movw	r22, r18
    390e:	84 2f       	mov	r24, r20
    3910:	91 58       	subi	r25, 0x81	; 129
    3912:	88 0f       	add	r24, r24
    3914:	96 95       	lsr	r25
    3916:	87 95       	ror	r24
    3918:	08 95       	ret

0000391a <square>:
    391a:	9b 01       	movw	r18, r22
    391c:	ac 01       	movw	r20, r24
    391e:	58 cf       	rjmp	.-336    	; 0x37d0 <__mulsf3>

00003920 <__fp_mpack>:
    3920:	9f 3f       	cpi	r25, 0xFF	; 255
    3922:	31 f0       	breq	.+12     	; 0x3930 <__fp_mpack_finite+0xc>

00003924 <__fp_mpack_finite>:
    3924:	91 50       	subi	r25, 0x01	; 1
    3926:	20 f4       	brcc	.+8      	; 0x3930 <__fp_mpack_finite+0xc>
    3928:	87 95       	ror	r24
    392a:	77 95       	ror	r23
    392c:	67 95       	ror	r22
    392e:	b7 95       	ror	r27
    3930:	88 0f       	add	r24, r24
    3932:	91 1d       	adc	r25, r1
    3934:	96 95       	lsr	r25
    3936:	87 95       	ror	r24
    3938:	97 f9       	bld	r25, 7
    393a:	08 95       	ret

0000393c <__fp_norm2>:
    393c:	91 50       	subi	r25, 0x01	; 1
    393e:	50 40       	sbci	r21, 0x00	; 0
    3940:	66 0f       	add	r22, r22
    3942:	77 1f       	adc	r23, r23
    3944:	88 1f       	adc	r24, r24
    3946:	d2 f7       	brpl	.-12     	; 0x393c <__fp_norm2>
    3948:	08 95       	ret

0000394a <__divmodsi4>:
    394a:	05 2e       	mov	r0, r21
    394c:	97 fb       	bst	r25, 7
    394e:	16 f4       	brtc	.+4      	; 0x3954 <__divmodsi4+0xa>
    3950:	00 94       	com	r0
    3952:	0f d0       	rcall	.+30     	; 0x3972 <__negsi2>
    3954:	57 fd       	sbrc	r21, 7
    3956:	05 d0       	rcall	.+10     	; 0x3962 <__divmodsi4_neg2>
    3958:	1e d0       	rcall	.+60     	; 0x3996 <__udivmodsi4>
    395a:	07 fc       	sbrc	r0, 7
    395c:	02 d0       	rcall	.+4      	; 0x3962 <__divmodsi4_neg2>
    395e:	46 f4       	brtc	.+16     	; 0x3970 <__divmodsi4_exit>
    3960:	08 c0       	rjmp	.+16     	; 0x3972 <__negsi2>

00003962 <__divmodsi4_neg2>:
    3962:	50 95       	com	r21
    3964:	40 95       	com	r20
    3966:	30 95       	com	r19
    3968:	21 95       	neg	r18
    396a:	3f 4f       	sbci	r19, 0xFF	; 255
    396c:	4f 4f       	sbci	r20, 0xFF	; 255
    396e:	5f 4f       	sbci	r21, 0xFF	; 255

00003970 <__divmodsi4_exit>:
    3970:	08 95       	ret

00003972 <__negsi2>:
    3972:	90 95       	com	r25
    3974:	80 95       	com	r24
    3976:	70 95       	com	r23
    3978:	61 95       	neg	r22
    397a:	7f 4f       	sbci	r23, 0xFF	; 255
    397c:	8f 4f       	sbci	r24, 0xFF	; 255
    397e:	9f 4f       	sbci	r25, 0xFF	; 255
    3980:	08 95       	ret

00003982 <__muluhisi3>:
    3982:	2b d0       	rcall	.+86     	; 0x39da <__umulhisi3>
    3984:	a5 9f       	mul	r26, r21
    3986:	90 0d       	add	r25, r0
    3988:	b4 9f       	mul	r27, r20
    398a:	90 0d       	add	r25, r0
    398c:	a4 9f       	mul	r26, r20
    398e:	80 0d       	add	r24, r0
    3990:	91 1d       	adc	r25, r1
    3992:	11 24       	eor	r1, r1
    3994:	08 95       	ret

00003996 <__udivmodsi4>:
    3996:	a1 e2       	ldi	r26, 0x21	; 33
    3998:	1a 2e       	mov	r1, r26
    399a:	aa 1b       	sub	r26, r26
    399c:	bb 1b       	sub	r27, r27
    399e:	fd 01       	movw	r30, r26
    39a0:	0d c0       	rjmp	.+26     	; 0x39bc <__udivmodsi4_ep>

000039a2 <__udivmodsi4_loop>:
    39a2:	aa 1f       	adc	r26, r26
    39a4:	bb 1f       	adc	r27, r27
    39a6:	ee 1f       	adc	r30, r30
    39a8:	ff 1f       	adc	r31, r31
    39aa:	a2 17       	cp	r26, r18
    39ac:	b3 07       	cpc	r27, r19
    39ae:	e4 07       	cpc	r30, r20
    39b0:	f5 07       	cpc	r31, r21
    39b2:	20 f0       	brcs	.+8      	; 0x39bc <__udivmodsi4_ep>
    39b4:	a2 1b       	sub	r26, r18
    39b6:	b3 0b       	sbc	r27, r19
    39b8:	e4 0b       	sbc	r30, r20
    39ba:	f5 0b       	sbc	r31, r21

000039bc <__udivmodsi4_ep>:
    39bc:	66 1f       	adc	r22, r22
    39be:	77 1f       	adc	r23, r23
    39c0:	88 1f       	adc	r24, r24
    39c2:	99 1f       	adc	r25, r25
    39c4:	1a 94       	dec	r1
    39c6:	69 f7       	brne	.-38     	; 0x39a2 <__udivmodsi4_loop>
    39c8:	60 95       	com	r22
    39ca:	70 95       	com	r23
    39cc:	80 95       	com	r24
    39ce:	90 95       	com	r25
    39d0:	9b 01       	movw	r18, r22
    39d2:	ac 01       	movw	r20, r24
    39d4:	bd 01       	movw	r22, r26
    39d6:	cf 01       	movw	r24, r30
    39d8:	08 95       	ret

000039da <__umulhisi3>:
    39da:	a2 9f       	mul	r26, r18
    39dc:	b0 01       	movw	r22, r0
    39de:	b3 9f       	mul	r27, r19
    39e0:	c0 01       	movw	r24, r0
    39e2:	a3 9f       	mul	r26, r19
    39e4:	70 0d       	add	r23, r0
    39e6:	81 1d       	adc	r24, r1
    39e8:	11 24       	eor	r1, r1
    39ea:	91 1d       	adc	r25, r1
    39ec:	b2 9f       	mul	r27, r18
    39ee:	70 0d       	add	r23, r0
    39f0:	81 1d       	adc	r24, r1
    39f2:	11 24       	eor	r1, r1
    39f4:	91 1d       	adc	r25, r1
    39f6:	08 95       	ret

000039f8 <_exit>:
    39f8:	f8 94       	cli

000039fa <__stop_program>:
    39fa:	ff cf       	rjmp	.-2      	; 0x39fa <__stop_program>
