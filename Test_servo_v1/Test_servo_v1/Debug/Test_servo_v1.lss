
Test_servo_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000356c  00003600  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000356c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003c5  00800120  00800120  00003620  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003620  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00003650  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001aab  00000000  00000000  00003728  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000032e  00000000  00000000  000051d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c72  00000000  00000000  00005501  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000098c  00000000  00000000  00006174  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004cf  00000000  00000000  00006b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003321  00000000  00000000  00006fcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  0000a2f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	70 c0       	rjmp	.+224    	; 0xe2 <__ctors_end>
       2:	00 00       	nop
       4:	8d c0       	rjmp	.+282    	; 0x120 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <__vector_2>
       c:	89 c0       	rjmp	.+274    	; 0x120 <__bad_interrupt>
       e:	00 00       	nop
      10:	87 c0       	rjmp	.+270    	; 0x120 <__bad_interrupt>
      12:	00 00       	nop
      14:	85 c0       	rjmp	.+266    	; 0x120 <__bad_interrupt>
      16:	00 00       	nop
      18:	83 c0       	rjmp	.+262    	; 0x120 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	81 c0       	rjmp	.+258    	; 0x120 <__bad_interrupt>
      1e:	00 00       	nop
      20:	7f c0       	rjmp	.+254    	; 0x120 <__bad_interrupt>
      22:	00 00       	nop
      24:	7d c0       	rjmp	.+250    	; 0x120 <__bad_interrupt>
      26:	00 00       	nop
      28:	7b c0       	rjmp	.+246    	; 0x120 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	79 c0       	rjmp	.+242    	; 0x120 <__bad_interrupt>
      2e:	00 00       	nop
      30:	77 c0       	rjmp	.+238    	; 0x120 <__bad_interrupt>
      32:	00 00       	nop
      34:	75 c0       	rjmp	.+234    	; 0x120 <__bad_interrupt>
      36:	00 00       	nop
      38:	73 c0       	rjmp	.+230    	; 0x120 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	71 c0       	rjmp	.+226    	; 0x120 <__bad_interrupt>
      3e:	00 00       	nop
      40:	6f c0       	rjmp	.+222    	; 0x120 <__bad_interrupt>
      42:	00 00       	nop
      44:	6d c0       	rjmp	.+218    	; 0x120 <__bad_interrupt>
      46:	00 00       	nop
      48:	79 c0       	rjmp	.+242    	; 0x13c <__vector_18>
      4a:	00 00       	nop
      4c:	69 c0       	rjmp	.+210    	; 0x120 <__bad_interrupt>
      4e:	00 00       	nop
      50:	67 c0       	rjmp	.+206    	; 0x120 <__bad_interrupt>
      52:	00 00       	nop
      54:	65 c0       	rjmp	.+202    	; 0x120 <__bad_interrupt>
      56:	00 00       	nop
      58:	63 c0       	rjmp	.+198    	; 0x120 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	61 c0       	rjmp	.+194    	; 0x120 <__bad_interrupt>
      5e:	00 00       	nop
      60:	5f c0       	rjmp	.+190    	; 0x120 <__bad_interrupt>
      62:	00 00       	nop
      64:	5d c0       	rjmp	.+186    	; 0x120 <__bad_interrupt>
      66:	00 00       	nop
      68:	5b c0       	rjmp	.+182    	; 0x120 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	59 c0       	rjmp	.+178    	; 0x120 <__bad_interrupt>
      6e:	00 00       	nop
      70:	57 c0       	rjmp	.+174    	; 0x120 <__bad_interrupt>
      72:	00 00       	nop
      74:	55 c0       	rjmp	.+170    	; 0x120 <__bad_interrupt>
      76:	00 00       	nop
      78:	53 c0       	rjmp	.+166    	; 0x120 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	51 c0       	rjmp	.+162    	; 0x120 <__bad_interrupt>
      7e:	00 00       	nop
      80:	4f c0       	rjmp	.+158    	; 0x120 <__bad_interrupt>
      82:	00 00       	nop
      84:	4d c0       	rjmp	.+154    	; 0x120 <__bad_interrupt>
      86:	00 00       	nop
      88:	4b c0       	rjmp	.+150    	; 0x120 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 07       	cpc	r19, r31
      ba:	2c 7a       	andi	r18, 0xAC	; 172
      bc:	a5 ba       	out	0x15, r10	; 21
      be:	6c c5       	rjmp	.+2776   	; 0xb98 <MoveRearRightLeg+0xac>
      c0:	90 da       	rcall	.-2784   	; 0xfffff5e2 <__eeprom_end+0xff7ef5e2>
      c2:	3b 93       	.word	0x933b	; ????
      c4:	65 fc       	sbrc	r6, 5
      c6:	8b bc       	out	0x2b, r8	; 43
      c8:	53 f8       	bld	r5, 3
      ca:	10 fd       	sbrc	r17, 0
      cc:	3c 56       	subi	r19, 0x6C	; 108
      ce:	92 83       	std	Z+2, r25	; 0x02
      d0:	4d bd       	out	0x2d, r20	; 45
      d2:	87 9d       	mul	r24, r7
      d4:	3a b6       	in	r3, 0x3a	; 58
      d6:	3d cb       	rjmp	.-2438   	; 0xfffff752 <__eeprom_end+0xff7ef752>
      d8:	c9 bf       	out	0x39, r28	; 57
      da:	5b be       	out	0x3b, r5	; 59
      dc:	73 da       	rcall	.-2842   	; 0xfffff5c4 <__eeprom_end+0xff7ef5c4>
      de:	0f c9       	rjmp	.-3554   	; 0xfffff2fe <__eeprom_end+0xff7ef2fe>
      e0:	3f 00       	.word	0x003f	; ????

000000e2 <__ctors_end>:
      e2:	11 24       	eor	r1, r1
      e4:	1f be       	out	0x3f, r1	; 63
      e6:	cf ef       	ldi	r28, 0xFF	; 255
      e8:	d0 e4       	ldi	r29, 0x40	; 64
      ea:	de bf       	out	0x3e, r29	; 62
      ec:	cd bf       	out	0x3d, r28	; 61

000000ee <__do_copy_data>:
      ee:	11 e0       	ldi	r17, 0x01	; 1
      f0:	a0 e0       	ldi	r26, 0x00	; 0
      f2:	b1 e0       	ldi	r27, 0x01	; 1
      f4:	ec e6       	ldi	r30, 0x6C	; 108
      f6:	f5 e3       	ldi	r31, 0x35	; 53
      f8:	00 e0       	ldi	r16, 0x00	; 0
      fa:	0b bf       	out	0x3b, r16	; 59
      fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x14>
      fe:	07 90       	elpm	r0, Z+
     100:	0d 92       	st	X+, r0
     102:	a0 32       	cpi	r26, 0x20	; 32
     104:	b1 07       	cpc	r27, r17
     106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0x10>

00000108 <__do_clear_bss>:
     108:	24 e0       	ldi	r18, 0x04	; 4
     10a:	a0 e2       	ldi	r26, 0x20	; 32
     10c:	b1 e0       	ldi	r27, 0x01	; 1
     10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
     110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
     112:	a5 3e       	cpi	r26, 0xE5	; 229
     114:	b2 07       	cpc	r27, r18
     116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>
     118:	0e 94 39 16 	call	0x2c72	; 0x2c72 <main>
     11c:	0c 94 b4 1a 	jmp	0x3568	; 0x3568 <_exit>

00000120 <__bad_interrupt>:
     120:	6f cf       	rjmp	.-290    	; 0x0 <__vectors>

00000122 <timer0Init>:
		// Vänta tills den sänt klart det sista
	}
	USART0RecieveMode();
	sei(); // Tillåt interrupts igen
	
}
     122:	85 b5       	in	r24, 0x25	; 37
     124:	84 60       	ori	r24, 0x04	; 4
     126:	85 bd       	out	0x25, r24	; 37
     128:	16 bc       	out	0x26, r1	; 38
     12a:	ee e6       	ldi	r30, 0x6E	; 110
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	81 60       	ori	r24, 0x01	; 1
     132:	80 83       	st	Z, r24
     134:	78 94       	sei
     136:	10 92 e4 04 	sts	0x04E4, r1
     13a:	08 95       	ret

0000013c <__vector_18>:
     13c:	1f 92       	push	r1
     13e:	0f 92       	push	r0
     140:	0f b6       	in	r0, 0x3f	; 63
     142:	0f 92       	push	r0
     144:	11 24       	eor	r1, r1
     146:	8f 93       	push	r24
     148:	80 91 e4 04 	lds	r24, 0x04E4
     14c:	8f 5f       	subi	r24, 0xFF	; 255
     14e:	80 93 e4 04 	sts	0x04E4, r24
     152:	8f 91       	pop	r24
     154:	0f 90       	pop	r0
     156:	0f be       	out	0x3f, r0	; 63
     158:	0f 90       	pop	r0
     15a:	1f 90       	pop	r1
     15c:	18 95       	reti

0000015e <initUSART>:
     15e:	84 e0       	ldi	r24, 0x04	; 4
     160:	8a b9       	out	0x0a, r24	; 10
     162:	1b b8       	out	0x0b, r1	; 11
     164:	10 92 c5 00 	sts	0x00C5, r1
     168:	10 92 c4 00 	sts	0x00C4, r1
     16c:	88 e1       	ldi	r24, 0x18	; 24
     16e:	80 93 c1 00 	sts	0x00C1, r24
     172:	86 e0       	ldi	r24, 0x06	; 6
     174:	80 93 c2 00 	sts	0x00C2, r24
     178:	08 95       	ret

0000017a <USARTWriteChar>:
     17a:	e0 ec       	ldi	r30, 0xC0	; 192
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	90 81       	ld	r25, Z
     180:	95 ff       	sbrs	r25, 5
     182:	fd cf       	rjmp	.-6      	; 0x17e <USARTWriteChar+0x4>
     184:	80 93 c6 00 	sts	0x00C6, r24
     188:	08 95       	ret

0000018a <USARTSendInstruction5>:
void USARTSendInstruction5(int ID, int instruction, int parameter0, int parameter1, int parameter2, int parameter3, int parameter4)
{
     18a:	cf 92       	push	r12
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	c8 2f       	mov	r28, r24
     19a:	d6 2f       	mov	r29, r22
     19c:	14 2f       	mov	r17, r20
     19e:	f2 2e       	mov	r15, r18
	PORTD = (0<<PORTD2);
}

void USART0SendMode()
{
	PORTD = (1<<PORTD2);
     1a0:	84 e0       	ldi	r24, 0x04	; 4
     1a2:	8b b9       	out	0x0b, r24	; 11
}
void USARTSendInstruction5(int ID, int instruction, int parameter0, int parameter1, int parameter2, int parameter3, int parameter4)
{
	// sätt USART till sändläge
	USART0SendMode();
	UCSR0A = UCSR0A | (0 << 6); // Gjorde så att vi kunde skicka en instruktion efter en instruktion/read.
     1a4:	e0 ec       	ldi	r30, 0xC0	; 192
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	80 83       	st	Z, r24
	USARTWriteChar(0xFF);
     1ac:	8f ef       	ldi	r24, 0xFF	; 255
     1ae:	e5 df       	rcall	.-54     	; 0x17a <USARTWriteChar>
	USARTWriteChar(0xFF);
     1b0:	8f ef       	ldi	r24, 0xFF	; 255
     1b2:	e3 df       	rcall	.-58     	; 0x17a <USARTWriteChar>
	USARTWriteChar(ID);
     1b4:	8c 2f       	mov	r24, r28
     1b6:	e1 df       	rcall	.-62     	; 0x17a <USARTWriteChar>
	USARTWriteChar(7); // Paketets längd.
     1b8:	87 e0       	ldi	r24, 0x07	; 7
     1ba:	df df       	rcall	.-66     	; 0x17a <USARTWriteChar>
	USARTWriteChar(instruction);
     1bc:	8d 2f       	mov	r24, r29
     1be:	dd df       	rcall	.-70     	; 0x17a <USARTWriteChar>
	USARTWriteChar(parameter0);
     1c0:	81 2f       	mov	r24, r17
     1c2:	db df       	rcall	.-74     	; 0x17a <USARTWriteChar>
	USARTWriteChar(parameter1);
     1c4:	8f 2d       	mov	r24, r15
     1c6:	d9 df       	rcall	.-78     	; 0x17a <USARTWriteChar>
	USARTWriteChar(parameter2);
     1c8:	80 2f       	mov	r24, r16
     1ca:	d7 df       	rcall	.-82     	; 0x17a <USARTWriteChar>
	USARTWriteChar(parameter3);
     1cc:	8e 2d       	mov	r24, r14
     1ce:	d5 df       	rcall	.-86     	; 0x17a <USARTWriteChar>
	USARTWriteChar(parameter4);
     1d0:	8c 2d       	mov	r24, r12
     1d2:	d3 df       	rcall	.-90     	; 0x17a <USARTWriteChar>
	cli();
     1d4:	f8 94       	cli
	USARTWriteChar(~(ID+7+instruction+parameter0+parameter1+parameter2+parameter3+parameter4)); // Checksum
     1d6:	87 e0       	ldi	r24, 0x07	; 7
     1d8:	8c 0d       	add	r24, r12
     1da:	e8 0e       	add	r14, r24
     1dc:	0e 0d       	add	r16, r14
     1de:	f0 0e       	add	r15, r16
     1e0:	1f 0d       	add	r17, r15
     1e2:	d1 0f       	add	r29, r17
     1e4:	8d 2f       	mov	r24, r29
     1e6:	8c 0f       	add	r24, r28
     1e8:	80 95       	com	r24
     1ea:	c7 df       	rcall	.-114    	; 0x17a <USARTWriteChar>
	while(!TXD0_FINISHED) //TXD0 sätts till 1 då all data shiftats ut ifrån usarten
     1ec:	e0 ec       	ldi	r30, 0xC0	; 192
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	80 81       	ld	r24, Z
     1f2:	86 ff       	sbrs	r24, 6
     1f4:	fd cf       	rjmp	.-6      	; 0x1f0 <USARTSendInstruction5+0x66>
#define REAR_RIGHT_LEG 4


void USART0RecieveMode() 
{
	PORTD = (0<<PORTD2);
     1f6:	1b b8       	out	0x0b, r1	; 11
		// Vänta tills den sänt klart det sista
	}
	;
	USART0RecieveMode();
 	//char test1 = RXD0_DATA; // För att läsa det som är i reciever bufferten, används nu för att readchar ska funka
	sei(); // Tillåt interrupts igen
     1f8:	78 94       	sei
	
}
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	1f 91       	pop	r17
     200:	0f 91       	pop	r16
     202:	ff 90       	pop	r15
     204:	ef 90       	pop	r14
     206:	cf 90       	pop	r12
     208:	08 95       	ret

0000020a <USARTReadChar>:


char USARTReadChar()
{
	//Vänta tills data är tillgänglig
	while(!RXD0_READY)
     20a:	e0 ec       	ldi	r30, 0xC0	; 192
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	80 81       	ld	r24, Z
     210:	88 23       	and	r24, r24
     212:	ec f7       	brge	.-6      	; 0x20e <USARTReadChar+0x4>
	{
		//Gör ingenting
	}
	return RXD0_DATA;
     214:	80 91 c6 00 	lds	r24, 0x00C6
}
     218:	08 95       	ret

0000021a <USARTReadStatusPacket>:

int USARTReadStatusPacket()
{
     21a:	ff 92       	push	r15
     21c:	0f 93       	push	r16
     21e:	1f 93       	push	r17
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
	int ValueOfParameters = 0;
	//if ((USARTReadChar() == 0xFF) & (USARTReadChar() == 0xFF)) // Kollar om två startbitar
	//{
		//char test = USARTReadChar();
		char Start1 = USARTReadChar();
     224:	f2 df       	rcall	.-28     	; 0x20a <USARTReadChar>
		char Start2 = USARTReadChar();
     226:	f1 df       	rcall	.-30     	; 0x20a <USARTReadChar>
		char ID = USARTReadChar();
     228:	f0 df       	rcall	.-32     	; 0x20a <USARTReadChar>
		char Length = USARTReadChar();
     22a:	ef df       	rcall	.-34     	; 0x20a <USARTReadChar>
     22c:	f8 2e       	mov	r15, r24
		char Error = USARTReadChar();
     22e:	ed df       	rcall	.-38     	; 0x20a <USARTReadChar>
		int HelpVariable = 0;
		// Läser av parametervärdena och sparar värdet i ValueOfParameters
		while (Length > 2) 
     230:	82 e0       	ldi	r24, 0x02	; 2
     232:	8f 15       	cp	r24, r15
     234:	a8 f4       	brcc	.+42     	; 0x260 <USARTReadStatusPacket+0x46>
     236:	c0 e0       	ldi	r28, 0x00	; 0
     238:	d0 e0       	ldi	r29, 0x00	; 0
	return RXD0_DATA;
}

int USARTReadStatusPacket()
{
	int ValueOfParameters = 0;
     23a:	00 e0       	ldi	r16, 0x00	; 0
     23c:	10 e0       	ldi	r17, 0x00	; 0
		char Error = USARTReadChar();
		int HelpVariable = 0;
		// Läser av parametervärdena och sparar värdet i ValueOfParameters
		while (Length > 2) 
		{
			ValueOfParameters = ValueOfParameters + (USARTReadChar() << (8*HelpVariable));
     23e:	e5 df       	rcall	.-54     	; 0x20a <USARTReadChar>
     240:	28 2f       	mov	r18, r24
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	0c 2e       	mov	r0, r28
     246:	02 c0       	rjmp	.+4      	; 0x24c <USARTReadStatusPacket+0x32>
     248:	22 0f       	add	r18, r18
     24a:	33 1f       	adc	r19, r19
     24c:	0a 94       	dec	r0
     24e:	e2 f7       	brpl	.-8      	; 0x248 <USARTReadStatusPacket+0x2e>
     250:	02 0f       	add	r16, r18
     252:	13 1f       	adc	r17, r19
			HelpVariable = HelpVariable + 1;
			Length = Length - 1;
     254:	fa 94       	dec	r15
     256:	28 96       	adiw	r28, 0x08	; 8
		char ID = USARTReadChar();
		char Length = USARTReadChar();
		char Error = USARTReadChar();
		int HelpVariable = 0;
		// Läser av parametervärdena och sparar värdet i ValueOfParameters
		while (Length > 2) 
     258:	82 e0       	ldi	r24, 0x02	; 2
     25a:	f8 12       	cpse	r15, r24
     25c:	f0 cf       	rjmp	.-32     	; 0x23e <USARTReadStatusPacket+0x24>
     25e:	02 c0       	rjmp	.+4      	; 0x264 <USARTReadStatusPacket+0x4a>
	return RXD0_DATA;
}

int USARTReadStatusPacket()
{
	int ValueOfParameters = 0;
     260:	00 e0       	ldi	r16, 0x00	; 0
     262:	10 e0       	ldi	r17, 0x00	; 0
			ValueOfParameters = ValueOfParameters + (USARTReadChar() << (8*HelpVariable));
			HelpVariable = HelpVariable + 1;
			Length = Length - 1;
		}
		
		char CheckSum = USARTReadChar();
     264:	d2 df       	rcall	.-92     	; 0x20a <USARTReadChar>
	//}
	return ValueOfParameters;
	
}
     266:	c8 01       	movw	r24, r16
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	1f 91       	pop	r17
     26e:	0f 91       	pop	r16
     270:	ff 90       	pop	r15
     272:	08 95       	ret

00000274 <MoveDynamixel>:

void MoveDynamixel(int ID,long int Degree,long int Velocity)
{
     274:	4f 92       	push	r4
     276:	5f 92       	push	r5
     278:	6f 92       	push	r6
     27a:	7f 92       	push	r7
     27c:	8f 92       	push	r8
     27e:	9f 92       	push	r9
     280:	af 92       	push	r10
     282:	bf 92       	push	r11
     284:	cf 92       	push	r12
     286:	df 92       	push	r13
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	0f 93       	push	r16
     28e:	1f 93       	push	r17
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	ec 01       	movw	r28, r24
     296:	68 01       	movw	r12, r16
     298:	79 01       	movw	r14, r18
	if ((Degree <= 300) & (Degree >= 0)) // Tillåtna grader är 0-300
     29a:	4d 32       	cpi	r20, 0x2D	; 45
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	58 07       	cpc	r21, r24
     2a0:	61 05       	cpc	r22, r1
     2a2:	71 05       	cpc	r23, r1
     2a4:	e0 f5       	brcc	.+120    	; 0x31e <MoveDynamixel+0xaa>
	{
		long int LowGoalPosition = ((Degree*1023)/300) & 0x00FF; // Gör om graden till ett tal mellan 0-1023 och delar upp det i LSB(byte) och MSB(byte)
     2a6:	af ef       	ldi	r26, 0xFF	; 255
     2a8:	b3 e0       	ldi	r27, 0x03	; 3
     2aa:	9a 01       	movw	r18, r20
     2ac:	ab 01       	movw	r20, r22
     2ae:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <__muluhisi3>
     2b2:	2c e2       	ldi	r18, 0x2C	; 44
     2b4:	31 e0       	ldi	r19, 0x01	; 1
     2b6:	40 e0       	ldi	r20, 0x00	; 0
     2b8:	50 e0       	ldi	r21, 0x00	; 0
     2ba:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <__divmodsi4>
     2be:	49 01       	movw	r8, r18
     2c0:	5a 01       	movw	r10, r20
     2c2:	99 24       	eor	r9, r9
     2c4:	aa 24       	eor	r10, r10
     2c6:	bb 24       	eor	r11, r11
		long int HighGoalPosition = ((Degree*1023)/300) & 0xFF00;
		HighGoalPosition = (HighGoalPosition >> 8);
     2c8:	43 2e       	mov	r4, r19
     2ca:	51 2c       	mov	r5, r1
	
		long int LowAngleVelocity = 0;
		long int HighAngleVelocity = 0;
	
		if (Velocity >= 114) // Om RPM över 114 så rör vi oss med snabbaste möjliga hastigheten med spänningen som tillhandahålls
     2cc:	82 e7       	ldi	r24, 0x72	; 114
     2ce:	c8 16       	cp	r12, r24
     2d0:	d1 04       	cpc	r13, r1
     2d2:	e1 04       	cpc	r14, r1
     2d4:	f1 04       	cpc	r15, r1
     2d6:	a4 f4       	brge	.+40     	; 0x300 <MoveDynamixel+0x8c>
			LowAngleVelocity = 0;
			HighAngleVelocity = 0;
		}
		else
		{
			LowAngleVelocity = ((Velocity*1023)/114) & 0x00FF;
     2d8:	af ef       	ldi	r26, 0xFF	; 255
     2da:	b3 e0       	ldi	r27, 0x03	; 3
     2dc:	a7 01       	movw	r20, r14
     2de:	96 01       	movw	r18, r12
     2e0:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <__muluhisi3>
     2e4:	22 e7       	ldi	r18, 0x72	; 114
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	40 e0       	ldi	r20, 0x00	; 0
     2ea:	50 e0       	ldi	r21, 0x00	; 0
     2ec:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <__divmodsi4>
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	ff 24       	eor	r15, r15
     2f6:	00 27       	eor	r16, r16
     2f8:	11 27       	eor	r17, r17
			HighAngleVelocity = ((Velocity*1023)/114) & 0xFF00;
			HighAngleVelocity = (HighAngleVelocity >> 8);
     2fa:	43 2f       	mov	r20, r19
     2fc:	50 e0       	ldi	r21, 0x00	; 0
     2fe:	06 c0       	rjmp	.+12     	; 0x30c <MoveDynamixel+0x98>
		long int HighAngleVelocity = 0;
	
		if (Velocity >= 114) // Om RPM över 114 så rör vi oss med snabbaste möjliga hastigheten med spänningen som tillhandahålls
		{
			LowAngleVelocity = 0;
			HighAngleVelocity = 0;
     300:	40 e0       	ldi	r20, 0x00	; 0
     302:	50 e0       	ldi	r21, 0x00	; 0
     304:	ba 01       	movw	r22, r20
		long int LowAngleVelocity = 0;
		long int HighAngleVelocity = 0;
	
		if (Velocity >= 114) // Om RPM över 114 så rör vi oss med snabbaste möjliga hastigheten med spänningen som tillhandahålls
		{
			LowAngleVelocity = 0;
     306:	e1 2c       	mov	r14, r1
     308:	f1 2c       	mov	r15, r1
     30a:	87 01       	movw	r16, r14
			LowAngleVelocity = ((Velocity*1023)/114) & 0x00FF;
			HighAngleVelocity = ((Velocity*1023)/114) & 0xFF00;
			HighAngleVelocity = (HighAngleVelocity >> 8);
		}
	
		USARTSendInstruction5(ID,INST_WRITE,P_GOAL_POSITION_L,LowGoalPosition ,HighGoalPosition, LowAngleVelocity, HighAngleVelocity);
     30c:	6a 01       	movw	r12, r20
     30e:	82 01       	movw	r16, r4
     310:	94 01       	movw	r18, r8
     312:	4e e1       	ldi	r20, 0x1E	; 30
     314:	50 e0       	ldi	r21, 0x00	; 0
     316:	63 e0       	ldi	r22, 0x03	; 3
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	ce 01       	movw	r24, r28
     31c:	36 df       	rcall	.-404    	; 0x18a <USARTSendInstruction5>
	}
	return;
}
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	1f 91       	pop	r17
     324:	0f 91       	pop	r16
     326:	ff 90       	pop	r15
     328:	ef 90       	pop	r14
     32a:	df 90       	pop	r13
     32c:	cf 90       	pop	r12
     32e:	bf 90       	pop	r11
     330:	af 90       	pop	r10
     332:	9f 90       	pop	r9
     334:	8f 90       	pop	r8
     336:	7f 90       	pop	r7
     338:	6f 90       	pop	r6
     33a:	5f 90       	pop	r5
     33c:	4f 90       	pop	r4
     33e:	08 95       	ret

00000340 <MoveFrontLeftLeg>:

void MoveFrontLeftLeg(float x, float y, float z, int speed)
{
     340:	4f 92       	push	r4
     342:	5f 92       	push	r5
     344:	6f 92       	push	r6
     346:	7f 92       	push	r7
     348:	8f 92       	push	r8
     34a:	9f 92       	push	r9
     34c:	af 92       	push	r10
     34e:	bf 92       	push	r11
     350:	cf 92       	push	r12
     352:	df 92       	push	r13
     354:	ef 92       	push	r14
     356:	ff 92       	push	r15
     358:	0f 93       	push	r16
     35a:	1f 93       	push	r17
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
     364:	60 97       	sbiw	r28, 0x10	; 16
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	f8 94       	cli
     36a:	de bf       	out	0x3e, r29	; 62
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	cd bf       	out	0x3d, r28	; 61
     370:	2b 01       	movw	r4, r22
     372:	3c 01       	movw	r6, r24
     374:	49 01       	movw	r8, r18
     376:	5a 01       	movw	r10, r20
     378:	e9 82       	std	Y+1, r14	; 0x01
     37a:	fa 82       	std	Y+2, r15	; 0x02
     37c:	0b 83       	std	Y+3, r16	; 0x03
     37e:	1c 83       	std	Y+4, r17	; 0x04
     380:	86 01       	movw	r16, r12
	long int theta1 = atan2f(-x,y)*180/PI;
     382:	90 58       	subi	r25, 0x80	; 128
     384:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <atan2>
     388:	6d 87       	std	Y+13, r22	; 0x0d
     38a:	7e 87       	std	Y+14, r23	; 0x0e
     38c:	8f 87       	std	Y+15, r24	; 0x0f
     38e:	98 8b       	std	Y+16, r25	; 0x10
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) + 
     390:	29 81       	ldd	r18, Y+1	; 0x01
     392:	3a 81       	ldd	r19, Y+2	; 0x02
     394:	4b 81       	ldd	r20, Y+3	; 0x03
     396:	5c 81       	ldd	r21, Y+4	; 0x04
     398:	ca 01       	movw	r24, r20
     39a:	b9 01       	movw	r22, r18
     39c:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     3a0:	6b 01       	movw	r12, r22
     3a2:	7c 01       	movw	r14, r24
     3a4:	a3 01       	movw	r20, r6
     3a6:	92 01       	movw	r18, r4
     3a8:	c3 01       	movw	r24, r6
     3aa:	b2 01       	movw	r22, r4
     3ac:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     3b0:	2b 01       	movw	r4, r22
     3b2:	3c 01       	movw	r6, r24
     3b4:	a5 01       	movw	r20, r10
     3b6:	94 01       	movw	r18, r8
     3b8:	c5 01       	movw	r24, r10
     3ba:	b4 01       	movw	r22, r8
     3bc:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     3c0:	9b 01       	movw	r18, r22
     3c2:	ac 01       	movw	r20, r24
     3c4:	c3 01       	movw	r24, r6
     3c6:	b2 01       	movw	r22, r4
     3c8:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
     3cc:	2b 01       	movw	r4, r22
     3ce:	3c 01       	movw	r6, r24
     3d0:	0e 94 07 1a 	call	0x340e	; 0x340e <sqrt>
     3d4:	20 e0       	ldi	r18, 0x00	; 0
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	48 e4       	ldi	r20, 0x48	; 72
     3da:	52 e4       	ldi	r21, 0x42	; 66
     3dc:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
     3e0:	4b 01       	movw	r8, r22
     3e2:	5c 01       	movw	r10, r24
     3e4:	9b 01       	movw	r18, r22
     3e6:	ac 01       	movw	r20, r24
     3e8:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     3ec:	6d 83       	std	Y+5, r22	; 0x05
     3ee:	7e 83       	std	Y+6, r23	; 0x06
     3f0:	8f 83       	std	Y+7, r24	; 0x07
     3f2:	98 87       	std	Y+8, r25	; 0x08
     3f4:	9b 01       	movw	r18, r22
     3f6:	ac 01       	movw	r20, r24
     3f8:	c7 01       	movw	r24, r14
     3fa:	b6 01       	movw	r22, r12
     3fc:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
     400:	69 87       	std	Y+9, r22	; 0x09
     402:	7a 87       	std	Y+10, r23	; 0x0a
     404:	8b 87       	std	Y+11, r24	; 0x0b
     406:	9c 87       	std	Y+12, r25	; 0x0c
     408:	0e 94 07 1a 	call	0x340e	; 0x340e <sqrt>
     40c:	9b 01       	movw	r18, r22
     40e:	ac 01       	movw	r20, r24
     410:	69 81       	ldd	r22, Y+1	; 0x01
     412:	7a 81       	ldd	r23, Y+2	; 0x02
     414:	8b 81       	ldd	r24, Y+3	; 0x03
     416:	9c 81       	ldd	r25, Y+4	; 0x04
     418:	90 58       	subi	r25, 0x80	; 128
     41a:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
     41e:	0e 94 5d 17 	call	0x2eba	; 0x2eba <acos>
     422:	69 83       	std	Y+1, r22	; 0x01
     424:	7a 83       	std	Y+2, r23	; 0x02
     426:	8b 83       	std	Y+3, r24	; 0x03
     428:	9c 83       	std	Y+4, r25	; 0x04
		acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
     42a:	20 e0       	ldi	r18, 0x00	; 0
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	48 e4       	ldi	r20, 0x48	; 72
     430:	52 e4       	ldi	r21, 0x42	; 66
     432:	c3 01       	movw	r24, r6
     434:	b2 01       	movw	r22, r4
     436:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
     43a:	0e 94 07 1a 	call	0x340e	; 0x340e <sqrt>
     43e:	9b 01       	movw	r18, r22
     440:	ac 01       	movw	r20, r24
     442:	c5 01       	movw	r24, r10
     444:	b4 01       	movw	r22, r8
     446:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     44a:	9b 01       	movw	r18, r22
     44c:	ac 01       	movw	r20, r24
     44e:	c7 01       	movw	r24, r14
     450:	b6 01       	movw	r22, r12
     452:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
     456:	0e 94 07 1a 	call	0x340e	; 0x340e <sqrt>
     45a:	2b 01       	movw	r4, r22
     45c:	3c 01       	movw	r6, r24
     45e:	20 e0       	ldi	r18, 0x00	; 0
     460:	38 e4       	ldi	r19, 0x48	; 72
     462:	4c e8       	ldi	r20, 0x8C	; 140
     464:	55 e4       	ldi	r21, 0x45	; 69
     466:	69 85       	ldd	r22, Y+9	; 0x09
     468:	7a 85       	ldd	r23, Y+10	; 0x0a
     46a:	8b 85       	ldd	r24, Y+11	; 0x0b
     46c:	9c 85       	ldd	r25, Y+12	; 0x0c
     46e:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	38 e0       	ldi	r19, 0x08	; 8
     476:	44 e8       	ldi	r20, 0x84	; 132
     478:	56 e4       	ldi	r21, 0x46	; 70
     47a:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
     47e:	4b 01       	movw	r8, r22
     480:	5c 01       	movw	r10, r24
     482:	a3 01       	movw	r20, r6
     484:	92 01       	movw	r18, r4
     486:	c3 01       	movw	r24, r6
     488:	b2 01       	movw	r22, r4
     48a:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	46 e8       	ldi	r20, 0x86	; 134
     494:	52 e4       	ldi	r21, 0x42	; 66
     496:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     49a:	9b 01       	movw	r18, r22
     49c:	ac 01       	movw	r20, r24
     49e:	c5 01       	movw	r24, r10
     4a0:	b4 01       	movw	r22, r8
     4a2:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
     4a6:	0e 94 5d 17 	call	0x2eba	; 0x2eba <acos>
     4aa:	2b 01       	movw	r4, r22
     4ac:	3c 01       	movw	r6, r24
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     4ae:	a7 01       	movw	r20, r14
     4b0:	96 01       	movw	r18, r12
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	7a e1       	ldi	r23, 0x1A	; 26
     4b6:	87 ea       	ldi	r24, 0xA7	; 167
     4b8:	96 e4       	ldi	r25, 0x46	; 70
     4ba:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
     4be:	2d 81       	ldd	r18, Y+5	; 0x05
     4c0:	3e 81       	ldd	r19, Y+6	; 0x06
     4c2:	4f 81       	ldd	r20, Y+7	; 0x07
     4c4:	58 85       	ldd	r21, Y+8	; 0x08
     4c6:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	38 e1       	ldi	r19, 0x18	; 24
     4ce:	48 e8       	ldi	r20, 0x88	; 136
     4d0:	56 e4       	ldi	r21, 0x46	; 70
     4d2:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
     4d6:	0e 94 5d 17 	call	0x2eba	; 0x2eba <acos>
     4da:	4b 01       	movw	r8, r22
     4dc:	5c 01       	movw	r10, r24
	long int ActuatorAngle1 =  theta1 + 105;
	long int ActuatorAngle2 =  theta2 + 75;
	long int ActuatorAngle3 =  theta3 + 1;
	
	
	MoveDynamixel(2,ActuatorAngle1,speed);
     4de:	68 01       	movw	r12, r16
     4e0:	ee 24       	eor	r14, r14
     4e2:	d7 fc       	sbrc	r13, 7
     4e4:	e0 94       	com	r14
     4e6:	fe 2c       	mov	r15, r14
	return;
}

void MoveFrontLeftLeg(float x, float y, float z, int speed)
{
	long int theta1 = atan2f(-x,y)*180/PI;
     4e8:	20 e0       	ldi	r18, 0x00	; 0
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	44 e3       	ldi	r20, 0x34	; 52
     4ee:	53 e4       	ldi	r21, 0x43	; 67
     4f0:	6d 85       	ldd	r22, Y+13	; 0x0d
     4f2:	7e 85       	ldd	r23, Y+14	; 0x0e
     4f4:	8f 85       	ldd	r24, Y+15	; 0x0f
     4f6:	98 89       	ldd	r25, Y+16	; 0x10
     4f8:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     4fc:	28 ed       	ldi	r18, 0xD8	; 216
     4fe:	3f e0       	ldi	r19, 0x0F	; 15
     500:	49 e4       	ldi	r20, 0x49	; 73
     502:	50 e4       	ldi	r21, 0x40	; 64
     504:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
     508:	0e 94 9a 18 	call	0x3134	; 0x3134 <__fixsfsi>
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) + 
		acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

	long int ActuatorAngle1 =  theta1 + 105;
     50c:	ab 01       	movw	r20, r22
     50e:	bc 01       	movw	r22, r24
     510:	47 59       	subi	r20, 0x97	; 151
     512:	5f 4f       	sbci	r21, 0xFF	; 255
     514:	6f 4f       	sbci	r22, 0xFF	; 255
     516:	7f 4f       	sbci	r23, 0xFF	; 255
	long int ActuatorAngle2 =  theta2 + 75;
	long int ActuatorAngle3 =  theta3 + 1;
	
	
	MoveDynamixel(2,ActuatorAngle1,speed);
     518:	97 01       	movw	r18, r14
     51a:	86 01       	movw	r16, r12
     51c:	82 e0       	ldi	r24, 0x02	; 2
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	a9 de       	rcall	.-686    	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
     522:	7b de       	rcall	.-778    	; 0x21a <USARTReadStatusPacket>
}

void MoveFrontLeftLeg(float x, float y, float z, int speed)
{
	long int theta1 = atan2f(-x,y)*180/PI;
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) + 
     524:	a3 01       	movw	r20, r6
     526:	92 01       	movw	r18, r4
     528:	69 81       	ldd	r22, Y+1	; 0x01
     52a:	7a 81       	ldd	r23, Y+2	; 0x02
     52c:	8b 81       	ldd	r24, Y+3	; 0x03
     52e:	9c 81       	ldd	r25, Y+4	; 0x04
     530:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
     534:	24 ee       	ldi	r18, 0xE4	; 228
     536:	3e e2       	ldi	r19, 0x2E	; 46
     538:	45 e6       	ldi	r20, 0x65	; 101
     53a:	52 e4       	ldi	r21, 0x42	; 66
     53c:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     540:	0e 94 9a 18 	call	0x3134	; 0x3134 <__fixsfsi>
		acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

	long int ActuatorAngle1 =  theta1 + 105;
	long int ActuatorAngle2 =  theta2 + 75;
     544:	ab 01       	movw	r20, r22
     546:	bc 01       	movw	r22, r24
     548:	45 5b       	subi	r20, 0xB5	; 181
     54a:	5f 4f       	sbci	r21, 0xFF	; 255
     54c:	6f 4f       	sbci	r22, 0xFF	; 255
     54e:	7f 4f       	sbci	r23, 0xFF	; 255
	long int ActuatorAngle3 =  theta3 + 1;
	
	
	MoveDynamixel(2,ActuatorAngle1,speed);
	USARTReadStatusPacket();
	MoveDynamixel(4,ActuatorAngle2,speed);
     550:	97 01       	movw	r18, r14
     552:	86 01       	movw	r16, r12
     554:	84 e0       	ldi	r24, 0x04	; 4
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	8d de       	rcall	.-742    	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
     55a:	5f de       	rcall	.-834    	; 0x21a <USARTReadStatusPacket>
{
	long int theta1 = atan2f(-x,y)*180/PI;
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) + 
		acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	44 e3       	ldi	r20, 0x34	; 52
     562:	53 e4       	ldi	r21, 0x43	; 67
     564:	c5 01       	movw	r24, r10
     566:	b4 01       	movw	r22, r8
     568:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     56c:	28 ed       	ldi	r18, 0xD8	; 216
     56e:	3f e0       	ldi	r19, 0x0F	; 15
     570:	49 e4       	ldi	r20, 0x49	; 73
     572:	50 e4       	ldi	r21, 0x40	; 64
     574:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
     578:	0e 94 9a 18 	call	0x3134	; 0x3134 <__fixsfsi>

	long int ActuatorAngle1 =  theta1 + 105;
	long int ActuatorAngle2 =  theta2 + 75;
	long int ActuatorAngle3 =  theta3 + 1;
     57c:	ab 01       	movw	r20, r22
     57e:	bc 01       	movw	r22, r24
     580:	4f 5f       	subi	r20, 0xFF	; 255
     582:	5f 4f       	sbci	r21, 0xFF	; 255
     584:	6f 4f       	sbci	r22, 0xFF	; 255
     586:	7f 4f       	sbci	r23, 0xFF	; 255
	
	MoveDynamixel(2,ActuatorAngle1,speed);
	USARTReadStatusPacket();
	MoveDynamixel(4,ActuatorAngle2,speed);
	USARTReadStatusPacket();
	MoveDynamixel(6,ActuatorAngle3,speed);
     588:	97 01       	movw	r18, r14
     58a:	86 01       	movw	r16, r12
     58c:	86 e0       	ldi	r24, 0x06	; 6
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	71 de       	rcall	.-798    	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
     592:	43 de       	rcall	.-890    	; 0x21a <USARTReadStatusPacket>
	return;
}
     594:	60 96       	adiw	r28, 0x10	; 16
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	de bf       	out	0x3e, r29	; 62
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	cd bf       	out	0x3d, r28	; 61
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	1f 91       	pop	r17
     5a6:	0f 91       	pop	r16
     5a8:	ff 90       	pop	r15
     5aa:	ef 90       	pop	r14
     5ac:	df 90       	pop	r13
     5ae:	cf 90       	pop	r12
     5b0:	bf 90       	pop	r11
     5b2:	af 90       	pop	r10
     5b4:	9f 90       	pop	r9
     5b6:	8f 90       	pop	r8
     5b8:	7f 90       	pop	r7
     5ba:	6f 90       	pop	r6
     5bc:	5f 90       	pop	r5
     5be:	4f 90       	pop	r4
     5c0:	08 95       	ret

000005c2 <MoveFrontRightLeg>:

void MoveFrontRightLeg(float x, float y, float z, int speed)
{
     5c2:	4f 92       	push	r4
     5c4:	5f 92       	push	r5
     5c6:	6f 92       	push	r6
     5c8:	7f 92       	push	r7
     5ca:	8f 92       	push	r8
     5cc:	9f 92       	push	r9
     5ce:	af 92       	push	r10
     5d0:	bf 92       	push	r11
     5d2:	cf 92       	push	r12
     5d4:	df 92       	push	r13
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
     5e6:	60 97       	sbiw	r28, 0x10	; 16
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	f8 94       	cli
     5ec:	de bf       	out	0x3e, r29	; 62
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	cd bf       	out	0x3d, r28	; 61
     5f2:	2b 01       	movw	r4, r22
     5f4:	3c 01       	movw	r6, r24
     5f6:	49 01       	movw	r8, r18
     5f8:	5a 01       	movw	r10, r20
     5fa:	e9 82       	std	Y+1, r14	; 0x01
     5fc:	fa 82       	std	Y+2, r15	; 0x02
     5fe:	0b 83       	std	Y+3, r16	; 0x03
     600:	1c 83       	std	Y+4, r17	; 0x04
     602:	86 01       	movw	r16, r12
	long int theta1 = atan2f(-x,y)*180/PI;
     604:	90 58       	subi	r25, 0x80	; 128
     606:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <atan2>
     60a:	6d 87       	std	Y+13, r22	; 0x0d
     60c:	7e 87       	std	Y+14, r23	; 0x0e
     60e:	8f 87       	std	Y+15, r24	; 0x0f
     610:	98 8b       	std	Y+16, r25	; 0x10
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
     612:	29 81       	ldd	r18, Y+1	; 0x01
     614:	3a 81       	ldd	r19, Y+2	; 0x02
     616:	4b 81       	ldd	r20, Y+3	; 0x03
     618:	5c 81       	ldd	r21, Y+4	; 0x04
     61a:	ca 01       	movw	r24, r20
     61c:	b9 01       	movw	r22, r18
     61e:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     622:	6b 01       	movw	r12, r22
     624:	7c 01       	movw	r14, r24
     626:	a3 01       	movw	r20, r6
     628:	92 01       	movw	r18, r4
     62a:	c3 01       	movw	r24, r6
     62c:	b2 01       	movw	r22, r4
     62e:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     632:	2b 01       	movw	r4, r22
     634:	3c 01       	movw	r6, r24
     636:	a5 01       	movw	r20, r10
     638:	94 01       	movw	r18, r8
     63a:	c5 01       	movw	r24, r10
     63c:	b4 01       	movw	r22, r8
     63e:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     642:	9b 01       	movw	r18, r22
     644:	ac 01       	movw	r20, r24
     646:	c3 01       	movw	r24, r6
     648:	b2 01       	movw	r22, r4
     64a:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
     64e:	2b 01       	movw	r4, r22
     650:	3c 01       	movw	r6, r24
     652:	0e 94 07 1a 	call	0x340e	; 0x340e <sqrt>
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	48 e4       	ldi	r20, 0x48	; 72
     65c:	52 e4       	ldi	r21, 0x42	; 66
     65e:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
     662:	4b 01       	movw	r8, r22
     664:	5c 01       	movw	r10, r24
     666:	9b 01       	movw	r18, r22
     668:	ac 01       	movw	r20, r24
     66a:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     66e:	6d 83       	std	Y+5, r22	; 0x05
     670:	7e 83       	std	Y+6, r23	; 0x06
     672:	8f 83       	std	Y+7, r24	; 0x07
     674:	98 87       	std	Y+8, r25	; 0x08
     676:	9b 01       	movw	r18, r22
     678:	ac 01       	movw	r20, r24
     67a:	c7 01       	movw	r24, r14
     67c:	b6 01       	movw	r22, r12
     67e:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
     682:	69 87       	std	Y+9, r22	; 0x09
     684:	7a 87       	std	Y+10, r23	; 0x0a
     686:	8b 87       	std	Y+11, r24	; 0x0b
     688:	9c 87       	std	Y+12, r25	; 0x0c
     68a:	0e 94 07 1a 	call	0x340e	; 0x340e <sqrt>
     68e:	9b 01       	movw	r18, r22
     690:	ac 01       	movw	r20, r24
     692:	69 81       	ldd	r22, Y+1	; 0x01
     694:	7a 81       	ldd	r23, Y+2	; 0x02
     696:	8b 81       	ldd	r24, Y+3	; 0x03
     698:	9c 81       	ldd	r25, Y+4	; 0x04
     69a:	90 58       	subi	r25, 0x80	; 128
     69c:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
     6a0:	0e 94 5d 17 	call	0x2eba	; 0x2eba <acos>
     6a4:	69 83       	std	Y+1, r22	; 0x01
     6a6:	7a 83       	std	Y+2, r23	; 0x02
     6a8:	8b 83       	std	Y+3, r24	; 0x03
     6aa:	9c 83       	std	Y+4, r25	; 0x04
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	48 e4       	ldi	r20, 0x48	; 72
     6b2:	52 e4       	ldi	r21, 0x42	; 66
     6b4:	c3 01       	movw	r24, r6
     6b6:	b2 01       	movw	r22, r4
     6b8:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
     6bc:	0e 94 07 1a 	call	0x340e	; 0x340e <sqrt>
     6c0:	9b 01       	movw	r18, r22
     6c2:	ac 01       	movw	r20, r24
     6c4:	c5 01       	movw	r24, r10
     6c6:	b4 01       	movw	r22, r8
     6c8:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     6cc:	9b 01       	movw	r18, r22
     6ce:	ac 01       	movw	r20, r24
     6d0:	c7 01       	movw	r24, r14
     6d2:	b6 01       	movw	r22, r12
     6d4:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
     6d8:	0e 94 07 1a 	call	0x340e	; 0x340e <sqrt>
     6dc:	2b 01       	movw	r4, r22
     6de:	3c 01       	movw	r6, r24
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	38 e4       	ldi	r19, 0x48	; 72
     6e4:	4c e8       	ldi	r20, 0x8C	; 140
     6e6:	55 e4       	ldi	r21, 0x45	; 69
     6e8:	69 85       	ldd	r22, Y+9	; 0x09
     6ea:	7a 85       	ldd	r23, Y+10	; 0x0a
     6ec:	8b 85       	ldd	r24, Y+11	; 0x0b
     6ee:	9c 85       	ldd	r25, Y+12	; 0x0c
     6f0:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	38 e0       	ldi	r19, 0x08	; 8
     6f8:	44 e8       	ldi	r20, 0x84	; 132
     6fa:	56 e4       	ldi	r21, 0x46	; 70
     6fc:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
     700:	4b 01       	movw	r8, r22
     702:	5c 01       	movw	r10, r24
     704:	a3 01       	movw	r20, r6
     706:	92 01       	movw	r18, r4
     708:	c3 01       	movw	r24, r6
     70a:	b2 01       	movw	r22, r4
     70c:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	46 e8       	ldi	r20, 0x86	; 134
     716:	52 e4       	ldi	r21, 0x42	; 66
     718:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     71c:	9b 01       	movw	r18, r22
     71e:	ac 01       	movw	r20, r24
     720:	c5 01       	movw	r24, r10
     722:	b4 01       	movw	r22, r8
     724:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
     728:	0e 94 5d 17 	call	0x2eba	; 0x2eba <acos>
     72c:	2b 01       	movw	r4, r22
     72e:	3c 01       	movw	r6, r24
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     730:	a7 01       	movw	r20, r14
     732:	96 01       	movw	r18, r12
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	7a e1       	ldi	r23, 0x1A	; 26
     738:	87 ea       	ldi	r24, 0xA7	; 167
     73a:	96 e4       	ldi	r25, 0x46	; 70
     73c:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
     740:	2d 81       	ldd	r18, Y+5	; 0x05
     742:	3e 81       	ldd	r19, Y+6	; 0x06
     744:	4f 81       	ldd	r20, Y+7	; 0x07
     746:	58 85       	ldd	r21, Y+8	; 0x08
     748:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	38 e1       	ldi	r19, 0x18	; 24
     750:	48 e8       	ldi	r20, 0x88	; 136
     752:	56 e4       	ldi	r21, 0x46	; 70
     754:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
     758:	0e 94 5d 17 	call	0x2eba	; 0x2eba <acos>
     75c:	4b 01       	movw	r8, r22
     75e:	5c 01       	movw	r10, r24
	long int ActuatorAngle1 =  theta1 + 193;
	long int ActuatorAngle2 =  theta2 + 75;
	long int ActuatorAngle3 =  theta3 + 3;
	
	
	MoveDynamixel(8,ActuatorAngle1,speed);
     760:	68 01       	movw	r12, r16
     762:	ee 24       	eor	r14, r14
     764:	d7 fc       	sbrc	r13, 7
     766:	e0 94       	com	r14
     768:	fe 2c       	mov	r15, r14
	return;
}

void MoveFrontRightLeg(float x, float y, float z, int speed)
{
	long int theta1 = atan2f(-x,y)*180/PI;
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	44 e3       	ldi	r20, 0x34	; 52
     770:	53 e4       	ldi	r21, 0x43	; 67
     772:	6d 85       	ldd	r22, Y+13	; 0x0d
     774:	7e 85       	ldd	r23, Y+14	; 0x0e
     776:	8f 85       	ldd	r24, Y+15	; 0x0f
     778:	98 89       	ldd	r25, Y+16	; 0x10
     77a:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     77e:	28 ed       	ldi	r18, 0xD8	; 216
     780:	3f e0       	ldi	r19, 0x0F	; 15
     782:	49 e4       	ldi	r20, 0x49	; 73
     784:	50 e4       	ldi	r21, 0x40	; 64
     786:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
     78a:	0e 94 9a 18 	call	0x3134	; 0x3134 <__fixsfsi>
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

	long int ActuatorAngle1 =  theta1 + 193;
     78e:	ab 01       	movw	r20, r22
     790:	bc 01       	movw	r22, r24
     792:	4f 53       	subi	r20, 0x3F	; 63
     794:	5f 4f       	sbci	r21, 0xFF	; 255
     796:	6f 4f       	sbci	r22, 0xFF	; 255
     798:	7f 4f       	sbci	r23, 0xFF	; 255
	long int ActuatorAngle2 =  theta2 + 75;
	long int ActuatorAngle3 =  theta3 + 3;
	
	
	MoveDynamixel(8,ActuatorAngle1,speed);
     79a:	97 01       	movw	r18, r14
     79c:	86 01       	movw	r16, r12
     79e:	88 e0       	ldi	r24, 0x08	; 8
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	68 dd       	rcall	.-1328   	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
     7a4:	3a dd       	rcall	.-1420   	; 0x21a <USARTReadStatusPacket>
}

void MoveFrontRightLeg(float x, float y, float z, int speed)
{
	long int theta1 = atan2f(-x,y)*180/PI;
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
     7a6:	a3 01       	movw	r20, r6
     7a8:	92 01       	movw	r18, r4
     7aa:	69 81       	ldd	r22, Y+1	; 0x01
     7ac:	7a 81       	ldd	r23, Y+2	; 0x02
     7ae:	8b 81       	ldd	r24, Y+3	; 0x03
     7b0:	9c 81       	ldd	r25, Y+4	; 0x04
     7b2:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
     7b6:	24 ee       	ldi	r18, 0xE4	; 228
     7b8:	3e e2       	ldi	r19, 0x2E	; 46
     7ba:	45 e6       	ldi	r20, 0x65	; 101
     7bc:	52 e4       	ldi	r21, 0x42	; 66
     7be:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     7c2:	0e 94 9a 18 	call	0x3134	; 0x3134 <__fixsfsi>
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

	long int ActuatorAngle1 =  theta1 + 193;
	long int ActuatorAngle2 =  theta2 + 75;
     7c6:	ab 01       	movw	r20, r22
     7c8:	bc 01       	movw	r22, r24
     7ca:	45 5b       	subi	r20, 0xB5	; 181
     7cc:	5f 4f       	sbci	r21, 0xFF	; 255
     7ce:	6f 4f       	sbci	r22, 0xFF	; 255
     7d0:	7f 4f       	sbci	r23, 0xFF	; 255
	long int ActuatorAngle3 =  theta3 + 3;
	
	
	MoveDynamixel(8,ActuatorAngle1,speed);
	USARTReadStatusPacket();
	MoveDynamixel(10,ActuatorAngle2,speed);
     7d2:	97 01       	movw	r18, r14
     7d4:	86 01       	movw	r16, r12
     7d6:	8a e0       	ldi	r24, 0x0A	; 10
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	4c dd       	rcall	.-1384   	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
     7dc:	1e dd       	rcall	.-1476   	; 0x21a <USARTReadStatusPacket>
{
	long int theta1 = atan2f(-x,y)*180/PI;
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     7de:	20 e0       	ldi	r18, 0x00	; 0
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	44 e3       	ldi	r20, 0x34	; 52
     7e4:	53 e4       	ldi	r21, 0x43	; 67
     7e6:	c5 01       	movw	r24, r10
     7e8:	b4 01       	movw	r22, r8
     7ea:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     7ee:	28 ed       	ldi	r18, 0xD8	; 216
     7f0:	3f e0       	ldi	r19, 0x0F	; 15
     7f2:	49 e4       	ldi	r20, 0x49	; 73
     7f4:	50 e4       	ldi	r21, 0x40	; 64
     7f6:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
     7fa:	0e 94 9a 18 	call	0x3134	; 0x3134 <__fixsfsi>

	long int ActuatorAngle1 =  theta1 + 193;
	long int ActuatorAngle2 =  theta2 + 75;
	long int ActuatorAngle3 =  theta3 + 3;
     7fe:	ab 01       	movw	r20, r22
     800:	bc 01       	movw	r22, r24
     802:	4d 5f       	subi	r20, 0xFD	; 253
     804:	5f 4f       	sbci	r21, 0xFF	; 255
     806:	6f 4f       	sbci	r22, 0xFF	; 255
     808:	7f 4f       	sbci	r23, 0xFF	; 255
	
	MoveDynamixel(8,ActuatorAngle1,speed);
	USARTReadStatusPacket();
	MoveDynamixel(10,ActuatorAngle2,speed);
	USARTReadStatusPacket();
	MoveDynamixel(12,ActuatorAngle3,speed);
     80a:	97 01       	movw	r18, r14
     80c:	86 01       	movw	r16, r12
     80e:	8c e0       	ldi	r24, 0x0C	; 12
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	30 dd       	rcall	.-1440   	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();	
     814:	02 dd       	rcall	.-1532   	; 0x21a <USARTReadStatusPacket>
	return;
}
     816:	60 96       	adiw	r28, 0x10	; 16
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	0f be       	out	0x3f, r0	; 63
     820:	cd bf       	out	0x3d, r28	; 61
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	ff 90       	pop	r15
     82c:	ef 90       	pop	r14
     82e:	df 90       	pop	r13
     830:	cf 90       	pop	r12
     832:	bf 90       	pop	r11
     834:	af 90       	pop	r10
     836:	9f 90       	pop	r9
     838:	8f 90       	pop	r8
     83a:	7f 90       	pop	r7
     83c:	6f 90       	pop	r6
     83e:	5f 90       	pop	r5
     840:	4f 90       	pop	r4
     842:	08 95       	ret

00000844 <MoveRearLeftLeg>:
void MoveRearLeftLeg(float x, float y, float z, int speed)
{
     844:	4f 92       	push	r4
     846:	5f 92       	push	r5
     848:	6f 92       	push	r6
     84a:	7f 92       	push	r7
     84c:	8f 92       	push	r8
     84e:	9f 92       	push	r9
     850:	af 92       	push	r10
     852:	bf 92       	push	r11
     854:	cf 92       	push	r12
     856:	df 92       	push	r13
     858:	ef 92       	push	r14
     85a:	ff 92       	push	r15
     85c:	0f 93       	push	r16
     85e:	1f 93       	push	r17
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62
     868:	60 97       	sbiw	r28, 0x10	; 16
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	f8 94       	cli
     86e:	de bf       	out	0x3e, r29	; 62
     870:	0f be       	out	0x3f, r0	; 63
     872:	cd bf       	out	0x3d, r28	; 61
     874:	2b 01       	movw	r4, r22
     876:	3c 01       	movw	r6, r24
     878:	49 01       	movw	r8, r18
     87a:	5a 01       	movw	r10, r20
     87c:	e9 82       	std	Y+1, r14	; 0x01
     87e:	fa 82       	std	Y+2, r15	; 0x02
     880:	0b 83       	std	Y+3, r16	; 0x03
     882:	1c 83       	std	Y+4, r17	; 0x04
     884:	86 01       	movw	r16, r12
	long int theta1 = atan2f(x,-y)*180/PI;
     886:	50 58       	subi	r21, 0x80	; 128
     888:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <atan2>
     88c:	6d 87       	std	Y+13, r22	; 0x0d
     88e:	7e 87       	std	Y+14, r23	; 0x0e
     890:	8f 87       	std	Y+15, r24	; 0x0f
     892:	98 8b       	std	Y+16, r25	; 0x10
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
     894:	29 81       	ldd	r18, Y+1	; 0x01
     896:	3a 81       	ldd	r19, Y+2	; 0x02
     898:	4b 81       	ldd	r20, Y+3	; 0x03
     89a:	5c 81       	ldd	r21, Y+4	; 0x04
     89c:	ca 01       	movw	r24, r20
     89e:	b9 01       	movw	r22, r18
     8a0:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     8a4:	6b 01       	movw	r12, r22
     8a6:	7c 01       	movw	r14, r24
     8a8:	a3 01       	movw	r20, r6
     8aa:	92 01       	movw	r18, r4
     8ac:	c3 01       	movw	r24, r6
     8ae:	b2 01       	movw	r22, r4
     8b0:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     8b4:	2b 01       	movw	r4, r22
     8b6:	3c 01       	movw	r6, r24
     8b8:	a5 01       	movw	r20, r10
     8ba:	94 01       	movw	r18, r8
     8bc:	c5 01       	movw	r24, r10
     8be:	b4 01       	movw	r22, r8
     8c0:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     8c4:	9b 01       	movw	r18, r22
     8c6:	ac 01       	movw	r20, r24
     8c8:	c3 01       	movw	r24, r6
     8ca:	b2 01       	movw	r22, r4
     8cc:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
     8d0:	2b 01       	movw	r4, r22
     8d2:	3c 01       	movw	r6, r24
     8d4:	0e 94 07 1a 	call	0x340e	; 0x340e <sqrt>
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	48 e4       	ldi	r20, 0x48	; 72
     8de:	52 e4       	ldi	r21, 0x42	; 66
     8e0:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
     8e4:	4b 01       	movw	r8, r22
     8e6:	5c 01       	movw	r10, r24
     8e8:	9b 01       	movw	r18, r22
     8ea:	ac 01       	movw	r20, r24
     8ec:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     8f0:	6d 83       	std	Y+5, r22	; 0x05
     8f2:	7e 83       	std	Y+6, r23	; 0x06
     8f4:	8f 83       	std	Y+7, r24	; 0x07
     8f6:	98 87       	std	Y+8, r25	; 0x08
     8f8:	9b 01       	movw	r18, r22
     8fa:	ac 01       	movw	r20, r24
     8fc:	c7 01       	movw	r24, r14
     8fe:	b6 01       	movw	r22, r12
     900:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
     904:	69 87       	std	Y+9, r22	; 0x09
     906:	7a 87       	std	Y+10, r23	; 0x0a
     908:	8b 87       	std	Y+11, r24	; 0x0b
     90a:	9c 87       	std	Y+12, r25	; 0x0c
     90c:	0e 94 07 1a 	call	0x340e	; 0x340e <sqrt>
     910:	9b 01       	movw	r18, r22
     912:	ac 01       	movw	r20, r24
     914:	69 81       	ldd	r22, Y+1	; 0x01
     916:	7a 81       	ldd	r23, Y+2	; 0x02
     918:	8b 81       	ldd	r24, Y+3	; 0x03
     91a:	9c 81       	ldd	r25, Y+4	; 0x04
     91c:	90 58       	subi	r25, 0x80	; 128
     91e:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
     922:	0e 94 5d 17 	call	0x2eba	; 0x2eba <acos>
     926:	69 83       	std	Y+1, r22	; 0x01
     928:	7a 83       	std	Y+2, r23	; 0x02
     92a:	8b 83       	std	Y+3, r24	; 0x03
     92c:	9c 83       	std	Y+4, r25	; 0x04
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	48 e4       	ldi	r20, 0x48	; 72
     934:	52 e4       	ldi	r21, 0x42	; 66
     936:	c3 01       	movw	r24, r6
     938:	b2 01       	movw	r22, r4
     93a:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
     93e:	0e 94 07 1a 	call	0x340e	; 0x340e <sqrt>
     942:	9b 01       	movw	r18, r22
     944:	ac 01       	movw	r20, r24
     946:	c5 01       	movw	r24, r10
     948:	b4 01       	movw	r22, r8
     94a:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     94e:	9b 01       	movw	r18, r22
     950:	ac 01       	movw	r20, r24
     952:	c7 01       	movw	r24, r14
     954:	b6 01       	movw	r22, r12
     956:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
     95a:	0e 94 07 1a 	call	0x340e	; 0x340e <sqrt>
     95e:	2b 01       	movw	r4, r22
     960:	3c 01       	movw	r6, r24
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	38 e4       	ldi	r19, 0x48	; 72
     966:	4c e8       	ldi	r20, 0x8C	; 140
     968:	55 e4       	ldi	r21, 0x45	; 69
     96a:	69 85       	ldd	r22, Y+9	; 0x09
     96c:	7a 85       	ldd	r23, Y+10	; 0x0a
     96e:	8b 85       	ldd	r24, Y+11	; 0x0b
     970:	9c 85       	ldd	r25, Y+12	; 0x0c
     972:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	38 e0       	ldi	r19, 0x08	; 8
     97a:	44 e8       	ldi	r20, 0x84	; 132
     97c:	56 e4       	ldi	r21, 0x46	; 70
     97e:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
     982:	4b 01       	movw	r8, r22
     984:	5c 01       	movw	r10, r24
     986:	a3 01       	movw	r20, r6
     988:	92 01       	movw	r18, r4
     98a:	c3 01       	movw	r24, r6
     98c:	b2 01       	movw	r22, r4
     98e:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	46 e8       	ldi	r20, 0x86	; 134
     998:	52 e4       	ldi	r21, 0x42	; 66
     99a:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     99e:	9b 01       	movw	r18, r22
     9a0:	ac 01       	movw	r20, r24
     9a2:	c5 01       	movw	r24, r10
     9a4:	b4 01       	movw	r22, r8
     9a6:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
     9aa:	0e 94 5d 17 	call	0x2eba	; 0x2eba <acos>
     9ae:	2b 01       	movw	r4, r22
     9b0:	3c 01       	movw	r6, r24
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     9b2:	a7 01       	movw	r20, r14
     9b4:	96 01       	movw	r18, r12
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	7a e1       	ldi	r23, 0x1A	; 26
     9ba:	87 ea       	ldi	r24, 0xA7	; 167
     9bc:	96 e4       	ldi	r25, 0x46	; 70
     9be:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
     9c2:	2d 81       	ldd	r18, Y+5	; 0x05
     9c4:	3e 81       	ldd	r19, Y+6	; 0x06
     9c6:	4f 81       	ldd	r20, Y+7	; 0x07
     9c8:	58 85       	ldd	r21, Y+8	; 0x08
     9ca:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	38 e1       	ldi	r19, 0x18	; 24
     9d2:	48 e8       	ldi	r20, 0x88	; 136
     9d4:	56 e4       	ldi	r21, 0x46	; 70
     9d6:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
     9da:	0e 94 5d 17 	call	0x2eba	; 0x2eba <acos>
     9de:	4b 01       	movw	r8, r22
     9e0:	5c 01       	movw	r10, r24
	long int ActuatorAngle1 =  theta1 + 195;
	long int ActuatorAngle2 =  225 - theta2;
	long int ActuatorAngle3 =  300 - theta3 ;
	
	
	MoveDynamixel(1,ActuatorAngle1,speed);
     9e2:	68 01       	movw	r12, r16
     9e4:	ee 24       	eor	r14, r14
     9e6:	d7 fc       	sbrc	r13, 7
     9e8:	e0 94       	com	r14
     9ea:	fe 2c       	mov	r15, r14
	USARTReadStatusPacket();	
	return;
}
void MoveRearLeftLeg(float x, float y, float z, int speed)
{
	long int theta1 = atan2f(x,-y)*180/PI;
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	44 e3       	ldi	r20, 0x34	; 52
     9f2:	53 e4       	ldi	r21, 0x43	; 67
     9f4:	6d 85       	ldd	r22, Y+13	; 0x0d
     9f6:	7e 85       	ldd	r23, Y+14	; 0x0e
     9f8:	8f 85       	ldd	r24, Y+15	; 0x0f
     9fa:	98 89       	ldd	r25, Y+16	; 0x10
     9fc:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     a00:	28 ed       	ldi	r18, 0xD8	; 216
     a02:	3f e0       	ldi	r19, 0x0F	; 15
     a04:	49 e4       	ldi	r20, 0x49	; 73
     a06:	50 e4       	ldi	r21, 0x40	; 64
     a08:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
     a0c:	0e 94 9a 18 	call	0x3134	; 0x3134 <__fixsfsi>
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

	long int ActuatorAngle1 =  theta1 + 195;
     a10:	ab 01       	movw	r20, r22
     a12:	bc 01       	movw	r22, r24
     a14:	4d 53       	subi	r20, 0x3D	; 61
     a16:	5f 4f       	sbci	r21, 0xFF	; 255
     a18:	6f 4f       	sbci	r22, 0xFF	; 255
     a1a:	7f 4f       	sbci	r23, 0xFF	; 255
	long int ActuatorAngle2 =  225 - theta2;
	long int ActuatorAngle3 =  300 - theta3 ;
	
	
	MoveDynamixel(1,ActuatorAngle1,speed);
     a1c:	97 01       	movw	r18, r14
     a1e:	86 01       	movw	r16, r12
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	27 dc       	rcall	.-1970   	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
     a26:	f9 db       	rcall	.-2062   	; 0x21a <USARTReadStatusPacket>
	return;
}
void MoveRearLeftLeg(float x, float y, float z, int speed)
{
	long int theta1 = atan2f(x,-y)*180/PI;
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
     a28:	a3 01       	movw	r20, r6
     a2a:	92 01       	movw	r18, r4
     a2c:	69 81       	ldd	r22, Y+1	; 0x01
     a2e:	7a 81       	ldd	r23, Y+2	; 0x02
     a30:	8b 81       	ldd	r24, Y+3	; 0x03
     a32:	9c 81       	ldd	r25, Y+4	; 0x04
     a34:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
     a38:	24 ee       	ldi	r18, 0xE4	; 228
     a3a:	3e e2       	ldi	r19, 0x2E	; 46
     a3c:	45 e6       	ldi	r20, 0x65	; 101
     a3e:	52 e4       	ldi	r21, 0x42	; 66
     a40:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     a44:	0e 94 9a 18 	call	0x3134	; 0x3134 <__fixsfsi>
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

	long int ActuatorAngle1 =  theta1 + 195;
	long int ActuatorAngle2 =  225 - theta2;
     a48:	0f 2e       	mov	r0, r31
     a4a:	f1 ee       	ldi	r31, 0xE1	; 225
     a4c:	4f 2e       	mov	r4, r31
     a4e:	51 2c       	mov	r5, r1
     a50:	61 2c       	mov	r6, r1
     a52:	71 2c       	mov	r7, r1
     a54:	f0 2d       	mov	r31, r0
     a56:	93 01       	movw	r18, r6
     a58:	82 01       	movw	r16, r4
     a5a:	06 1b       	sub	r16, r22
     a5c:	17 0b       	sbc	r17, r23
     a5e:	28 0b       	sbc	r18, r24
     a60:	39 0b       	sbc	r19, r25
     a62:	b9 01       	movw	r22, r18
     a64:	a8 01       	movw	r20, r16
	long int ActuatorAngle3 =  300 - theta3 ;
	
	
	MoveDynamixel(1,ActuatorAngle1,speed);
	USARTReadStatusPacket();
    MoveDynamixel(3,ActuatorAngle2,speed);
     a66:	97 01       	movw	r18, r14
     a68:	86 01       	movw	r16, r12
     a6a:	83 e0       	ldi	r24, 0x03	; 3
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	02 dc       	rcall	.-2044   	; 0x274 <MoveDynamixel>
    USARTReadStatusPacket();
     a70:	d4 db       	rcall	.-2136   	; 0x21a <USARTReadStatusPacket>
{
	long int theta1 = atan2f(x,-y)*180/PI;
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	44 e3       	ldi	r20, 0x34	; 52
     a78:	53 e4       	ldi	r21, 0x43	; 67
     a7a:	c5 01       	movw	r24, r10
     a7c:	b4 01       	movw	r22, r8
     a7e:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     a82:	28 ed       	ldi	r18, 0xD8	; 216
     a84:	3f e0       	ldi	r19, 0x0F	; 15
     a86:	49 e4       	ldi	r20, 0x49	; 73
     a88:	50 e4       	ldi	r21, 0x40	; 64
     a8a:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
     a8e:	0e 94 9a 18 	call	0x3134	; 0x3134 <__fixsfsi>

	long int ActuatorAngle1 =  theta1 + 195;
	long int ActuatorAngle2 =  225 - theta2;
	long int ActuatorAngle3 =  300 - theta3 ;
     a92:	0f 2e       	mov	r0, r31
     a94:	fc e2       	ldi	r31, 0x2C	; 44
     a96:	8f 2e       	mov	r8, r31
     a98:	99 24       	eor	r9, r9
     a9a:	93 94       	inc	r9
     a9c:	a1 2c       	mov	r10, r1
     a9e:	b1 2c       	mov	r11, r1
     aa0:	f0 2d       	mov	r31, r0
     aa2:	95 01       	movw	r18, r10
     aa4:	84 01       	movw	r16, r8
     aa6:	06 1b       	sub	r16, r22
     aa8:	17 0b       	sbc	r17, r23
     aaa:	28 0b       	sbc	r18, r24
     aac:	39 0b       	sbc	r19, r25
     aae:	b9 01       	movw	r22, r18
     ab0:	a8 01       	movw	r20, r16
	
	MoveDynamixel(1,ActuatorAngle1,speed);
	USARTReadStatusPacket();
    MoveDynamixel(3,ActuatorAngle2,speed);
    USARTReadStatusPacket();
	MoveDynamixel(5,ActuatorAngle3,speed);
     ab2:	97 01       	movw	r18, r14
     ab4:	86 01       	movw	r16, r12
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	dc db       	rcall	.-2120   	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
     abc:	ae db       	rcall	.-2212   	; 0x21a <USARTReadStatusPacket>
	return;
}
     abe:	60 96       	adiw	r28, 0x10	; 16
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	f8 94       	cli
     ac4:	de bf       	out	0x3e, r29	; 62
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	cd bf       	out	0x3d, r28	; 61
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	1f 91       	pop	r17
     ad0:	0f 91       	pop	r16
     ad2:	ff 90       	pop	r15
     ad4:	ef 90       	pop	r14
     ad6:	df 90       	pop	r13
     ad8:	cf 90       	pop	r12
     ada:	bf 90       	pop	r11
     adc:	af 90       	pop	r10
     ade:	9f 90       	pop	r9
     ae0:	8f 90       	pop	r8
     ae2:	7f 90       	pop	r7
     ae4:	6f 90       	pop	r6
     ae6:	5f 90       	pop	r5
     ae8:	4f 90       	pop	r4
     aea:	08 95       	ret

00000aec <MoveRearRightLeg>:
void MoveRearRightLeg(float x, float y, float z, int speed)
{
     aec:	4f 92       	push	r4
     aee:	5f 92       	push	r5
     af0:	6f 92       	push	r6
     af2:	7f 92       	push	r7
     af4:	8f 92       	push	r8
     af6:	9f 92       	push	r9
     af8:	af 92       	push	r10
     afa:	bf 92       	push	r11
     afc:	cf 92       	push	r12
     afe:	df 92       	push	r13
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	60 97       	sbiw	r28, 0x10	; 16
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	de bf       	out	0x3e, r29	; 62
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	cd bf       	out	0x3d, r28	; 61
     b1c:	2b 01       	movw	r4, r22
     b1e:	3c 01       	movw	r6, r24
     b20:	49 01       	movw	r8, r18
     b22:	5a 01       	movw	r10, r20
     b24:	e9 82       	std	Y+1, r14	; 0x01
     b26:	fa 82       	std	Y+2, r15	; 0x02
     b28:	0b 83       	std	Y+3, r16	; 0x03
     b2a:	1c 83       	std	Y+4, r17	; 0x04
     b2c:	86 01       	movw	r16, r12
	long int theta1 = atan2f(x,-y)*180/PI;
     b2e:	50 58       	subi	r21, 0x80	; 128
     b30:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <atan2>
     b34:	6d 87       	std	Y+13, r22	; 0x0d
     b36:	7e 87       	std	Y+14, r23	; 0x0e
     b38:	8f 87       	std	Y+15, r24	; 0x0f
     b3a:	98 8b       	std	Y+16, r25	; 0x10
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
     b3c:	29 81       	ldd	r18, Y+1	; 0x01
     b3e:	3a 81       	ldd	r19, Y+2	; 0x02
     b40:	4b 81       	ldd	r20, Y+3	; 0x03
     b42:	5c 81       	ldd	r21, Y+4	; 0x04
     b44:	ca 01       	movw	r24, r20
     b46:	b9 01       	movw	r22, r18
     b48:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     b4c:	6b 01       	movw	r12, r22
     b4e:	7c 01       	movw	r14, r24
     b50:	a3 01       	movw	r20, r6
     b52:	92 01       	movw	r18, r4
     b54:	c3 01       	movw	r24, r6
     b56:	b2 01       	movw	r22, r4
     b58:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     b5c:	2b 01       	movw	r4, r22
     b5e:	3c 01       	movw	r6, r24
     b60:	a5 01       	movw	r20, r10
     b62:	94 01       	movw	r18, r8
     b64:	c5 01       	movw	r24, r10
     b66:	b4 01       	movw	r22, r8
     b68:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     b6c:	9b 01       	movw	r18, r22
     b6e:	ac 01       	movw	r20, r24
     b70:	c3 01       	movw	r24, r6
     b72:	b2 01       	movw	r22, r4
     b74:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
     b78:	2b 01       	movw	r4, r22
     b7a:	3c 01       	movw	r6, r24
     b7c:	0e 94 07 1a 	call	0x340e	; 0x340e <sqrt>
     b80:	20 e0       	ldi	r18, 0x00	; 0
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	48 e4       	ldi	r20, 0x48	; 72
     b86:	52 e4       	ldi	r21, 0x42	; 66
     b88:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
     b8c:	4b 01       	movw	r8, r22
     b8e:	5c 01       	movw	r10, r24
     b90:	9b 01       	movw	r18, r22
     b92:	ac 01       	movw	r20, r24
     b94:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     b98:	6d 83       	std	Y+5, r22	; 0x05
     b9a:	7e 83       	std	Y+6, r23	; 0x06
     b9c:	8f 83       	std	Y+7, r24	; 0x07
     b9e:	98 87       	std	Y+8, r25	; 0x08
     ba0:	9b 01       	movw	r18, r22
     ba2:	ac 01       	movw	r20, r24
     ba4:	c7 01       	movw	r24, r14
     ba6:	b6 01       	movw	r22, r12
     ba8:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
     bac:	69 87       	std	Y+9, r22	; 0x09
     bae:	7a 87       	std	Y+10, r23	; 0x0a
     bb0:	8b 87       	std	Y+11, r24	; 0x0b
     bb2:	9c 87       	std	Y+12, r25	; 0x0c
     bb4:	0e 94 07 1a 	call	0x340e	; 0x340e <sqrt>
     bb8:	9b 01       	movw	r18, r22
     bba:	ac 01       	movw	r20, r24
     bbc:	69 81       	ldd	r22, Y+1	; 0x01
     bbe:	7a 81       	ldd	r23, Y+2	; 0x02
     bc0:	8b 81       	ldd	r24, Y+3	; 0x03
     bc2:	9c 81       	ldd	r25, Y+4	; 0x04
     bc4:	90 58       	subi	r25, 0x80	; 128
     bc6:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
     bca:	0e 94 5d 17 	call	0x2eba	; 0x2eba <acos>
     bce:	69 83       	std	Y+1, r22	; 0x01
     bd0:	7a 83       	std	Y+2, r23	; 0x02
     bd2:	8b 83       	std	Y+3, r24	; 0x03
     bd4:	9c 83       	std	Y+4, r25	; 0x04
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	48 e4       	ldi	r20, 0x48	; 72
     bdc:	52 e4       	ldi	r21, 0x42	; 66
     bde:	c3 01       	movw	r24, r6
     be0:	b2 01       	movw	r22, r4
     be2:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
     be6:	0e 94 07 1a 	call	0x340e	; 0x340e <sqrt>
     bea:	9b 01       	movw	r18, r22
     bec:	ac 01       	movw	r20, r24
     bee:	c5 01       	movw	r24, r10
     bf0:	b4 01       	movw	r22, r8
     bf2:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     bf6:	9b 01       	movw	r18, r22
     bf8:	ac 01       	movw	r20, r24
     bfa:	c7 01       	movw	r24, r14
     bfc:	b6 01       	movw	r22, r12
     bfe:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
     c02:	0e 94 07 1a 	call	0x340e	; 0x340e <sqrt>
     c06:	2b 01       	movw	r4, r22
     c08:	3c 01       	movw	r6, r24
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	38 e4       	ldi	r19, 0x48	; 72
     c0e:	4c e8       	ldi	r20, 0x8C	; 140
     c10:	55 e4       	ldi	r21, 0x45	; 69
     c12:	69 85       	ldd	r22, Y+9	; 0x09
     c14:	7a 85       	ldd	r23, Y+10	; 0x0a
     c16:	8b 85       	ldd	r24, Y+11	; 0x0b
     c18:	9c 85       	ldd	r25, Y+12	; 0x0c
     c1a:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	38 e0       	ldi	r19, 0x08	; 8
     c22:	44 e8       	ldi	r20, 0x84	; 132
     c24:	56 e4       	ldi	r21, 0x46	; 70
     c26:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
     c2a:	4b 01       	movw	r8, r22
     c2c:	5c 01       	movw	r10, r24
     c2e:	a3 01       	movw	r20, r6
     c30:	92 01       	movw	r18, r4
     c32:	c3 01       	movw	r24, r6
     c34:	b2 01       	movw	r22, r4
     c36:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	46 e8       	ldi	r20, 0x86	; 134
     c40:	52 e4       	ldi	r21, 0x42	; 66
     c42:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     c46:	9b 01       	movw	r18, r22
     c48:	ac 01       	movw	r20, r24
     c4a:	c5 01       	movw	r24, r10
     c4c:	b4 01       	movw	r22, r8
     c4e:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
     c52:	0e 94 5d 17 	call	0x2eba	; 0x2eba <acos>
     c56:	2b 01       	movw	r4, r22
     c58:	3c 01       	movw	r6, r24
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     c5a:	a7 01       	movw	r20, r14
     c5c:	96 01       	movw	r18, r12
     c5e:	60 e0       	ldi	r22, 0x00	; 0
     c60:	7a e1       	ldi	r23, 0x1A	; 26
     c62:	87 ea       	ldi	r24, 0xA7	; 167
     c64:	96 e4       	ldi	r25, 0x46	; 70
     c66:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
     c6a:	2d 81       	ldd	r18, Y+5	; 0x05
     c6c:	3e 81       	ldd	r19, Y+6	; 0x06
     c6e:	4f 81       	ldd	r20, Y+7	; 0x07
     c70:	58 85       	ldd	r21, Y+8	; 0x08
     c72:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	38 e1       	ldi	r19, 0x18	; 24
     c7a:	48 e8       	ldi	r20, 0x88	; 136
     c7c:	56 e4       	ldi	r21, 0x46	; 70
     c7e:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
     c82:	0e 94 5d 17 	call	0x2eba	; 0x2eba <acos>
     c86:	4b 01       	movw	r8, r22
     c88:	5c 01       	movw	r10, r24
	long int ActuatorAngle1 =  theta1 + 105;
	long int ActuatorAngle2 =  225 - theta2;
	long int ActuatorAngle3 =  300 - theta3;
	
	
	MoveDynamixel(7,ActuatorAngle1,speed);
     c8a:	68 01       	movw	r12, r16
     c8c:	ee 24       	eor	r14, r14
     c8e:	d7 fc       	sbrc	r13, 7
     c90:	e0 94       	com	r14
     c92:	fe 2c       	mov	r15, r14
	USARTReadStatusPacket();
	return;
}
void MoveRearRightLeg(float x, float y, float z, int speed)
{
	long int theta1 = atan2f(x,-y)*180/PI;
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	44 e3       	ldi	r20, 0x34	; 52
     c9a:	53 e4       	ldi	r21, 0x43	; 67
     c9c:	6d 85       	ldd	r22, Y+13	; 0x0d
     c9e:	7e 85       	ldd	r23, Y+14	; 0x0e
     ca0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ca2:	98 89       	ldd	r25, Y+16	; 0x10
     ca4:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     ca8:	28 ed       	ldi	r18, 0xD8	; 216
     caa:	3f e0       	ldi	r19, 0x0F	; 15
     cac:	49 e4       	ldi	r20, 0x49	; 73
     cae:	50 e4       	ldi	r21, 0x40	; 64
     cb0:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
     cb4:	0e 94 9a 18 	call	0x3134	; 0x3134 <__fixsfsi>
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

	long int ActuatorAngle1 =  theta1 + 105;
     cb8:	ab 01       	movw	r20, r22
     cba:	bc 01       	movw	r22, r24
     cbc:	47 59       	subi	r20, 0x97	; 151
     cbe:	5f 4f       	sbci	r21, 0xFF	; 255
     cc0:	6f 4f       	sbci	r22, 0xFF	; 255
     cc2:	7f 4f       	sbci	r23, 0xFF	; 255
	long int ActuatorAngle2 =  225 - theta2;
	long int ActuatorAngle3 =  300 - theta3;
	
	
	MoveDynamixel(7,ActuatorAngle1,speed);
     cc4:	97 01       	movw	r18, r14
     cc6:	86 01       	movw	r16, r12
     cc8:	87 e0       	ldi	r24, 0x07	; 7
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	d3 da       	rcall	.-2650   	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
     cce:	a5 da       	rcall	.-2742   	; 0x21a <USARTReadStatusPacket>
	return;
}
void MoveRearRightLeg(float x, float y, float z, int speed)
{
	long int theta1 = atan2f(x,-y)*180/PI;
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
     cd0:	a3 01       	movw	r20, r6
     cd2:	92 01       	movw	r18, r4
     cd4:	69 81       	ldd	r22, Y+1	; 0x01
     cd6:	7a 81       	ldd	r23, Y+2	; 0x02
     cd8:	8b 81       	ldd	r24, Y+3	; 0x03
     cda:	9c 81       	ldd	r25, Y+4	; 0x04
     cdc:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
     ce0:	24 ee       	ldi	r18, 0xE4	; 228
     ce2:	3e e2       	ldi	r19, 0x2E	; 46
     ce4:	45 e6       	ldi	r20, 0x65	; 101
     ce6:	52 e4       	ldi	r21, 0x42	; 66
     ce8:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     cec:	0e 94 9a 18 	call	0x3134	; 0x3134 <__fixsfsi>
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

	long int ActuatorAngle1 =  theta1 + 105;
	long int ActuatorAngle2 =  225 - theta2;
     cf0:	0f 2e       	mov	r0, r31
     cf2:	f1 ee       	ldi	r31, 0xE1	; 225
     cf4:	4f 2e       	mov	r4, r31
     cf6:	51 2c       	mov	r5, r1
     cf8:	61 2c       	mov	r6, r1
     cfa:	71 2c       	mov	r7, r1
     cfc:	f0 2d       	mov	r31, r0
     cfe:	93 01       	movw	r18, r6
     d00:	82 01       	movw	r16, r4
     d02:	06 1b       	sub	r16, r22
     d04:	17 0b       	sbc	r17, r23
     d06:	28 0b       	sbc	r18, r24
     d08:	39 0b       	sbc	r19, r25
     d0a:	b9 01       	movw	r22, r18
     d0c:	a8 01       	movw	r20, r16
	long int ActuatorAngle3 =  300 - theta3;
	
	
	MoveDynamixel(7,ActuatorAngle1,speed);
	USARTReadStatusPacket();
	MoveDynamixel(9,ActuatorAngle2,speed);
     d0e:	97 01       	movw	r18, r14
     d10:	86 01       	movw	r16, r12
     d12:	89 e0       	ldi	r24, 0x09	; 9
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	ae da       	rcall	.-2724   	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
     d18:	80 da       	rcall	.-2816   	; 0x21a <USARTReadStatusPacket>
{
	long int theta1 = atan2f(x,-y)*180/PI;
	long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
	acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
	
	long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	44 e3       	ldi	r20, 0x34	; 52
     d20:	53 e4       	ldi	r21, 0x43	; 67
     d22:	c5 01       	movw	r24, r10
     d24:	b4 01       	movw	r22, r8
     d26:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     d2a:	28 ed       	ldi	r18, 0xD8	; 216
     d2c:	3f e0       	ldi	r19, 0x0F	; 15
     d2e:	49 e4       	ldi	r20, 0x49	; 73
     d30:	50 e4       	ldi	r21, 0x40	; 64
     d32:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
     d36:	0e 94 9a 18 	call	0x3134	; 0x3134 <__fixsfsi>

	long int ActuatorAngle1 =  theta1 + 105;
	long int ActuatorAngle2 =  225 - theta2;
	long int ActuatorAngle3 =  300 - theta3;
     d3a:	0f 2e       	mov	r0, r31
     d3c:	fc e2       	ldi	r31, 0x2C	; 44
     d3e:	8f 2e       	mov	r8, r31
     d40:	99 24       	eor	r9, r9
     d42:	93 94       	inc	r9
     d44:	a1 2c       	mov	r10, r1
     d46:	b1 2c       	mov	r11, r1
     d48:	f0 2d       	mov	r31, r0
     d4a:	95 01       	movw	r18, r10
     d4c:	84 01       	movw	r16, r8
     d4e:	06 1b       	sub	r16, r22
     d50:	17 0b       	sbc	r17, r23
     d52:	28 0b       	sbc	r18, r24
     d54:	39 0b       	sbc	r19, r25
     d56:	b9 01       	movw	r22, r18
     d58:	a8 01       	movw	r20, r16
	
	MoveDynamixel(7,ActuatorAngle1,speed);
	USARTReadStatusPacket();
	MoveDynamixel(9,ActuatorAngle2,speed);
	USARTReadStatusPacket();
	MoveDynamixel(11,ActuatorAngle3,speed);
     d5a:	97 01       	movw	r18, r14
     d5c:	86 01       	movw	r16, r12
     d5e:	8b e0       	ldi	r24, 0x0B	; 11
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	88 da       	rcall	.-2800   	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
     d64:	5a da       	rcall	.-2892   	; 0x21a <USARTReadStatusPacket>
	return;
}
     d66:	60 96       	adiw	r28, 0x10	; 16
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	cd bf       	out	0x3d, r28	; 61
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	ff 90       	pop	r15
     d7c:	ef 90       	pop	r14
     d7e:	df 90       	pop	r13
     d80:	cf 90       	pop	r12
     d82:	bf 90       	pop	r11
     d84:	af 90       	pop	r10
     d86:	9f 90       	pop	r9
     d88:	8f 90       	pop	r8
     d8a:	7f 90       	pop	r7
     d8c:	6f 90       	pop	r6
     d8e:	5f 90       	pop	r5
     d90:	4f 90       	pop	r4
     d92:	08 95       	ret

00000d94 <CalcStraightPath>:
leg rearLeftLeg = {REAR_LEFT_LEG, 1, 3, 5};
leg rearRightLeg = {REAR_RIGHT_LEG, 7, 9, 11};


void CalcStraightPath(leg currentLeg, int numberOfPositions, float x1, float y1, float z1, float x2, float y2, float z2)
{
     d94:	2f 92       	push	r2
     d96:	3f 92       	push	r3
     d98:	4f 92       	push	r4
     d9a:	5f 92       	push	r5
     d9c:	6f 92       	push	r6
     d9e:	7f 92       	push	r7
     da0:	8f 92       	push	r8
     da2:	9f 92       	push	r9
     da4:	af 92       	push	r10
     da6:	bf 92       	push	r11
     da8:	cf 92       	push	r12
     daa:	df 92       	push	r13
     dac:	ef 92       	push	r14
     dae:	ff 92       	push	r15
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	e4 97       	sbiw	r28, 0x34	; 52
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	cd bf       	out	0x3d, r28	; 61
     dc8:	29 83       	std	Y+1, r18	; 0x01
     dca:	3a 83       	std	Y+2, r19	; 0x02
     dcc:	4b 83       	std	Y+3, r20	; 0x03
     dce:	5c 83       	std	Y+4, r21	; 0x04
     dd0:	6d 83       	std	Y+5, r22	; 0x05
     dd2:	7e 83       	std	Y+6, r23	; 0x06
     dd4:	8f 83       	std	Y+7, r24	; 0x07
     dd6:	98 87       	std	Y+8, r25	; 0x08
     dd8:	18 a3       	std	Y+32, r17	; 0x20
     dda:	0f 8f       	std	Y+31, r16	; 0x1f
     ddc:	09 81       	ldd	r16, Y+1	; 0x01
     dde:	1a 81       	ldd	r17, Y+2	; 0x02
     de0:	2b 80       	ldd	r2, Y+3	; 0x03
     de2:	3c 80       	ldd	r3, Y+4	; 0x04
     de4:	2d 81       	ldd	r18, Y+5	; 0x05
     de6:	3e 81       	ldd	r19, Y+6	; 0x06
     de8:	3a 8b       	std	Y+18, r19	; 0x12
     dea:	29 8b       	std	Y+17, r18	; 0x11
     dec:	4f 81       	ldd	r20, Y+7	; 0x07
     dee:	58 85       	ldd	r21, Y+8	; 0x08
     df0:	5e 8b       	std	Y+22, r21	; 0x16
     df2:	4d 8b       	std	Y+21, r20	; 0x15
    long int theta1;
    long int theta2;
    long int theta3;
    if ((currentLeg.legNumber == FRONT_LEFT_LEG) | (currentLeg.legNumber == FRONT_RIGHT_LEG))
     df4:	c8 01       	movw	r24, r16
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	02 97       	sbiw	r24, 0x02	; 2
     dfa:	88 f4       	brcc	.+34     	; 0xe1e <CalcStraightPath+0x8a>
    {
        x1 *= -1;
     dfc:	f7 fa       	bst	r15, 7
     dfe:	f0 94       	com	r15
     e00:	f7 f8       	bld	r15, 7
     e02:	f0 94       	com	r15
        x2 *= -1;
     e04:	61 96       	adiw	r28, 0x11	; 17
     e06:	8c ad       	ldd	r24, Y+60	; 0x3c
     e08:	9d ad       	ldd	r25, Y+61	; 0x3d
     e0a:	ae ad       	ldd	r26, Y+62	; 0x3e
     e0c:	bf ad       	ldd	r27, Y+63	; 0x3f
     e0e:	61 97       	sbiw	r28, 0x11	; 17
     e10:	b0 58       	subi	r27, 0x80	; 128
     e12:	61 96       	adiw	r28, 0x11	; 17
     e14:	8c af       	std	Y+60, r24	; 0x3c
     e16:	9d af       	std	Y+61, r25	; 0x3d
     e18:	ae af       	std	Y+62, r26	; 0x3e
     e1a:	bf af       	std	Y+63, r27	; 0x3f
     e1c:	61 97       	sbiw	r28, 0x11	; 17
    }
    if ((currentLeg.legNumber == REAR_RIGHT_LEG) | (currentLeg.legNumber == REAR_LEFT_LEG))
     e1e:	c8 01       	movw	r24, r16
     e20:	03 97       	sbiw	r24, 0x03	; 3
     e22:	02 97       	sbiw	r24, 0x02	; 2
     e24:	88 f4       	brcc	.+34     	; 0xe48 <CalcStraightPath+0xb4>
    {
        y1 *= -1;
     e26:	b7 fa       	bst	r11, 7
     e28:	b0 94       	com	r11
     e2a:	b7 f8       	bld	r11, 7
     e2c:	b0 94       	com	r11
        y2 *= -1;
     e2e:	65 96       	adiw	r28, 0x15	; 21
     e30:	2c ad       	ldd	r18, Y+60	; 0x3c
     e32:	3d ad       	ldd	r19, Y+61	; 0x3d
     e34:	4e ad       	ldd	r20, Y+62	; 0x3e
     e36:	5f ad       	ldd	r21, Y+63	; 0x3f
     e38:	65 97       	sbiw	r28, 0x15	; 21
     e3a:	50 58       	subi	r21, 0x80	; 128
     e3c:	65 96       	adiw	r28, 0x15	; 21
     e3e:	2c af       	std	Y+60, r18	; 0x3c
     e40:	3d af       	std	Y+61, r19	; 0x3d
     e42:	4e af       	std	Y+62, r20	; 0x3e
     e44:	5f af       	std	Y+63, r21	; 0x3f
     e46:	65 97       	sbiw	r28, 0x15	; 21
    }
    float deltaX = (x2 - x1) / numberOfPositions;
     e48:	4f 8d       	ldd	r20, Y+31	; 0x1f
     e4a:	58 a1       	ldd	r21, Y+32	; 0x20
     e4c:	ba 01       	movw	r22, r20
     e4e:	88 27       	eor	r24, r24
     e50:	77 fd       	sbrc	r23, 7
     e52:	80 95       	com	r24
     e54:	98 2f       	mov	r25, r24
     e56:	0e 94 cd 18 	call	0x319a	; 0x319a <__floatsisf>
     e5a:	2b 01       	movw	r4, r22
     e5c:	3c 01       	movw	r6, r24
     e5e:	a7 01       	movw	r20, r14
     e60:	96 01       	movw	r18, r12
     e62:	61 96       	adiw	r28, 0x11	; 17
     e64:	6c ad       	ldd	r22, Y+60	; 0x3c
     e66:	7d ad       	ldd	r23, Y+61	; 0x3d
     e68:	8e ad       	ldd	r24, Y+62	; 0x3e
     e6a:	9f ad       	ldd	r25, Y+63	; 0x3f
     e6c:	61 97       	sbiw	r28, 0x11	; 17
     e6e:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
     e72:	a3 01       	movw	r20, r6
     e74:	92 01       	movw	r18, r4
     e76:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
     e7a:	69 a3       	std	Y+33, r22	; 0x21
     e7c:	7a a3       	std	Y+34, r23	; 0x22
     e7e:	8b a3       	std	Y+35, r24	; 0x23
     e80:	9c a3       	std	Y+36, r25	; 0x24
    float deltaY = (y2 - y1) / numberOfPositions;
     e82:	a5 01       	movw	r20, r10
     e84:	94 01       	movw	r18, r8
     e86:	65 96       	adiw	r28, 0x15	; 21
     e88:	6c ad       	ldd	r22, Y+60	; 0x3c
     e8a:	7d ad       	ldd	r23, Y+61	; 0x3d
     e8c:	8e ad       	ldd	r24, Y+62	; 0x3e
     e8e:	9f ad       	ldd	r25, Y+63	; 0x3f
     e90:	65 97       	sbiw	r28, 0x15	; 21
     e92:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
     e96:	a3 01       	movw	r20, r6
     e98:	92 01       	movw	r18, r4
     e9a:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
     e9e:	6d a3       	std	Y+37, r22	; 0x25
     ea0:	7e a3       	std	Y+38, r23	; 0x26
     ea2:	8f a3       	std	Y+39, r24	; 0x27
     ea4:	98 a7       	std	Y+40, r25	; 0x28
    float deltaZ = (z2 - z1) / numberOfPositions;
     ea6:	2d 96       	adiw	r28, 0x0d	; 13
     ea8:	2c ad       	ldd	r18, Y+60	; 0x3c
     eaa:	3d ad       	ldd	r19, Y+61	; 0x3d
     eac:	4e ad       	ldd	r20, Y+62	; 0x3e
     eae:	5f ad       	ldd	r21, Y+63	; 0x3f
     eb0:	2d 97       	sbiw	r28, 0x0d	; 13
     eb2:	69 96       	adiw	r28, 0x19	; 25
     eb4:	6c ad       	ldd	r22, Y+60	; 0x3c
     eb6:	7d ad       	ldd	r23, Y+61	; 0x3d
     eb8:	8e ad       	ldd	r24, Y+62	; 0x3e
     eba:	9f ad       	ldd	r25, Y+63	; 0x3f
     ebc:	69 97       	sbiw	r28, 0x19	; 25
     ebe:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
     ec2:	a3 01       	movw	r20, r6
     ec4:	92 01       	movw	r18, r4
     ec6:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
     eca:	69 a7       	std	Y+41, r22	; 0x29
     ecc:	7a a7       	std	Y+42, r23	; 0x2a
     ece:	8b a7       	std	Y+43, r24	; 0x2b
     ed0:	9c a7       	std	Y+44, r25	; 0x2c
    
    float x,y,z;
    
    for (int i = 0; i < numberOfPositions; i++)
     ed2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ed4:	98 a1       	ldd	r25, Y+32	; 0x20
     ed6:	18 16       	cp	r1, r24
     ed8:	19 06       	cpc	r1, r25
     eda:	0c f0       	brlt	.+2      	; 0xede <CalcStraightPath+0x14a>
     edc:	17 c2       	rjmp	.+1070   	; 0x130c <CalcStraightPath+0x578>
     ede:	20 e5       	ldi	r18, 0x50	; 80
     ee0:	22 9d       	mul	r18, r2
     ee2:	c0 01       	movw	r24, r0
     ee4:	23 9d       	mul	r18, r3
     ee6:	90 0d       	add	r25, r0
     ee8:	11 24       	eor	r1, r1
     eea:	dc 01       	movw	r26, r24
     eec:	ac 5d       	subi	r26, 0xDC	; 220
     eee:	be 4f       	sbci	r27, 0xFE	; 254
     ef0:	b8 8f       	std	Y+24, r27	; 0x18
     ef2:	af 8b       	std	Y+23, r26	; 0x17
     ef4:	e9 89       	ldd	r30, Y+17	; 0x11
     ef6:	fa 89       	ldd	r31, Y+18	; 0x12
     ef8:	2e 9f       	mul	r18, r30
     efa:	c0 01       	movw	r24, r0
     efc:	2f 9f       	mul	r18, r31
     efe:	90 0d       	add	r25, r0
     f00:	11 24       	eor	r1, r1
     f02:	ac 01       	movw	r20, r24
     f04:	4c 5d       	subi	r20, 0xDC	; 220
     f06:	5e 4f       	sbci	r21, 0xFE	; 254
     f08:	5a 8f       	std	Y+26, r21	; 0x1a
     f0a:	49 8f       	std	Y+25, r20	; 0x19
     f0c:	ad 89       	ldd	r26, Y+21	; 0x15
     f0e:	be 89       	ldd	r27, Y+22	; 0x16
     f10:	2a 9f       	mul	r18, r26
     f12:	c0 01       	movw	r24, r0
     f14:	2b 9f       	mul	r18, r27
     f16:	90 0d       	add	r25, r0
     f18:	11 24       	eor	r1, r1
     f1a:	fc 01       	movw	r30, r24
     f1c:	ec 5d       	subi	r30, 0xDC	; 220
     f1e:	fe 4f       	sbci	r31, 0xFE	; 254
     f20:	fe 8b       	std	Y+22, r31	; 0x16
     f22:	ed 8b       	std	Y+21, r30	; 0x15
     f24:	21 2c       	mov	r2, r1
     f26:	31 2c       	mov	r3, r1
            }
            case REAR_LEFT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 195;
                actuatorPositions_g[currentLeg.femurJoint][i] =  225 - theta2;
                actuatorPositions_g[currentLeg.tibiaJoint][i] =  300 - theta3;
     f28:	cd a6       	std	Y+45, r12	; 0x2d
     f2a:	de a6       	std	Y+46, r13	; 0x2e
     f2c:	ef a6       	std	Y+47, r14	; 0x2f
     f2e:	f8 aa       	std	Y+48, r15	; 0x30
     f30:	89 aa       	std	Y+49, r8	; 0x31
     f32:	9a aa       	std	Y+50, r9	; 0x32
     f34:	ab aa       	std	Y+51, r10	; 0x33
     f36:	bc aa       	std	Y+52, r11	; 0x34
    
    float x,y,z;
    
    for (int i = 0; i < numberOfPositions; i++)
    {
        x = x1 + (i + 1) * deltaX;
     f38:	ff ef       	ldi	r31, 0xFF	; 255
     f3a:	2f 1a       	sub	r2, r31
     f3c:	3f 0a       	sbc	r3, r31
     f3e:	b1 01       	movw	r22, r2
     f40:	88 27       	eor	r24, r24
     f42:	77 fd       	sbrc	r23, 7
     f44:	80 95       	com	r24
     f46:	98 2f       	mov	r25, r24
     f48:	0e 94 cd 18 	call	0x319a	; 0x319a <__floatsisf>
     f4c:	2b 01       	movw	r4, r22
     f4e:	3c 01       	movw	r6, r24
     f50:	29 a1       	ldd	r18, Y+33	; 0x21
     f52:	3a a1       	ldd	r19, Y+34	; 0x22
     f54:	4b a1       	ldd	r20, Y+35	; 0x23
     f56:	5c a1       	ldd	r21, Y+36	; 0x24
     f58:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     f5c:	2d a5       	ldd	r18, Y+45	; 0x2d
     f5e:	3e a5       	ldd	r19, Y+46	; 0x2e
     f60:	4f a5       	ldd	r20, Y+47	; 0x2f
     f62:	58 a9       	ldd	r21, Y+48	; 0x30
     f64:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
     f68:	4b 01       	movw	r8, r22
     f6a:	5c 01       	movw	r10, r24
        y = y1 + (i + 1) * deltaY;
     f6c:	a3 01       	movw	r20, r6
     f6e:	92 01       	movw	r18, r4
     f70:	6d a1       	ldd	r22, Y+37	; 0x25
     f72:	7e a1       	ldd	r23, Y+38	; 0x26
     f74:	8f a1       	ldd	r24, Y+39	; 0x27
     f76:	98 a5       	ldd	r25, Y+40	; 0x28
     f78:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     f7c:	29 a9       	ldd	r18, Y+49	; 0x31
     f7e:	3a a9       	ldd	r19, Y+50	; 0x32
     f80:	4b a9       	ldd	r20, Y+51	; 0x33
     f82:	5c a9       	ldd	r21, Y+52	; 0x34
     f84:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
     f88:	6b 01       	movw	r12, r22
     f8a:	7c 01       	movw	r14, r24
        z = z1 + (i + 1) * deltaZ;
     f8c:	a3 01       	movw	r20, r6
     f8e:	92 01       	movw	r18, r4
     f90:	69 a5       	ldd	r22, Y+41	; 0x29
     f92:	7a a5       	ldd	r23, Y+42	; 0x2a
     f94:	8b a5       	ldd	r24, Y+43	; 0x2b
     f96:	9c a5       	ldd	r25, Y+44	; 0x2c
     f98:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     f9c:	2d 96       	adiw	r28, 0x0d	; 13
     f9e:	2c ad       	ldd	r18, Y+60	; 0x3c
     fa0:	3d ad       	ldd	r19, Y+61	; 0x3d
     fa2:	4e ad       	ldd	r20, Y+62	; 0x3e
     fa4:	5f ad       	ldd	r21, Y+63	; 0x3f
     fa6:	2d 97       	sbiw	r28, 0x0d	; 13
     fa8:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
     fac:	69 87       	std	Y+9, r22	; 0x09
     fae:	7a 87       	std	Y+10, r23	; 0x0a
     fb0:	8b 87       	std	Y+11, r24	; 0x0b
     fb2:	9c 87       	std	Y+12, r25	; 0x0c
        
        // lös inverskinematik för lederna.
        theta1 = atan2f(x,y)*180/PI;
     fb4:	a7 01       	movw	r20, r14
     fb6:	96 01       	movw	r18, r12
     fb8:	c5 01       	movw	r24, r10
     fba:	b4 01       	movw	r22, r8
     fbc:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <atan2>
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	44 e3       	ldi	r20, 0x34	; 52
     fc6:	53 e4       	ldi	r21, 0x43	; 67
     fc8:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     fcc:	28 ed       	ldi	r18, 0xD8	; 216
     fce:	3f e0       	ldi	r19, 0x0F	; 15
     fd0:	49 e4       	ldi	r20, 0x49	; 73
     fd2:	50 e4       	ldi	r21, 0x40	; 64
     fd4:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
     fd8:	0e 94 9a 18 	call	0x3134	; 0x3134 <__fixsfsi>
     fdc:	6b 8f       	std	Y+27, r22	; 0x1b
     fde:	7c 8f       	std	Y+28, r23	; 0x1c
     fe0:	8d 8f       	std	Y+29, r24	; 0x1d
     fe2:	9e 8f       	std	Y+30, r25	; 0x1e
        theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
     fe4:	29 85       	ldd	r18, Y+9	; 0x09
     fe6:	3a 85       	ldd	r19, Y+10	; 0x0a
     fe8:	4b 85       	ldd	r20, Y+11	; 0x0b
     fea:	5c 85       	ldd	r21, Y+12	; 0x0c
     fec:	ca 01       	movw	r24, r20
     fee:	b9 01       	movw	r22, r18
     ff0:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
     ff4:	2b 01       	movw	r4, r22
     ff6:	3c 01       	movw	r6, r24
     ff8:	a5 01       	movw	r20, r10
     ffa:	94 01       	movw	r18, r8
     ffc:	c5 01       	movw	r24, r10
     ffe:	b4 01       	movw	r22, r8
    1000:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
    1004:	4b 01       	movw	r8, r22
    1006:	5c 01       	movw	r10, r24
    1008:	a7 01       	movw	r20, r14
    100a:	96 01       	movw	r18, r12
    100c:	c7 01       	movw	r24, r14
    100e:	b6 01       	movw	r22, r12
    1010:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
    1014:	9b 01       	movw	r18, r22
    1016:	ac 01       	movw	r20, r24
    1018:	c5 01       	movw	r24, r10
    101a:	b4 01       	movw	r22, r8
    101c:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
    1020:	6d 87       	std	Y+13, r22	; 0x0d
    1022:	7e 87       	std	Y+14, r23	; 0x0e
    1024:	8f 87       	std	Y+15, r24	; 0x0f
    1026:	98 8b       	std	Y+16, r25	; 0x10
    1028:	0e 94 07 1a 	call	0x340e	; 0x340e <sqrt>
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	48 e4       	ldi	r20, 0x48	; 72
    1032:	52 e4       	ldi	r21, 0x42	; 66
    1034:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
    1038:	6b 01       	movw	r12, r22
    103a:	7c 01       	movw	r14, r24
    103c:	9b 01       	movw	r18, r22
    103e:	ac 01       	movw	r20, r24
    1040:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
    1044:	69 8b       	std	Y+17, r22	; 0x11
    1046:	7a 8b       	std	Y+18, r23	; 0x12
    1048:	8b 8b       	std	Y+19, r24	; 0x13
    104a:	9c 8b       	std	Y+20, r25	; 0x14
    104c:	9b 01       	movw	r18, r22
    104e:	ac 01       	movw	r20, r24
    1050:	c3 01       	movw	r24, r6
    1052:	b2 01       	movw	r22, r4
    1054:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
    1058:	4b 01       	movw	r8, r22
    105a:	5c 01       	movw	r10, r24
    105c:	0e 94 07 1a 	call	0x340e	; 0x340e <sqrt>
    1060:	9b 01       	movw	r18, r22
    1062:	ac 01       	movw	r20, r24
    1064:	69 85       	ldd	r22, Y+9	; 0x09
    1066:	7a 85       	ldd	r23, Y+10	; 0x0a
    1068:	8b 85       	ldd	r24, Y+11	; 0x0b
    106a:	9c 85       	ldd	r25, Y+12	; 0x0c
    106c:	90 58       	subi	r25, 0x80	; 128
    106e:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
    1072:	0e 94 5d 17 	call	0x2eba	; 0x2eba <acos>
    1076:	69 87       	std	Y+9, r22	; 0x09
    1078:	7a 87       	std	Y+10, r23	; 0x0a
    107a:	8b 87       	std	Y+11, r24	; 0x0b
    107c:	9c 87       	std	Y+12, r25	; 0x0c
        acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	48 e4       	ldi	r20, 0x48	; 72
    1084:	52 e4       	ldi	r21, 0x42	; 66
    1086:	6d 85       	ldd	r22, Y+13	; 0x0d
    1088:	7e 85       	ldd	r23, Y+14	; 0x0e
    108a:	8f 85       	ldd	r24, Y+15	; 0x0f
    108c:	98 89       	ldd	r25, Y+16	; 0x10
    108e:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
    1092:	0e 94 07 1a 	call	0x340e	; 0x340e <sqrt>
    1096:	9b 01       	movw	r18, r22
    1098:	ac 01       	movw	r20, r24
    109a:	c7 01       	movw	r24, r14
    109c:	b6 01       	movw	r22, r12
    109e:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
    10a2:	9b 01       	movw	r18, r22
    10a4:	ac 01       	movw	r20, r24
    10a6:	c3 01       	movw	r24, r6
    10a8:	b2 01       	movw	r22, r4
    10aa:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
    10ae:	0e 94 07 1a 	call	0x340e	; 0x340e <sqrt>
    10b2:	6b 01       	movw	r12, r22
    10b4:	7c 01       	movw	r14, r24
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	38 e4       	ldi	r19, 0x48	; 72
    10ba:	4c e8       	ldi	r20, 0x8C	; 140
    10bc:	55 e4       	ldi	r21, 0x45	; 69
    10be:	c5 01       	movw	r24, r10
    10c0:	b4 01       	movw	r22, r8
    10c2:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	38 e0       	ldi	r19, 0x08	; 8
    10ca:	44 e8       	ldi	r20, 0x84	; 132
    10cc:	56 e4       	ldi	r21, 0x46	; 70
    10ce:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
    10d2:	4b 01       	movw	r8, r22
    10d4:	5c 01       	movw	r10, r24
    10d6:	a7 01       	movw	r20, r14
    10d8:	96 01       	movw	r18, r12
    10da:	c7 01       	movw	r24, r14
    10dc:	b6 01       	movw	r22, r12
    10de:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	46 e8       	ldi	r20, 0x86	; 134
    10e8:	52 e4       	ldi	r21, 0x42	; 66
    10ea:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
    10ee:	9b 01       	movw	r18, r22
    10f0:	ac 01       	movw	r20, r24
    10f2:	c5 01       	movw	r24, r10
    10f4:	b4 01       	movw	r22, r8
    10f6:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
    10fa:	0e 94 5d 17 	call	0x2eba	; 0x2eba <acos>
    10fe:	9b 01       	movw	r18, r22
    1100:	ac 01       	movw	r20, r24
        y = y1 + (i + 1) * deltaY;
        z = z1 + (i + 1) * deltaZ;
        
        // lös inverskinematik för lederna.
        theta1 = atan2f(x,y)*180/PI;
        theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
    1102:	69 85       	ldd	r22, Y+9	; 0x09
    1104:	7a 85       	ldd	r23, Y+10	; 0x0a
    1106:	8b 85       	ldd	r24, Y+11	; 0x0b
    1108:	9c 85       	ldd	r25, Y+12	; 0x0c
    110a:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
    110e:	24 ee       	ldi	r18, 0xE4	; 228
    1110:	3e e2       	ldi	r19, 0x2E	; 46
    1112:	45 e6       	ldi	r20, 0x65	; 101
    1114:	52 e4       	ldi	r21, 0x42	; 66
    1116:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
    111a:	0e 94 9a 18 	call	0x3134	; 0x3134 <__fixsfsi>
    111e:	6b 01       	movw	r12, r22
    1120:	7c 01       	movw	r14, r24
        acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
        
        theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
    1122:	a3 01       	movw	r20, r6
    1124:	92 01       	movw	r18, r4
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	7a e1       	ldi	r23, 0x1A	; 26
    112a:	87 ea       	ldi	r24, 0xA7	; 167
    112c:	96 e4       	ldi	r25, 0x46	; 70
    112e:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
    1132:	29 89       	ldd	r18, Y+17	; 0x11
    1134:	3a 89       	ldd	r19, Y+18	; 0x12
    1136:	4b 89       	ldd	r20, Y+19	; 0x13
    1138:	5c 89       	ldd	r21, Y+20	; 0x14
    113a:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	38 e1       	ldi	r19, 0x18	; 24
    1142:	48 e8       	ldi	r20, 0x88	; 136
    1144:	56 e4       	ldi	r21, 0x46	; 70
    1146:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
    114a:	0e 94 5d 17 	call	0x2eba	; 0x2eba <acos>
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	44 e3       	ldi	r20, 0x34	; 52
    1154:	53 e4       	ldi	r21, 0x43	; 67
    1156:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
    115a:	28 ed       	ldi	r18, 0xD8	; 216
    115c:	3f e0       	ldi	r19, 0x0F	; 15
    115e:	49 e4       	ldi	r20, 0x49	; 73
    1160:	50 e4       	ldi	r21, 0x40	; 64
    1162:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
    1166:	0e 94 9a 18 	call	0x3134	; 0x3134 <__fixsfsi>
        
        // spara resultatet i global array
        switch(currentLeg.legNumber)
    116a:	02 30       	cpi	r16, 0x02	; 2
    116c:	11 05       	cpc	r17, r1
    116e:	a9 f1       	breq	.+106    	; 0x11da <CalcStraightPath+0x446>
    1170:	24 f4       	brge	.+8      	; 0x117a <CalcStraightPath+0x3e6>
    1172:	01 30       	cpi	r16, 0x01	; 1
    1174:	11 05       	cpc	r17, r1
    1176:	51 f0       	breq	.+20     	; 0x118c <CalcStraightPath+0x3f8>
    1178:	b2 c0       	rjmp	.+356    	; 0x12de <CalcStraightPath+0x54a>
    117a:	03 30       	cpi	r16, 0x03	; 3
    117c:	11 05       	cpc	r17, r1
    117e:	09 f4       	brne	.+2      	; 0x1182 <CalcStraightPath+0x3ee>
    1180:	53 c0       	rjmp	.+166    	; 0x1228 <CalcStraightPath+0x494>
    1182:	04 30       	cpi	r16, 0x04	; 4
    1184:	11 05       	cpc	r17, r1
    1186:	09 f4       	brne	.+2      	; 0x118a <CalcStraightPath+0x3f6>
    1188:	7d c0       	rjmp	.+250    	; 0x1284 <CalcStraightPath+0x4f0>
    118a:	a9 c0       	rjmp	.+338    	; 0x12de <CalcStraightPath+0x54a>
        {
            case FRONT_LEFT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 105;
    118c:	8b 8c       	ldd	r8, Y+27	; 0x1b
    118e:	9c 8c       	ldd	r9, Y+28	; 0x1c
    1190:	ad 8c       	ldd	r10, Y+29	; 0x1d
    1192:	be 8c       	ldd	r11, Y+30	; 0x1e
    1194:	29 e6       	ldi	r18, 0x69	; 105
    1196:	82 0e       	add	r8, r18
    1198:	91 1c       	adc	r9, r1
    119a:	a1 1c       	adc	r10, r1
    119c:	b1 1c       	adc	r11, r1
    119e:	af 89       	ldd	r26, Y+23	; 0x17
    11a0:	b8 8d       	ldd	r27, Y+24	; 0x18
    11a2:	8d 92       	st	X+, r8
    11a4:	9d 92       	st	X+, r9
    11a6:	ad 92       	st	X+, r10
    11a8:	bc 92       	st	X, r11
    11aa:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.femurJoint][i] =  theta2 + 75;
    11ac:	bb e4       	ldi	r27, 0x4B	; 75
    11ae:	cb 0e       	add	r12, r27
    11b0:	d1 1c       	adc	r13, r1
    11b2:	e1 1c       	adc	r14, r1
    11b4:	f1 1c       	adc	r15, r1
    11b6:	e9 8d       	ldd	r30, Y+25	; 0x19
    11b8:	fa 8d       	ldd	r31, Y+26	; 0x1a
    11ba:	c0 82       	st	Z, r12
    11bc:	d1 82       	std	Z+1, r13	; 0x01
    11be:	e2 82       	std	Z+2, r14	; 0x02
    11c0:	f3 82       	std	Z+3, r15	; 0x03
                actuatorPositions_g[currentLeg.tibiaJoint][i] =  theta3 + 1;
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	01 96       	adiw	r24, 0x01	; 1
    11c8:	a1 1d       	adc	r26, r1
    11ca:	b1 1d       	adc	r27, r1
    11cc:	ed 89       	ldd	r30, Y+21	; 0x15
    11ce:	fe 89       	ldd	r31, Y+22	; 0x16
    11d0:	80 83       	st	Z, r24
    11d2:	91 83       	std	Z+1, r25	; 0x01
    11d4:	a2 83       	std	Z+2, r26	; 0x02
    11d6:	b3 83       	std	Z+3, r27	; 0x03
                break;
    11d8:	82 c0       	rjmp	.+260    	; 0x12de <CalcStraightPath+0x54a>
            }
            case FRONT_RIGHT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 193;
    11da:	8b 8c       	ldd	r8, Y+27	; 0x1b
    11dc:	9c 8c       	ldd	r9, Y+28	; 0x1c
    11de:	ad 8c       	ldd	r10, Y+29	; 0x1d
    11e0:	be 8c       	ldd	r11, Y+30	; 0x1e
    11e2:	f1 ec       	ldi	r31, 0xC1	; 193
    11e4:	8f 0e       	add	r8, r31
    11e6:	91 1c       	adc	r9, r1
    11e8:	a1 1c       	adc	r10, r1
    11ea:	b1 1c       	adc	r11, r1
    11ec:	af 89       	ldd	r26, Y+23	; 0x17
    11ee:	b8 8d       	ldd	r27, Y+24	; 0x18
    11f0:	8d 92       	st	X+, r8
    11f2:	9d 92       	st	X+, r9
    11f4:	ad 92       	st	X+, r10
    11f6:	bc 92       	st	X, r11
    11f8:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.femurJoint][i] =  theta2 + 75;
    11fa:	bb e4       	ldi	r27, 0x4B	; 75
    11fc:	cb 0e       	add	r12, r27
    11fe:	d1 1c       	adc	r13, r1
    1200:	e1 1c       	adc	r14, r1
    1202:	f1 1c       	adc	r15, r1
    1204:	e9 8d       	ldd	r30, Y+25	; 0x19
    1206:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1208:	c0 82       	st	Z, r12
    120a:	d1 82       	std	Z+1, r13	; 0x01
    120c:	e2 82       	std	Z+2, r14	; 0x02
    120e:	f3 82       	std	Z+3, r15	; 0x03
                actuatorPositions_g[currentLeg.tibiaJoint][i] =  theta3 + 3;
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	03 96       	adiw	r24, 0x03	; 3
    1216:	a1 1d       	adc	r26, r1
    1218:	b1 1d       	adc	r27, r1
    121a:	ed 89       	ldd	r30, Y+21	; 0x15
    121c:	fe 89       	ldd	r31, Y+22	; 0x16
    121e:	80 83       	st	Z, r24
    1220:	91 83       	std	Z+1, r25	; 0x01
    1222:	a2 83       	std	Z+2, r26	; 0x02
    1224:	b3 83       	std	Z+3, r27	; 0x03
                break;
    1226:	5b c0       	rjmp	.+182    	; 0x12de <CalcStraightPath+0x54a>
            }
            case REAR_LEFT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 195;
    1228:	8b 8c       	ldd	r8, Y+27	; 0x1b
    122a:	9c 8c       	ldd	r9, Y+28	; 0x1c
    122c:	ad 8c       	ldd	r10, Y+29	; 0x1d
    122e:	be 8c       	ldd	r11, Y+30	; 0x1e
    1230:	f3 ec       	ldi	r31, 0xC3	; 195
    1232:	8f 0e       	add	r8, r31
    1234:	91 1c       	adc	r9, r1
    1236:	a1 1c       	adc	r10, r1
    1238:	b1 1c       	adc	r11, r1
    123a:	af 89       	ldd	r26, Y+23	; 0x17
    123c:	b8 8d       	ldd	r27, Y+24	; 0x18
    123e:	8d 92       	st	X+, r8
    1240:	9d 92       	st	X+, r9
    1242:	ad 92       	st	X+, r10
    1244:	bc 92       	st	X, r11
    1246:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.femurJoint][i] =  225 - theta2;
    1248:	21 ee       	ldi	r18, 0xE1	; 225
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	40 e0       	ldi	r20, 0x00	; 0
    124e:	50 e0       	ldi	r21, 0x00	; 0
    1250:	2c 19       	sub	r18, r12
    1252:	3d 09       	sbc	r19, r13
    1254:	4e 09       	sbc	r20, r14
    1256:	5f 09       	sbc	r21, r15
    1258:	a9 8d       	ldd	r26, Y+25	; 0x19
    125a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    125c:	2d 93       	st	X+, r18
    125e:	3d 93       	st	X+, r19
    1260:	4d 93       	st	X+, r20
    1262:	5c 93       	st	X, r21
    1264:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.tibiaJoint][i] =  300 - theta3;
    1266:	2c e2       	ldi	r18, 0x2C	; 44
    1268:	31 e0       	ldi	r19, 0x01	; 1
    126a:	40 e0       	ldi	r20, 0x00	; 0
    126c:	50 e0       	ldi	r21, 0x00	; 0
    126e:	26 1b       	sub	r18, r22
    1270:	37 0b       	sbc	r19, r23
    1272:	48 0b       	sbc	r20, r24
    1274:	59 0b       	sbc	r21, r25
    1276:	ed 89       	ldd	r30, Y+21	; 0x15
    1278:	fe 89       	ldd	r31, Y+22	; 0x16
    127a:	20 83       	st	Z, r18
    127c:	31 83       	std	Z+1, r19	; 0x01
    127e:	42 83       	std	Z+2, r20	; 0x02
    1280:	53 83       	std	Z+3, r21	; 0x03
                break;
    1282:	2d c0       	rjmp	.+90     	; 0x12de <CalcStraightPath+0x54a>
            }
            case REAR_RIGHT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 105;
    1284:	8b 8c       	ldd	r8, Y+27	; 0x1b
    1286:	9c 8c       	ldd	r9, Y+28	; 0x1c
    1288:	ad 8c       	ldd	r10, Y+29	; 0x1d
    128a:	be 8c       	ldd	r11, Y+30	; 0x1e
    128c:	f9 e6       	ldi	r31, 0x69	; 105
    128e:	8f 0e       	add	r8, r31
    1290:	91 1c       	adc	r9, r1
    1292:	a1 1c       	adc	r10, r1
    1294:	b1 1c       	adc	r11, r1
    1296:	af 89       	ldd	r26, Y+23	; 0x17
    1298:	b8 8d       	ldd	r27, Y+24	; 0x18
    129a:	8d 92       	st	X+, r8
    129c:	9d 92       	st	X+, r9
    129e:	ad 92       	st	X+, r10
    12a0:	bc 92       	st	X, r11
    12a2:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.femurJoint][i] =  225 - theta2;
    12a4:	21 ee       	ldi	r18, 0xE1	; 225
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	40 e0       	ldi	r20, 0x00	; 0
    12aa:	50 e0       	ldi	r21, 0x00	; 0
    12ac:	2c 19       	sub	r18, r12
    12ae:	3d 09       	sbc	r19, r13
    12b0:	4e 09       	sbc	r20, r14
    12b2:	5f 09       	sbc	r21, r15
    12b4:	a9 8d       	ldd	r26, Y+25	; 0x19
    12b6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    12b8:	2d 93       	st	X+, r18
    12ba:	3d 93       	st	X+, r19
    12bc:	4d 93       	st	X+, r20
    12be:	5c 93       	st	X, r21
    12c0:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.tibiaJoint][i] =  300 - theta3;
    12c2:	2c e2       	ldi	r18, 0x2C	; 44
    12c4:	31 e0       	ldi	r19, 0x01	; 1
    12c6:	40 e0       	ldi	r20, 0x00	; 0
    12c8:	50 e0       	ldi	r21, 0x00	; 0
    12ca:	26 1b       	sub	r18, r22
    12cc:	37 0b       	sbc	r19, r23
    12ce:	48 0b       	sbc	r20, r24
    12d0:	59 0b       	sbc	r21, r25
    12d2:	ed 89       	ldd	r30, Y+21	; 0x15
    12d4:	fe 89       	ldd	r31, Y+22	; 0x16
    12d6:	20 83       	st	Z, r18
    12d8:	31 83       	std	Z+1, r19	; 0x01
    12da:	42 83       	std	Z+2, r20	; 0x02
    12dc:	53 83       	std	Z+3, r21	; 0x03
    12de:	2f 89       	ldd	r18, Y+23	; 0x17
    12e0:	38 8d       	ldd	r19, Y+24	; 0x18
    12e2:	2c 5f       	subi	r18, 0xFC	; 252
    12e4:	3f 4f       	sbci	r19, 0xFF	; 255
    12e6:	38 8f       	std	Y+24, r19	; 0x18
    12e8:	2f 8b       	std	Y+23, r18	; 0x17
    12ea:	49 8d       	ldd	r20, Y+25	; 0x19
    12ec:	5a 8d       	ldd	r21, Y+26	; 0x1a
    12ee:	4c 5f       	subi	r20, 0xFC	; 252
    12f0:	5f 4f       	sbci	r21, 0xFF	; 255
    12f2:	5a 8f       	std	Y+26, r21	; 0x1a
    12f4:	49 8f       	std	Y+25, r20	; 0x19
    12f6:	8d 89       	ldd	r24, Y+21	; 0x15
    12f8:	9e 89       	ldd	r25, Y+22	; 0x16
    12fa:	04 96       	adiw	r24, 0x04	; 4
    12fc:	9e 8b       	std	Y+22, r25	; 0x16
    12fe:	8d 8b       	std	Y+21, r24	; 0x15
    float deltaY = (y2 - y1) / numberOfPositions;
    float deltaZ = (z2 - z1) / numberOfPositions;
    
    float x,y,z;
    
    for (int i = 0; i < numberOfPositions; i++)
    1300:	af 8d       	ldd	r26, Y+31	; 0x1f
    1302:	b8 a1       	ldd	r27, Y+32	; 0x20
    1304:	2a 16       	cp	r2, r26
    1306:	3b 06       	cpc	r3, r27
    1308:	09 f0       	breq	.+2      	; 0x130c <CalcStraightPath+0x578>
    130a:	16 ce       	rjmp	.-980    	; 0xf38 <CalcStraightPath+0x1a4>
        
        
        
        
    }
}
    130c:	e4 96       	adiw	r28, 0x34	; 52
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	f8 94       	cli
    1312:	de bf       	out	0x3e, r29	; 62
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	cd bf       	out	0x3d, r28	; 61
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	1f 91       	pop	r17
    131e:	0f 91       	pop	r16
    1320:	ff 90       	pop	r15
    1322:	ef 90       	pop	r14
    1324:	df 90       	pop	r13
    1326:	cf 90       	pop	r12
    1328:	bf 90       	pop	r11
    132a:	af 90       	pop	r10
    132c:	9f 90       	pop	r9
    132e:	8f 90       	pop	r8
    1330:	7f 90       	pop	r7
    1332:	6f 90       	pop	r6
    1334:	5f 90       	pop	r5
    1336:	4f 90       	pop	r4
    1338:	3f 90       	pop	r3
    133a:	2f 90       	pop	r2
    133c:	08 95       	ret

0000133e <CalcCurvedPath>:

void CalcCurvedPath(leg currentLeg, int numberOfPositions, float x1, float y1, float z1, float x2, float y2, float z2)
{
    133e:	2f 92       	push	r2
    1340:	3f 92       	push	r3
    1342:	4f 92       	push	r4
    1344:	5f 92       	push	r5
    1346:	6f 92       	push	r6
    1348:	7f 92       	push	r7
    134a:	8f 92       	push	r8
    134c:	9f 92       	push	r9
    134e:	af 92       	push	r10
    1350:	bf 92       	push	r11
    1352:	cf 92       	push	r12
    1354:	df 92       	push	r13
    1356:	ef 92       	push	r14
    1358:	ff 92       	push	r15
    135a:	0f 93       	push	r16
    135c:	1f 93       	push	r17
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	c4 54       	subi	r28, 0x44	; 68
    1368:	d1 09       	sbc	r29, r1
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	cd bf       	out	0x3d, r28	; 61
    1374:	29 83       	std	Y+1, r18	; 0x01
    1376:	3a 83       	std	Y+2, r19	; 0x02
    1378:	4b 83       	std	Y+3, r20	; 0x03
    137a:	5c 83       	std	Y+4, r21	; 0x04
    137c:	6d 83       	std	Y+5, r22	; 0x05
    137e:	7e 83       	std	Y+6, r23	; 0x06
    1380:	8f 83       	std	Y+7, r24	; 0x07
    1382:	98 87       	std	Y+8, r25	; 0x08
    1384:	1e ab       	std	Y+54, r17	; 0x36
    1386:	0d ab       	std	Y+53, r16	; 0x35
    1388:	6d 96       	adiw	r28, 0x1d	; 29
    138a:	4c ac       	ldd	r4, Y+60	; 0x3c
    138c:	5d ac       	ldd	r5, Y+61	; 0x3d
    138e:	6e ac       	ldd	r6, Y+62	; 0x3e
    1390:	7f ac       	ldd	r7, Y+63	; 0x3f
    1392:	6d 97       	sbiw	r28, 0x1d	; 29
    1394:	29 80       	ldd	r2, Y+1	; 0x01
    1396:	3a 80       	ldd	r3, Y+2	; 0x02
    1398:	2b 81       	ldd	r18, Y+3	; 0x03
    139a:	3c 81       	ldd	r19, Y+4	; 0x04
    139c:	21 96       	adiw	r28, 0x01	; 1
    139e:	3f af       	std	Y+63, r19	; 0x3f
    13a0:	2e af       	std	Y+62, r18	; 0x3e
    13a2:	21 97       	sbiw	r28, 0x01	; 1
    13a4:	4d 81       	ldd	r20, Y+5	; 0x05
    13a6:	5e 81       	ldd	r21, Y+6	; 0x06
    13a8:	23 96       	adiw	r28, 0x03	; 3
    13aa:	5f af       	std	Y+63, r21	; 0x3f
    13ac:	4e af       	std	Y+62, r20	; 0x3e
    13ae:	23 97       	sbiw	r28, 0x03	; 3
    13b0:	8f 81       	ldd	r24, Y+7	; 0x07
    13b2:	98 85       	ldd	r25, Y+8	; 0x08
    13b4:	25 96       	adiw	r28, 0x05	; 5
    13b6:	9f af       	std	Y+63, r25	; 0x3f
    13b8:	8e af       	std	Y+62, r24	; 0x3e
    13ba:	25 97       	sbiw	r28, 0x05	; 5
    long int theta1;
    long int theta2;
    long int theta3;
    if ((currentLeg.legNumber == FRONT_LEFT_LEG) | (currentLeg.legNumber == FRONT_RIGHT_LEG))
    13bc:	c1 01       	movw	r24, r2
    13be:	01 97       	sbiw	r24, 0x01	; 1
    13c0:	02 97       	sbiw	r24, 0x02	; 2
    13c2:	88 f4       	brcc	.+34     	; 0x13e6 <CalcCurvedPath+0xa8>
    {
        x1 *= -1;
    13c4:	f7 fa       	bst	r15, 7
    13c6:	f0 94       	com	r15
    13c8:	f7 f8       	bld	r15, 7
    13ca:	f0 94       	com	r15
        x2 *= -1;
    13cc:	a1 96       	adiw	r28, 0x21	; 33
    13ce:	2c ad       	ldd	r18, Y+60	; 0x3c
    13d0:	3d ad       	ldd	r19, Y+61	; 0x3d
    13d2:	4e ad       	ldd	r20, Y+62	; 0x3e
    13d4:	5f ad       	ldd	r21, Y+63	; 0x3f
    13d6:	a1 97       	sbiw	r28, 0x21	; 33
    13d8:	50 58       	subi	r21, 0x80	; 128
    13da:	a1 96       	adiw	r28, 0x21	; 33
    13dc:	2c af       	std	Y+60, r18	; 0x3c
    13de:	3d af       	std	Y+61, r19	; 0x3d
    13e0:	4e af       	std	Y+62, r20	; 0x3e
    13e2:	5f af       	std	Y+63, r21	; 0x3f
    13e4:	a1 97       	sbiw	r28, 0x21	; 33
    }
    if ((currentLeg.legNumber == REAR_RIGHT_LEG) | (currentLeg.legNumber == REAR_LEFT_LEG))
    13e6:	c1 01       	movw	r24, r2
    13e8:	03 97       	sbiw	r24, 0x03	; 3
    13ea:	02 97       	sbiw	r24, 0x02	; 2
    13ec:	88 f4       	brcc	.+34     	; 0x1410 <CalcCurvedPath+0xd2>
    {
        y1 *= -1;
    13ee:	b7 fa       	bst	r11, 7
    13f0:	b0 94       	com	r11
    13f2:	b7 f8       	bld	r11, 7
    13f4:	b0 94       	com	r11
        y2 *= -1;
    13f6:	a5 96       	adiw	r28, 0x25	; 37
    13f8:	8c ad       	ldd	r24, Y+60	; 0x3c
    13fa:	9d ad       	ldd	r25, Y+61	; 0x3d
    13fc:	ae ad       	ldd	r26, Y+62	; 0x3e
    13fe:	bf ad       	ldd	r27, Y+63	; 0x3f
    1400:	a5 97       	sbiw	r28, 0x25	; 37
    1402:	b0 58       	subi	r27, 0x80	; 128
    1404:	a5 96       	adiw	r28, 0x25	; 37
    1406:	8c af       	std	Y+60, r24	; 0x3c
    1408:	9d af       	std	Y+61, r25	; 0x3d
    140a:	ae af       	std	Y+62, r26	; 0x3e
    140c:	bf af       	std	Y+63, r27	; 0x3f
    140e:	a5 97       	sbiw	r28, 0x25	; 37
    }
    float deltaX = (x2 - x1) / numberOfPositions;
    1410:	ad a9       	ldd	r26, Y+53	; 0x35
    1412:	be a9       	ldd	r27, Y+54	; 0x36
    1414:	bd 01       	movw	r22, r26
    1416:	88 27       	eor	r24, r24
    1418:	77 fd       	sbrc	r23, 7
    141a:	80 95       	com	r24
    141c:	98 2f       	mov	r25, r24
    141e:	0e 94 cd 18 	call	0x319a	; 0x319a <__floatsisf>
    1422:	69 87       	std	Y+9, r22	; 0x09
    1424:	7a 87       	std	Y+10, r23	; 0x0a
    1426:	8b 87       	std	Y+11, r24	; 0x0b
    1428:	9c 87       	std	Y+12, r25	; 0x0c
    142a:	a7 01       	movw	r20, r14
    142c:	96 01       	movw	r18, r12
    142e:	a1 96       	adiw	r28, 0x21	; 33
    1430:	6c ad       	ldd	r22, Y+60	; 0x3c
    1432:	7d ad       	ldd	r23, Y+61	; 0x3d
    1434:	8e ad       	ldd	r24, Y+62	; 0x3e
    1436:	9f ad       	ldd	r25, Y+63	; 0x3f
    1438:	a1 97       	sbiw	r28, 0x21	; 33
    143a:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
    143e:	29 85       	ldd	r18, Y+9	; 0x09
    1440:	3a 85       	ldd	r19, Y+10	; 0x0a
    1442:	4b 85       	ldd	r20, Y+11	; 0x0b
    1444:	5c 85       	ldd	r21, Y+12	; 0x0c
    1446:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
    144a:	6b a7       	std	Y+43, r22	; 0x2b
    144c:	7c a7       	std	Y+44, r23	; 0x2c
    144e:	8d a7       	std	Y+45, r24	; 0x2d
    1450:	9e a7       	std	Y+46, r25	; 0x2e
    float deltaY = (y2 - y1) / numberOfPositions;
    1452:	a5 01       	movw	r20, r10
    1454:	94 01       	movw	r18, r8
    1456:	a5 96       	adiw	r28, 0x25	; 37
    1458:	6c ad       	ldd	r22, Y+60	; 0x3c
    145a:	7d ad       	ldd	r23, Y+61	; 0x3d
    145c:	8e ad       	ldd	r24, Y+62	; 0x3e
    145e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1460:	a5 97       	sbiw	r28, 0x25	; 37
    1462:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
    1466:	29 85       	ldd	r18, Y+9	; 0x09
    1468:	3a 85       	ldd	r19, Y+10	; 0x0a
    146a:	4b 85       	ldd	r20, Y+11	; 0x0b
    146c:	5c 85       	ldd	r21, Y+12	; 0x0c
    146e:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
    1472:	6f a7       	std	Y+47, r22	; 0x2f
    1474:	78 ab       	std	Y+48, r23	; 0x30
    1476:	89 ab       	std	Y+49, r24	; 0x31
    1478:	9a ab       	std	Y+50, r25	; 0x32
    float deltaZBegin = (60 + z2 - z1) / (numberOfPositions / 2); // första halvan av sträckan ska benet röra sig mot en position 4cm över slutpositionen
    147a:	8d a9       	ldd	r24, Y+53	; 0x35
    147c:	9e a9       	ldd	r25, Y+54	; 0x36
    147e:	99 23       	and	r25, r25
    1480:	0c f4       	brge	.+2      	; 0x1484 <CalcCurvedPath+0x146>
    1482:	01 96       	adiw	r24, 0x01	; 1
    1484:	fc 01       	movw	r30, r24
    1486:	f5 95       	asr	r31
    1488:	e7 95       	ror	r30
    148a:	fc ab       	std	Y+52, r31	; 0x34
    148c:	eb ab       	std	Y+51, r30	; 0x33
    148e:	bf 01       	movw	r22, r30
    1490:	88 27       	eor	r24, r24
    1492:	77 fd       	sbrc	r23, 7
    1494:	80 95       	com	r24
    1496:	98 2f       	mov	r25, r24
    1498:	0e 94 cd 18 	call	0x319a	; 0x319a <__floatsisf>
    149c:	69 87       	std	Y+9, r22	; 0x09
    149e:	7a 87       	std	Y+10, r23	; 0x0a
    14a0:	8b 87       	std	Y+11, r24	; 0x0b
    14a2:	9c 87       	std	Y+12, r25	; 0x0c
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	40 e7       	ldi	r20, 0x70	; 112
    14aa:	52 e4       	ldi	r21, 0x42	; 66
    14ac:	a9 96       	adiw	r28, 0x29	; 41
    14ae:	6c ad       	ldd	r22, Y+60	; 0x3c
    14b0:	7d ad       	ldd	r23, Y+61	; 0x3d
    14b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    14b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    14b6:	a9 97       	sbiw	r28, 0x29	; 41
    14b8:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
    14bc:	a3 01       	movw	r20, r6
    14be:	92 01       	movw	r18, r4
    14c0:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
    14c4:	29 85       	ldd	r18, Y+9	; 0x09
    14c6:	3a 85       	ldd	r19, Y+10	; 0x0a
    14c8:	4b 85       	ldd	r20, Y+11	; 0x0b
    14ca:	5c 85       	ldd	r21, Y+12	; 0x0c
    14cc:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
    14d0:	6f ab       	std	Y+55, r22	; 0x37
    14d2:	78 af       	std	Y+56, r23	; 0x38
    14d4:	89 af       	std	Y+57, r24	; 0x39
    14d6:	9a af       	std	Y+58, r25	; 0x3a
    float deltaZEnd = (z2 - z1 - 60) / (numberOfPositions / 2); // andra halvan av sträckan ska benet röra sig mot en position 4cm under slutpositionen -> benet får en triangelbana
    14d8:	a3 01       	movw	r20, r6
    14da:	92 01       	movw	r18, r4
    14dc:	a9 96       	adiw	r28, 0x29	; 41
    14de:	6c ad       	ldd	r22, Y+60	; 0x3c
    14e0:	7d ad       	ldd	r23, Y+61	; 0x3d
    14e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    14e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    14e6:	a9 97       	sbiw	r28, 0x29	; 41
    14e8:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	40 e7       	ldi	r20, 0x70	; 112
    14f2:	52 e4       	ldi	r21, 0x42	; 66
    14f4:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
    14f8:	29 85       	ldd	r18, Y+9	; 0x09
    14fa:	3a 85       	ldd	r19, Y+10	; 0x0a
    14fc:	4b 85       	ldd	r20, Y+11	; 0x0b
    14fe:	5c 85       	ldd	r21, Y+12	; 0x0c
    1500:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
    1504:	6b af       	std	Y+59, r22	; 0x3b
    1506:	7c af       	std	Y+60, r23	; 0x3c
    1508:	8d af       	std	Y+61, r24	; 0x3d
    150a:	9e af       	std	Y+62, r25	; 0x3e
    float y = y1;
    float z = z1;
    
    
    // första halvan av rörelsen
    for (int i = 0; i < numberOfPositions / 2; i++)
    150c:	2b a9       	ldd	r18, Y+51	; 0x33
    150e:	3c a9       	ldd	r19, Y+52	; 0x34
    1510:	12 16       	cp	r1, r18
    1512:	13 06       	cpc	r1, r19
    1514:	0c f0       	brlt	.+2      	; 0x1518 <CalcCurvedPath+0x1da>
    1516:	2d c2       	rjmp	.+1114   	; 0x1972 <CalcCurvedPath+0x634>
    1518:	20 e5       	ldi	r18, 0x50	; 80
    151a:	21 96       	adiw	r28, 0x01	; 1
    151c:	4e ad       	ldd	r20, Y+62	; 0x3e
    151e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1520:	21 97       	sbiw	r28, 0x01	; 1
    1522:	24 9f       	mul	r18, r20
    1524:	c0 01       	movw	r24, r0
    1526:	25 9f       	mul	r18, r21
    1528:	90 0d       	add	r25, r0
    152a:	11 24       	eor	r1, r1
    152c:	dc 01       	movw	r26, r24
    152e:	ac 5d       	subi	r26, 0xDC	; 220
    1530:	be 4f       	sbci	r27, 0xFE	; 254
    1532:	ba a3       	std	Y+34, r27	; 0x22
    1534:	a9 a3       	std	Y+33, r26	; 0x21
    1536:	23 96       	adiw	r28, 0x03	; 3
    1538:	ee ad       	ldd	r30, Y+62	; 0x3e
    153a:	ff ad       	ldd	r31, Y+63	; 0x3f
    153c:	23 97       	sbiw	r28, 0x03	; 3
    153e:	2e 9f       	mul	r18, r30
    1540:	c0 01       	movw	r24, r0
    1542:	2f 9f       	mul	r18, r31
    1544:	90 0d       	add	r25, r0
    1546:	11 24       	eor	r1, r1
    1548:	ac 01       	movw	r20, r24
    154a:	4c 5d       	subi	r20, 0xDC	; 220
    154c:	5e 4f       	sbci	r21, 0xFE	; 254
    154e:	5c a3       	std	Y+36, r21	; 0x24
    1550:	4b a3       	std	Y+35, r20	; 0x23
    1552:	25 96       	adiw	r28, 0x05	; 5
    1554:	ae ad       	ldd	r26, Y+62	; 0x3e
    1556:	bf ad       	ldd	r27, Y+63	; 0x3f
    1558:	25 97       	sbiw	r28, 0x05	; 5
    155a:	2a 9f       	mul	r18, r26
    155c:	c0 01       	movw	r24, r0
    155e:	2b 9f       	mul	r18, r27
    1560:	90 0d       	add	r25, r0
    1562:	11 24       	eor	r1, r1
    1564:	fc 01       	movw	r30, r24
    1566:	ec 5d       	subi	r30, 0xDC	; 220
    1568:	fe 4f       	sbci	r31, 0xFE	; 254
    156a:	fe a3       	std	Y+38, r31	; 0x26
    156c:	ed a3       	std	Y+37, r30	; 0x25
    156e:	00 e0       	ldi	r16, 0x00	; 0
    1570:	10 e0       	ldi	r17, 0x00	; 0
            }
            case REAR_LEFT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 195;
                actuatorPositions_g[currentLeg.femurJoint][i] =  225 - theta2;
                actuatorPositions_g[currentLeg.tibiaJoint][i] =  300 - theta3;
    1572:	c9 86       	std	Y+9, r12	; 0x09
    1574:	da 86       	std	Y+10, r13	; 0x0a
    1576:	eb 86       	std	Y+11, r14	; 0x0b
    1578:	fc 86       	std	Y+12, r15	; 0x0c
    157a:	8d 86       	std	Y+13, r8	; 0x0d
    157c:	9e 86       	std	Y+14, r9	; 0x0e
    157e:	af 86       	std	Y+15, r10	; 0x0f
    1580:	b8 8a       	std	Y+16, r11	; 0x10
    1582:	49 8a       	std	Y+17, r4	; 0x11
    1584:	5a 8a       	std	Y+18, r5	; 0x12
    1586:	6b 8a       	std	Y+19, r6	; 0x13
    1588:	7c 8a       	std	Y+20, r7	; 0x14
    
    
    // första halvan av rörelsen
    for (int i = 0; i < numberOfPositions / 2; i++)
    {
        x = x + deltaX;
    158a:	2b a5       	ldd	r18, Y+43	; 0x2b
    158c:	3c a5       	ldd	r19, Y+44	; 0x2c
    158e:	4d a5       	ldd	r20, Y+45	; 0x2d
    1590:	5e a5       	ldd	r21, Y+46	; 0x2e
    1592:	69 85       	ldd	r22, Y+9	; 0x09
    1594:	7a 85       	ldd	r23, Y+10	; 0x0a
    1596:	8b 85       	ldd	r24, Y+11	; 0x0b
    1598:	9c 85       	ldd	r25, Y+12	; 0x0c
    159a:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
    159e:	69 87       	std	Y+9, r22	; 0x09
    15a0:	7a 87       	std	Y+10, r23	; 0x0a
    15a2:	8b 87       	std	Y+11, r24	; 0x0b
    15a4:	9c 87       	std	Y+12, r25	; 0x0c
        y = y + deltaY;
    15a6:	2f a5       	ldd	r18, Y+47	; 0x2f
    15a8:	38 a9       	ldd	r19, Y+48	; 0x30
    15aa:	49 a9       	ldd	r20, Y+49	; 0x31
    15ac:	5a a9       	ldd	r21, Y+50	; 0x32
    15ae:	6d 85       	ldd	r22, Y+13	; 0x0d
    15b0:	7e 85       	ldd	r23, Y+14	; 0x0e
    15b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    15b4:	98 89       	ldd	r25, Y+16	; 0x10
    15b6:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
    15ba:	6d 87       	std	Y+13, r22	; 0x0d
    15bc:	7e 87       	std	Y+14, r23	; 0x0e
    15be:	8f 87       	std	Y+15, r24	; 0x0f
    15c0:	98 8b       	std	Y+16, r25	; 0x10
        z = z + deltaZBegin;
    15c2:	2f a9       	ldd	r18, Y+55	; 0x37
    15c4:	38 ad       	ldd	r19, Y+56	; 0x38
    15c6:	49 ad       	ldd	r20, Y+57	; 0x39
    15c8:	5a ad       	ldd	r21, Y+58	; 0x3a
    15ca:	69 89       	ldd	r22, Y+17	; 0x11
    15cc:	7a 89       	ldd	r23, Y+18	; 0x12
    15ce:	8b 89       	ldd	r24, Y+19	; 0x13
    15d0:	9c 89       	ldd	r25, Y+20	; 0x14
    15d2:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
    15d6:	69 8b       	std	Y+17, r22	; 0x11
    15d8:	7a 8b       	std	Y+18, r23	; 0x12
    15da:	8b 8b       	std	Y+19, r24	; 0x13
    15dc:	9c 8b       	std	Y+20, r25	; 0x14
        
        // lös inverskinematik för lederna.
        theta1 = atan2f(x,y)*180/PI;
    15de:	2d 85       	ldd	r18, Y+13	; 0x0d
    15e0:	3e 85       	ldd	r19, Y+14	; 0x0e
    15e2:	4f 85       	ldd	r20, Y+15	; 0x0f
    15e4:	58 89       	ldd	r21, Y+16	; 0x10
    15e6:	69 85       	ldd	r22, Y+9	; 0x09
    15e8:	7a 85       	ldd	r23, Y+10	; 0x0a
    15ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    15ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    15ee:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <atan2>
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	44 e3       	ldi	r20, 0x34	; 52
    15f8:	53 e4       	ldi	r21, 0x43	; 67
    15fa:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
    15fe:	28 ed       	ldi	r18, 0xD8	; 216
    1600:	3f e0       	ldi	r19, 0x0F	; 15
    1602:	49 e4       	ldi	r20, 0x49	; 73
    1604:	50 e4       	ldi	r21, 0x40	; 64
    1606:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
    160a:	0e 94 9a 18 	call	0x3134	; 0x3134 <__fixsfsi>
    160e:	6f a3       	std	Y+39, r22	; 0x27
    1610:	78 a7       	std	Y+40, r23	; 0x28
    1612:	89 a7       	std	Y+41, r24	; 0x29
    1614:	9a a7       	std	Y+42, r25	; 0x2a
        theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
    1616:	29 89       	ldd	r18, Y+17	; 0x11
    1618:	3a 89       	ldd	r19, Y+18	; 0x12
    161a:	4b 89       	ldd	r20, Y+19	; 0x13
    161c:	5c 89       	ldd	r21, Y+20	; 0x14
    161e:	ca 01       	movw	r24, r20
    1620:	b9 01       	movw	r22, r18
    1622:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
    1626:	6d 8b       	std	Y+21, r22	; 0x15
    1628:	7e 8b       	std	Y+22, r23	; 0x16
    162a:	8f 8b       	std	Y+23, r24	; 0x17
    162c:	98 8f       	std	Y+24, r25	; 0x18
    162e:	29 85       	ldd	r18, Y+9	; 0x09
    1630:	3a 85       	ldd	r19, Y+10	; 0x0a
    1632:	4b 85       	ldd	r20, Y+11	; 0x0b
    1634:	5c 85       	ldd	r21, Y+12	; 0x0c
    1636:	ca 01       	movw	r24, r20
    1638:	b9 01       	movw	r22, r18
    163a:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
    163e:	6b 01       	movw	r12, r22
    1640:	7c 01       	movw	r14, r24
    1642:	2d 85       	ldd	r18, Y+13	; 0x0d
    1644:	3e 85       	ldd	r19, Y+14	; 0x0e
    1646:	4f 85       	ldd	r20, Y+15	; 0x0f
    1648:	58 89       	ldd	r21, Y+16	; 0x10
    164a:	ca 01       	movw	r24, r20
    164c:	b9 01       	movw	r22, r18
    164e:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
    1652:	9b 01       	movw	r18, r22
    1654:	ac 01       	movw	r20, r24
    1656:	c7 01       	movw	r24, r14
    1658:	b6 01       	movw	r22, r12
    165a:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
    165e:	69 8f       	std	Y+25, r22	; 0x19
    1660:	7a 8f       	std	Y+26, r23	; 0x1a
    1662:	8b 8f       	std	Y+27, r24	; 0x1b
    1664:	9c 8f       	std	Y+28, r25	; 0x1c
    1666:	0e 94 07 1a 	call	0x340e	; 0x340e <sqrt>
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	48 e4       	ldi	r20, 0x48	; 72
    1670:	52 e4       	ldi	r21, 0x42	; 66
    1672:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
    1676:	6b 01       	movw	r12, r22
    1678:	7c 01       	movw	r14, r24
    167a:	9b 01       	movw	r18, r22
    167c:	ac 01       	movw	r20, r24
    167e:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
    1682:	6d 8f       	std	Y+29, r22	; 0x1d
    1684:	7e 8f       	std	Y+30, r23	; 0x1e
    1686:	8f 8f       	std	Y+31, r24	; 0x1f
    1688:	98 a3       	std	Y+32, r25	; 0x20
    168a:	9b 01       	movw	r18, r22
    168c:	ac 01       	movw	r20, r24
    168e:	6d 89       	ldd	r22, Y+21	; 0x15
    1690:	7e 89       	ldd	r23, Y+22	; 0x16
    1692:	8f 89       	ldd	r24, Y+23	; 0x17
    1694:	98 8d       	ldd	r25, Y+24	; 0x18
    1696:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
    169a:	4b 01       	movw	r8, r22
    169c:	5c 01       	movw	r10, r24
    169e:	0e 94 07 1a 	call	0x340e	; 0x340e <sqrt>
    16a2:	9b 01       	movw	r18, r22
    16a4:	ac 01       	movw	r20, r24
    16a6:	69 89       	ldd	r22, Y+17	; 0x11
    16a8:	7a 89       	ldd	r23, Y+18	; 0x12
    16aa:	8b 89       	ldd	r24, Y+19	; 0x13
    16ac:	9c 89       	ldd	r25, Y+20	; 0x14
    16ae:	90 58       	subi	r25, 0x80	; 128
    16b0:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
    16b4:	0e 94 5d 17 	call	0x2eba	; 0x2eba <acos>
    16b8:	2b 01       	movw	r4, r22
    16ba:	3c 01       	movw	r6, r24
        acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	48 e4       	ldi	r20, 0x48	; 72
    16c2:	52 e4       	ldi	r21, 0x42	; 66
    16c4:	69 8d       	ldd	r22, Y+25	; 0x19
    16c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16cc:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
    16d0:	0e 94 07 1a 	call	0x340e	; 0x340e <sqrt>
    16d4:	9b 01       	movw	r18, r22
    16d6:	ac 01       	movw	r20, r24
    16d8:	c7 01       	movw	r24, r14
    16da:	b6 01       	movw	r22, r12
    16dc:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
    16e0:	9b 01       	movw	r18, r22
    16e2:	ac 01       	movw	r20, r24
    16e4:	6d 89       	ldd	r22, Y+21	; 0x15
    16e6:	7e 89       	ldd	r23, Y+22	; 0x16
    16e8:	8f 89       	ldd	r24, Y+23	; 0x17
    16ea:	98 8d       	ldd	r25, Y+24	; 0x18
    16ec:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
    16f0:	0e 94 07 1a 	call	0x340e	; 0x340e <sqrt>
    16f4:	6b 01       	movw	r12, r22
    16f6:	7c 01       	movw	r14, r24
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	38 e4       	ldi	r19, 0x48	; 72
    16fc:	4c e8       	ldi	r20, 0x8C	; 140
    16fe:	55 e4       	ldi	r21, 0x45	; 69
    1700:	c5 01       	movw	r24, r10
    1702:	b4 01       	movw	r22, r8
    1704:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	38 e0       	ldi	r19, 0x08	; 8
    170c:	44 e8       	ldi	r20, 0x84	; 132
    170e:	56 e4       	ldi	r21, 0x46	; 70
    1710:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
    1714:	4b 01       	movw	r8, r22
    1716:	5c 01       	movw	r10, r24
    1718:	a7 01       	movw	r20, r14
    171a:	96 01       	movw	r18, r12
    171c:	c7 01       	movw	r24, r14
    171e:	b6 01       	movw	r22, r12
    1720:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	46 e8       	ldi	r20, 0x86	; 134
    172a:	52 e4       	ldi	r21, 0x42	; 66
    172c:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
    1730:	9b 01       	movw	r18, r22
    1732:	ac 01       	movw	r20, r24
    1734:	c5 01       	movw	r24, r10
    1736:	b4 01       	movw	r22, r8
    1738:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
    173c:	0e 94 5d 17 	call	0x2eba	; 0x2eba <acos>
    1740:	9b 01       	movw	r18, r22
    1742:	ac 01       	movw	r20, r24
        y = y + deltaY;
        z = z + deltaZBegin;
        
        // lös inverskinematik för lederna.
        theta1 = atan2f(x,y)*180/PI;
        theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
    1744:	c3 01       	movw	r24, r6
    1746:	b2 01       	movw	r22, r4
    1748:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
    174c:	24 ee       	ldi	r18, 0xE4	; 228
    174e:	3e e2       	ldi	r19, 0x2E	; 46
    1750:	45 e6       	ldi	r20, 0x65	; 101
    1752:	52 e4       	ldi	r21, 0x42	; 66
    1754:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
    1758:	0e 94 9a 18 	call	0x3134	; 0x3134 <__fixsfsi>
    175c:	6b 01       	movw	r12, r22
    175e:	7c 01       	movw	r14, r24
        acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
        
        theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
    1760:	2d 89       	ldd	r18, Y+21	; 0x15
    1762:	3e 89       	ldd	r19, Y+22	; 0x16
    1764:	4f 89       	ldd	r20, Y+23	; 0x17
    1766:	58 8d       	ldd	r21, Y+24	; 0x18
    1768:	60 e0       	ldi	r22, 0x00	; 0
    176a:	7a e1       	ldi	r23, 0x1A	; 26
    176c:	87 ea       	ldi	r24, 0xA7	; 167
    176e:	96 e4       	ldi	r25, 0x46	; 70
    1770:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
    1774:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1776:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1778:	4f 8d       	ldd	r20, Y+31	; 0x1f
    177a:	58 a1       	ldd	r21, Y+32	; 0x20
    177c:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	38 e1       	ldi	r19, 0x18	; 24
    1784:	48 e8       	ldi	r20, 0x88	; 136
    1786:	56 e4       	ldi	r21, 0x46	; 70
    1788:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
    178c:	0e 94 5d 17 	call	0x2eba	; 0x2eba <acos>
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	44 e3       	ldi	r20, 0x34	; 52
    1796:	53 e4       	ldi	r21, 0x43	; 67
    1798:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
    179c:	28 ed       	ldi	r18, 0xD8	; 216
    179e:	3f e0       	ldi	r19, 0x0F	; 15
    17a0:	49 e4       	ldi	r20, 0x49	; 73
    17a2:	50 e4       	ldi	r21, 0x40	; 64
    17a4:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
    17a8:	0e 94 9a 18 	call	0x3134	; 0x3134 <__fixsfsi>
        
        // spara resultatet i global array
        switch(currentLeg.legNumber)
    17ac:	f2 e0       	ldi	r31, 0x02	; 2
    17ae:	2f 16       	cp	r2, r31
    17b0:	31 04       	cpc	r3, r1
    17b2:	c1 f1       	breq	.+112    	; 0x1824 <CalcCurvedPath+0x4e6>
    17b4:	2c f4       	brge	.+10     	; 0x17c0 <CalcCurvedPath+0x482>
    17b6:	31 e0       	ldi	r19, 0x01	; 1
    17b8:	23 16       	cp	r2, r19
    17ba:	31 04       	cpc	r3, r1
    17bc:	61 f0       	breq	.+24     	; 0x17d6 <CalcCurvedPath+0x498>
    17be:	b4 c0       	rjmp	.+360    	; 0x1928 <CalcCurvedPath+0x5ea>
    17c0:	43 e0       	ldi	r20, 0x03	; 3
    17c2:	24 16       	cp	r2, r20
    17c4:	31 04       	cpc	r3, r1
    17c6:	09 f4       	brne	.+2      	; 0x17ca <CalcCurvedPath+0x48c>
    17c8:	54 c0       	rjmp	.+168    	; 0x1872 <CalcCurvedPath+0x534>
    17ca:	54 e0       	ldi	r21, 0x04	; 4
    17cc:	25 16       	cp	r2, r21
    17ce:	31 04       	cpc	r3, r1
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <CalcCurvedPath+0x496>
    17d2:	7d c0       	rjmp	.+250    	; 0x18ce <CalcCurvedPath+0x590>
    17d4:	a9 c0       	rjmp	.+338    	; 0x1928 <CalcCurvedPath+0x5ea>
        {
            case FRONT_LEFT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 105;
    17d6:	8f a0       	ldd	r8, Y+39	; 0x27
    17d8:	98 a4       	ldd	r9, Y+40	; 0x28
    17da:	a9 a4       	ldd	r10, Y+41	; 0x29
    17dc:	ba a4       	ldd	r11, Y+42	; 0x2a
    17de:	a9 e6       	ldi	r26, 0x69	; 105
    17e0:	8a 0e       	add	r8, r26
    17e2:	91 1c       	adc	r9, r1
    17e4:	a1 1c       	adc	r10, r1
    17e6:	b1 1c       	adc	r11, r1
    17e8:	e9 a1       	ldd	r30, Y+33	; 0x21
    17ea:	fa a1       	ldd	r31, Y+34	; 0x22
    17ec:	80 82       	st	Z, r8
    17ee:	91 82       	std	Z+1, r9	; 0x01
    17f0:	a2 82       	std	Z+2, r10	; 0x02
    17f2:	b3 82       	std	Z+3, r11	; 0x03
                actuatorPositions_g[currentLeg.femurJoint][i] =  theta2 + 75;
    17f4:	fb e4       	ldi	r31, 0x4B	; 75
    17f6:	cf 0e       	add	r12, r31
    17f8:	d1 1c       	adc	r13, r1
    17fa:	e1 1c       	adc	r14, r1
    17fc:	f1 1c       	adc	r15, r1
    17fe:	ab a1       	ldd	r26, Y+35	; 0x23
    1800:	bc a1       	ldd	r27, Y+36	; 0x24
    1802:	cd 92       	st	X+, r12
    1804:	dd 92       	st	X+, r13
    1806:	ed 92       	st	X+, r14
    1808:	fc 92       	st	X, r15
    180a:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.tibiaJoint][i] =  theta3 + 1;
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	01 96       	adiw	r24, 0x01	; 1
    1812:	a1 1d       	adc	r26, r1
    1814:	b1 1d       	adc	r27, r1
    1816:	ed a1       	ldd	r30, Y+37	; 0x25
    1818:	fe a1       	ldd	r31, Y+38	; 0x26
    181a:	80 83       	st	Z, r24
    181c:	91 83       	std	Z+1, r25	; 0x01
    181e:	a2 83       	std	Z+2, r26	; 0x02
    1820:	b3 83       	std	Z+3, r27	; 0x03
                break;
    1822:	82 c0       	rjmp	.+260    	; 0x1928 <CalcCurvedPath+0x5ea>
            }
            case FRONT_RIGHT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 193;
    1824:	8f a0       	ldd	r8, Y+39	; 0x27
    1826:	98 a4       	ldd	r9, Y+40	; 0x28
    1828:	a9 a4       	ldd	r10, Y+41	; 0x29
    182a:	ba a4       	ldd	r11, Y+42	; 0x2a
    182c:	f1 ec       	ldi	r31, 0xC1	; 193
    182e:	8f 0e       	add	r8, r31
    1830:	91 1c       	adc	r9, r1
    1832:	a1 1c       	adc	r10, r1
    1834:	b1 1c       	adc	r11, r1
    1836:	a9 a1       	ldd	r26, Y+33	; 0x21
    1838:	ba a1       	ldd	r27, Y+34	; 0x22
    183a:	8d 92       	st	X+, r8
    183c:	9d 92       	st	X+, r9
    183e:	ad 92       	st	X+, r10
    1840:	bc 92       	st	X, r11
    1842:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.femurJoint][i] =  theta2 + 75;
    1844:	bb e4       	ldi	r27, 0x4B	; 75
    1846:	cb 0e       	add	r12, r27
    1848:	d1 1c       	adc	r13, r1
    184a:	e1 1c       	adc	r14, r1
    184c:	f1 1c       	adc	r15, r1
    184e:	eb a1       	ldd	r30, Y+35	; 0x23
    1850:	fc a1       	ldd	r31, Y+36	; 0x24
    1852:	c0 82       	st	Z, r12
    1854:	d1 82       	std	Z+1, r13	; 0x01
    1856:	e2 82       	std	Z+2, r14	; 0x02
    1858:	f3 82       	std	Z+3, r15	; 0x03
                actuatorPositions_g[currentLeg.tibiaJoint][i] =  theta3 + 3;
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	03 96       	adiw	r24, 0x03	; 3
    1860:	a1 1d       	adc	r26, r1
    1862:	b1 1d       	adc	r27, r1
    1864:	ed a1       	ldd	r30, Y+37	; 0x25
    1866:	fe a1       	ldd	r31, Y+38	; 0x26
    1868:	80 83       	st	Z, r24
    186a:	91 83       	std	Z+1, r25	; 0x01
    186c:	a2 83       	std	Z+2, r26	; 0x02
    186e:	b3 83       	std	Z+3, r27	; 0x03
                break;
    1870:	5b c0       	rjmp	.+182    	; 0x1928 <CalcCurvedPath+0x5ea>
            }
            case REAR_LEFT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 195;
    1872:	8f a0       	ldd	r8, Y+39	; 0x27
    1874:	98 a4       	ldd	r9, Y+40	; 0x28
    1876:	a9 a4       	ldd	r10, Y+41	; 0x29
    1878:	ba a4       	ldd	r11, Y+42	; 0x2a
    187a:	f3 ec       	ldi	r31, 0xC3	; 195
    187c:	8f 0e       	add	r8, r31
    187e:	91 1c       	adc	r9, r1
    1880:	a1 1c       	adc	r10, r1
    1882:	b1 1c       	adc	r11, r1
    1884:	a9 a1       	ldd	r26, Y+33	; 0x21
    1886:	ba a1       	ldd	r27, Y+34	; 0x22
    1888:	8d 92       	st	X+, r8
    188a:	9d 92       	st	X+, r9
    188c:	ad 92       	st	X+, r10
    188e:	bc 92       	st	X, r11
    1890:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.femurJoint][i] =  225 - theta2;
    1892:	21 ee       	ldi	r18, 0xE1	; 225
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	40 e0       	ldi	r20, 0x00	; 0
    1898:	50 e0       	ldi	r21, 0x00	; 0
    189a:	2c 19       	sub	r18, r12
    189c:	3d 09       	sbc	r19, r13
    189e:	4e 09       	sbc	r20, r14
    18a0:	5f 09       	sbc	r21, r15
    18a2:	ab a1       	ldd	r26, Y+35	; 0x23
    18a4:	bc a1       	ldd	r27, Y+36	; 0x24
    18a6:	2d 93       	st	X+, r18
    18a8:	3d 93       	st	X+, r19
    18aa:	4d 93       	st	X+, r20
    18ac:	5c 93       	st	X, r21
    18ae:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.tibiaJoint][i] =  300 - theta3;
    18b0:	2c e2       	ldi	r18, 0x2C	; 44
    18b2:	31 e0       	ldi	r19, 0x01	; 1
    18b4:	40 e0       	ldi	r20, 0x00	; 0
    18b6:	50 e0       	ldi	r21, 0x00	; 0
    18b8:	26 1b       	sub	r18, r22
    18ba:	37 0b       	sbc	r19, r23
    18bc:	48 0b       	sbc	r20, r24
    18be:	59 0b       	sbc	r21, r25
    18c0:	ed a1       	ldd	r30, Y+37	; 0x25
    18c2:	fe a1       	ldd	r31, Y+38	; 0x26
    18c4:	20 83       	st	Z, r18
    18c6:	31 83       	std	Z+1, r19	; 0x01
    18c8:	42 83       	std	Z+2, r20	; 0x02
    18ca:	53 83       	std	Z+3, r21	; 0x03
                break;
    18cc:	2d c0       	rjmp	.+90     	; 0x1928 <CalcCurvedPath+0x5ea>
            }
            case REAR_RIGHT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 105;
    18ce:	8f a0       	ldd	r8, Y+39	; 0x27
    18d0:	98 a4       	ldd	r9, Y+40	; 0x28
    18d2:	a9 a4       	ldd	r10, Y+41	; 0x29
    18d4:	ba a4       	ldd	r11, Y+42	; 0x2a
    18d6:	f9 e6       	ldi	r31, 0x69	; 105
    18d8:	8f 0e       	add	r8, r31
    18da:	91 1c       	adc	r9, r1
    18dc:	a1 1c       	adc	r10, r1
    18de:	b1 1c       	adc	r11, r1
    18e0:	a9 a1       	ldd	r26, Y+33	; 0x21
    18e2:	ba a1       	ldd	r27, Y+34	; 0x22
    18e4:	8d 92       	st	X+, r8
    18e6:	9d 92       	st	X+, r9
    18e8:	ad 92       	st	X+, r10
    18ea:	bc 92       	st	X, r11
    18ec:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.femurJoint][i] =  225 - theta2;
    18ee:	21 ee       	ldi	r18, 0xE1	; 225
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	40 e0       	ldi	r20, 0x00	; 0
    18f4:	50 e0       	ldi	r21, 0x00	; 0
    18f6:	2c 19       	sub	r18, r12
    18f8:	3d 09       	sbc	r19, r13
    18fa:	4e 09       	sbc	r20, r14
    18fc:	5f 09       	sbc	r21, r15
    18fe:	ab a1       	ldd	r26, Y+35	; 0x23
    1900:	bc a1       	ldd	r27, Y+36	; 0x24
    1902:	2d 93       	st	X+, r18
    1904:	3d 93       	st	X+, r19
    1906:	4d 93       	st	X+, r20
    1908:	5c 93       	st	X, r21
    190a:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.tibiaJoint][i] =  300 - theta3;
    190c:	2c e2       	ldi	r18, 0x2C	; 44
    190e:	31 e0       	ldi	r19, 0x01	; 1
    1910:	40 e0       	ldi	r20, 0x00	; 0
    1912:	50 e0       	ldi	r21, 0x00	; 0
    1914:	26 1b       	sub	r18, r22
    1916:	37 0b       	sbc	r19, r23
    1918:	48 0b       	sbc	r20, r24
    191a:	59 0b       	sbc	r21, r25
    191c:	ed a1       	ldd	r30, Y+37	; 0x25
    191e:	fe a1       	ldd	r31, Y+38	; 0x26
    1920:	20 83       	st	Z, r18
    1922:	31 83       	std	Z+1, r19	; 0x01
    1924:	42 83       	std	Z+2, r20	; 0x02
    1926:	53 83       	std	Z+3, r21	; 0x03
    float y = y1;
    float z = z1;
    
    
    // första halvan av rörelsen
    for (int i = 0; i < numberOfPositions / 2; i++)
    1928:	0f 5f       	subi	r16, 0xFF	; 255
    192a:	1f 4f       	sbci	r17, 0xFF	; 255
    192c:	29 a1       	ldd	r18, Y+33	; 0x21
    192e:	3a a1       	ldd	r19, Y+34	; 0x22
    1930:	2c 5f       	subi	r18, 0xFC	; 252
    1932:	3f 4f       	sbci	r19, 0xFF	; 255
    1934:	3a a3       	std	Y+34, r19	; 0x22
    1936:	29 a3       	std	Y+33, r18	; 0x21
    1938:	4b a1       	ldd	r20, Y+35	; 0x23
    193a:	5c a1       	ldd	r21, Y+36	; 0x24
    193c:	4c 5f       	subi	r20, 0xFC	; 252
    193e:	5f 4f       	sbci	r21, 0xFF	; 255
    1940:	5c a3       	std	Y+36, r21	; 0x24
    1942:	4b a3       	std	Y+35, r20	; 0x23
    1944:	8d a1       	ldd	r24, Y+37	; 0x25
    1946:	9e a1       	ldd	r25, Y+38	; 0x26
    1948:	04 96       	adiw	r24, 0x04	; 4
    194a:	9e a3       	std	Y+38, r25	; 0x26
    194c:	8d a3       	std	Y+37, r24	; 0x25
    194e:	ab a9       	ldd	r26, Y+51	; 0x33
    1950:	bc a9       	ldd	r27, Y+52	; 0x34
    1952:	0a 17       	cp	r16, r26
    1954:	1b 07       	cpc	r17, r27
    1956:	09 f0       	breq	.+2      	; 0x195a <CalcCurvedPath+0x61c>
    1958:	18 ce       	rjmp	.-976    	; 0x158a <CalcCurvedPath+0x24c>
    195a:	c9 84       	ldd	r12, Y+9	; 0x09
    195c:	da 84       	ldd	r13, Y+10	; 0x0a
    195e:	eb 84       	ldd	r14, Y+11	; 0x0b
    1960:	fc 84       	ldd	r15, Y+12	; 0x0c
    1962:	8d 84       	ldd	r8, Y+13	; 0x0d
    1964:	9e 84       	ldd	r9, Y+14	; 0x0e
    1966:	af 84       	ldd	r10, Y+15	; 0x0f
    1968:	b8 88       	ldd	r11, Y+16	; 0x10
    196a:	49 88       	ldd	r4, Y+17	; 0x11
    196c:	5a 88       	ldd	r5, Y+18	; 0x12
    196e:	6b 88       	ldd	r6, Y+19	; 0x13
    1970:	7c 88       	ldd	r7, Y+20	; 0x14
                break;
            }
        }
    }
    
    for (int i = numberOfPositions/2; i < numberOfPositions; i++)
    1972:	ed a9       	ldd	r30, Y+53	; 0x35
    1974:	fe a9       	ldd	r31, Y+54	; 0x36
    1976:	2b a9       	ldd	r18, Y+51	; 0x33
    1978:	3c a9       	ldd	r19, Y+52	; 0x34
    197a:	2e 17       	cp	r18, r30
    197c:	3f 07       	cpc	r19, r31
    197e:	0c f0       	brlt	.+2      	; 0x1982 <CalcCurvedPath+0x644>
    1980:	36 c2       	rjmp	.+1132   	; 0x1dee <CalcCurvedPath+0xab0>
    1982:	24 e1       	ldi	r18, 0x14	; 20
    1984:	21 96       	adiw	r28, 0x01	; 1
    1986:	4e ad       	ldd	r20, Y+62	; 0x3e
    1988:	5f ad       	ldd	r21, Y+63	; 0x3f
    198a:	21 97       	sbiw	r28, 0x01	; 1
    198c:	24 9f       	mul	r18, r20
    198e:	80 01       	movw	r16, r0
    1990:	25 9f       	mul	r18, r21
    1992:	10 0d       	add	r17, r0
    1994:	11 24       	eor	r1, r1
    1996:	8b a9       	ldd	r24, Y+51	; 0x33
    1998:	9c a9       	ldd	r25, Y+52	; 0x34
    199a:	08 0f       	add	r16, r24
    199c:	19 1f       	adc	r17, r25
    199e:	00 0f       	add	r16, r16
    19a0:	11 1f       	adc	r17, r17
    19a2:	00 0f       	add	r16, r16
    19a4:	11 1f       	adc	r17, r17
    19a6:	0c 5d       	subi	r16, 0xDC	; 220
    19a8:	1e 4f       	sbci	r17, 0xFE	; 254
    19aa:	23 96       	adiw	r28, 0x03	; 3
    19ac:	ae ad       	ldd	r26, Y+62	; 0x3e
    19ae:	bf ad       	ldd	r27, Y+63	; 0x3f
    19b0:	23 97       	sbiw	r28, 0x03	; 3
    19b2:	2a 9f       	mul	r18, r26
    19b4:	c0 01       	movw	r24, r0
    19b6:	2b 9f       	mul	r18, r27
    19b8:	90 0d       	add	r25, r0
    19ba:	11 24       	eor	r1, r1
    19bc:	eb a9       	ldd	r30, Y+51	; 0x33
    19be:	fc a9       	ldd	r31, Y+52	; 0x34
    19c0:	8e 0f       	add	r24, r30
    19c2:	9f 1f       	adc	r25, r31
    19c4:	88 0f       	add	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	88 0f       	add	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	ac 01       	movw	r20, r24
    19ce:	4c 5d       	subi	r20, 0xDC	; 220
    19d0:	5e 4f       	sbci	r21, 0xFE	; 254
    19d2:	5a a3       	std	Y+34, r21	; 0x22
    19d4:	49 a3       	std	Y+33, r20	; 0x21
    19d6:	25 96       	adiw	r28, 0x05	; 5
    19d8:	ae ad       	ldd	r26, Y+62	; 0x3e
    19da:	bf ad       	ldd	r27, Y+63	; 0x3f
    19dc:	25 97       	sbiw	r28, 0x05	; 5
    19de:	2a 9f       	mul	r18, r26
    19e0:	c0 01       	movw	r24, r0
    19e2:	2b 9f       	mul	r18, r27
    19e4:	90 0d       	add	r25, r0
    19e6:	11 24       	eor	r1, r1
    19e8:	8e 0f       	add	r24, r30
    19ea:	9f 1f       	adc	r25, r31
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	88 0f       	add	r24, r24
    19f2:	99 1f       	adc	r25, r25
    19f4:	fc 01       	movw	r30, r24
    19f6:	ec 5d       	subi	r30, 0xDC	; 220
    19f8:	fe 4f       	sbci	r31, 0xFE	; 254
    19fa:	fc a3       	std	Y+36, r31	; 0x24
    19fc:	eb a3       	std	Y+35, r30	; 0x23
            }
            case REAR_LEFT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 195;
                actuatorPositions_g[currentLeg.femurJoint][i] =  225 - theta2;
                actuatorPositions_g[currentLeg.tibiaJoint][i] =  300 - theta3;
    19fe:	1e a3       	std	Y+38, r17	; 0x26
    1a00:	0d a3       	std	Y+37, r16	; 0x25
    1a02:	0b a9       	ldd	r16, Y+51	; 0x33
    1a04:	1c a9       	ldd	r17, Y+52	; 0x34
    1a06:	c9 86       	std	Y+9, r12	; 0x09
    1a08:	da 86       	std	Y+10, r13	; 0x0a
    1a0a:	eb 86       	std	Y+11, r14	; 0x0b
    1a0c:	fc 86       	std	Y+12, r15	; 0x0c
    1a0e:	8d 86       	std	Y+13, r8	; 0x0d
    1a10:	9e 86       	std	Y+14, r9	; 0x0e
    1a12:	af 86       	std	Y+15, r10	; 0x0f
    1a14:	b8 8a       	std	Y+16, r11	; 0x10
    1a16:	49 8a       	std	Y+17, r4	; 0x11
    1a18:	5a 8a       	std	Y+18, r5	; 0x12
    1a1a:	6b 8a       	std	Y+19, r6	; 0x13
    1a1c:	7c 8a       	std	Y+20, r7	; 0x14
        }
    }
    
    for (int i = numberOfPositions/2; i < numberOfPositions; i++)
    {
        x = x + deltaX;
    1a1e:	2b a5       	ldd	r18, Y+43	; 0x2b
    1a20:	3c a5       	ldd	r19, Y+44	; 0x2c
    1a22:	4d a5       	ldd	r20, Y+45	; 0x2d
    1a24:	5e a5       	ldd	r21, Y+46	; 0x2e
    1a26:	69 85       	ldd	r22, Y+9	; 0x09
    1a28:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a2a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a2c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a2e:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
    1a32:	69 87       	std	Y+9, r22	; 0x09
    1a34:	7a 87       	std	Y+10, r23	; 0x0a
    1a36:	8b 87       	std	Y+11, r24	; 0x0b
    1a38:	9c 87       	std	Y+12, r25	; 0x0c
        y = y + deltaY;
    1a3a:	2f a5       	ldd	r18, Y+47	; 0x2f
    1a3c:	38 a9       	ldd	r19, Y+48	; 0x30
    1a3e:	49 a9       	ldd	r20, Y+49	; 0x31
    1a40:	5a a9       	ldd	r21, Y+50	; 0x32
    1a42:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a44:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a46:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a48:	98 89       	ldd	r25, Y+16	; 0x10
    1a4a:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
    1a4e:	6d 87       	std	Y+13, r22	; 0x0d
    1a50:	7e 87       	std	Y+14, r23	; 0x0e
    1a52:	8f 87       	std	Y+15, r24	; 0x0f
    1a54:	98 8b       	std	Y+16, r25	; 0x10
        z = z + deltaZEnd;
    1a56:	2b ad       	ldd	r18, Y+59	; 0x3b
    1a58:	3c ad       	ldd	r19, Y+60	; 0x3c
    1a5a:	4d ad       	ldd	r20, Y+61	; 0x3d
    1a5c:	5e ad       	ldd	r21, Y+62	; 0x3e
    1a5e:	69 89       	ldd	r22, Y+17	; 0x11
    1a60:	7a 89       	ldd	r23, Y+18	; 0x12
    1a62:	8b 89       	ldd	r24, Y+19	; 0x13
    1a64:	9c 89       	ldd	r25, Y+20	; 0x14
    1a66:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
    1a6a:	69 8b       	std	Y+17, r22	; 0x11
    1a6c:	7a 8b       	std	Y+18, r23	; 0x12
    1a6e:	8b 8b       	std	Y+19, r24	; 0x13
    1a70:	9c 8b       	std	Y+20, r25	; 0x14
        
        // lös inverskinematik för lederna.
        theta1 = atan2f(x,y)*180/PI;
    1a72:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a74:	3e 85       	ldd	r19, Y+14	; 0x0e
    1a76:	4f 85       	ldd	r20, Y+15	; 0x0f
    1a78:	58 89       	ldd	r21, Y+16	; 0x10
    1a7a:	69 85       	ldd	r22, Y+9	; 0x09
    1a7c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a7e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a80:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a82:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <atan2>
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	44 e3       	ldi	r20, 0x34	; 52
    1a8c:	53 e4       	ldi	r21, 0x43	; 67
    1a8e:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
    1a92:	28 ed       	ldi	r18, 0xD8	; 216
    1a94:	3f e0       	ldi	r19, 0x0F	; 15
    1a96:	49 e4       	ldi	r20, 0x49	; 73
    1a98:	50 e4       	ldi	r21, 0x40	; 64
    1a9a:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
    1a9e:	0e 94 9a 18 	call	0x3134	; 0x3134 <__fixsfsi>
    1aa2:	6f a3       	std	Y+39, r22	; 0x27
    1aa4:	78 a7       	std	Y+40, r23	; 0x28
    1aa6:	89 a7       	std	Y+41, r24	; 0x29
    1aa8:	9a a7       	std	Y+42, r25	; 0x2a
        theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
    1aaa:	29 89       	ldd	r18, Y+17	; 0x11
    1aac:	3a 89       	ldd	r19, Y+18	; 0x12
    1aae:	4b 89       	ldd	r20, Y+19	; 0x13
    1ab0:	5c 89       	ldd	r21, Y+20	; 0x14
    1ab2:	ca 01       	movw	r24, r20
    1ab4:	b9 01       	movw	r22, r18
    1ab6:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
    1aba:	6d 8b       	std	Y+21, r22	; 0x15
    1abc:	7e 8b       	std	Y+22, r23	; 0x16
    1abe:	8f 8b       	std	Y+23, r24	; 0x17
    1ac0:	98 8f       	std	Y+24, r25	; 0x18
    1ac2:	29 85       	ldd	r18, Y+9	; 0x09
    1ac4:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ac6:	4b 85       	ldd	r20, Y+11	; 0x0b
    1ac8:	5c 85       	ldd	r21, Y+12	; 0x0c
    1aca:	ca 01       	movw	r24, r20
    1acc:	b9 01       	movw	r22, r18
    1ace:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
    1ad2:	6b 01       	movw	r12, r22
    1ad4:	7c 01       	movw	r14, r24
    1ad6:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ad8:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ada:	4f 85       	ldd	r20, Y+15	; 0x0f
    1adc:	58 89       	ldd	r21, Y+16	; 0x10
    1ade:	ca 01       	movw	r24, r20
    1ae0:	b9 01       	movw	r22, r18
    1ae2:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
    1ae6:	9b 01       	movw	r18, r22
    1ae8:	ac 01       	movw	r20, r24
    1aea:	c7 01       	movw	r24, r14
    1aec:	b6 01       	movw	r22, r12
    1aee:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
    1af2:	69 8f       	std	Y+25, r22	; 0x19
    1af4:	7a 8f       	std	Y+26, r23	; 0x1a
    1af6:	8b 8f       	std	Y+27, r24	; 0x1b
    1af8:	9c 8f       	std	Y+28, r25	; 0x1c
    1afa:	0e 94 07 1a 	call	0x340e	; 0x340e <sqrt>
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	48 e4       	ldi	r20, 0x48	; 72
    1b04:	52 e4       	ldi	r21, 0x42	; 66
    1b06:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
    1b0a:	6b 01       	movw	r12, r22
    1b0c:	7c 01       	movw	r14, r24
    1b0e:	9b 01       	movw	r18, r22
    1b10:	ac 01       	movw	r20, r24
    1b12:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
    1b16:	6d 8f       	std	Y+29, r22	; 0x1d
    1b18:	7e 8f       	std	Y+30, r23	; 0x1e
    1b1a:	8f 8f       	std	Y+31, r24	; 0x1f
    1b1c:	98 a3       	std	Y+32, r25	; 0x20
    1b1e:	9b 01       	movw	r18, r22
    1b20:	ac 01       	movw	r20, r24
    1b22:	6d 89       	ldd	r22, Y+21	; 0x15
    1b24:	7e 89       	ldd	r23, Y+22	; 0x16
    1b26:	8f 89       	ldd	r24, Y+23	; 0x17
    1b28:	98 8d       	ldd	r25, Y+24	; 0x18
    1b2a:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
    1b2e:	4b 01       	movw	r8, r22
    1b30:	5c 01       	movw	r10, r24
    1b32:	0e 94 07 1a 	call	0x340e	; 0x340e <sqrt>
    1b36:	9b 01       	movw	r18, r22
    1b38:	ac 01       	movw	r20, r24
    1b3a:	69 89       	ldd	r22, Y+17	; 0x11
    1b3c:	7a 89       	ldd	r23, Y+18	; 0x12
    1b3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b40:	9c 89       	ldd	r25, Y+20	; 0x14
    1b42:	90 58       	subi	r25, 0x80	; 128
    1b44:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
    1b48:	0e 94 5d 17 	call	0x2eba	; 0x2eba <acos>
    1b4c:	2b 01       	movw	r4, r22
    1b4e:	3c 01       	movw	r6, r24
        acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	48 e4       	ldi	r20, 0x48	; 72
    1b56:	52 e4       	ldi	r21, 0x42	; 66
    1b58:	69 8d       	ldd	r22, Y+25	; 0x19
    1b5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b60:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
    1b64:	0e 94 07 1a 	call	0x340e	; 0x340e <sqrt>
    1b68:	9b 01       	movw	r18, r22
    1b6a:	ac 01       	movw	r20, r24
    1b6c:	c7 01       	movw	r24, r14
    1b6e:	b6 01       	movw	r22, r12
    1b70:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
    1b74:	9b 01       	movw	r18, r22
    1b76:	ac 01       	movw	r20, r24
    1b78:	6d 89       	ldd	r22, Y+21	; 0x15
    1b7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b80:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
    1b84:	0e 94 07 1a 	call	0x340e	; 0x340e <sqrt>
    1b88:	6b 01       	movw	r12, r22
    1b8a:	7c 01       	movw	r14, r24
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	38 e4       	ldi	r19, 0x48	; 72
    1b90:	4c e8       	ldi	r20, 0x8C	; 140
    1b92:	55 e4       	ldi	r21, 0x45	; 69
    1b94:	c5 01       	movw	r24, r10
    1b96:	b4 01       	movw	r22, r8
    1b98:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	38 e0       	ldi	r19, 0x08	; 8
    1ba0:	44 e8       	ldi	r20, 0x84	; 132
    1ba2:	56 e4       	ldi	r21, 0x46	; 70
    1ba4:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
    1ba8:	4b 01       	movw	r8, r22
    1baa:	5c 01       	movw	r10, r24
    1bac:	a7 01       	movw	r20, r14
    1bae:	96 01       	movw	r18, r12
    1bb0:	c7 01       	movw	r24, r14
    1bb2:	b6 01       	movw	r22, r12
    1bb4:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	46 e8       	ldi	r20, 0x86	; 134
    1bbe:	52 e4       	ldi	r21, 0x42	; 66
    1bc0:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
    1bc4:	9b 01       	movw	r18, r22
    1bc6:	ac 01       	movw	r20, r24
    1bc8:	c5 01       	movw	r24, r10
    1bca:	b4 01       	movw	r22, r8
    1bcc:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
    1bd0:	0e 94 5d 17 	call	0x2eba	; 0x2eba <acos>
    1bd4:	9b 01       	movw	r18, r22
    1bd6:	ac 01       	movw	r20, r24
        y = y + deltaY;
        z = z + deltaZEnd;
        
        // lös inverskinematik för lederna.
        theta1 = atan2f(x,y)*180/PI;
        theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
    1bd8:	c3 01       	movw	r24, r6
    1bda:	b2 01       	movw	r22, r4
    1bdc:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
    1be0:	24 ee       	ldi	r18, 0xE4	; 228
    1be2:	3e e2       	ldi	r19, 0x2E	; 46
    1be4:	45 e6       	ldi	r20, 0x65	; 101
    1be6:	52 e4       	ldi	r21, 0x42	; 66
    1be8:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
    1bec:	0e 94 9a 18 	call	0x3134	; 0x3134 <__fixsfsi>
    1bf0:	6b 01       	movw	r12, r22
    1bf2:	7c 01       	movw	r14, r24
        acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
        
        theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
    1bf4:	2d 89       	ldd	r18, Y+21	; 0x15
    1bf6:	3e 89       	ldd	r19, Y+22	; 0x16
    1bf8:	4f 89       	ldd	r20, Y+23	; 0x17
    1bfa:	58 8d       	ldd	r21, Y+24	; 0x18
    1bfc:	60 e0       	ldi	r22, 0x00	; 0
    1bfe:	7a e1       	ldi	r23, 0x1A	; 26
    1c00:	87 ea       	ldi	r24, 0xA7	; 167
    1c02:	96 e4       	ldi	r25, 0x46	; 70
    1c04:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
    1c08:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1c0a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1c0c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1c0e:	58 a1       	ldd	r21, Y+32	; 0x20
    1c10:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	38 e1       	ldi	r19, 0x18	; 24
    1c18:	48 e8       	ldi	r20, 0x88	; 136
    1c1a:	56 e4       	ldi	r21, 0x46	; 70
    1c1c:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
    1c20:	0e 94 5d 17 	call	0x2eba	; 0x2eba <acos>
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	44 e3       	ldi	r20, 0x34	; 52
    1c2a:	53 e4       	ldi	r21, 0x43	; 67
    1c2c:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsf3>
    1c30:	28 ed       	ldi	r18, 0xD8	; 216
    1c32:	3f e0       	ldi	r19, 0x0F	; 15
    1c34:	49 e4       	ldi	r20, 0x49	; 73
    1c36:	50 e4       	ldi	r21, 0x40	; 64
    1c38:	0e 94 32 18 	call	0x3064	; 0x3064 <__divsf3>
    1c3c:	0e 94 9a 18 	call	0x3134	; 0x3134 <__fixsfsi>
        
        // spara resultatet i global array
        switch(currentLeg.legNumber)
    1c40:	f2 e0       	ldi	r31, 0x02	; 2
    1c42:	2f 16       	cp	r2, r31
    1c44:	31 04       	cpc	r3, r1
    1c46:	c1 f1       	breq	.+112    	; 0x1cb8 <CalcCurvedPath+0x97a>
    1c48:	2c f4       	brge	.+10     	; 0x1c54 <CalcCurvedPath+0x916>
    1c4a:	31 e0       	ldi	r19, 0x01	; 1
    1c4c:	23 16       	cp	r2, r19
    1c4e:	31 04       	cpc	r3, r1
    1c50:	61 f0       	breq	.+24     	; 0x1c6a <CalcCurvedPath+0x92c>
    1c52:	b4 c0       	rjmp	.+360    	; 0x1dbc <CalcCurvedPath+0xa7e>
    1c54:	43 e0       	ldi	r20, 0x03	; 3
    1c56:	24 16       	cp	r2, r20
    1c58:	31 04       	cpc	r3, r1
    1c5a:	09 f4       	brne	.+2      	; 0x1c5e <CalcCurvedPath+0x920>
    1c5c:	54 c0       	rjmp	.+168    	; 0x1d06 <CalcCurvedPath+0x9c8>
    1c5e:	54 e0       	ldi	r21, 0x04	; 4
    1c60:	25 16       	cp	r2, r21
    1c62:	31 04       	cpc	r3, r1
    1c64:	09 f4       	brne	.+2      	; 0x1c68 <CalcCurvedPath+0x92a>
    1c66:	7d c0       	rjmp	.+250    	; 0x1d62 <CalcCurvedPath+0xa24>
    1c68:	a9 c0       	rjmp	.+338    	; 0x1dbc <CalcCurvedPath+0xa7e>
        {
            case FRONT_LEFT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 105;
    1c6a:	8f a0       	ldd	r8, Y+39	; 0x27
    1c6c:	98 a4       	ldd	r9, Y+40	; 0x28
    1c6e:	a9 a4       	ldd	r10, Y+41	; 0x29
    1c70:	ba a4       	ldd	r11, Y+42	; 0x2a
    1c72:	a9 e6       	ldi	r26, 0x69	; 105
    1c74:	8a 0e       	add	r8, r26
    1c76:	91 1c       	adc	r9, r1
    1c78:	a1 1c       	adc	r10, r1
    1c7a:	b1 1c       	adc	r11, r1
    1c7c:	ed a1       	ldd	r30, Y+37	; 0x25
    1c7e:	fe a1       	ldd	r31, Y+38	; 0x26
    1c80:	80 82       	st	Z, r8
    1c82:	91 82       	std	Z+1, r9	; 0x01
    1c84:	a2 82       	std	Z+2, r10	; 0x02
    1c86:	b3 82       	std	Z+3, r11	; 0x03
                actuatorPositions_g[currentLeg.femurJoint][i] =  theta2 + 75;
    1c88:	fb e4       	ldi	r31, 0x4B	; 75
    1c8a:	cf 0e       	add	r12, r31
    1c8c:	d1 1c       	adc	r13, r1
    1c8e:	e1 1c       	adc	r14, r1
    1c90:	f1 1c       	adc	r15, r1
    1c92:	a9 a1       	ldd	r26, Y+33	; 0x21
    1c94:	ba a1       	ldd	r27, Y+34	; 0x22
    1c96:	cd 92       	st	X+, r12
    1c98:	dd 92       	st	X+, r13
    1c9a:	ed 92       	st	X+, r14
    1c9c:	fc 92       	st	X, r15
    1c9e:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.tibiaJoint][i] =  theta3 + 1;
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	01 96       	adiw	r24, 0x01	; 1
    1ca6:	a1 1d       	adc	r26, r1
    1ca8:	b1 1d       	adc	r27, r1
    1caa:	eb a1       	ldd	r30, Y+35	; 0x23
    1cac:	fc a1       	ldd	r31, Y+36	; 0x24
    1cae:	80 83       	st	Z, r24
    1cb0:	91 83       	std	Z+1, r25	; 0x01
    1cb2:	a2 83       	std	Z+2, r26	; 0x02
    1cb4:	b3 83       	std	Z+3, r27	; 0x03
                break;
    1cb6:	82 c0       	rjmp	.+260    	; 0x1dbc <CalcCurvedPath+0xa7e>
            }
            case FRONT_RIGHT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 193;
    1cb8:	8f a0       	ldd	r8, Y+39	; 0x27
    1cba:	98 a4       	ldd	r9, Y+40	; 0x28
    1cbc:	a9 a4       	ldd	r10, Y+41	; 0x29
    1cbe:	ba a4       	ldd	r11, Y+42	; 0x2a
    1cc0:	f1 ec       	ldi	r31, 0xC1	; 193
    1cc2:	8f 0e       	add	r8, r31
    1cc4:	91 1c       	adc	r9, r1
    1cc6:	a1 1c       	adc	r10, r1
    1cc8:	b1 1c       	adc	r11, r1
    1cca:	ad a1       	ldd	r26, Y+37	; 0x25
    1ccc:	be a1       	ldd	r27, Y+38	; 0x26
    1cce:	8d 92       	st	X+, r8
    1cd0:	9d 92       	st	X+, r9
    1cd2:	ad 92       	st	X+, r10
    1cd4:	bc 92       	st	X, r11
    1cd6:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.femurJoint][i] =  theta2 + 75;
    1cd8:	bb e4       	ldi	r27, 0x4B	; 75
    1cda:	cb 0e       	add	r12, r27
    1cdc:	d1 1c       	adc	r13, r1
    1cde:	e1 1c       	adc	r14, r1
    1ce0:	f1 1c       	adc	r15, r1
    1ce2:	e9 a1       	ldd	r30, Y+33	; 0x21
    1ce4:	fa a1       	ldd	r31, Y+34	; 0x22
    1ce6:	c0 82       	st	Z, r12
    1ce8:	d1 82       	std	Z+1, r13	; 0x01
    1cea:	e2 82       	std	Z+2, r14	; 0x02
    1cec:	f3 82       	std	Z+3, r15	; 0x03
                actuatorPositions_g[currentLeg.tibiaJoint][i] =  theta3 + 3;
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	03 96       	adiw	r24, 0x03	; 3
    1cf4:	a1 1d       	adc	r26, r1
    1cf6:	b1 1d       	adc	r27, r1
    1cf8:	eb a1       	ldd	r30, Y+35	; 0x23
    1cfa:	fc a1       	ldd	r31, Y+36	; 0x24
    1cfc:	80 83       	st	Z, r24
    1cfe:	91 83       	std	Z+1, r25	; 0x01
    1d00:	a2 83       	std	Z+2, r26	; 0x02
    1d02:	b3 83       	std	Z+3, r27	; 0x03
                break;
    1d04:	5b c0       	rjmp	.+182    	; 0x1dbc <CalcCurvedPath+0xa7e>
            }
            case REAR_LEFT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 195;
    1d06:	8f a0       	ldd	r8, Y+39	; 0x27
    1d08:	98 a4       	ldd	r9, Y+40	; 0x28
    1d0a:	a9 a4       	ldd	r10, Y+41	; 0x29
    1d0c:	ba a4       	ldd	r11, Y+42	; 0x2a
    1d0e:	f3 ec       	ldi	r31, 0xC3	; 195
    1d10:	8f 0e       	add	r8, r31
    1d12:	91 1c       	adc	r9, r1
    1d14:	a1 1c       	adc	r10, r1
    1d16:	b1 1c       	adc	r11, r1
    1d18:	ad a1       	ldd	r26, Y+37	; 0x25
    1d1a:	be a1       	ldd	r27, Y+38	; 0x26
    1d1c:	8d 92       	st	X+, r8
    1d1e:	9d 92       	st	X+, r9
    1d20:	ad 92       	st	X+, r10
    1d22:	bc 92       	st	X, r11
    1d24:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.femurJoint][i] =  225 - theta2;
    1d26:	21 ee       	ldi	r18, 0xE1	; 225
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e0       	ldi	r20, 0x00	; 0
    1d2c:	50 e0       	ldi	r21, 0x00	; 0
    1d2e:	2c 19       	sub	r18, r12
    1d30:	3d 09       	sbc	r19, r13
    1d32:	4e 09       	sbc	r20, r14
    1d34:	5f 09       	sbc	r21, r15
    1d36:	a9 a1       	ldd	r26, Y+33	; 0x21
    1d38:	ba a1       	ldd	r27, Y+34	; 0x22
    1d3a:	2d 93       	st	X+, r18
    1d3c:	3d 93       	st	X+, r19
    1d3e:	4d 93       	st	X+, r20
    1d40:	5c 93       	st	X, r21
    1d42:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.tibiaJoint][i] =  300 - theta3;
    1d44:	2c e2       	ldi	r18, 0x2C	; 44
    1d46:	31 e0       	ldi	r19, 0x01	; 1
    1d48:	40 e0       	ldi	r20, 0x00	; 0
    1d4a:	50 e0       	ldi	r21, 0x00	; 0
    1d4c:	26 1b       	sub	r18, r22
    1d4e:	37 0b       	sbc	r19, r23
    1d50:	48 0b       	sbc	r20, r24
    1d52:	59 0b       	sbc	r21, r25
    1d54:	eb a1       	ldd	r30, Y+35	; 0x23
    1d56:	fc a1       	ldd	r31, Y+36	; 0x24
    1d58:	20 83       	st	Z, r18
    1d5a:	31 83       	std	Z+1, r19	; 0x01
    1d5c:	42 83       	std	Z+2, r20	; 0x02
    1d5e:	53 83       	std	Z+3, r21	; 0x03
                break;
    1d60:	2d c0       	rjmp	.+90     	; 0x1dbc <CalcCurvedPath+0xa7e>
            }
            case REAR_RIGHT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 105;
    1d62:	8f a0       	ldd	r8, Y+39	; 0x27
    1d64:	98 a4       	ldd	r9, Y+40	; 0x28
    1d66:	a9 a4       	ldd	r10, Y+41	; 0x29
    1d68:	ba a4       	ldd	r11, Y+42	; 0x2a
    1d6a:	f9 e6       	ldi	r31, 0x69	; 105
    1d6c:	8f 0e       	add	r8, r31
    1d6e:	91 1c       	adc	r9, r1
    1d70:	a1 1c       	adc	r10, r1
    1d72:	b1 1c       	adc	r11, r1
    1d74:	ad a1       	ldd	r26, Y+37	; 0x25
    1d76:	be a1       	ldd	r27, Y+38	; 0x26
    1d78:	8d 92       	st	X+, r8
    1d7a:	9d 92       	st	X+, r9
    1d7c:	ad 92       	st	X+, r10
    1d7e:	bc 92       	st	X, r11
    1d80:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.femurJoint][i] =  225 - theta2;
    1d82:	21 ee       	ldi	r18, 0xE1	; 225
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	40 e0       	ldi	r20, 0x00	; 0
    1d88:	50 e0       	ldi	r21, 0x00	; 0
    1d8a:	2c 19       	sub	r18, r12
    1d8c:	3d 09       	sbc	r19, r13
    1d8e:	4e 09       	sbc	r20, r14
    1d90:	5f 09       	sbc	r21, r15
    1d92:	a9 a1       	ldd	r26, Y+33	; 0x21
    1d94:	ba a1       	ldd	r27, Y+34	; 0x22
    1d96:	2d 93       	st	X+, r18
    1d98:	3d 93       	st	X+, r19
    1d9a:	4d 93       	st	X+, r20
    1d9c:	5c 93       	st	X, r21
    1d9e:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.tibiaJoint][i] =  300 - theta3;
    1da0:	2c e2       	ldi	r18, 0x2C	; 44
    1da2:	31 e0       	ldi	r19, 0x01	; 1
    1da4:	40 e0       	ldi	r20, 0x00	; 0
    1da6:	50 e0       	ldi	r21, 0x00	; 0
    1da8:	26 1b       	sub	r18, r22
    1daa:	37 0b       	sbc	r19, r23
    1dac:	48 0b       	sbc	r20, r24
    1dae:	59 0b       	sbc	r21, r25
    1db0:	eb a1       	ldd	r30, Y+35	; 0x23
    1db2:	fc a1       	ldd	r31, Y+36	; 0x24
    1db4:	20 83       	st	Z, r18
    1db6:	31 83       	std	Z+1, r19	; 0x01
    1db8:	42 83       	std	Z+2, r20	; 0x02
    1dba:	53 83       	std	Z+3, r21	; 0x03
                break;
            }
        }
    }
    
    for (int i = numberOfPositions/2; i < numberOfPositions; i++)
    1dbc:	0f 5f       	subi	r16, 0xFF	; 255
    1dbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc0:	2d a1       	ldd	r18, Y+37	; 0x25
    1dc2:	3e a1       	ldd	r19, Y+38	; 0x26
    1dc4:	2c 5f       	subi	r18, 0xFC	; 252
    1dc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc8:	3e a3       	std	Y+38, r19	; 0x26
    1dca:	2d a3       	std	Y+37, r18	; 0x25
    1dcc:	49 a1       	ldd	r20, Y+33	; 0x21
    1dce:	5a a1       	ldd	r21, Y+34	; 0x22
    1dd0:	4c 5f       	subi	r20, 0xFC	; 252
    1dd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd4:	5a a3       	std	Y+34, r21	; 0x22
    1dd6:	49 a3       	std	Y+33, r20	; 0x21
    1dd8:	8b a1       	ldd	r24, Y+35	; 0x23
    1dda:	9c a1       	ldd	r25, Y+36	; 0x24
    1ddc:	04 96       	adiw	r24, 0x04	; 4
    1dde:	9c a3       	std	Y+36, r25	; 0x24
    1de0:	8b a3       	std	Y+35, r24	; 0x23
    1de2:	ad a9       	ldd	r26, Y+53	; 0x35
    1de4:	be a9       	ldd	r27, Y+54	; 0x36
    1de6:	0a 17       	cp	r16, r26
    1de8:	1b 07       	cpc	r17, r27
    1dea:	09 f0       	breq	.+2      	; 0x1dee <CalcCurvedPath+0xab0>
    1dec:	18 ce       	rjmp	.-976    	; 0x1a1e <CalcCurvedPath+0x6e0>
                actuatorPositions_g[currentLeg.tibiaJoint][i] =  300 - theta3;
                break;
            }
        }
    }
}
    1dee:	cc 5b       	subi	r28, 0xBC	; 188
    1df0:	df 4f       	sbci	r29, 0xFF	; 255
    1df2:	0f b6       	in	r0, 0x3f	; 63
    1df4:	f8 94       	cli
    1df6:	de bf       	out	0x3e, r29	; 62
    1df8:	0f be       	out	0x3f, r0	; 63
    1dfa:	cd bf       	out	0x3d, r28	; 61
    1dfc:	df 91       	pop	r29
    1dfe:	cf 91       	pop	r28
    1e00:	1f 91       	pop	r17
    1e02:	0f 91       	pop	r16
    1e04:	ff 90       	pop	r15
    1e06:	ef 90       	pop	r14
    1e08:	df 90       	pop	r13
    1e0a:	cf 90       	pop	r12
    1e0c:	bf 90       	pop	r11
    1e0e:	af 90       	pop	r10
    1e10:	9f 90       	pop	r9
    1e12:	8f 90       	pop	r8
    1e14:	7f 90       	pop	r7
    1e16:	6f 90       	pop	r6
    1e18:	5f 90       	pop	r5
    1e1a:	4f 90       	pop	r4
    1e1c:	3f 90       	pop	r3
    1e1e:	2f 90       	pop	r2
    1e20:	08 95       	ret

00001e22 <__vector_2>:

// För att testa gången
int Direction = 0;
ISR(INT1_vect)
{	
    1e22:	1f 92       	push	r1
    1e24:	0f 92       	push	r0
    1e26:	0f b6       	in	r0, 0x3f	; 63
    1e28:	0f 92       	push	r0
    1e2a:	11 24       	eor	r1, r1
    1e2c:	0b b6       	in	r0, 0x3b	; 59
    1e2e:	0f 92       	push	r0
    1e30:	4f 92       	push	r4
    1e32:	5f 92       	push	r5
    1e34:	6f 92       	push	r6
    1e36:	7f 92       	push	r7
    1e38:	8f 92       	push	r8
    1e3a:	9f 92       	push	r9
    1e3c:	af 92       	push	r10
    1e3e:	bf 92       	push	r11
    1e40:	cf 92       	push	r12
    1e42:	df 92       	push	r13
    1e44:	ef 92       	push	r14
    1e46:	ff 92       	push	r15
    1e48:	0f 93       	push	r16
    1e4a:	1f 93       	push	r17
    1e4c:	2f 93       	push	r18
    1e4e:	3f 93       	push	r19
    1e50:	4f 93       	push	r20
    1e52:	5f 93       	push	r21
    1e54:	6f 93       	push	r22
    1e56:	7f 93       	push	r23
    1e58:	8f 93       	push	r24
    1e5a:	9f 93       	push	r25
    1e5c:	af 93       	push	r26
    1e5e:	bf 93       	push	r27
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	ef 93       	push	r30
    1e66:	ff 93       	push	r31
	MoveDynamixel(frontLeftLeg.coxaJoint, actuatorPositions_g[frontLeftLeg.coxaJoint][currentPos_g],20);
    1e68:	80 91 1a 01 	lds	r24, 0x011A
    1e6c:	90 91 1b 01 	lds	r25, 0x011B
    1e70:	c4 e1       	ldi	r28, 0x14	; 20
    1e72:	c8 9f       	mul	r28, r24
    1e74:	f0 01       	movw	r30, r0
    1e76:	c9 9f       	mul	r28, r25
    1e78:	f0 0d       	add	r31, r0
    1e7a:	11 24       	eor	r1, r1
    1e7c:	20 91 22 01 	lds	r18, 0x0122
    1e80:	30 91 23 01 	lds	r19, 0x0123
    1e84:	e2 0f       	add	r30, r18
    1e86:	f3 1f       	adc	r31, r19
    1e88:	ee 0f       	add	r30, r30
    1e8a:	ff 1f       	adc	r31, r31
    1e8c:	ee 0f       	add	r30, r30
    1e8e:	ff 1f       	adc	r31, r31
    1e90:	ec 5d       	subi	r30, 0xDC	; 220
    1e92:	fe 4f       	sbci	r31, 0xFE	; 254
    1e94:	40 81       	ld	r20, Z
    1e96:	51 81       	ldd	r21, Z+1	; 0x01
    1e98:	62 81       	ldd	r22, Z+2	; 0x02
    1e9a:	73 81       	ldd	r23, Z+3	; 0x03
    1e9c:	04 e1       	ldi	r16, 0x14	; 20
    1e9e:	10 e0       	ldi	r17, 0x00	; 0
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    1ea8:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(frontLeftLeg.femurJoint, actuatorPositions_g[frontLeftLeg.femurJoint][currentPos_g],20);
    1eac:	80 91 1c 01 	lds	r24, 0x011C
    1eb0:	90 91 1d 01 	lds	r25, 0x011D
    1eb4:	c8 9f       	mul	r28, r24
    1eb6:	f0 01       	movw	r30, r0
    1eb8:	c9 9f       	mul	r28, r25
    1eba:	f0 0d       	add	r31, r0
    1ebc:	11 24       	eor	r1, r1
    1ebe:	20 91 22 01 	lds	r18, 0x0122
    1ec2:	30 91 23 01 	lds	r19, 0x0123
    1ec6:	e2 0f       	add	r30, r18
    1ec8:	f3 1f       	adc	r31, r19
    1eca:	ee 0f       	add	r30, r30
    1ecc:	ff 1f       	adc	r31, r31
    1ece:	ee 0f       	add	r30, r30
    1ed0:	ff 1f       	adc	r31, r31
    1ed2:	ec 5d       	subi	r30, 0xDC	; 220
    1ed4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ed6:	40 81       	ld	r20, Z
    1ed8:	51 81       	ldd	r21, Z+1	; 0x01
    1eda:	62 81       	ldd	r22, Z+2	; 0x02
    1edc:	73 81       	ldd	r23, Z+3	; 0x03
    1ede:	04 e1       	ldi	r16, 0x14	; 20
    1ee0:	10 e0       	ldi	r17, 0x00	; 0
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    1eea:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(frontLeftLeg.tibiaJoint, actuatorPositions_g[frontLeftLeg.tibiaJoint][currentPos_g],20);
    1eee:	80 91 1e 01 	lds	r24, 0x011E
    1ef2:	90 91 1f 01 	lds	r25, 0x011F
    1ef6:	c8 9f       	mul	r28, r24
    1ef8:	f0 01       	movw	r30, r0
    1efa:	c9 9f       	mul	r28, r25
    1efc:	f0 0d       	add	r31, r0
    1efe:	11 24       	eor	r1, r1
    1f00:	20 91 22 01 	lds	r18, 0x0122
    1f04:	30 91 23 01 	lds	r19, 0x0123
    1f08:	e2 0f       	add	r30, r18
    1f0a:	f3 1f       	adc	r31, r19
    1f0c:	ee 0f       	add	r30, r30
    1f0e:	ff 1f       	adc	r31, r31
    1f10:	ee 0f       	add	r30, r30
    1f12:	ff 1f       	adc	r31, r31
    1f14:	ec 5d       	subi	r30, 0xDC	; 220
    1f16:	fe 4f       	sbci	r31, 0xFE	; 254
    1f18:	40 81       	ld	r20, Z
    1f1a:	51 81       	ldd	r21, Z+1	; 0x01
    1f1c:	62 81       	ldd	r22, Z+2	; 0x02
    1f1e:	73 81       	ldd	r23, Z+3	; 0x03
    1f20:	04 e1       	ldi	r16, 0x14	; 20
    1f22:	10 e0       	ldi	r17, 0x00	; 0
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    1f2c:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
   
    MoveDynamixel(frontRightLeg.coxaJoint, actuatorPositions_g[frontRightLeg.coxaJoint][currentPos_g],20);
    1f30:	80 91 12 01 	lds	r24, 0x0112
    1f34:	90 91 13 01 	lds	r25, 0x0113
    1f38:	c8 9f       	mul	r28, r24
    1f3a:	f0 01       	movw	r30, r0
    1f3c:	c9 9f       	mul	r28, r25
    1f3e:	f0 0d       	add	r31, r0
    1f40:	11 24       	eor	r1, r1
    1f42:	20 91 22 01 	lds	r18, 0x0122
    1f46:	30 91 23 01 	lds	r19, 0x0123
    1f4a:	e2 0f       	add	r30, r18
    1f4c:	f3 1f       	adc	r31, r19
    1f4e:	ee 0f       	add	r30, r30
    1f50:	ff 1f       	adc	r31, r31
    1f52:	ee 0f       	add	r30, r30
    1f54:	ff 1f       	adc	r31, r31
    1f56:	ec 5d       	subi	r30, 0xDC	; 220
    1f58:	fe 4f       	sbci	r31, 0xFE	; 254
    1f5a:	40 81       	ld	r20, Z
    1f5c:	51 81       	ldd	r21, Z+1	; 0x01
    1f5e:	62 81       	ldd	r22, Z+2	; 0x02
    1f60:	73 81       	ldd	r23, Z+3	; 0x03
    1f62:	04 e1       	ldi	r16, 0x14	; 20
    1f64:	10 e0       	ldi	r17, 0x00	; 0
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    1f6e:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(frontRightLeg.femurJoint, actuatorPositions_g[frontRightLeg.femurJoint][currentPos_g],20);
    1f72:	80 91 14 01 	lds	r24, 0x0114
    1f76:	90 91 15 01 	lds	r25, 0x0115
    1f7a:	c8 9f       	mul	r28, r24
    1f7c:	f0 01       	movw	r30, r0
    1f7e:	c9 9f       	mul	r28, r25
    1f80:	f0 0d       	add	r31, r0
    1f82:	11 24       	eor	r1, r1
    1f84:	20 91 22 01 	lds	r18, 0x0122
    1f88:	30 91 23 01 	lds	r19, 0x0123
    1f8c:	e2 0f       	add	r30, r18
    1f8e:	f3 1f       	adc	r31, r19
    1f90:	ee 0f       	add	r30, r30
    1f92:	ff 1f       	adc	r31, r31
    1f94:	ee 0f       	add	r30, r30
    1f96:	ff 1f       	adc	r31, r31
    1f98:	ec 5d       	subi	r30, 0xDC	; 220
    1f9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f9c:	40 81       	ld	r20, Z
    1f9e:	51 81       	ldd	r21, Z+1	; 0x01
    1fa0:	62 81       	ldd	r22, Z+2	; 0x02
    1fa2:	73 81       	ldd	r23, Z+3	; 0x03
    1fa4:	04 e1       	ldi	r16, 0x14	; 20
    1fa6:	10 e0       	ldi	r17, 0x00	; 0
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    1fb0:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(frontRightLeg.tibiaJoint, actuatorPositions_g[frontRightLeg.tibiaJoint][currentPos_g],20);
    1fb4:	80 91 16 01 	lds	r24, 0x0116
    1fb8:	90 91 17 01 	lds	r25, 0x0117
    1fbc:	c8 9f       	mul	r28, r24
    1fbe:	f0 01       	movw	r30, r0
    1fc0:	c9 9f       	mul	r28, r25
    1fc2:	f0 0d       	add	r31, r0
    1fc4:	11 24       	eor	r1, r1
    1fc6:	20 91 22 01 	lds	r18, 0x0122
    1fca:	30 91 23 01 	lds	r19, 0x0123
    1fce:	e2 0f       	add	r30, r18
    1fd0:	f3 1f       	adc	r31, r19
    1fd2:	ee 0f       	add	r30, r30
    1fd4:	ff 1f       	adc	r31, r31
    1fd6:	ee 0f       	add	r30, r30
    1fd8:	ff 1f       	adc	r31, r31
    1fda:	ec 5d       	subi	r30, 0xDC	; 220
    1fdc:	fe 4f       	sbci	r31, 0xFE	; 254
    1fde:	40 81       	ld	r20, Z
    1fe0:	51 81       	ldd	r21, Z+1	; 0x01
    1fe2:	62 81       	ldd	r22, Z+2	; 0x02
    1fe4:	73 81       	ldd	r23, Z+3	; 0x03
    1fe6:	04 e1       	ldi	r16, 0x14	; 20
    1fe8:	10 e0       	ldi	r17, 0x00	; 0
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    1ff2:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
    
    MoveDynamixel(rearRightLeg.coxaJoint, actuatorPositions_g[rearRightLeg.coxaJoint][currentPos_g],20);
    1ff6:	80 91 02 01 	lds	r24, 0x0102
    1ffa:	90 91 03 01 	lds	r25, 0x0103
    1ffe:	c8 9f       	mul	r28, r24
    2000:	f0 01       	movw	r30, r0
    2002:	c9 9f       	mul	r28, r25
    2004:	f0 0d       	add	r31, r0
    2006:	11 24       	eor	r1, r1
    2008:	20 91 22 01 	lds	r18, 0x0122
    200c:	30 91 23 01 	lds	r19, 0x0123
    2010:	e2 0f       	add	r30, r18
    2012:	f3 1f       	adc	r31, r19
    2014:	ee 0f       	add	r30, r30
    2016:	ff 1f       	adc	r31, r31
    2018:	ee 0f       	add	r30, r30
    201a:	ff 1f       	adc	r31, r31
    201c:	ec 5d       	subi	r30, 0xDC	; 220
    201e:	fe 4f       	sbci	r31, 0xFE	; 254
    2020:	40 81       	ld	r20, Z
    2022:	51 81       	ldd	r21, Z+1	; 0x01
    2024:	62 81       	ldd	r22, Z+2	; 0x02
    2026:	73 81       	ldd	r23, Z+3	; 0x03
    2028:	04 e1       	ldi	r16, 0x14	; 20
    202a:	10 e0       	ldi	r17, 0x00	; 0
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    2034:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(rearRightLeg.femurJoint, actuatorPositions_g[rearRightLeg.femurJoint][currentPos_g],20);
    2038:	80 91 04 01 	lds	r24, 0x0104
    203c:	90 91 05 01 	lds	r25, 0x0105
    2040:	c8 9f       	mul	r28, r24
    2042:	f0 01       	movw	r30, r0
    2044:	c9 9f       	mul	r28, r25
    2046:	f0 0d       	add	r31, r0
    2048:	11 24       	eor	r1, r1
    204a:	20 91 22 01 	lds	r18, 0x0122
    204e:	30 91 23 01 	lds	r19, 0x0123
    2052:	e2 0f       	add	r30, r18
    2054:	f3 1f       	adc	r31, r19
    2056:	ee 0f       	add	r30, r30
    2058:	ff 1f       	adc	r31, r31
    205a:	ee 0f       	add	r30, r30
    205c:	ff 1f       	adc	r31, r31
    205e:	ec 5d       	subi	r30, 0xDC	; 220
    2060:	fe 4f       	sbci	r31, 0xFE	; 254
    2062:	40 81       	ld	r20, Z
    2064:	51 81       	ldd	r21, Z+1	; 0x01
    2066:	62 81       	ldd	r22, Z+2	; 0x02
    2068:	73 81       	ldd	r23, Z+3	; 0x03
    206a:	04 e1       	ldi	r16, 0x14	; 20
    206c:	10 e0       	ldi	r17, 0x00	; 0
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    2076:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(rearRightLeg.tibiaJoint, actuatorPositions_g[rearRightLeg.tibiaJoint][currentPos_g],20);
    207a:	80 91 06 01 	lds	r24, 0x0106
    207e:	90 91 07 01 	lds	r25, 0x0107
    2082:	c8 9f       	mul	r28, r24
    2084:	f0 01       	movw	r30, r0
    2086:	c9 9f       	mul	r28, r25
    2088:	f0 0d       	add	r31, r0
    208a:	11 24       	eor	r1, r1
    208c:	20 91 22 01 	lds	r18, 0x0122
    2090:	30 91 23 01 	lds	r19, 0x0123
    2094:	e2 0f       	add	r30, r18
    2096:	f3 1f       	adc	r31, r19
    2098:	ee 0f       	add	r30, r30
    209a:	ff 1f       	adc	r31, r31
    209c:	ee 0f       	add	r30, r30
    209e:	ff 1f       	adc	r31, r31
    20a0:	ec 5d       	subi	r30, 0xDC	; 220
    20a2:	fe 4f       	sbci	r31, 0xFE	; 254
    20a4:	40 81       	ld	r20, Z
    20a6:	51 81       	ldd	r21, Z+1	; 0x01
    20a8:	62 81       	ldd	r22, Z+2	; 0x02
    20aa:	73 81       	ldd	r23, Z+3	; 0x03
    20ac:	04 e1       	ldi	r16, 0x14	; 20
    20ae:	10 e0       	ldi	r17, 0x00	; 0
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    20b8:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
    
    MoveDynamixel(rearLeftLeg.coxaJoint, actuatorPositions_g[rearLeftLeg.coxaJoint][currentPos_g],20);
    20bc:	80 91 0a 01 	lds	r24, 0x010A
    20c0:	90 91 0b 01 	lds	r25, 0x010B
    20c4:	c8 9f       	mul	r28, r24
    20c6:	f0 01       	movw	r30, r0
    20c8:	c9 9f       	mul	r28, r25
    20ca:	f0 0d       	add	r31, r0
    20cc:	11 24       	eor	r1, r1
    20ce:	20 91 22 01 	lds	r18, 0x0122
    20d2:	30 91 23 01 	lds	r19, 0x0123
    20d6:	e2 0f       	add	r30, r18
    20d8:	f3 1f       	adc	r31, r19
    20da:	ee 0f       	add	r30, r30
    20dc:	ff 1f       	adc	r31, r31
    20de:	ee 0f       	add	r30, r30
    20e0:	ff 1f       	adc	r31, r31
    20e2:	ec 5d       	subi	r30, 0xDC	; 220
    20e4:	fe 4f       	sbci	r31, 0xFE	; 254
    20e6:	40 81       	ld	r20, Z
    20e8:	51 81       	ldd	r21, Z+1	; 0x01
    20ea:	62 81       	ldd	r22, Z+2	; 0x02
    20ec:	73 81       	ldd	r23, Z+3	; 0x03
    20ee:	04 e1       	ldi	r16, 0x14	; 20
    20f0:	10 e0       	ldi	r17, 0x00	; 0
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    20fa:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(rearLeftLeg.femurJoint, actuatorPositions_g[rearLeftLeg.femurJoint][currentPos_g],20);
    20fe:	80 91 0c 01 	lds	r24, 0x010C
    2102:	90 91 0d 01 	lds	r25, 0x010D
    2106:	c8 9f       	mul	r28, r24
    2108:	f0 01       	movw	r30, r0
    210a:	c9 9f       	mul	r28, r25
    210c:	f0 0d       	add	r31, r0
    210e:	11 24       	eor	r1, r1
    2110:	20 91 22 01 	lds	r18, 0x0122
    2114:	30 91 23 01 	lds	r19, 0x0123
    2118:	e2 0f       	add	r30, r18
    211a:	f3 1f       	adc	r31, r19
    211c:	ee 0f       	add	r30, r30
    211e:	ff 1f       	adc	r31, r31
    2120:	ee 0f       	add	r30, r30
    2122:	ff 1f       	adc	r31, r31
    2124:	ec 5d       	subi	r30, 0xDC	; 220
    2126:	fe 4f       	sbci	r31, 0xFE	; 254
    2128:	40 81       	ld	r20, Z
    212a:	51 81       	ldd	r21, Z+1	; 0x01
    212c:	62 81       	ldd	r22, Z+2	; 0x02
    212e:	73 81       	ldd	r23, Z+3	; 0x03
    2130:	04 e1       	ldi	r16, 0x14	; 20
    2132:	10 e0       	ldi	r17, 0x00	; 0
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    213c:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(rearLeftLeg.tibiaJoint, actuatorPositions_g[rearLeftLeg.tibiaJoint][currentPos_g],20);
    2140:	80 91 0e 01 	lds	r24, 0x010E
    2144:	90 91 0f 01 	lds	r25, 0x010F
    2148:	c8 9f       	mul	r28, r24
    214a:	f0 01       	movw	r30, r0
    214c:	c9 9f       	mul	r28, r25
    214e:	f0 0d       	add	r31, r0
    2150:	11 24       	eor	r1, r1
    2152:	20 91 22 01 	lds	r18, 0x0122
    2156:	30 91 23 01 	lds	r19, 0x0123
    215a:	e2 0f       	add	r30, r18
    215c:	f3 1f       	adc	r31, r19
    215e:	ee 0f       	add	r30, r30
    2160:	ff 1f       	adc	r31, r31
    2162:	ee 0f       	add	r30, r30
    2164:	ff 1f       	adc	r31, r31
    2166:	ec 5d       	subi	r30, 0xDC	; 220
    2168:	fe 4f       	sbci	r31, 0xFE	; 254
    216a:	40 81       	ld	r20, Z
    216c:	51 81       	ldd	r21, Z+1	; 0x01
    216e:	62 81       	ldd	r22, Z+2	; 0x02
    2170:	73 81       	ldd	r23, Z+3	; 0x03
    2172:	04 e1       	ldi	r16, 0x14	; 20
    2174:	10 e0       	ldi	r17, 0x00	; 0
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    217e:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
   
   
   
   
   
	if (currentPos_g > 8)
    2182:	80 91 22 01 	lds	r24, 0x0122
    2186:	90 91 23 01 	lds	r25, 0x0123
    218a:	09 97       	sbiw	r24, 0x09	; 9
    218c:	0c f4       	brge	.+2      	; 0x2190 <__vector_2+0x36e>
    218e:	c2 c1       	rjmp	.+900    	; 0x2514 <__vector_2+0x6f2>
    {
        currentPos_g = 0;
    2190:	10 92 23 01 	sts	0x0123, r1
    2194:	10 92 22 01 	sts	0x0122, r1
        switch (Direction)
    2198:	80 91 20 01 	lds	r24, 0x0120
    219c:	90 91 21 01 	lds	r25, 0x0121
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	21 f0       	breq	.+8      	; 0x21ac <__vector_2+0x38a>
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	09 f4       	brne	.+2      	; 0x21aa <__vector_2+0x388>
    21a8:	db c0       	rjmp	.+438    	; 0x2360 <__vector_2+0x53e>
    21aa:	b4 c1       	rjmp	.+872    	; 0x2514 <__vector_2+0x6f2>
        {
            case 0:
            {
                CalcCurvedPath(frontLeftLeg,10,-160,0,-50,-160,140,-50);
    21ac:	d2 ec       	ldi	r29, 0xC2	; 194
    21ae:	df 93       	push	r29
    21b0:	c8 e4       	ldi	r28, 0x48	; 72
    21b2:	cf 93       	push	r28
    21b4:	1f 92       	push	r1
    21b6:	1f 92       	push	r1
    21b8:	0f 2e       	mov	r0, r31
    21ba:	f3 e4       	ldi	r31, 0x43	; 67
    21bc:	6f 2e       	mov	r6, r31
    21be:	f0 2d       	mov	r31, r0
    21c0:	6f 92       	push	r6
    21c2:	0f 2e       	mov	r0, r31
    21c4:	fc e0       	ldi	r31, 0x0C	; 12
    21c6:	4f 2e       	mov	r4, r31
    21c8:	f0 2d       	mov	r31, r0
    21ca:	4f 92       	push	r4
    21cc:	1f 92       	push	r1
    21ce:	1f 92       	push	r1
    21d0:	0f 2e       	mov	r0, r31
    21d2:	f3 ec       	ldi	r31, 0xC3	; 195
    21d4:	5f 2e       	mov	r5, r31
    21d6:	f0 2d       	mov	r31, r0
    21d8:	5f 92       	push	r5
    21da:	68 94       	set
    21dc:	77 24       	eor	r7, r7
    21de:	75 f8       	bld	r7, 5
    21e0:	7f 92       	push	r7
    21e2:	1f 92       	push	r1
    21e4:	1f 92       	push	r1
    21e6:	df 93       	push	r29
    21e8:	cf 93       	push	r28
    21ea:	1f 92       	push	r1
    21ec:	1f 92       	push	r1
    21ee:	81 2c       	mov	r8, r1
    21f0:	91 2c       	mov	r9, r1
    21f2:	54 01       	movw	r10, r8
    21f4:	0f 2e       	mov	r0, r31
    21f6:	c1 2c       	mov	r12, r1
    21f8:	d1 2c       	mov	r13, r1
    21fa:	f0 e2       	ldi	r31, 0x20	; 32
    21fc:	ef 2e       	mov	r14, r31
    21fe:	f3 ec       	ldi	r31, 0xC3	; 195
    2200:	ff 2e       	mov	r15, r31
    2202:	f0 2d       	mov	r31, r0
    2204:	0a e0       	ldi	r16, 0x0A	; 10
    2206:	10 e0       	ldi	r17, 0x00	; 0
    2208:	20 91 18 01 	lds	r18, 0x0118
    220c:	30 91 19 01 	lds	r19, 0x0119
    2210:	40 91 1a 01 	lds	r20, 0x011A
    2214:	50 91 1b 01 	lds	r21, 0x011B
    2218:	60 91 1c 01 	lds	r22, 0x011C
    221c:	70 91 1d 01 	lds	r23, 0x011D
    2220:	80 91 1e 01 	lds	r24, 0x011E
    2224:	90 91 1f 01 	lds	r25, 0x011F
    2228:	8a d8       	rcall	.-3820   	; 0x133e <CalcCurvedPath>
                CalcCurvedPath(frontRightLeg,10,160,0,-50,160,140,-50);
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	1f 92       	push	r1
    2230:	1f 92       	push	r1
    2232:	6f 92       	push	r6
    2234:	4f 92       	push	r4
    2236:	1f 92       	push	r1
    2238:	1f 92       	push	r1
    223a:	6f 92       	push	r6
    223c:	7f 92       	push	r7
    223e:	1f 92       	push	r1
    2240:	1f 92       	push	r1
    2242:	df 93       	push	r29
    2244:	cf 93       	push	r28
    2246:	1f 92       	push	r1
    2248:	1f 92       	push	r1
    224a:	0f 2e       	mov	r0, r31
    224c:	c1 2c       	mov	r12, r1
    224e:	d1 2c       	mov	r13, r1
    2250:	f0 e2       	ldi	r31, 0x20	; 32
    2252:	ef 2e       	mov	r14, r31
    2254:	f3 e4       	ldi	r31, 0x43	; 67
    2256:	ff 2e       	mov	r15, r31
    2258:	f0 2d       	mov	r31, r0
    225a:	20 91 10 01 	lds	r18, 0x0110
    225e:	30 91 11 01 	lds	r19, 0x0111
    2262:	40 91 12 01 	lds	r20, 0x0112
    2266:	50 91 13 01 	lds	r21, 0x0113
    226a:	60 91 14 01 	lds	r22, 0x0114
    226e:	70 91 15 01 	lds	r23, 0x0115
    2272:	80 91 16 01 	lds	r24, 0x0116
    2276:	90 91 17 01 	lds	r25, 0x0117
    227a:	61 d8       	rcall	.-3902   	; 0x133e <CalcCurvedPath>
                CalcCurvedPath(rearLeftLeg,10,-160,-140,-50,-160,0,-50);
    227c:	8d b7       	in	r24, 0x3d	; 61
    227e:	9e b7       	in	r25, 0x3e	; 62
    2280:	80 96       	adiw	r24, 0x20	; 32
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	9e bf       	out	0x3e, r25	; 62
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	8d bf       	out	0x3d, r24	; 61
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	1f 92       	push	r1
    2292:	1f 92       	push	r1
    2294:	1f 92       	push	r1
    2296:	1f 92       	push	r1
    2298:	1f 92       	push	r1
    229a:	1f 92       	push	r1
    229c:	5f 92       	push	r5
    229e:	7f 92       	push	r7
    22a0:	1f 92       	push	r1
    22a2:	1f 92       	push	r1
    22a4:	df 93       	push	r29
    22a6:	cf 93       	push	r28
    22a8:	1f 92       	push	r1
    22aa:	1f 92       	push	r1
    22ac:	0f 2e       	mov	r0, r31
    22ae:	81 2c       	mov	r8, r1
    22b0:	91 2c       	mov	r9, r1
    22b2:	fc e0       	ldi	r31, 0x0C	; 12
    22b4:	af 2e       	mov	r10, r31
    22b6:	f3 ec       	ldi	r31, 0xC3	; 195
    22b8:	bf 2e       	mov	r11, r31
    22ba:	f0 2d       	mov	r31, r0
    22bc:	0f 2e       	mov	r0, r31
    22be:	c1 2c       	mov	r12, r1
    22c0:	d1 2c       	mov	r13, r1
    22c2:	f0 e2       	ldi	r31, 0x20	; 32
    22c4:	ef 2e       	mov	r14, r31
    22c6:	f3 ec       	ldi	r31, 0xC3	; 195
    22c8:	ff 2e       	mov	r15, r31
    22ca:	f0 2d       	mov	r31, r0
    22cc:	20 91 08 01 	lds	r18, 0x0108
    22d0:	30 91 09 01 	lds	r19, 0x0109
    22d4:	40 91 0a 01 	lds	r20, 0x010A
    22d8:	50 91 0b 01 	lds	r21, 0x010B
    22dc:	60 91 0c 01 	lds	r22, 0x010C
    22e0:	70 91 0d 01 	lds	r23, 0x010D
    22e4:	80 91 0e 01 	lds	r24, 0x010E
    22e8:	90 91 0f 01 	lds	r25, 0x010F
    22ec:	28 d8       	rcall	.-4016   	; 0x133e <CalcCurvedPath>
                CalcCurvedPath(rearRightLeg,10,160,-140,-50,160,0,-50);
    22ee:	df 93       	push	r29
    22f0:	cf 93       	push	r28
    22f2:	1f 92       	push	r1
    22f4:	1f 92       	push	r1
    22f6:	1f 92       	push	r1
    22f8:	1f 92       	push	r1
    22fa:	1f 92       	push	r1
    22fc:	1f 92       	push	r1
    22fe:	6f 92       	push	r6
    2300:	7f 92       	push	r7
    2302:	1f 92       	push	r1
    2304:	1f 92       	push	r1
    2306:	df 93       	push	r29
    2308:	cf 93       	push	r28
    230a:	1f 92       	push	r1
    230c:	1f 92       	push	r1
    230e:	0f 2e       	mov	r0, r31
    2310:	c1 2c       	mov	r12, r1
    2312:	d1 2c       	mov	r13, r1
    2314:	f0 e2       	ldi	r31, 0x20	; 32
    2316:	ef 2e       	mov	r14, r31
    2318:	f3 e4       	ldi	r31, 0x43	; 67
    231a:	ff 2e       	mov	r15, r31
    231c:	f0 2d       	mov	r31, r0
    231e:	20 91 00 01 	lds	r18, 0x0100
    2322:	30 91 01 01 	lds	r19, 0x0101
    2326:	40 91 02 01 	lds	r20, 0x0102
    232a:	50 91 03 01 	lds	r21, 0x0103
    232e:	60 91 04 01 	lds	r22, 0x0104
    2332:	70 91 05 01 	lds	r23, 0x0105
    2336:	80 91 06 01 	lds	r24, 0x0106
    233a:	90 91 07 01 	lds	r25, 0x0107
    233e:	0e 94 9f 09 	call	0x133e	; 0x133e <CalcCurvedPath>
                
                Direction = 1;
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	90 93 21 01 	sts	0x0121, r25
    234a:	80 93 20 01 	sts	0x0120, r24
                break;
    234e:	8d b7       	in	r24, 0x3d	; 61
    2350:	9e b7       	in	r25, 0x3e	; 62
    2352:	80 96       	adiw	r24, 0x20	; 32
    2354:	0f b6       	in	r0, 0x3f	; 63
    2356:	f8 94       	cli
    2358:	9e bf       	out	0x3e, r25	; 62
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	8d bf       	out	0x3d, r24	; 61
    235e:	da c0       	rjmp	.+436    	; 0x2514 <__vector_2+0x6f2>
            }            
            case 1:
            {
                CalcStraightPath(frontLeftLeg,10,-160,140,-50,-160,0,-50);
    2360:	d2 ec       	ldi	r29, 0xC2	; 194
    2362:	df 93       	push	r29
    2364:	c8 e4       	ldi	r28, 0x48	; 72
    2366:	cf 93       	push	r28
    2368:	1f 92       	push	r1
    236a:	1f 92       	push	r1
    236c:	1f 92       	push	r1
    236e:	1f 92       	push	r1
    2370:	1f 92       	push	r1
    2372:	1f 92       	push	r1
    2374:	0f 2e       	mov	r0, r31
    2376:	f3 ec       	ldi	r31, 0xC3	; 195
    2378:	6f 2e       	mov	r6, r31
    237a:	f0 2d       	mov	r31, r0
    237c:	6f 92       	push	r6
    237e:	68 94       	set
    2380:	77 24       	eor	r7, r7
    2382:	75 f8       	bld	r7, 5
    2384:	7f 92       	push	r7
    2386:	1f 92       	push	r1
    2388:	1f 92       	push	r1
    238a:	df 93       	push	r29
    238c:	cf 93       	push	r28
    238e:	1f 92       	push	r1
    2390:	1f 92       	push	r1
    2392:	0f 2e       	mov	r0, r31
    2394:	81 2c       	mov	r8, r1
    2396:	91 2c       	mov	r9, r1
    2398:	fc e0       	ldi	r31, 0x0C	; 12
    239a:	af 2e       	mov	r10, r31
    239c:	f3 e4       	ldi	r31, 0x43	; 67
    239e:	bf 2e       	mov	r11, r31
    23a0:	f0 2d       	mov	r31, r0
    23a2:	0f 2e       	mov	r0, r31
    23a4:	c1 2c       	mov	r12, r1
    23a6:	d1 2c       	mov	r13, r1
    23a8:	f0 e2       	ldi	r31, 0x20	; 32
    23aa:	ef 2e       	mov	r14, r31
    23ac:	f3 ec       	ldi	r31, 0xC3	; 195
    23ae:	ff 2e       	mov	r15, r31
    23b0:	f0 2d       	mov	r31, r0
    23b2:	0a e0       	ldi	r16, 0x0A	; 10
    23b4:	10 e0       	ldi	r17, 0x00	; 0
    23b6:	20 91 18 01 	lds	r18, 0x0118
    23ba:	30 91 19 01 	lds	r19, 0x0119
    23be:	40 91 1a 01 	lds	r20, 0x011A
    23c2:	50 91 1b 01 	lds	r21, 0x011B
    23c6:	60 91 1c 01 	lds	r22, 0x011C
    23ca:	70 91 1d 01 	lds	r23, 0x011D
    23ce:	80 91 1e 01 	lds	r24, 0x011E
    23d2:	90 91 1f 01 	lds	r25, 0x011F
    23d6:	0e 94 ca 06 	call	0xd94	; 0xd94 <CalcStraightPath>
                CalcStraightPath(frontRightLeg,10,160,140,-50,160,0,-50);
    23da:	df 93       	push	r29
    23dc:	cf 93       	push	r28
    23de:	1f 92       	push	r1
    23e0:	1f 92       	push	r1
    23e2:	1f 92       	push	r1
    23e4:	1f 92       	push	r1
    23e6:	1f 92       	push	r1
    23e8:	1f 92       	push	r1
    23ea:	0f 2e       	mov	r0, r31
    23ec:	f3 e4       	ldi	r31, 0x43	; 67
    23ee:	5f 2e       	mov	r5, r31
    23f0:	f0 2d       	mov	r31, r0
    23f2:	5f 92       	push	r5
    23f4:	7f 92       	push	r7
    23f6:	1f 92       	push	r1
    23f8:	1f 92       	push	r1
    23fa:	df 93       	push	r29
    23fc:	cf 93       	push	r28
    23fe:	1f 92       	push	r1
    2400:	1f 92       	push	r1
    2402:	0f 2e       	mov	r0, r31
    2404:	c1 2c       	mov	r12, r1
    2406:	d1 2c       	mov	r13, r1
    2408:	f0 e2       	ldi	r31, 0x20	; 32
    240a:	ef 2e       	mov	r14, r31
    240c:	f3 e4       	ldi	r31, 0x43	; 67
    240e:	ff 2e       	mov	r15, r31
    2410:	f0 2d       	mov	r31, r0
    2412:	20 91 10 01 	lds	r18, 0x0110
    2416:	30 91 11 01 	lds	r19, 0x0111
    241a:	40 91 12 01 	lds	r20, 0x0112
    241e:	50 91 13 01 	lds	r21, 0x0113
    2422:	60 91 14 01 	lds	r22, 0x0114
    2426:	70 91 15 01 	lds	r23, 0x0115
    242a:	80 91 16 01 	lds	r24, 0x0116
    242e:	90 91 17 01 	lds	r25, 0x0117
    2432:	0e 94 ca 06 	call	0xd94	; 0xd94 <CalcStraightPath>
                CalcStraightPath(rearLeftLeg,10,-160,0,-50,-160,-140,-50);
    2436:	8d b7       	in	r24, 0x3d	; 61
    2438:	9e b7       	in	r25, 0x3e	; 62
    243a:	80 96       	adiw	r24, 0x20	; 32
    243c:	0f b6       	in	r0, 0x3f	; 63
    243e:	f8 94       	cli
    2440:	9e bf       	out	0x3e, r25	; 62
    2442:	0f be       	out	0x3f, r0	; 63
    2444:	8d bf       	out	0x3d, r24	; 61
    2446:	df 93       	push	r29
    2448:	cf 93       	push	r28
    244a:	1f 92       	push	r1
    244c:	1f 92       	push	r1
    244e:	6f 92       	push	r6
    2450:	0f 2e       	mov	r0, r31
    2452:	fc e0       	ldi	r31, 0x0C	; 12
    2454:	4f 2e       	mov	r4, r31
    2456:	f0 2d       	mov	r31, r0
    2458:	4f 92       	push	r4
    245a:	1f 92       	push	r1
    245c:	1f 92       	push	r1
    245e:	6f 92       	push	r6
    2460:	7f 92       	push	r7
    2462:	1f 92       	push	r1
    2464:	1f 92       	push	r1
    2466:	df 93       	push	r29
    2468:	cf 93       	push	r28
    246a:	1f 92       	push	r1
    246c:	1f 92       	push	r1
    246e:	81 2c       	mov	r8, r1
    2470:	91 2c       	mov	r9, r1
    2472:	54 01       	movw	r10, r8
    2474:	0f 2e       	mov	r0, r31
    2476:	c1 2c       	mov	r12, r1
    2478:	d1 2c       	mov	r13, r1
    247a:	f0 e2       	ldi	r31, 0x20	; 32
    247c:	ef 2e       	mov	r14, r31
    247e:	f3 ec       	ldi	r31, 0xC3	; 195
    2480:	ff 2e       	mov	r15, r31
    2482:	f0 2d       	mov	r31, r0
    2484:	20 91 08 01 	lds	r18, 0x0108
    2488:	30 91 09 01 	lds	r19, 0x0109
    248c:	40 91 0a 01 	lds	r20, 0x010A
    2490:	50 91 0b 01 	lds	r21, 0x010B
    2494:	60 91 0c 01 	lds	r22, 0x010C
    2498:	70 91 0d 01 	lds	r23, 0x010D
    249c:	80 91 0e 01 	lds	r24, 0x010E
    24a0:	90 91 0f 01 	lds	r25, 0x010F
    24a4:	0e 94 ca 06 	call	0xd94	; 0xd94 <CalcStraightPath>
                CalcStraightPath(rearRightLeg,10,160,0,-50,160,-140,-50);
    24a8:	df 93       	push	r29
    24aa:	cf 93       	push	r28
    24ac:	1f 92       	push	r1
    24ae:	1f 92       	push	r1
    24b0:	6f 92       	push	r6
    24b2:	4f 92       	push	r4
    24b4:	1f 92       	push	r1
    24b6:	1f 92       	push	r1
    24b8:	5f 92       	push	r5
    24ba:	7f 92       	push	r7
    24bc:	1f 92       	push	r1
    24be:	1f 92       	push	r1
    24c0:	df 93       	push	r29
    24c2:	cf 93       	push	r28
    24c4:	1f 92       	push	r1
    24c6:	1f 92       	push	r1
    24c8:	0f 2e       	mov	r0, r31
    24ca:	c1 2c       	mov	r12, r1
    24cc:	d1 2c       	mov	r13, r1
    24ce:	f0 e2       	ldi	r31, 0x20	; 32
    24d0:	ef 2e       	mov	r14, r31
    24d2:	f3 e4       	ldi	r31, 0x43	; 67
    24d4:	ff 2e       	mov	r15, r31
    24d6:	f0 2d       	mov	r31, r0
    24d8:	20 91 00 01 	lds	r18, 0x0100
    24dc:	30 91 01 01 	lds	r19, 0x0101
    24e0:	40 91 02 01 	lds	r20, 0x0102
    24e4:	50 91 03 01 	lds	r21, 0x0103
    24e8:	60 91 04 01 	lds	r22, 0x0104
    24ec:	70 91 05 01 	lds	r23, 0x0105
    24f0:	80 91 06 01 	lds	r24, 0x0106
    24f4:	90 91 07 01 	lds	r25, 0x0107
    24f8:	0e 94 ca 06 	call	0xd94	; 0xd94 <CalcStraightPath>
                Direction = 0;
    24fc:	10 92 21 01 	sts	0x0121, r1
    2500:	10 92 20 01 	sts	0x0120, r1
                break;
    2504:	8d b7       	in	r24, 0x3d	; 61
    2506:	9e b7       	in	r25, 0x3e	; 62
    2508:	80 96       	adiw	r24, 0x20	; 32
    250a:	0f b6       	in	r0, 0x3f	; 63
    250c:	f8 94       	cli
    250e:	9e bf       	out	0x3e, r25	; 62
    2510:	0f be       	out	0x3f, r0	; 63
    2512:	8d bf       	out	0x3d, r24	; 61
            }
        }
        
    }
    currentPos_g++;
    2514:	80 91 22 01 	lds	r24, 0x0122
    2518:	90 91 23 01 	lds	r25, 0x0123
    251c:	01 96       	adiw	r24, 0x01	; 1
    251e:	90 93 23 01 	sts	0x0123, r25
    2522:	80 93 22 01 	sts	0x0122, r24
    return;
} 
    2526:	ff 91       	pop	r31
    2528:	ef 91       	pop	r30
    252a:	df 91       	pop	r29
    252c:	cf 91       	pop	r28
    252e:	bf 91       	pop	r27
    2530:	af 91       	pop	r26
    2532:	9f 91       	pop	r25
    2534:	8f 91       	pop	r24
    2536:	7f 91       	pop	r23
    2538:	6f 91       	pop	r22
    253a:	5f 91       	pop	r21
    253c:	4f 91       	pop	r20
    253e:	3f 91       	pop	r19
    2540:	2f 91       	pop	r18
    2542:	1f 91       	pop	r17
    2544:	0f 91       	pop	r16
    2546:	ff 90       	pop	r15
    2548:	ef 90       	pop	r14
    254a:	df 90       	pop	r13
    254c:	cf 90       	pop	r12
    254e:	bf 90       	pop	r11
    2550:	af 90       	pop	r10
    2552:	9f 90       	pop	r9
    2554:	8f 90       	pop	r8
    2556:	7f 90       	pop	r7
    2558:	6f 90       	pop	r6
    255a:	5f 90       	pop	r5
    255c:	4f 90       	pop	r4
    255e:	0f 90       	pop	r0
    2560:	0b be       	out	0x3b, r0	; 59
    2562:	0f 90       	pop	r0
    2564:	0f be       	out	0x3f, r0	; 63
    2566:	0f 90       	pop	r0
    2568:	1f 90       	pop	r1
    256a:	18 95       	reti

0000256c <move>:


void move()
{
    256c:	4f 92       	push	r4
    256e:	5f 92       	push	r5
    2570:	6f 92       	push	r6
    2572:	7f 92       	push	r7
    2574:	8f 92       	push	r8
    2576:	9f 92       	push	r9
    2578:	af 92       	push	r10
    257a:	bf 92       	push	r11
    257c:	cf 92       	push	r12
    257e:	df 92       	push	r13
    2580:	ef 92       	push	r14
    2582:	ff 92       	push	r15
    2584:	0f 93       	push	r16
    2586:	1f 93       	push	r17
    2588:	cf 93       	push	r28
    258a:	df 93       	push	r29
    
    MoveDynamixel(frontLeftLeg.coxaJoint, actuatorPositions_g[frontLeftLeg.coxaJoint][currentPos_g],20);
    258c:	80 91 1a 01 	lds	r24, 0x011A
    2590:	90 91 1b 01 	lds	r25, 0x011B
    2594:	c4 e1       	ldi	r28, 0x14	; 20
    2596:	c8 9f       	mul	r28, r24
    2598:	f0 01       	movw	r30, r0
    259a:	c9 9f       	mul	r28, r25
    259c:	f0 0d       	add	r31, r0
    259e:	11 24       	eor	r1, r1
    25a0:	20 91 22 01 	lds	r18, 0x0122
    25a4:	30 91 23 01 	lds	r19, 0x0123
    25a8:	e2 0f       	add	r30, r18
    25aa:	f3 1f       	adc	r31, r19
    25ac:	ee 0f       	add	r30, r30
    25ae:	ff 1f       	adc	r31, r31
    25b0:	ee 0f       	add	r30, r30
    25b2:	ff 1f       	adc	r31, r31
    25b4:	ec 5d       	subi	r30, 0xDC	; 220
    25b6:	fe 4f       	sbci	r31, 0xFE	; 254
    25b8:	40 81       	ld	r20, Z
    25ba:	51 81       	ldd	r21, Z+1	; 0x01
    25bc:	62 81       	ldd	r22, Z+2	; 0x02
    25be:	73 81       	ldd	r23, Z+3	; 0x03
    25c0:	04 e1       	ldi	r16, 0x14	; 20
    25c2:	10 e0       	ldi	r17, 0x00	; 0
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    25cc:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(frontLeftLeg.femurJoint, actuatorPositions_g[frontLeftLeg.femurJoint][currentPos_g],20);
    25d0:	80 91 1c 01 	lds	r24, 0x011C
    25d4:	90 91 1d 01 	lds	r25, 0x011D
    25d8:	c8 9f       	mul	r28, r24
    25da:	f0 01       	movw	r30, r0
    25dc:	c9 9f       	mul	r28, r25
    25de:	f0 0d       	add	r31, r0
    25e0:	11 24       	eor	r1, r1
    25e2:	20 91 22 01 	lds	r18, 0x0122
    25e6:	30 91 23 01 	lds	r19, 0x0123
    25ea:	e2 0f       	add	r30, r18
    25ec:	f3 1f       	adc	r31, r19
    25ee:	ee 0f       	add	r30, r30
    25f0:	ff 1f       	adc	r31, r31
    25f2:	ee 0f       	add	r30, r30
    25f4:	ff 1f       	adc	r31, r31
    25f6:	ec 5d       	subi	r30, 0xDC	; 220
    25f8:	fe 4f       	sbci	r31, 0xFE	; 254
    25fa:	40 81       	ld	r20, Z
    25fc:	51 81       	ldd	r21, Z+1	; 0x01
    25fe:	62 81       	ldd	r22, Z+2	; 0x02
    2600:	73 81       	ldd	r23, Z+3	; 0x03
    2602:	04 e1       	ldi	r16, 0x14	; 20
    2604:	10 e0       	ldi	r17, 0x00	; 0
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    260e:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(frontLeftLeg.tibiaJoint, actuatorPositions_g[frontLeftLeg.tibiaJoint][currentPos_g],20);
    2612:	80 91 1e 01 	lds	r24, 0x011E
    2616:	90 91 1f 01 	lds	r25, 0x011F
    261a:	c8 9f       	mul	r28, r24
    261c:	f0 01       	movw	r30, r0
    261e:	c9 9f       	mul	r28, r25
    2620:	f0 0d       	add	r31, r0
    2622:	11 24       	eor	r1, r1
    2624:	20 91 22 01 	lds	r18, 0x0122
    2628:	30 91 23 01 	lds	r19, 0x0123
    262c:	e2 0f       	add	r30, r18
    262e:	f3 1f       	adc	r31, r19
    2630:	ee 0f       	add	r30, r30
    2632:	ff 1f       	adc	r31, r31
    2634:	ee 0f       	add	r30, r30
    2636:	ff 1f       	adc	r31, r31
    2638:	ec 5d       	subi	r30, 0xDC	; 220
    263a:	fe 4f       	sbci	r31, 0xFE	; 254
    263c:	40 81       	ld	r20, Z
    263e:	51 81       	ldd	r21, Z+1	; 0x01
    2640:	62 81       	ldd	r22, Z+2	; 0x02
    2642:	73 81       	ldd	r23, Z+3	; 0x03
    2644:	04 e1       	ldi	r16, 0x14	; 20
    2646:	10 e0       	ldi	r17, 0x00	; 0
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    2650:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
   
    MoveDynamixel(frontRightLeg.coxaJoint, actuatorPositions_g[frontRightLeg.coxaJoint][currentPos_g],20);
    2654:	80 91 12 01 	lds	r24, 0x0112
    2658:	90 91 13 01 	lds	r25, 0x0113
    265c:	c8 9f       	mul	r28, r24
    265e:	f0 01       	movw	r30, r0
    2660:	c9 9f       	mul	r28, r25
    2662:	f0 0d       	add	r31, r0
    2664:	11 24       	eor	r1, r1
    2666:	20 91 22 01 	lds	r18, 0x0122
    266a:	30 91 23 01 	lds	r19, 0x0123
    266e:	e2 0f       	add	r30, r18
    2670:	f3 1f       	adc	r31, r19
    2672:	ee 0f       	add	r30, r30
    2674:	ff 1f       	adc	r31, r31
    2676:	ee 0f       	add	r30, r30
    2678:	ff 1f       	adc	r31, r31
    267a:	ec 5d       	subi	r30, 0xDC	; 220
    267c:	fe 4f       	sbci	r31, 0xFE	; 254
    267e:	40 81       	ld	r20, Z
    2680:	51 81       	ldd	r21, Z+1	; 0x01
    2682:	62 81       	ldd	r22, Z+2	; 0x02
    2684:	73 81       	ldd	r23, Z+3	; 0x03
    2686:	04 e1       	ldi	r16, 0x14	; 20
    2688:	10 e0       	ldi	r17, 0x00	; 0
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    2692:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(frontRightLeg.femurJoint, actuatorPositions_g[frontRightLeg.femurJoint][currentPos_g],20);
    2696:	80 91 14 01 	lds	r24, 0x0114
    269a:	90 91 15 01 	lds	r25, 0x0115
    269e:	c8 9f       	mul	r28, r24
    26a0:	f0 01       	movw	r30, r0
    26a2:	c9 9f       	mul	r28, r25
    26a4:	f0 0d       	add	r31, r0
    26a6:	11 24       	eor	r1, r1
    26a8:	20 91 22 01 	lds	r18, 0x0122
    26ac:	30 91 23 01 	lds	r19, 0x0123
    26b0:	e2 0f       	add	r30, r18
    26b2:	f3 1f       	adc	r31, r19
    26b4:	ee 0f       	add	r30, r30
    26b6:	ff 1f       	adc	r31, r31
    26b8:	ee 0f       	add	r30, r30
    26ba:	ff 1f       	adc	r31, r31
    26bc:	ec 5d       	subi	r30, 0xDC	; 220
    26be:	fe 4f       	sbci	r31, 0xFE	; 254
    26c0:	40 81       	ld	r20, Z
    26c2:	51 81       	ldd	r21, Z+1	; 0x01
    26c4:	62 81       	ldd	r22, Z+2	; 0x02
    26c6:	73 81       	ldd	r23, Z+3	; 0x03
    26c8:	04 e1       	ldi	r16, 0x14	; 20
    26ca:	10 e0       	ldi	r17, 0x00	; 0
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    26d4:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(frontRightLeg.tibiaJoint, actuatorPositions_g[frontRightLeg.tibiaJoint][currentPos_g],20);
    26d8:	80 91 16 01 	lds	r24, 0x0116
    26dc:	90 91 17 01 	lds	r25, 0x0117
    26e0:	c8 9f       	mul	r28, r24
    26e2:	f0 01       	movw	r30, r0
    26e4:	c9 9f       	mul	r28, r25
    26e6:	f0 0d       	add	r31, r0
    26e8:	11 24       	eor	r1, r1
    26ea:	20 91 22 01 	lds	r18, 0x0122
    26ee:	30 91 23 01 	lds	r19, 0x0123
    26f2:	e2 0f       	add	r30, r18
    26f4:	f3 1f       	adc	r31, r19
    26f6:	ee 0f       	add	r30, r30
    26f8:	ff 1f       	adc	r31, r31
    26fa:	ee 0f       	add	r30, r30
    26fc:	ff 1f       	adc	r31, r31
    26fe:	ec 5d       	subi	r30, 0xDC	; 220
    2700:	fe 4f       	sbci	r31, 0xFE	; 254
    2702:	40 81       	ld	r20, Z
    2704:	51 81       	ldd	r21, Z+1	; 0x01
    2706:	62 81       	ldd	r22, Z+2	; 0x02
    2708:	73 81       	ldd	r23, Z+3	; 0x03
    270a:	04 e1       	ldi	r16, 0x14	; 20
    270c:	10 e0       	ldi	r17, 0x00	; 0
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    2716:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
    
    MoveDynamixel(rearRightLeg.coxaJoint, actuatorPositions_g[rearRightLeg.coxaJoint][currentPos_g],20);
    271a:	80 91 02 01 	lds	r24, 0x0102
    271e:	90 91 03 01 	lds	r25, 0x0103
    2722:	c8 9f       	mul	r28, r24
    2724:	f0 01       	movw	r30, r0
    2726:	c9 9f       	mul	r28, r25
    2728:	f0 0d       	add	r31, r0
    272a:	11 24       	eor	r1, r1
    272c:	20 91 22 01 	lds	r18, 0x0122
    2730:	30 91 23 01 	lds	r19, 0x0123
    2734:	e2 0f       	add	r30, r18
    2736:	f3 1f       	adc	r31, r19
    2738:	ee 0f       	add	r30, r30
    273a:	ff 1f       	adc	r31, r31
    273c:	ee 0f       	add	r30, r30
    273e:	ff 1f       	adc	r31, r31
    2740:	ec 5d       	subi	r30, 0xDC	; 220
    2742:	fe 4f       	sbci	r31, 0xFE	; 254
    2744:	40 81       	ld	r20, Z
    2746:	51 81       	ldd	r21, Z+1	; 0x01
    2748:	62 81       	ldd	r22, Z+2	; 0x02
    274a:	73 81       	ldd	r23, Z+3	; 0x03
    274c:	04 e1       	ldi	r16, 0x14	; 20
    274e:	10 e0       	ldi	r17, 0x00	; 0
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    2758:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(rearRightLeg.femurJoint, actuatorPositions_g[rearRightLeg.femurJoint][currentPos_g],20);
    275c:	80 91 04 01 	lds	r24, 0x0104
    2760:	90 91 05 01 	lds	r25, 0x0105
    2764:	c8 9f       	mul	r28, r24
    2766:	f0 01       	movw	r30, r0
    2768:	c9 9f       	mul	r28, r25
    276a:	f0 0d       	add	r31, r0
    276c:	11 24       	eor	r1, r1
    276e:	20 91 22 01 	lds	r18, 0x0122
    2772:	30 91 23 01 	lds	r19, 0x0123
    2776:	e2 0f       	add	r30, r18
    2778:	f3 1f       	adc	r31, r19
    277a:	ee 0f       	add	r30, r30
    277c:	ff 1f       	adc	r31, r31
    277e:	ee 0f       	add	r30, r30
    2780:	ff 1f       	adc	r31, r31
    2782:	ec 5d       	subi	r30, 0xDC	; 220
    2784:	fe 4f       	sbci	r31, 0xFE	; 254
    2786:	40 81       	ld	r20, Z
    2788:	51 81       	ldd	r21, Z+1	; 0x01
    278a:	62 81       	ldd	r22, Z+2	; 0x02
    278c:	73 81       	ldd	r23, Z+3	; 0x03
    278e:	04 e1       	ldi	r16, 0x14	; 20
    2790:	10 e0       	ldi	r17, 0x00	; 0
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    279a:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(rearRightLeg.tibiaJoint, actuatorPositions_g[rearRightLeg.tibiaJoint][currentPos_g],20);
    279e:	80 91 06 01 	lds	r24, 0x0106
    27a2:	90 91 07 01 	lds	r25, 0x0107
    27a6:	c8 9f       	mul	r28, r24
    27a8:	f0 01       	movw	r30, r0
    27aa:	c9 9f       	mul	r28, r25
    27ac:	f0 0d       	add	r31, r0
    27ae:	11 24       	eor	r1, r1
    27b0:	20 91 22 01 	lds	r18, 0x0122
    27b4:	30 91 23 01 	lds	r19, 0x0123
    27b8:	e2 0f       	add	r30, r18
    27ba:	f3 1f       	adc	r31, r19
    27bc:	ee 0f       	add	r30, r30
    27be:	ff 1f       	adc	r31, r31
    27c0:	ee 0f       	add	r30, r30
    27c2:	ff 1f       	adc	r31, r31
    27c4:	ec 5d       	subi	r30, 0xDC	; 220
    27c6:	fe 4f       	sbci	r31, 0xFE	; 254
    27c8:	40 81       	ld	r20, Z
    27ca:	51 81       	ldd	r21, Z+1	; 0x01
    27cc:	62 81       	ldd	r22, Z+2	; 0x02
    27ce:	73 81       	ldd	r23, Z+3	; 0x03
    27d0:	04 e1       	ldi	r16, 0x14	; 20
    27d2:	10 e0       	ldi	r17, 0x00	; 0
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    27dc:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
    
    MoveDynamixel(rearLeftLeg.coxaJoint, actuatorPositions_g[rearLeftLeg.coxaJoint][currentPos_g],20);
    27e0:	80 91 0a 01 	lds	r24, 0x010A
    27e4:	90 91 0b 01 	lds	r25, 0x010B
    27e8:	c8 9f       	mul	r28, r24
    27ea:	f0 01       	movw	r30, r0
    27ec:	c9 9f       	mul	r28, r25
    27ee:	f0 0d       	add	r31, r0
    27f0:	11 24       	eor	r1, r1
    27f2:	20 91 22 01 	lds	r18, 0x0122
    27f6:	30 91 23 01 	lds	r19, 0x0123
    27fa:	e2 0f       	add	r30, r18
    27fc:	f3 1f       	adc	r31, r19
    27fe:	ee 0f       	add	r30, r30
    2800:	ff 1f       	adc	r31, r31
    2802:	ee 0f       	add	r30, r30
    2804:	ff 1f       	adc	r31, r31
    2806:	ec 5d       	subi	r30, 0xDC	; 220
    2808:	fe 4f       	sbci	r31, 0xFE	; 254
    280a:	40 81       	ld	r20, Z
    280c:	51 81       	ldd	r21, Z+1	; 0x01
    280e:	62 81       	ldd	r22, Z+2	; 0x02
    2810:	73 81       	ldd	r23, Z+3	; 0x03
    2812:	04 e1       	ldi	r16, 0x14	; 20
    2814:	10 e0       	ldi	r17, 0x00	; 0
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    281e:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(rearLeftLeg.femurJoint, actuatorPositions_g[rearLeftLeg.femurJoint][currentPos_g],20);
    2822:	80 91 0c 01 	lds	r24, 0x010C
    2826:	90 91 0d 01 	lds	r25, 0x010D
    282a:	c8 9f       	mul	r28, r24
    282c:	f0 01       	movw	r30, r0
    282e:	c9 9f       	mul	r28, r25
    2830:	f0 0d       	add	r31, r0
    2832:	11 24       	eor	r1, r1
    2834:	20 91 22 01 	lds	r18, 0x0122
    2838:	30 91 23 01 	lds	r19, 0x0123
    283c:	e2 0f       	add	r30, r18
    283e:	f3 1f       	adc	r31, r19
    2840:	ee 0f       	add	r30, r30
    2842:	ff 1f       	adc	r31, r31
    2844:	ee 0f       	add	r30, r30
    2846:	ff 1f       	adc	r31, r31
    2848:	ec 5d       	subi	r30, 0xDC	; 220
    284a:	fe 4f       	sbci	r31, 0xFE	; 254
    284c:	40 81       	ld	r20, Z
    284e:	51 81       	ldd	r21, Z+1	; 0x01
    2850:	62 81       	ldd	r22, Z+2	; 0x02
    2852:	73 81       	ldd	r23, Z+3	; 0x03
    2854:	04 e1       	ldi	r16, 0x14	; 20
    2856:	10 e0       	ldi	r17, 0x00	; 0
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    2860:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
	MoveDynamixel(rearLeftLeg.tibiaJoint, actuatorPositions_g[rearLeftLeg.tibiaJoint][currentPos_g],20);
    2864:	80 91 0e 01 	lds	r24, 0x010E
    2868:	90 91 0f 01 	lds	r25, 0x010F
    286c:	c8 9f       	mul	r28, r24
    286e:	f0 01       	movw	r30, r0
    2870:	c9 9f       	mul	r28, r25
    2872:	f0 0d       	add	r31, r0
    2874:	11 24       	eor	r1, r1
    2876:	20 91 22 01 	lds	r18, 0x0122
    287a:	30 91 23 01 	lds	r19, 0x0123
    287e:	e2 0f       	add	r30, r18
    2880:	f3 1f       	adc	r31, r19
    2882:	ee 0f       	add	r30, r30
    2884:	ff 1f       	adc	r31, r31
    2886:	ee 0f       	add	r30, r30
    2888:	ff 1f       	adc	r31, r31
    288a:	ec 5d       	subi	r30, 0xDC	; 220
    288c:	fe 4f       	sbci	r31, 0xFE	; 254
    288e:	40 81       	ld	r20, Z
    2890:	51 81       	ldd	r21, Z+1	; 0x01
    2892:	62 81       	ldd	r22, Z+2	; 0x02
    2894:	73 81       	ldd	r23, Z+3	; 0x03
    2896:	04 e1       	ldi	r16, 0x14	; 20
    2898:	10 e0       	ldi	r17, 0x00	; 0
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	0e 94 3a 01 	call	0x274	; 0x274 <MoveDynamixel>
	USARTReadStatusPacket();
    28a2:	0e 94 0d 01 	call	0x21a	; 0x21a <USARTReadStatusPacket>
   
   
   
   
   
	if (currentPos_g > 8)
    28a6:	80 91 22 01 	lds	r24, 0x0122
    28aa:	90 91 23 01 	lds	r25, 0x0123
    28ae:	09 97       	sbiw	r24, 0x09	; 9
    28b0:	0c f4       	brge	.+2      	; 0x28b4 <move+0x348>
    28b2:	c5 c1       	rjmp	.+906    	; 0x2c3e <move+0x6d2>
    {
        currentPos_g = 0;
    28b4:	10 92 23 01 	sts	0x0123, r1
    28b8:	10 92 22 01 	sts	0x0122, r1
        switch (Direction)
    28bc:	80 91 20 01 	lds	r24, 0x0120
    28c0:	90 91 21 01 	lds	r25, 0x0121
    28c4:	00 97       	sbiw	r24, 0x00	; 0
    28c6:	21 f0       	breq	.+8      	; 0x28d0 <move+0x364>
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	09 f4       	brne	.+2      	; 0x28ce <move+0x362>
    28cc:	de c0       	rjmp	.+444    	; 0x2a8a <move+0x51e>
    28ce:	b7 c1       	rjmp	.+878    	; 0x2c3e <move+0x6d2>
        {
            case 0:
            {
                CalcCurvedPath(frontLeftLeg,10,-160,0,-50,-160,140,-50);
    28d0:	d2 ec       	ldi	r29, 0xC2	; 194
    28d2:	df 93       	push	r29
    28d4:	c8 e4       	ldi	r28, 0x48	; 72
    28d6:	cf 93       	push	r28
    28d8:	1f 92       	push	r1
    28da:	1f 92       	push	r1
    28dc:	0f 2e       	mov	r0, r31
    28de:	f3 e4       	ldi	r31, 0x43	; 67
    28e0:	6f 2e       	mov	r6, r31
    28e2:	f0 2d       	mov	r31, r0
    28e4:	6f 92       	push	r6
    28e6:	0f 2e       	mov	r0, r31
    28e8:	fc e0       	ldi	r31, 0x0C	; 12
    28ea:	4f 2e       	mov	r4, r31
    28ec:	f0 2d       	mov	r31, r0
    28ee:	4f 92       	push	r4
    28f0:	1f 92       	push	r1
    28f2:	1f 92       	push	r1
    28f4:	0f 2e       	mov	r0, r31
    28f6:	f3 ec       	ldi	r31, 0xC3	; 195
    28f8:	5f 2e       	mov	r5, r31
    28fa:	f0 2d       	mov	r31, r0
    28fc:	5f 92       	push	r5
    28fe:	68 94       	set
    2900:	77 24       	eor	r7, r7
    2902:	75 f8       	bld	r7, 5
    2904:	7f 92       	push	r7
    2906:	1f 92       	push	r1
    2908:	1f 92       	push	r1
    290a:	df 93       	push	r29
    290c:	cf 93       	push	r28
    290e:	1f 92       	push	r1
    2910:	1f 92       	push	r1
    2912:	81 2c       	mov	r8, r1
    2914:	91 2c       	mov	r9, r1
    2916:	54 01       	movw	r10, r8
    2918:	0f 2e       	mov	r0, r31
    291a:	c1 2c       	mov	r12, r1
    291c:	d1 2c       	mov	r13, r1
    291e:	f0 e2       	ldi	r31, 0x20	; 32
    2920:	ef 2e       	mov	r14, r31
    2922:	f3 ec       	ldi	r31, 0xC3	; 195
    2924:	ff 2e       	mov	r15, r31
    2926:	f0 2d       	mov	r31, r0
    2928:	0a e0       	ldi	r16, 0x0A	; 10
    292a:	10 e0       	ldi	r17, 0x00	; 0
    292c:	20 91 18 01 	lds	r18, 0x0118
    2930:	30 91 19 01 	lds	r19, 0x0119
    2934:	40 91 1a 01 	lds	r20, 0x011A
    2938:	50 91 1b 01 	lds	r21, 0x011B
    293c:	60 91 1c 01 	lds	r22, 0x011C
    2940:	70 91 1d 01 	lds	r23, 0x011D
    2944:	80 91 1e 01 	lds	r24, 0x011E
    2948:	90 91 1f 01 	lds	r25, 0x011F
    294c:	0e 94 9f 09 	call	0x133e	; 0x133e <CalcCurvedPath>
                CalcCurvedPath(frontRightLeg,10,160,0,-50,160,140,-50);
    2950:	df 93       	push	r29
    2952:	cf 93       	push	r28
    2954:	1f 92       	push	r1
    2956:	1f 92       	push	r1
    2958:	6f 92       	push	r6
    295a:	4f 92       	push	r4
    295c:	1f 92       	push	r1
    295e:	1f 92       	push	r1
    2960:	6f 92       	push	r6
    2962:	7f 92       	push	r7
    2964:	1f 92       	push	r1
    2966:	1f 92       	push	r1
    2968:	df 93       	push	r29
    296a:	cf 93       	push	r28
    296c:	1f 92       	push	r1
    296e:	1f 92       	push	r1
    2970:	0f 2e       	mov	r0, r31
    2972:	c1 2c       	mov	r12, r1
    2974:	d1 2c       	mov	r13, r1
    2976:	f0 e2       	ldi	r31, 0x20	; 32
    2978:	ef 2e       	mov	r14, r31
    297a:	f3 e4       	ldi	r31, 0x43	; 67
    297c:	ff 2e       	mov	r15, r31
    297e:	f0 2d       	mov	r31, r0
    2980:	20 91 10 01 	lds	r18, 0x0110
    2984:	30 91 11 01 	lds	r19, 0x0111
    2988:	40 91 12 01 	lds	r20, 0x0112
    298c:	50 91 13 01 	lds	r21, 0x0113
    2990:	60 91 14 01 	lds	r22, 0x0114
    2994:	70 91 15 01 	lds	r23, 0x0115
    2998:	80 91 16 01 	lds	r24, 0x0116
    299c:	90 91 17 01 	lds	r25, 0x0117
    29a0:	0e 94 9f 09 	call	0x133e	; 0x133e <CalcCurvedPath>
                CalcCurvedPath(rearLeftLeg,10,-160,-140,-50,-160,0,-50);
    29a4:	8d b7       	in	r24, 0x3d	; 61
    29a6:	9e b7       	in	r25, 0x3e	; 62
    29a8:	80 96       	adiw	r24, 0x20	; 32
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	f8 94       	cli
    29ae:	9e bf       	out	0x3e, r25	; 62
    29b0:	0f be       	out	0x3f, r0	; 63
    29b2:	8d bf       	out	0x3d, r24	; 61
    29b4:	df 93       	push	r29
    29b6:	cf 93       	push	r28
    29b8:	1f 92       	push	r1
    29ba:	1f 92       	push	r1
    29bc:	1f 92       	push	r1
    29be:	1f 92       	push	r1
    29c0:	1f 92       	push	r1
    29c2:	1f 92       	push	r1
    29c4:	5f 92       	push	r5
    29c6:	7f 92       	push	r7
    29c8:	1f 92       	push	r1
    29ca:	1f 92       	push	r1
    29cc:	df 93       	push	r29
    29ce:	cf 93       	push	r28
    29d0:	1f 92       	push	r1
    29d2:	1f 92       	push	r1
    29d4:	0f 2e       	mov	r0, r31
    29d6:	81 2c       	mov	r8, r1
    29d8:	91 2c       	mov	r9, r1
    29da:	fc e0       	ldi	r31, 0x0C	; 12
    29dc:	af 2e       	mov	r10, r31
    29de:	f3 ec       	ldi	r31, 0xC3	; 195
    29e0:	bf 2e       	mov	r11, r31
    29e2:	f0 2d       	mov	r31, r0
    29e4:	0f 2e       	mov	r0, r31
    29e6:	c1 2c       	mov	r12, r1
    29e8:	d1 2c       	mov	r13, r1
    29ea:	f0 e2       	ldi	r31, 0x20	; 32
    29ec:	ef 2e       	mov	r14, r31
    29ee:	f3 ec       	ldi	r31, 0xC3	; 195
    29f0:	ff 2e       	mov	r15, r31
    29f2:	f0 2d       	mov	r31, r0
    29f4:	20 91 08 01 	lds	r18, 0x0108
    29f8:	30 91 09 01 	lds	r19, 0x0109
    29fc:	40 91 0a 01 	lds	r20, 0x010A
    2a00:	50 91 0b 01 	lds	r21, 0x010B
    2a04:	60 91 0c 01 	lds	r22, 0x010C
    2a08:	70 91 0d 01 	lds	r23, 0x010D
    2a0c:	80 91 0e 01 	lds	r24, 0x010E
    2a10:	90 91 0f 01 	lds	r25, 0x010F
    2a14:	0e 94 9f 09 	call	0x133e	; 0x133e <CalcCurvedPath>
                CalcCurvedPath(rearRightLeg,10,160,-140,-50,160,0,-50);
    2a18:	df 93       	push	r29
    2a1a:	cf 93       	push	r28
    2a1c:	1f 92       	push	r1
    2a1e:	1f 92       	push	r1
    2a20:	1f 92       	push	r1
    2a22:	1f 92       	push	r1
    2a24:	1f 92       	push	r1
    2a26:	1f 92       	push	r1
    2a28:	6f 92       	push	r6
    2a2a:	7f 92       	push	r7
    2a2c:	1f 92       	push	r1
    2a2e:	1f 92       	push	r1
    2a30:	df 93       	push	r29
    2a32:	cf 93       	push	r28
    2a34:	1f 92       	push	r1
    2a36:	1f 92       	push	r1
    2a38:	0f 2e       	mov	r0, r31
    2a3a:	c1 2c       	mov	r12, r1
    2a3c:	d1 2c       	mov	r13, r1
    2a3e:	f0 e2       	ldi	r31, 0x20	; 32
    2a40:	ef 2e       	mov	r14, r31
    2a42:	f3 e4       	ldi	r31, 0x43	; 67
    2a44:	ff 2e       	mov	r15, r31
    2a46:	f0 2d       	mov	r31, r0
    2a48:	20 91 00 01 	lds	r18, 0x0100
    2a4c:	30 91 01 01 	lds	r19, 0x0101
    2a50:	40 91 02 01 	lds	r20, 0x0102
    2a54:	50 91 03 01 	lds	r21, 0x0103
    2a58:	60 91 04 01 	lds	r22, 0x0104
    2a5c:	70 91 05 01 	lds	r23, 0x0105
    2a60:	80 91 06 01 	lds	r24, 0x0106
    2a64:	90 91 07 01 	lds	r25, 0x0107
    2a68:	0e 94 9f 09 	call	0x133e	; 0x133e <CalcCurvedPath>
                
                Direction = 1;
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	90 93 21 01 	sts	0x0121, r25
    2a74:	80 93 20 01 	sts	0x0120, r24
                break;
    2a78:	8d b7       	in	r24, 0x3d	; 61
    2a7a:	9e b7       	in	r25, 0x3e	; 62
    2a7c:	80 96       	adiw	r24, 0x20	; 32
    2a7e:	0f b6       	in	r0, 0x3f	; 63
    2a80:	f8 94       	cli
    2a82:	9e bf       	out	0x3e, r25	; 62
    2a84:	0f be       	out	0x3f, r0	; 63
    2a86:	8d bf       	out	0x3d, r24	; 61
    2a88:	da c0       	rjmp	.+436    	; 0x2c3e <move+0x6d2>
            }            
            case 1:
            {
                CalcStraightPath(frontLeftLeg,10,-160,140,-50,-160,0,-50);
    2a8a:	d2 ec       	ldi	r29, 0xC2	; 194
    2a8c:	df 93       	push	r29
    2a8e:	c8 e4       	ldi	r28, 0x48	; 72
    2a90:	cf 93       	push	r28
    2a92:	1f 92       	push	r1
    2a94:	1f 92       	push	r1
    2a96:	1f 92       	push	r1
    2a98:	1f 92       	push	r1
    2a9a:	1f 92       	push	r1
    2a9c:	1f 92       	push	r1
    2a9e:	0f 2e       	mov	r0, r31
    2aa0:	f3 ec       	ldi	r31, 0xC3	; 195
    2aa2:	6f 2e       	mov	r6, r31
    2aa4:	f0 2d       	mov	r31, r0
    2aa6:	6f 92       	push	r6
    2aa8:	68 94       	set
    2aaa:	77 24       	eor	r7, r7
    2aac:	75 f8       	bld	r7, 5
    2aae:	7f 92       	push	r7
    2ab0:	1f 92       	push	r1
    2ab2:	1f 92       	push	r1
    2ab4:	df 93       	push	r29
    2ab6:	cf 93       	push	r28
    2ab8:	1f 92       	push	r1
    2aba:	1f 92       	push	r1
    2abc:	0f 2e       	mov	r0, r31
    2abe:	81 2c       	mov	r8, r1
    2ac0:	91 2c       	mov	r9, r1
    2ac2:	fc e0       	ldi	r31, 0x0C	; 12
    2ac4:	af 2e       	mov	r10, r31
    2ac6:	f3 e4       	ldi	r31, 0x43	; 67
    2ac8:	bf 2e       	mov	r11, r31
    2aca:	f0 2d       	mov	r31, r0
    2acc:	0f 2e       	mov	r0, r31
    2ace:	c1 2c       	mov	r12, r1
    2ad0:	d1 2c       	mov	r13, r1
    2ad2:	f0 e2       	ldi	r31, 0x20	; 32
    2ad4:	ef 2e       	mov	r14, r31
    2ad6:	f3 ec       	ldi	r31, 0xC3	; 195
    2ad8:	ff 2e       	mov	r15, r31
    2ada:	f0 2d       	mov	r31, r0
    2adc:	0a e0       	ldi	r16, 0x0A	; 10
    2ade:	10 e0       	ldi	r17, 0x00	; 0
    2ae0:	20 91 18 01 	lds	r18, 0x0118
    2ae4:	30 91 19 01 	lds	r19, 0x0119
    2ae8:	40 91 1a 01 	lds	r20, 0x011A
    2aec:	50 91 1b 01 	lds	r21, 0x011B
    2af0:	60 91 1c 01 	lds	r22, 0x011C
    2af4:	70 91 1d 01 	lds	r23, 0x011D
    2af8:	80 91 1e 01 	lds	r24, 0x011E
    2afc:	90 91 1f 01 	lds	r25, 0x011F
    2b00:	0e 94 ca 06 	call	0xd94	; 0xd94 <CalcStraightPath>
                CalcStraightPath(frontRightLeg,10,160,140,-50,160,0,-50);
    2b04:	df 93       	push	r29
    2b06:	cf 93       	push	r28
    2b08:	1f 92       	push	r1
    2b0a:	1f 92       	push	r1
    2b0c:	1f 92       	push	r1
    2b0e:	1f 92       	push	r1
    2b10:	1f 92       	push	r1
    2b12:	1f 92       	push	r1
    2b14:	0f 2e       	mov	r0, r31
    2b16:	f3 e4       	ldi	r31, 0x43	; 67
    2b18:	5f 2e       	mov	r5, r31
    2b1a:	f0 2d       	mov	r31, r0
    2b1c:	5f 92       	push	r5
    2b1e:	7f 92       	push	r7
    2b20:	1f 92       	push	r1
    2b22:	1f 92       	push	r1
    2b24:	df 93       	push	r29
    2b26:	cf 93       	push	r28
    2b28:	1f 92       	push	r1
    2b2a:	1f 92       	push	r1
    2b2c:	0f 2e       	mov	r0, r31
    2b2e:	c1 2c       	mov	r12, r1
    2b30:	d1 2c       	mov	r13, r1
    2b32:	f0 e2       	ldi	r31, 0x20	; 32
    2b34:	ef 2e       	mov	r14, r31
    2b36:	f3 e4       	ldi	r31, 0x43	; 67
    2b38:	ff 2e       	mov	r15, r31
    2b3a:	f0 2d       	mov	r31, r0
    2b3c:	20 91 10 01 	lds	r18, 0x0110
    2b40:	30 91 11 01 	lds	r19, 0x0111
    2b44:	40 91 12 01 	lds	r20, 0x0112
    2b48:	50 91 13 01 	lds	r21, 0x0113
    2b4c:	60 91 14 01 	lds	r22, 0x0114
    2b50:	70 91 15 01 	lds	r23, 0x0115
    2b54:	80 91 16 01 	lds	r24, 0x0116
    2b58:	90 91 17 01 	lds	r25, 0x0117
    2b5c:	0e 94 ca 06 	call	0xd94	; 0xd94 <CalcStraightPath>
                CalcStraightPath(rearLeftLeg,10,-160,0,-50,-160,-140,-50);
    2b60:	8d b7       	in	r24, 0x3d	; 61
    2b62:	9e b7       	in	r25, 0x3e	; 62
    2b64:	80 96       	adiw	r24, 0x20	; 32
    2b66:	0f b6       	in	r0, 0x3f	; 63
    2b68:	f8 94       	cli
    2b6a:	9e bf       	out	0x3e, r25	; 62
    2b6c:	0f be       	out	0x3f, r0	; 63
    2b6e:	8d bf       	out	0x3d, r24	; 61
    2b70:	df 93       	push	r29
    2b72:	cf 93       	push	r28
    2b74:	1f 92       	push	r1
    2b76:	1f 92       	push	r1
    2b78:	6f 92       	push	r6
    2b7a:	0f 2e       	mov	r0, r31
    2b7c:	fc e0       	ldi	r31, 0x0C	; 12
    2b7e:	4f 2e       	mov	r4, r31
    2b80:	f0 2d       	mov	r31, r0
    2b82:	4f 92       	push	r4
    2b84:	1f 92       	push	r1
    2b86:	1f 92       	push	r1
    2b88:	6f 92       	push	r6
    2b8a:	7f 92       	push	r7
    2b8c:	1f 92       	push	r1
    2b8e:	1f 92       	push	r1
    2b90:	df 93       	push	r29
    2b92:	cf 93       	push	r28
    2b94:	1f 92       	push	r1
    2b96:	1f 92       	push	r1
    2b98:	81 2c       	mov	r8, r1
    2b9a:	91 2c       	mov	r9, r1
    2b9c:	54 01       	movw	r10, r8
    2b9e:	0f 2e       	mov	r0, r31
    2ba0:	c1 2c       	mov	r12, r1
    2ba2:	d1 2c       	mov	r13, r1
    2ba4:	f0 e2       	ldi	r31, 0x20	; 32
    2ba6:	ef 2e       	mov	r14, r31
    2ba8:	f3 ec       	ldi	r31, 0xC3	; 195
    2baa:	ff 2e       	mov	r15, r31
    2bac:	f0 2d       	mov	r31, r0
    2bae:	20 91 08 01 	lds	r18, 0x0108
    2bb2:	30 91 09 01 	lds	r19, 0x0109
    2bb6:	40 91 0a 01 	lds	r20, 0x010A
    2bba:	50 91 0b 01 	lds	r21, 0x010B
    2bbe:	60 91 0c 01 	lds	r22, 0x010C
    2bc2:	70 91 0d 01 	lds	r23, 0x010D
    2bc6:	80 91 0e 01 	lds	r24, 0x010E
    2bca:	90 91 0f 01 	lds	r25, 0x010F
    2bce:	0e 94 ca 06 	call	0xd94	; 0xd94 <CalcStraightPath>
                CalcStraightPath(rearRightLeg,10,160,0,-50,160,-140,-50);
    2bd2:	df 93       	push	r29
    2bd4:	cf 93       	push	r28
    2bd6:	1f 92       	push	r1
    2bd8:	1f 92       	push	r1
    2bda:	6f 92       	push	r6
    2bdc:	4f 92       	push	r4
    2bde:	1f 92       	push	r1
    2be0:	1f 92       	push	r1
    2be2:	5f 92       	push	r5
    2be4:	7f 92       	push	r7
    2be6:	1f 92       	push	r1
    2be8:	1f 92       	push	r1
    2bea:	df 93       	push	r29
    2bec:	cf 93       	push	r28
    2bee:	1f 92       	push	r1
    2bf0:	1f 92       	push	r1
    2bf2:	0f 2e       	mov	r0, r31
    2bf4:	c1 2c       	mov	r12, r1
    2bf6:	d1 2c       	mov	r13, r1
    2bf8:	f0 e2       	ldi	r31, 0x20	; 32
    2bfa:	ef 2e       	mov	r14, r31
    2bfc:	f3 e4       	ldi	r31, 0x43	; 67
    2bfe:	ff 2e       	mov	r15, r31
    2c00:	f0 2d       	mov	r31, r0
    2c02:	20 91 00 01 	lds	r18, 0x0100
    2c06:	30 91 01 01 	lds	r19, 0x0101
    2c0a:	40 91 02 01 	lds	r20, 0x0102
    2c0e:	50 91 03 01 	lds	r21, 0x0103
    2c12:	60 91 04 01 	lds	r22, 0x0104
    2c16:	70 91 05 01 	lds	r23, 0x0105
    2c1a:	80 91 06 01 	lds	r24, 0x0106
    2c1e:	90 91 07 01 	lds	r25, 0x0107
    2c22:	0e 94 ca 06 	call	0xd94	; 0xd94 <CalcStraightPath>
                Direction = 0;
    2c26:	10 92 21 01 	sts	0x0121, r1
    2c2a:	10 92 20 01 	sts	0x0120, r1
                break;
    2c2e:	8d b7       	in	r24, 0x3d	; 61
    2c30:	9e b7       	in	r25, 0x3e	; 62
    2c32:	80 96       	adiw	r24, 0x20	; 32
    2c34:	0f b6       	in	r0, 0x3f	; 63
    2c36:	f8 94       	cli
    2c38:	9e bf       	out	0x3e, r25	; 62
    2c3a:	0f be       	out	0x3f, r0	; 63
    2c3c:	8d bf       	out	0x3d, r24	; 61
            }
        }
        
    }
    currentPos_g++;
    2c3e:	80 91 22 01 	lds	r24, 0x0122
    2c42:	90 91 23 01 	lds	r25, 0x0123
    2c46:	01 96       	adiw	r24, 0x01	; 1
    2c48:	90 93 23 01 	sts	0x0123, r25
    2c4c:	80 93 22 01 	sts	0x0122, r24
    return;
}
    2c50:	df 91       	pop	r29
    2c52:	cf 91       	pop	r28
    2c54:	1f 91       	pop	r17
    2c56:	0f 91       	pop	r16
    2c58:	ff 90       	pop	r15
    2c5a:	ef 90       	pop	r14
    2c5c:	df 90       	pop	r13
    2c5e:	cf 90       	pop	r12
    2c60:	bf 90       	pop	r11
    2c62:	af 90       	pop	r10
    2c64:	9f 90       	pop	r9
    2c66:	8f 90       	pop	r8
    2c68:	7f 90       	pop	r7
    2c6a:	6f 90       	pop	r6
    2c6c:	5f 90       	pop	r5
    2c6e:	4f 90       	pop	r4
    2c70:	08 95       	ret

00002c72 <main>:

int main(void)
{
	initUSART();
    2c72:	0e 94 af 00 	call	0x15e	; 0x15e <initUSART>
	cli();
    2c76:	f8 94       	cli
	EICRA = 0b1100; // Stigande flank på INT1 genererar avbrott
    2c78:	8c e0       	ldi	r24, 0x0C	; 12
    2c7a:	80 93 69 00 	sts	0x0069, r24
	EIMSK = (EIMSK | 2); // Möjliggör externa avbrott på INT0, pinne 40  
    2c7e:	e9 9a       	sbi	0x1d, 1	; 29
	DDRA = 0;
    2c80:	11 b8       	out	0x01, r1	; 1
	// MCUCR = (MCUCR | (1 << PUD)); Något som testades för att se om det gjorde något
	//PORTA |= (1 << PORTA0);
	 // Möjliggör globala avbrott
	sei();
    2c82:	78 94       	sei
	MoveDynamixel(3,225 - 45, 10);
	USARTReadStatusPacket();
	MoveDynamixel(5,120 - 45 ,10);
	USARTReadStatusPacket();
	*/
    timer0Init();
    2c84:	0e 94 91 00 	call	0x122	; 0x122 <timer0Init>
    
    MoveFrontRightLeg(160,140,-50,10);
    2c88:	0f 2e       	mov	r0, r31
    2c8a:	fa e0       	ldi	r31, 0x0A	; 10
    2c8c:	cf 2e       	mov	r12, r31
    2c8e:	d1 2c       	mov	r13, r1
    2c90:	f0 2d       	mov	r31, r0
    2c92:	e1 2c       	mov	r14, r1
    2c94:	f1 2c       	mov	r15, r1
    2c96:	08 e4       	ldi	r16, 0x48	; 72
    2c98:	12 ec       	ldi	r17, 0xC2	; 194
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	4c e0       	ldi	r20, 0x0C	; 12
    2ca0:	53 e4       	ldi	r21, 0x43	; 67
    2ca2:	60 e0       	ldi	r22, 0x00	; 0
    2ca4:	70 e0       	ldi	r23, 0x00	; 0
    2ca6:	80 e2       	ldi	r24, 0x20	; 32
    2ca8:	93 e4       	ldi	r25, 0x43	; 67
    2caa:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <MoveFrontRightLeg>
	MoveFrontLeftLeg(-160,140,-50,10);
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	4c e0       	ldi	r20, 0x0C	; 12
    2cb4:	53 e4       	ldi	r21, 0x43	; 67
    2cb6:	60 e0       	ldi	r22, 0x00	; 0
    2cb8:	70 e0       	ldi	r23, 0x00	; 0
    2cba:	80 e2       	ldi	r24, 0x20	; 32
    2cbc:	93 ec       	ldi	r25, 0xC3	; 195
    2cbe:	0e 94 a0 01 	call	0x340	; 0x340 <MoveFrontLeftLeg>
	MoveRearLeftLeg(-160,0,-50,10);
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	a9 01       	movw	r20, r18
    2cc8:	60 e0       	ldi	r22, 0x00	; 0
    2cca:	70 e0       	ldi	r23, 0x00	; 0
    2ccc:	80 e2       	ldi	r24, 0x20	; 32
    2cce:	93 ec       	ldi	r25, 0xC3	; 195
    2cd0:	0e 94 22 04 	call	0x844	; 0x844 <MoveRearLeftLeg>
	MoveRearRightLeg(160,0,-50,10);
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	a9 01       	movw	r20, r18
    2cda:	60 e0       	ldi	r22, 0x00	; 0
    2cdc:	70 e0       	ldi	r23, 0x00	; 0
    2cde:	80 e2       	ldi	r24, 0x20	; 32
    2ce0:	93 e4       	ldi	r25, 0x43	; 67
    2ce2:	0e 94 76 05 	call	0xaec	; 0xaec <MoveRearRightLeg>
    
	CalcStraightPath(frontLeftLeg,10,-160,140,-50,-160,0,-50);
    2ce6:	d2 ec       	ldi	r29, 0xC2	; 194
    2ce8:	df 93       	push	r29
    2cea:	c8 e4       	ldi	r28, 0x48	; 72
    2cec:	cf 93       	push	r28
    2cee:	1f 92       	push	r1
    2cf0:	1f 92       	push	r1
    2cf2:	1f 92       	push	r1
    2cf4:	1f 92       	push	r1
    2cf6:	1f 92       	push	r1
    2cf8:	1f 92       	push	r1
    2cfa:	0f 2e       	mov	r0, r31
    2cfc:	f3 ec       	ldi	r31, 0xC3	; 195
    2cfe:	6f 2e       	mov	r6, r31
    2d00:	f0 2d       	mov	r31, r0
    2d02:	6f 92       	push	r6
    2d04:	68 94       	set
    2d06:	77 24       	eor	r7, r7
    2d08:	75 f8       	bld	r7, 5
    2d0a:	7f 92       	push	r7
    2d0c:	1f 92       	push	r1
    2d0e:	1f 92       	push	r1
    2d10:	df 93       	push	r29
    2d12:	cf 93       	push	r28
    2d14:	1f 92       	push	r1
    2d16:	1f 92       	push	r1
    2d18:	0f 2e       	mov	r0, r31
    2d1a:	81 2c       	mov	r8, r1
    2d1c:	91 2c       	mov	r9, r1
    2d1e:	fc e0       	ldi	r31, 0x0C	; 12
    2d20:	af 2e       	mov	r10, r31
    2d22:	f3 e4       	ldi	r31, 0x43	; 67
    2d24:	bf 2e       	mov	r11, r31
    2d26:	f0 2d       	mov	r31, r0
    2d28:	0f 2e       	mov	r0, r31
    2d2a:	c1 2c       	mov	r12, r1
    2d2c:	d1 2c       	mov	r13, r1
    2d2e:	f0 e2       	ldi	r31, 0x20	; 32
    2d30:	ef 2e       	mov	r14, r31
    2d32:	f3 ec       	ldi	r31, 0xC3	; 195
    2d34:	ff 2e       	mov	r15, r31
    2d36:	f0 2d       	mov	r31, r0
    2d38:	0a e0       	ldi	r16, 0x0A	; 10
    2d3a:	10 e0       	ldi	r17, 0x00	; 0
    2d3c:	20 91 18 01 	lds	r18, 0x0118
    2d40:	30 91 19 01 	lds	r19, 0x0119
    2d44:	40 91 1a 01 	lds	r20, 0x011A
    2d48:	50 91 1b 01 	lds	r21, 0x011B
    2d4c:	60 91 1c 01 	lds	r22, 0x011C
    2d50:	70 91 1d 01 	lds	r23, 0x011D
    2d54:	80 91 1e 01 	lds	r24, 0x011E
    2d58:	90 91 1f 01 	lds	r25, 0x011F
    2d5c:	0e 94 ca 06 	call	0xd94	; 0xd94 <CalcStraightPath>
    CalcStraightPath(frontRightLeg,10,160,120,-50,160,0,-50);
    2d60:	df 93       	push	r29
    2d62:	cf 93       	push	r28
    2d64:	1f 92       	push	r1
    2d66:	1f 92       	push	r1
    2d68:	1f 92       	push	r1
    2d6a:	1f 92       	push	r1
    2d6c:	1f 92       	push	r1
    2d6e:	1f 92       	push	r1
    2d70:	0f 2e       	mov	r0, r31
    2d72:	f3 e4       	ldi	r31, 0x43	; 67
    2d74:	5f 2e       	mov	r5, r31
    2d76:	f0 2d       	mov	r31, r0
    2d78:	5f 92       	push	r5
    2d7a:	7f 92       	push	r7
    2d7c:	1f 92       	push	r1
    2d7e:	1f 92       	push	r1
    2d80:	df 93       	push	r29
    2d82:	cf 93       	push	r28
    2d84:	1f 92       	push	r1
    2d86:	1f 92       	push	r1
    2d88:	0f 2e       	mov	r0, r31
    2d8a:	81 2c       	mov	r8, r1
    2d8c:	91 2c       	mov	r9, r1
    2d8e:	f0 ef       	ldi	r31, 0xF0	; 240
    2d90:	af 2e       	mov	r10, r31
    2d92:	f2 e4       	ldi	r31, 0x42	; 66
    2d94:	bf 2e       	mov	r11, r31
    2d96:	f0 2d       	mov	r31, r0
    2d98:	0f 2e       	mov	r0, r31
    2d9a:	c1 2c       	mov	r12, r1
    2d9c:	d1 2c       	mov	r13, r1
    2d9e:	f0 e2       	ldi	r31, 0x20	; 32
    2da0:	ef 2e       	mov	r14, r31
    2da2:	f3 e4       	ldi	r31, 0x43	; 67
    2da4:	ff 2e       	mov	r15, r31
    2da6:	f0 2d       	mov	r31, r0
    2da8:	20 91 10 01 	lds	r18, 0x0110
    2dac:	30 91 11 01 	lds	r19, 0x0111
    2db0:	40 91 12 01 	lds	r20, 0x0112
    2db4:	50 91 13 01 	lds	r21, 0x0113
    2db8:	60 91 14 01 	lds	r22, 0x0114
    2dbc:	70 91 15 01 	lds	r23, 0x0115
    2dc0:	80 91 16 01 	lds	r24, 0x0116
    2dc4:	90 91 17 01 	lds	r25, 0x0117
    2dc8:	0e 94 ca 06 	call	0xd94	; 0xd94 <CalcStraightPath>
    CalcStraightPath(rearLeftLeg,10,-160,0,-50,-160,-140,-50);
    2dcc:	8d b7       	in	r24, 0x3d	; 61
    2dce:	9e b7       	in	r25, 0x3e	; 62
    2dd0:	80 96       	adiw	r24, 0x20	; 32
    2dd2:	0f b6       	in	r0, 0x3f	; 63
    2dd4:	f8 94       	cli
    2dd6:	9e bf       	out	0x3e, r25	; 62
    2dd8:	0f be       	out	0x3f, r0	; 63
    2dda:	8d bf       	out	0x3d, r24	; 61
    2ddc:	df 93       	push	r29
    2dde:	cf 93       	push	r28
    2de0:	1f 92       	push	r1
    2de2:	1f 92       	push	r1
    2de4:	6f 92       	push	r6
    2de6:	0f 2e       	mov	r0, r31
    2de8:	fc e0       	ldi	r31, 0x0C	; 12
    2dea:	4f 2e       	mov	r4, r31
    2dec:	f0 2d       	mov	r31, r0
    2dee:	4f 92       	push	r4
    2df0:	1f 92       	push	r1
    2df2:	1f 92       	push	r1
    2df4:	6f 92       	push	r6
    2df6:	7f 92       	push	r7
    2df8:	1f 92       	push	r1
    2dfa:	1f 92       	push	r1
    2dfc:	df 93       	push	r29
    2dfe:	cf 93       	push	r28
    2e00:	1f 92       	push	r1
    2e02:	1f 92       	push	r1
    2e04:	81 2c       	mov	r8, r1
    2e06:	91 2c       	mov	r9, r1
    2e08:	54 01       	movw	r10, r8
    2e0a:	0f 2e       	mov	r0, r31
    2e0c:	c1 2c       	mov	r12, r1
    2e0e:	d1 2c       	mov	r13, r1
    2e10:	f0 e2       	ldi	r31, 0x20	; 32
    2e12:	ef 2e       	mov	r14, r31
    2e14:	f3 ec       	ldi	r31, 0xC3	; 195
    2e16:	ff 2e       	mov	r15, r31
    2e18:	f0 2d       	mov	r31, r0
    2e1a:	20 91 08 01 	lds	r18, 0x0108
    2e1e:	30 91 09 01 	lds	r19, 0x0109
    2e22:	40 91 0a 01 	lds	r20, 0x010A
    2e26:	50 91 0b 01 	lds	r21, 0x010B
    2e2a:	60 91 0c 01 	lds	r22, 0x010C
    2e2e:	70 91 0d 01 	lds	r23, 0x010D
    2e32:	80 91 0e 01 	lds	r24, 0x010E
    2e36:	90 91 0f 01 	lds	r25, 0x010F
    2e3a:	0e 94 ca 06 	call	0xd94	; 0xd94 <CalcStraightPath>
    CalcStraightPath(rearRightLeg,10,160,0,-50,160,-140,-50);
    2e3e:	df 93       	push	r29
    2e40:	cf 93       	push	r28
    2e42:	1f 92       	push	r1
    2e44:	1f 92       	push	r1
    2e46:	6f 92       	push	r6
    2e48:	4f 92       	push	r4
    2e4a:	1f 92       	push	r1
    2e4c:	1f 92       	push	r1
    2e4e:	5f 92       	push	r5
    2e50:	7f 92       	push	r7
    2e52:	1f 92       	push	r1
    2e54:	1f 92       	push	r1
    2e56:	df 93       	push	r29
    2e58:	cf 93       	push	r28
    2e5a:	1f 92       	push	r1
    2e5c:	1f 92       	push	r1
    2e5e:	0f 2e       	mov	r0, r31
    2e60:	c1 2c       	mov	r12, r1
    2e62:	d1 2c       	mov	r13, r1
    2e64:	f0 e2       	ldi	r31, 0x20	; 32
    2e66:	ef 2e       	mov	r14, r31
    2e68:	f3 e4       	ldi	r31, 0x43	; 67
    2e6a:	ff 2e       	mov	r15, r31
    2e6c:	f0 2d       	mov	r31, r0
    2e6e:	20 91 00 01 	lds	r18, 0x0100
    2e72:	30 91 01 01 	lds	r19, 0x0101
    2e76:	40 91 02 01 	lds	r20, 0x0102
    2e7a:	50 91 03 01 	lds	r21, 0x0103
    2e7e:	60 91 04 01 	lds	r22, 0x0104
    2e82:	70 91 05 01 	lds	r23, 0x0105
    2e86:	80 91 06 01 	lds	r24, 0x0106
    2e8a:	90 91 07 01 	lds	r25, 0x0107
    2e8e:	0e 94 ca 06 	call	0xd94	; 0xd94 <CalcStraightPath>
    2e92:	8d b7       	in	r24, 0x3d	; 61
    2e94:	9e b7       	in	r25, 0x3e	; 62
    2e96:	80 96       	adiw	r24, 0x20	; 32
    2e98:	0f b6       	in	r0, 0x3f	; 63
    2e9a:	f8 94       	cli
    2e9c:	9e bf       	out	0x3e, r25	; 62
    2e9e:	0f be       	out	0x3f, r0	; 63
    2ea0:	8d bf       	out	0x3d, r24	; 61
	while(1)
    {
    	// kolla om antalet overflows är mer än 52
    	if (totOverflow_g >= 25)
    2ea2:	80 91 e4 04 	lds	r24, 0x04E4
    2ea6:	89 31       	cpi	r24, 0x19	; 25
    2ea8:	e0 f3       	brcs	.-8      	; 0x2ea2 <main+0x230>
    	{
        	// när detta skett ska timern räkna upp ytterligare 53 tick för att exakt 50ms ska ha passerat
        	if (TCNT0 >= 53)
    2eaa:	86 b5       	in	r24, 0x26	; 38
    2eac:	85 33       	cpi	r24, 0x35	; 53
    2eae:	c8 f3       	brcs	.-14     	; 0x2ea2 <main+0x230>
        	{
            	// xor-tilldelning med en etta gör att biten togglas
            	move();
    2eb0:	5d db       	rcall	.-2374   	; 0x256c <move>
            	TCNT0 = 0;			// Återställ räknaren
    2eb2:	16 bc       	out	0x26, r1	; 38
            	totOverflow_g = 0;
    2eb4:	10 92 e4 04 	sts	0x04E4, r1
    2eb8:	f4 cf       	rjmp	.-24     	; 0x2ea2 <main+0x230>

00002eba <acos>:
    2eba:	9f 93       	push	r25
    2ebc:	9f 77       	andi	r25, 0x7F	; 127
    2ebe:	a8 d1       	rcall	.+848    	; 0x3210 <__fp_arccos>
    2ec0:	0f 90       	pop	r0
    2ec2:	00 20       	and	r0, r0
    2ec4:	3a f4       	brpl	.+14     	; 0x2ed4 <acos+0x1a>
    2ec6:	90 58       	subi	r25, 0x80	; 128
    2ec8:	a2 ea       	ldi	r26, 0xA2	; 162
    2eca:	2a ed       	ldi	r18, 0xDA	; 218
    2ecc:	3f e0       	ldi	r19, 0x0F	; 15
    2ece:	49 e4       	ldi	r20, 0x49	; 73
    2ed0:	50 e4       	ldi	r21, 0x40	; 64
    2ed2:	13 d0       	rcall	.+38     	; 0x2efa <__addsf3x>
    2ed4:	f4 c1       	rjmp	.+1000   	; 0x32be <__fp_round>

00002ed6 <__subsf3>:
    2ed6:	50 58       	subi	r21, 0x80	; 128

00002ed8 <__addsf3>:
    2ed8:	bb 27       	eor	r27, r27
    2eda:	aa 27       	eor	r26, r26
    2edc:	0e d0       	rcall	.+28     	; 0x2efa <__addsf3x>
    2ede:	ef c1       	rjmp	.+990    	; 0x32be <__fp_round>
    2ee0:	e0 d1       	rcall	.+960    	; 0x32a2 <__fp_pscA>
    2ee2:	30 f0       	brcs	.+12     	; 0x2ef0 <__addsf3+0x18>
    2ee4:	e5 d1       	rcall	.+970    	; 0x32b0 <__fp_pscB>
    2ee6:	20 f0       	brcs	.+8      	; 0x2ef0 <__addsf3+0x18>
    2ee8:	31 f4       	brne	.+12     	; 0x2ef6 <__addsf3+0x1e>
    2eea:	9f 3f       	cpi	r25, 0xFF	; 255
    2eec:	11 f4       	brne	.+4      	; 0x2ef2 <__addsf3+0x1a>
    2eee:	1e f4       	brtc	.+6      	; 0x2ef6 <__addsf3+0x1e>
    2ef0:	b0 c1       	rjmp	.+864    	; 0x3252 <__fp_nan>
    2ef2:	0e f4       	brtc	.+2      	; 0x2ef6 <__addsf3+0x1e>
    2ef4:	e0 95       	com	r30
    2ef6:	e7 fb       	bst	r30, 7
    2ef8:	a6 c1       	rjmp	.+844    	; 0x3246 <__fp_inf>

00002efa <__addsf3x>:
    2efa:	e9 2f       	mov	r30, r25
    2efc:	f1 d1       	rcall	.+994    	; 0x32e0 <__fp_split3>
    2efe:	80 f3       	brcs	.-32     	; 0x2ee0 <__addsf3+0x8>
    2f00:	ba 17       	cp	r27, r26
    2f02:	62 07       	cpc	r22, r18
    2f04:	73 07       	cpc	r23, r19
    2f06:	84 07       	cpc	r24, r20
    2f08:	95 07       	cpc	r25, r21
    2f0a:	18 f0       	brcs	.+6      	; 0x2f12 <__addsf3x+0x18>
    2f0c:	71 f4       	brne	.+28     	; 0x2f2a <__addsf3x+0x30>
    2f0e:	9e f5       	brtc	.+102    	; 0x2f76 <__addsf3x+0x7c>
    2f10:	09 c2       	rjmp	.+1042   	; 0x3324 <__fp_zero>
    2f12:	0e f4       	brtc	.+2      	; 0x2f16 <__addsf3x+0x1c>
    2f14:	e0 95       	com	r30
    2f16:	0b 2e       	mov	r0, r27
    2f18:	ba 2f       	mov	r27, r26
    2f1a:	a0 2d       	mov	r26, r0
    2f1c:	0b 01       	movw	r0, r22
    2f1e:	b9 01       	movw	r22, r18
    2f20:	90 01       	movw	r18, r0
    2f22:	0c 01       	movw	r0, r24
    2f24:	ca 01       	movw	r24, r20
    2f26:	a0 01       	movw	r20, r0
    2f28:	11 24       	eor	r1, r1
    2f2a:	ff 27       	eor	r31, r31
    2f2c:	59 1b       	sub	r21, r25
    2f2e:	99 f0       	breq	.+38     	; 0x2f56 <__addsf3x+0x5c>
    2f30:	59 3f       	cpi	r21, 0xF9	; 249
    2f32:	50 f4       	brcc	.+20     	; 0x2f48 <__addsf3x+0x4e>
    2f34:	50 3e       	cpi	r21, 0xE0	; 224
    2f36:	68 f1       	brcs	.+90     	; 0x2f92 <__addsf3x+0x98>
    2f38:	1a 16       	cp	r1, r26
    2f3a:	f0 40       	sbci	r31, 0x00	; 0
    2f3c:	a2 2f       	mov	r26, r18
    2f3e:	23 2f       	mov	r18, r19
    2f40:	34 2f       	mov	r19, r20
    2f42:	44 27       	eor	r20, r20
    2f44:	58 5f       	subi	r21, 0xF8	; 248
    2f46:	f3 cf       	rjmp	.-26     	; 0x2f2e <__addsf3x+0x34>
    2f48:	46 95       	lsr	r20
    2f4a:	37 95       	ror	r19
    2f4c:	27 95       	ror	r18
    2f4e:	a7 95       	ror	r26
    2f50:	f0 40       	sbci	r31, 0x00	; 0
    2f52:	53 95       	inc	r21
    2f54:	c9 f7       	brne	.-14     	; 0x2f48 <__addsf3x+0x4e>
    2f56:	7e f4       	brtc	.+30     	; 0x2f76 <__addsf3x+0x7c>
    2f58:	1f 16       	cp	r1, r31
    2f5a:	ba 0b       	sbc	r27, r26
    2f5c:	62 0b       	sbc	r22, r18
    2f5e:	73 0b       	sbc	r23, r19
    2f60:	84 0b       	sbc	r24, r20
    2f62:	ba f0       	brmi	.+46     	; 0x2f92 <__addsf3x+0x98>
    2f64:	91 50       	subi	r25, 0x01	; 1
    2f66:	a1 f0       	breq	.+40     	; 0x2f90 <__addsf3x+0x96>
    2f68:	ff 0f       	add	r31, r31
    2f6a:	bb 1f       	adc	r27, r27
    2f6c:	66 1f       	adc	r22, r22
    2f6e:	77 1f       	adc	r23, r23
    2f70:	88 1f       	adc	r24, r24
    2f72:	c2 f7       	brpl	.-16     	; 0x2f64 <__addsf3x+0x6a>
    2f74:	0e c0       	rjmp	.+28     	; 0x2f92 <__addsf3x+0x98>
    2f76:	ba 0f       	add	r27, r26
    2f78:	62 1f       	adc	r22, r18
    2f7a:	73 1f       	adc	r23, r19
    2f7c:	84 1f       	adc	r24, r20
    2f7e:	48 f4       	brcc	.+18     	; 0x2f92 <__addsf3x+0x98>
    2f80:	87 95       	ror	r24
    2f82:	77 95       	ror	r23
    2f84:	67 95       	ror	r22
    2f86:	b7 95       	ror	r27
    2f88:	f7 95       	ror	r31
    2f8a:	9e 3f       	cpi	r25, 0xFE	; 254
    2f8c:	08 f0       	brcs	.+2      	; 0x2f90 <__addsf3x+0x96>
    2f8e:	b3 cf       	rjmp	.-154    	; 0x2ef6 <__addsf3+0x1e>
    2f90:	93 95       	inc	r25
    2f92:	88 0f       	add	r24, r24
    2f94:	08 f0       	brcs	.+2      	; 0x2f98 <__addsf3x+0x9e>
    2f96:	99 27       	eor	r25, r25
    2f98:	ee 0f       	add	r30, r30
    2f9a:	97 95       	ror	r25
    2f9c:	87 95       	ror	r24
    2f9e:	08 95       	ret
    2fa0:	80 d1       	rcall	.+768    	; 0x32a2 <__fp_pscA>
    2fa2:	58 f0       	brcs	.+22     	; 0x2fba <__addsf3x+0xc0>
    2fa4:	80 e8       	ldi	r24, 0x80	; 128
    2fa6:	91 e0       	ldi	r25, 0x01	; 1
    2fa8:	09 f4       	brne	.+2      	; 0x2fac <__addsf3x+0xb2>
    2faa:	9e ef       	ldi	r25, 0xFE	; 254
    2fac:	81 d1       	rcall	.+770    	; 0x32b0 <__fp_pscB>
    2fae:	28 f0       	brcs	.+10     	; 0x2fba <__addsf3x+0xc0>
    2fb0:	40 e8       	ldi	r20, 0x80	; 128
    2fb2:	51 e0       	ldi	r21, 0x01	; 1
    2fb4:	59 f4       	brne	.+22     	; 0x2fcc <atan2+0xe>
    2fb6:	5e ef       	ldi	r21, 0xFE	; 254
    2fb8:	09 c0       	rjmp	.+18     	; 0x2fcc <atan2+0xe>
    2fba:	4b c1       	rjmp	.+662    	; 0x3252 <__fp_nan>
    2fbc:	b3 c1       	rjmp	.+870    	; 0x3324 <__fp_zero>

00002fbe <atan2>:
    2fbe:	e9 2f       	mov	r30, r25
    2fc0:	e0 78       	andi	r30, 0x80	; 128
    2fc2:	8e d1       	rcall	.+796    	; 0x32e0 <__fp_split3>
    2fc4:	68 f3       	brcs	.-38     	; 0x2fa0 <__addsf3x+0xa6>
    2fc6:	09 2e       	mov	r0, r25
    2fc8:	05 2a       	or	r0, r21
    2fca:	c1 f3       	breq	.-16     	; 0x2fbc <__addsf3x+0xc2>
    2fcc:	26 17       	cp	r18, r22
    2fce:	37 07       	cpc	r19, r23
    2fd0:	48 07       	cpc	r20, r24
    2fd2:	59 07       	cpc	r21, r25
    2fd4:	38 f0       	brcs	.+14     	; 0x2fe4 <atan2+0x26>
    2fd6:	0e 2e       	mov	r0, r30
    2fd8:	07 f8       	bld	r0, 7
    2fda:	e0 25       	eor	r30, r0
    2fdc:	69 f0       	breq	.+26     	; 0x2ff8 <atan2+0x3a>
    2fde:	e0 25       	eor	r30, r0
    2fe0:	e0 64       	ori	r30, 0x40	; 64
    2fe2:	0a c0       	rjmp	.+20     	; 0x2ff8 <atan2+0x3a>
    2fe4:	ef 63       	ori	r30, 0x3F	; 63
    2fe6:	07 f8       	bld	r0, 7
    2fe8:	00 94       	com	r0
    2fea:	07 fa       	bst	r0, 7
    2fec:	db 01       	movw	r26, r22
    2fee:	b9 01       	movw	r22, r18
    2ff0:	9d 01       	movw	r18, r26
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	ca 01       	movw	r24, r20
    2ff6:	ad 01       	movw	r20, r26
    2ff8:	ef 93       	push	r30
    2ffa:	43 d0       	rcall	.+134    	; 0x3082 <__divsf3_pse>
    2ffc:	60 d1       	rcall	.+704    	; 0x32be <__fp_round>
    2ffe:	0a d0       	rcall	.+20     	; 0x3014 <atan>
    3000:	5f 91       	pop	r21
    3002:	55 23       	and	r21, r21
    3004:	31 f0       	breq	.+12     	; 0x3012 <atan2+0x54>
    3006:	2b ed       	ldi	r18, 0xDB	; 219
    3008:	3f e0       	ldi	r19, 0x0F	; 15
    300a:	49 e4       	ldi	r20, 0x49	; 73
    300c:	50 fd       	sbrc	r21, 0
    300e:	49 ec       	ldi	r20, 0xC9	; 201
    3010:	63 cf       	rjmp	.-314    	; 0x2ed8 <__addsf3>
    3012:	08 95       	ret

00003014 <atan>:
    3014:	df 93       	push	r29
    3016:	dd 27       	eor	r29, r29
    3018:	b9 2f       	mov	r27, r25
    301a:	bf 77       	andi	r27, 0x7F	; 127
    301c:	40 e8       	ldi	r20, 0x80	; 128
    301e:	5f e3       	ldi	r21, 0x3F	; 63
    3020:	16 16       	cp	r1, r22
    3022:	17 06       	cpc	r1, r23
    3024:	48 07       	cpc	r20, r24
    3026:	5b 07       	cpc	r21, r27
    3028:	10 f4       	brcc	.+4      	; 0x302e <atan+0x1a>
    302a:	d9 2f       	mov	r29, r25
    302c:	82 d1       	rcall	.+772    	; 0x3332 <inverse>
    302e:	9f 93       	push	r25
    3030:	8f 93       	push	r24
    3032:	7f 93       	push	r23
    3034:	6f 93       	push	r22
    3036:	29 d2       	rcall	.+1106   	; 0x348a <square>
    3038:	ec e8       	ldi	r30, 0x8C	; 140
    303a:	f0 e0       	ldi	r31, 0x00	; 0
    303c:	0d d1       	rcall	.+538    	; 0x3258 <__fp_powser>
    303e:	3f d1       	rcall	.+638    	; 0x32be <__fp_round>
    3040:	2f 91       	pop	r18
    3042:	3f 91       	pop	r19
    3044:	4f 91       	pop	r20
    3046:	5f 91       	pop	r21
    3048:	87 d1       	rcall	.+782    	; 0x3358 <__mulsf3x>
    304a:	dd 23       	and	r29, r29
    304c:	49 f0       	breq	.+18     	; 0x3060 <atan+0x4c>
    304e:	90 58       	subi	r25, 0x80	; 128
    3050:	a2 ea       	ldi	r26, 0xA2	; 162
    3052:	2a ed       	ldi	r18, 0xDA	; 218
    3054:	3f e0       	ldi	r19, 0x0F	; 15
    3056:	49 ec       	ldi	r20, 0xC9	; 201
    3058:	5f e3       	ldi	r21, 0x3F	; 63
    305a:	d0 78       	andi	r29, 0x80	; 128
    305c:	5d 27       	eor	r21, r29
    305e:	4d df       	rcall	.-358    	; 0x2efa <__addsf3x>
    3060:	df 91       	pop	r29
    3062:	2d c1       	rjmp	.+602    	; 0x32be <__fp_round>

00003064 <__divsf3>:
    3064:	0c d0       	rcall	.+24     	; 0x307e <__divsf3x>
    3066:	2b c1       	rjmp	.+598    	; 0x32be <__fp_round>
    3068:	23 d1       	rcall	.+582    	; 0x32b0 <__fp_pscB>
    306a:	40 f0       	brcs	.+16     	; 0x307c <__divsf3+0x18>
    306c:	1a d1       	rcall	.+564    	; 0x32a2 <__fp_pscA>
    306e:	30 f0       	brcs	.+12     	; 0x307c <__divsf3+0x18>
    3070:	21 f4       	brne	.+8      	; 0x307a <__divsf3+0x16>
    3072:	5f 3f       	cpi	r21, 0xFF	; 255
    3074:	19 f0       	breq	.+6      	; 0x307c <__divsf3+0x18>
    3076:	e7 c0       	rjmp	.+462    	; 0x3246 <__fp_inf>
    3078:	51 11       	cpse	r21, r1
    307a:	55 c1       	rjmp	.+682    	; 0x3326 <__fp_szero>
    307c:	ea c0       	rjmp	.+468    	; 0x3252 <__fp_nan>

0000307e <__divsf3x>:
    307e:	30 d1       	rcall	.+608    	; 0x32e0 <__fp_split3>
    3080:	98 f3       	brcs	.-26     	; 0x3068 <__divsf3+0x4>

00003082 <__divsf3_pse>:
    3082:	99 23       	and	r25, r25
    3084:	c9 f3       	breq	.-14     	; 0x3078 <__divsf3+0x14>
    3086:	55 23       	and	r21, r21
    3088:	b1 f3       	breq	.-20     	; 0x3076 <__divsf3+0x12>
    308a:	95 1b       	sub	r25, r21
    308c:	55 0b       	sbc	r21, r21
    308e:	bb 27       	eor	r27, r27
    3090:	aa 27       	eor	r26, r26
    3092:	62 17       	cp	r22, r18
    3094:	73 07       	cpc	r23, r19
    3096:	84 07       	cpc	r24, r20
    3098:	38 f0       	brcs	.+14     	; 0x30a8 <__divsf3_pse+0x26>
    309a:	9f 5f       	subi	r25, 0xFF	; 255
    309c:	5f 4f       	sbci	r21, 0xFF	; 255
    309e:	22 0f       	add	r18, r18
    30a0:	33 1f       	adc	r19, r19
    30a2:	44 1f       	adc	r20, r20
    30a4:	aa 1f       	adc	r26, r26
    30a6:	a9 f3       	breq	.-22     	; 0x3092 <__divsf3_pse+0x10>
    30a8:	33 d0       	rcall	.+102    	; 0x3110 <__divsf3_pse+0x8e>
    30aa:	0e 2e       	mov	r0, r30
    30ac:	3a f0       	brmi	.+14     	; 0x30bc <__divsf3_pse+0x3a>
    30ae:	e0 e8       	ldi	r30, 0x80	; 128
    30b0:	30 d0       	rcall	.+96     	; 0x3112 <__divsf3_pse+0x90>
    30b2:	91 50       	subi	r25, 0x01	; 1
    30b4:	50 40       	sbci	r21, 0x00	; 0
    30b6:	e6 95       	lsr	r30
    30b8:	00 1c       	adc	r0, r0
    30ba:	ca f7       	brpl	.-14     	; 0x30ae <__divsf3_pse+0x2c>
    30bc:	29 d0       	rcall	.+82     	; 0x3110 <__divsf3_pse+0x8e>
    30be:	fe 2f       	mov	r31, r30
    30c0:	27 d0       	rcall	.+78     	; 0x3110 <__divsf3_pse+0x8e>
    30c2:	66 0f       	add	r22, r22
    30c4:	77 1f       	adc	r23, r23
    30c6:	88 1f       	adc	r24, r24
    30c8:	bb 1f       	adc	r27, r27
    30ca:	26 17       	cp	r18, r22
    30cc:	37 07       	cpc	r19, r23
    30ce:	48 07       	cpc	r20, r24
    30d0:	ab 07       	cpc	r26, r27
    30d2:	b0 e8       	ldi	r27, 0x80	; 128
    30d4:	09 f0       	breq	.+2      	; 0x30d8 <__divsf3_pse+0x56>
    30d6:	bb 0b       	sbc	r27, r27
    30d8:	80 2d       	mov	r24, r0
    30da:	bf 01       	movw	r22, r30
    30dc:	ff 27       	eor	r31, r31
    30de:	93 58       	subi	r25, 0x83	; 131
    30e0:	5f 4f       	sbci	r21, 0xFF	; 255
    30e2:	2a f0       	brmi	.+10     	; 0x30ee <__divsf3_pse+0x6c>
    30e4:	9e 3f       	cpi	r25, 0xFE	; 254
    30e6:	51 05       	cpc	r21, r1
    30e8:	68 f0       	brcs	.+26     	; 0x3104 <__divsf3_pse+0x82>
    30ea:	ad c0       	rjmp	.+346    	; 0x3246 <__fp_inf>
    30ec:	1c c1       	rjmp	.+568    	; 0x3326 <__fp_szero>
    30ee:	5f 3f       	cpi	r21, 0xFF	; 255
    30f0:	ec f3       	brlt	.-6      	; 0x30ec <__divsf3_pse+0x6a>
    30f2:	98 3e       	cpi	r25, 0xE8	; 232
    30f4:	dc f3       	brlt	.-10     	; 0x30ec <__divsf3_pse+0x6a>
    30f6:	86 95       	lsr	r24
    30f8:	77 95       	ror	r23
    30fa:	67 95       	ror	r22
    30fc:	b7 95       	ror	r27
    30fe:	f7 95       	ror	r31
    3100:	9f 5f       	subi	r25, 0xFF	; 255
    3102:	c9 f7       	brne	.-14     	; 0x30f6 <__divsf3_pse+0x74>
    3104:	88 0f       	add	r24, r24
    3106:	91 1d       	adc	r25, r1
    3108:	96 95       	lsr	r25
    310a:	87 95       	ror	r24
    310c:	97 f9       	bld	r25, 7
    310e:	08 95       	ret
    3110:	e1 e0       	ldi	r30, 0x01	; 1
    3112:	66 0f       	add	r22, r22
    3114:	77 1f       	adc	r23, r23
    3116:	88 1f       	adc	r24, r24
    3118:	bb 1f       	adc	r27, r27
    311a:	62 17       	cp	r22, r18
    311c:	73 07       	cpc	r23, r19
    311e:	84 07       	cpc	r24, r20
    3120:	ba 07       	cpc	r27, r26
    3122:	20 f0       	brcs	.+8      	; 0x312c <__divsf3_pse+0xaa>
    3124:	62 1b       	sub	r22, r18
    3126:	73 0b       	sbc	r23, r19
    3128:	84 0b       	sbc	r24, r20
    312a:	ba 0b       	sbc	r27, r26
    312c:	ee 1f       	adc	r30, r30
    312e:	88 f7       	brcc	.-30     	; 0x3112 <__divsf3_pse+0x90>
    3130:	e0 95       	com	r30
    3132:	08 95       	ret

00003134 <__fixsfsi>:
    3134:	04 d0       	rcall	.+8      	; 0x313e <__fixunssfsi>
    3136:	68 94       	set
    3138:	b1 11       	cpse	r27, r1
    313a:	f5 c0       	rjmp	.+490    	; 0x3326 <__fp_szero>
    313c:	08 95       	ret

0000313e <__fixunssfsi>:
    313e:	d8 d0       	rcall	.+432    	; 0x32f0 <__fp_splitA>
    3140:	88 f0       	brcs	.+34     	; 0x3164 <__fixunssfsi+0x26>
    3142:	9f 57       	subi	r25, 0x7F	; 127
    3144:	90 f0       	brcs	.+36     	; 0x316a <__fixunssfsi+0x2c>
    3146:	b9 2f       	mov	r27, r25
    3148:	99 27       	eor	r25, r25
    314a:	b7 51       	subi	r27, 0x17	; 23
    314c:	a0 f0       	brcs	.+40     	; 0x3176 <__fixunssfsi+0x38>
    314e:	d1 f0       	breq	.+52     	; 0x3184 <__fixunssfsi+0x46>
    3150:	66 0f       	add	r22, r22
    3152:	77 1f       	adc	r23, r23
    3154:	88 1f       	adc	r24, r24
    3156:	99 1f       	adc	r25, r25
    3158:	1a f0       	brmi	.+6      	; 0x3160 <__fixunssfsi+0x22>
    315a:	ba 95       	dec	r27
    315c:	c9 f7       	brne	.-14     	; 0x3150 <__fixunssfsi+0x12>
    315e:	12 c0       	rjmp	.+36     	; 0x3184 <__fixunssfsi+0x46>
    3160:	b1 30       	cpi	r27, 0x01	; 1
    3162:	81 f0       	breq	.+32     	; 0x3184 <__fixunssfsi+0x46>
    3164:	df d0       	rcall	.+446    	; 0x3324 <__fp_zero>
    3166:	b1 e0       	ldi	r27, 0x01	; 1
    3168:	08 95       	ret
    316a:	dc c0       	rjmp	.+440    	; 0x3324 <__fp_zero>
    316c:	67 2f       	mov	r22, r23
    316e:	78 2f       	mov	r23, r24
    3170:	88 27       	eor	r24, r24
    3172:	b8 5f       	subi	r27, 0xF8	; 248
    3174:	39 f0       	breq	.+14     	; 0x3184 <__fixunssfsi+0x46>
    3176:	b9 3f       	cpi	r27, 0xF9	; 249
    3178:	cc f3       	brlt	.-14     	; 0x316c <__fixunssfsi+0x2e>
    317a:	86 95       	lsr	r24
    317c:	77 95       	ror	r23
    317e:	67 95       	ror	r22
    3180:	b3 95       	inc	r27
    3182:	d9 f7       	brne	.-10     	; 0x317a <__fixunssfsi+0x3c>
    3184:	3e f4       	brtc	.+14     	; 0x3194 <__fixunssfsi+0x56>
    3186:	90 95       	com	r25
    3188:	80 95       	com	r24
    318a:	70 95       	com	r23
    318c:	61 95       	neg	r22
    318e:	7f 4f       	sbci	r23, 0xFF	; 255
    3190:	8f 4f       	sbci	r24, 0xFF	; 255
    3192:	9f 4f       	sbci	r25, 0xFF	; 255
    3194:	08 95       	ret

00003196 <__floatunsisf>:
    3196:	e8 94       	clt
    3198:	09 c0       	rjmp	.+18     	; 0x31ac <__floatsisf+0x12>

0000319a <__floatsisf>:
    319a:	97 fb       	bst	r25, 7
    319c:	3e f4       	brtc	.+14     	; 0x31ac <__floatsisf+0x12>
    319e:	90 95       	com	r25
    31a0:	80 95       	com	r24
    31a2:	70 95       	com	r23
    31a4:	61 95       	neg	r22
    31a6:	7f 4f       	sbci	r23, 0xFF	; 255
    31a8:	8f 4f       	sbci	r24, 0xFF	; 255
    31aa:	9f 4f       	sbci	r25, 0xFF	; 255
    31ac:	99 23       	and	r25, r25
    31ae:	a9 f0       	breq	.+42     	; 0x31da <__floatsisf+0x40>
    31b0:	f9 2f       	mov	r31, r25
    31b2:	96 e9       	ldi	r25, 0x96	; 150
    31b4:	bb 27       	eor	r27, r27
    31b6:	93 95       	inc	r25
    31b8:	f6 95       	lsr	r31
    31ba:	87 95       	ror	r24
    31bc:	77 95       	ror	r23
    31be:	67 95       	ror	r22
    31c0:	b7 95       	ror	r27
    31c2:	f1 11       	cpse	r31, r1
    31c4:	f8 cf       	rjmp	.-16     	; 0x31b6 <__floatsisf+0x1c>
    31c6:	fa f4       	brpl	.+62     	; 0x3206 <__floatsisf+0x6c>
    31c8:	bb 0f       	add	r27, r27
    31ca:	11 f4       	brne	.+4      	; 0x31d0 <__floatsisf+0x36>
    31cc:	60 ff       	sbrs	r22, 0
    31ce:	1b c0       	rjmp	.+54     	; 0x3206 <__floatsisf+0x6c>
    31d0:	6f 5f       	subi	r22, 0xFF	; 255
    31d2:	7f 4f       	sbci	r23, 0xFF	; 255
    31d4:	8f 4f       	sbci	r24, 0xFF	; 255
    31d6:	9f 4f       	sbci	r25, 0xFF	; 255
    31d8:	16 c0       	rjmp	.+44     	; 0x3206 <__floatsisf+0x6c>
    31da:	88 23       	and	r24, r24
    31dc:	11 f0       	breq	.+4      	; 0x31e2 <__floatsisf+0x48>
    31de:	96 e9       	ldi	r25, 0x96	; 150
    31e0:	11 c0       	rjmp	.+34     	; 0x3204 <__floatsisf+0x6a>
    31e2:	77 23       	and	r23, r23
    31e4:	21 f0       	breq	.+8      	; 0x31ee <__floatsisf+0x54>
    31e6:	9e e8       	ldi	r25, 0x8E	; 142
    31e8:	87 2f       	mov	r24, r23
    31ea:	76 2f       	mov	r23, r22
    31ec:	05 c0       	rjmp	.+10     	; 0x31f8 <__floatsisf+0x5e>
    31ee:	66 23       	and	r22, r22
    31f0:	71 f0       	breq	.+28     	; 0x320e <__floatsisf+0x74>
    31f2:	96 e8       	ldi	r25, 0x86	; 134
    31f4:	86 2f       	mov	r24, r22
    31f6:	70 e0       	ldi	r23, 0x00	; 0
    31f8:	60 e0       	ldi	r22, 0x00	; 0
    31fa:	2a f0       	brmi	.+10     	; 0x3206 <__floatsisf+0x6c>
    31fc:	9a 95       	dec	r25
    31fe:	66 0f       	add	r22, r22
    3200:	77 1f       	adc	r23, r23
    3202:	88 1f       	adc	r24, r24
    3204:	da f7       	brpl	.-10     	; 0x31fc <__floatsisf+0x62>
    3206:	88 0f       	add	r24, r24
    3208:	96 95       	lsr	r25
    320a:	87 95       	ror	r24
    320c:	97 f9       	bld	r25, 7
    320e:	08 95       	ret

00003210 <__fp_arccos>:
    3210:	df 93       	push	r29
    3212:	cf 93       	push	r28
    3214:	1f 93       	push	r17
    3216:	0f 93       	push	r16
    3218:	8b 01       	movw	r16, r22
    321a:	ec 01       	movw	r28, r24
    321c:	e9 eb       	ldi	r30, 0xB9	; 185
    321e:	f0 e0       	ldi	r31, 0x00	; 0
    3220:	1b d0       	rcall	.+54     	; 0x3258 <__fp_powser>
    3222:	4d d0       	rcall	.+154    	; 0x32be <__fp_round>
    3224:	98 01       	movw	r18, r16
    3226:	ae 01       	movw	r20, r28
    3228:	8b 01       	movw	r16, r22
    322a:	ec 01       	movw	r28, r24
    322c:	60 e0       	ldi	r22, 0x00	; 0
    322e:	70 e0       	ldi	r23, 0x00	; 0
    3230:	80 e8       	ldi	r24, 0x80	; 128
    3232:	9f e3       	ldi	r25, 0x3F	; 63
    3234:	50 de       	rcall	.-864    	; 0x2ed6 <__subsf3>
    3236:	eb d0       	rcall	.+470    	; 0x340e <sqrt>
    3238:	98 01       	movw	r18, r16
    323a:	ae 01       	movw	r20, r28
    323c:	0f 91       	pop	r16
    323e:	1f 91       	pop	r17
    3240:	cf 91       	pop	r28
    3242:	df 91       	pop	r29
    3244:	89 c0       	rjmp	.+274    	; 0x3358 <__mulsf3x>

00003246 <__fp_inf>:
    3246:	97 f9       	bld	r25, 7
    3248:	9f 67       	ori	r25, 0x7F	; 127
    324a:	80 e8       	ldi	r24, 0x80	; 128
    324c:	70 e0       	ldi	r23, 0x00	; 0
    324e:	60 e0       	ldi	r22, 0x00	; 0
    3250:	08 95       	ret

00003252 <__fp_nan>:
    3252:	9f ef       	ldi	r25, 0xFF	; 255
    3254:	80 ec       	ldi	r24, 0xC0	; 192
    3256:	08 95       	ret

00003258 <__fp_powser>:
    3258:	df 93       	push	r29
    325a:	cf 93       	push	r28
    325c:	1f 93       	push	r17
    325e:	0f 93       	push	r16
    3260:	ff 92       	push	r15
    3262:	ef 92       	push	r14
    3264:	df 92       	push	r13
    3266:	7b 01       	movw	r14, r22
    3268:	8c 01       	movw	r16, r24
    326a:	68 94       	set
    326c:	05 c0       	rjmp	.+10     	; 0x3278 <__fp_powser+0x20>
    326e:	da 2e       	mov	r13, r26
    3270:	ef 01       	movw	r28, r30
    3272:	72 d0       	rcall	.+228    	; 0x3358 <__mulsf3x>
    3274:	fe 01       	movw	r30, r28
    3276:	e8 94       	clt
    3278:	a5 91       	lpm	r26, Z+
    327a:	25 91       	lpm	r18, Z+
    327c:	35 91       	lpm	r19, Z+
    327e:	45 91       	lpm	r20, Z+
    3280:	55 91       	lpm	r21, Z+
    3282:	ae f3       	brts	.-22     	; 0x326e <__fp_powser+0x16>
    3284:	ef 01       	movw	r28, r30
    3286:	39 de       	rcall	.-910    	; 0x2efa <__addsf3x>
    3288:	fe 01       	movw	r30, r28
    328a:	97 01       	movw	r18, r14
    328c:	a8 01       	movw	r20, r16
    328e:	da 94       	dec	r13
    3290:	79 f7       	brne	.-34     	; 0x3270 <__fp_powser+0x18>
    3292:	df 90       	pop	r13
    3294:	ef 90       	pop	r14
    3296:	ff 90       	pop	r15
    3298:	0f 91       	pop	r16
    329a:	1f 91       	pop	r17
    329c:	cf 91       	pop	r28
    329e:	df 91       	pop	r29
    32a0:	08 95       	ret

000032a2 <__fp_pscA>:
    32a2:	00 24       	eor	r0, r0
    32a4:	0a 94       	dec	r0
    32a6:	16 16       	cp	r1, r22
    32a8:	17 06       	cpc	r1, r23
    32aa:	18 06       	cpc	r1, r24
    32ac:	09 06       	cpc	r0, r25
    32ae:	08 95       	ret

000032b0 <__fp_pscB>:
    32b0:	00 24       	eor	r0, r0
    32b2:	0a 94       	dec	r0
    32b4:	12 16       	cp	r1, r18
    32b6:	13 06       	cpc	r1, r19
    32b8:	14 06       	cpc	r1, r20
    32ba:	05 06       	cpc	r0, r21
    32bc:	08 95       	ret

000032be <__fp_round>:
    32be:	09 2e       	mov	r0, r25
    32c0:	03 94       	inc	r0
    32c2:	00 0c       	add	r0, r0
    32c4:	11 f4       	brne	.+4      	; 0x32ca <__fp_round+0xc>
    32c6:	88 23       	and	r24, r24
    32c8:	52 f0       	brmi	.+20     	; 0x32de <__fp_round+0x20>
    32ca:	bb 0f       	add	r27, r27
    32cc:	40 f4       	brcc	.+16     	; 0x32de <__fp_round+0x20>
    32ce:	bf 2b       	or	r27, r31
    32d0:	11 f4       	brne	.+4      	; 0x32d6 <__fp_round+0x18>
    32d2:	60 ff       	sbrs	r22, 0
    32d4:	04 c0       	rjmp	.+8      	; 0x32de <__fp_round+0x20>
    32d6:	6f 5f       	subi	r22, 0xFF	; 255
    32d8:	7f 4f       	sbci	r23, 0xFF	; 255
    32da:	8f 4f       	sbci	r24, 0xFF	; 255
    32dc:	9f 4f       	sbci	r25, 0xFF	; 255
    32de:	08 95       	ret

000032e0 <__fp_split3>:
    32e0:	57 fd       	sbrc	r21, 7
    32e2:	90 58       	subi	r25, 0x80	; 128
    32e4:	44 0f       	add	r20, r20
    32e6:	55 1f       	adc	r21, r21
    32e8:	59 f0       	breq	.+22     	; 0x3300 <__fp_splitA+0x10>
    32ea:	5f 3f       	cpi	r21, 0xFF	; 255
    32ec:	71 f0       	breq	.+28     	; 0x330a <__fp_splitA+0x1a>
    32ee:	47 95       	ror	r20

000032f0 <__fp_splitA>:
    32f0:	88 0f       	add	r24, r24
    32f2:	97 fb       	bst	r25, 7
    32f4:	99 1f       	adc	r25, r25
    32f6:	61 f0       	breq	.+24     	; 0x3310 <__fp_splitA+0x20>
    32f8:	9f 3f       	cpi	r25, 0xFF	; 255
    32fa:	79 f0       	breq	.+30     	; 0x331a <__fp_splitA+0x2a>
    32fc:	87 95       	ror	r24
    32fe:	08 95       	ret
    3300:	12 16       	cp	r1, r18
    3302:	13 06       	cpc	r1, r19
    3304:	14 06       	cpc	r1, r20
    3306:	55 1f       	adc	r21, r21
    3308:	f2 cf       	rjmp	.-28     	; 0x32ee <__fp_split3+0xe>
    330a:	46 95       	lsr	r20
    330c:	f1 df       	rcall	.-30     	; 0x32f0 <__fp_splitA>
    330e:	08 c0       	rjmp	.+16     	; 0x3320 <__fp_splitA+0x30>
    3310:	16 16       	cp	r1, r22
    3312:	17 06       	cpc	r1, r23
    3314:	18 06       	cpc	r1, r24
    3316:	99 1f       	adc	r25, r25
    3318:	f1 cf       	rjmp	.-30     	; 0x32fc <__fp_splitA+0xc>
    331a:	86 95       	lsr	r24
    331c:	71 05       	cpc	r23, r1
    331e:	61 05       	cpc	r22, r1
    3320:	08 94       	sec
    3322:	08 95       	ret

00003324 <__fp_zero>:
    3324:	e8 94       	clt

00003326 <__fp_szero>:
    3326:	bb 27       	eor	r27, r27
    3328:	66 27       	eor	r22, r22
    332a:	77 27       	eor	r23, r23
    332c:	cb 01       	movw	r24, r22
    332e:	97 f9       	bld	r25, 7
    3330:	08 95       	ret

00003332 <inverse>:
    3332:	9b 01       	movw	r18, r22
    3334:	ac 01       	movw	r20, r24
    3336:	60 e0       	ldi	r22, 0x00	; 0
    3338:	70 e0       	ldi	r23, 0x00	; 0
    333a:	80 e8       	ldi	r24, 0x80	; 128
    333c:	9f e3       	ldi	r25, 0x3F	; 63
    333e:	92 ce       	rjmp	.-732    	; 0x3064 <__divsf3>

00003340 <__mulsf3>:
    3340:	0b d0       	rcall	.+22     	; 0x3358 <__mulsf3x>
    3342:	bd cf       	rjmp	.-134    	; 0x32be <__fp_round>
    3344:	ae df       	rcall	.-164    	; 0x32a2 <__fp_pscA>
    3346:	28 f0       	brcs	.+10     	; 0x3352 <__mulsf3+0x12>
    3348:	b3 df       	rcall	.-154    	; 0x32b0 <__fp_pscB>
    334a:	18 f0       	brcs	.+6      	; 0x3352 <__mulsf3+0x12>
    334c:	95 23       	and	r25, r21
    334e:	09 f0       	breq	.+2      	; 0x3352 <__mulsf3+0x12>
    3350:	7a cf       	rjmp	.-268    	; 0x3246 <__fp_inf>
    3352:	7f cf       	rjmp	.-258    	; 0x3252 <__fp_nan>
    3354:	11 24       	eor	r1, r1
    3356:	e7 cf       	rjmp	.-50     	; 0x3326 <__fp_szero>

00003358 <__mulsf3x>:
    3358:	c3 df       	rcall	.-122    	; 0x32e0 <__fp_split3>
    335a:	a0 f3       	brcs	.-24     	; 0x3344 <__mulsf3+0x4>

0000335c <__mulsf3_pse>:
    335c:	95 9f       	mul	r25, r21
    335e:	d1 f3       	breq	.-12     	; 0x3354 <__mulsf3+0x14>
    3360:	95 0f       	add	r25, r21
    3362:	50 e0       	ldi	r21, 0x00	; 0
    3364:	55 1f       	adc	r21, r21
    3366:	62 9f       	mul	r22, r18
    3368:	f0 01       	movw	r30, r0
    336a:	72 9f       	mul	r23, r18
    336c:	bb 27       	eor	r27, r27
    336e:	f0 0d       	add	r31, r0
    3370:	b1 1d       	adc	r27, r1
    3372:	63 9f       	mul	r22, r19
    3374:	aa 27       	eor	r26, r26
    3376:	f0 0d       	add	r31, r0
    3378:	b1 1d       	adc	r27, r1
    337a:	aa 1f       	adc	r26, r26
    337c:	64 9f       	mul	r22, r20
    337e:	66 27       	eor	r22, r22
    3380:	b0 0d       	add	r27, r0
    3382:	a1 1d       	adc	r26, r1
    3384:	66 1f       	adc	r22, r22
    3386:	82 9f       	mul	r24, r18
    3388:	22 27       	eor	r18, r18
    338a:	b0 0d       	add	r27, r0
    338c:	a1 1d       	adc	r26, r1
    338e:	62 1f       	adc	r22, r18
    3390:	73 9f       	mul	r23, r19
    3392:	b0 0d       	add	r27, r0
    3394:	a1 1d       	adc	r26, r1
    3396:	62 1f       	adc	r22, r18
    3398:	83 9f       	mul	r24, r19
    339a:	a0 0d       	add	r26, r0
    339c:	61 1d       	adc	r22, r1
    339e:	22 1f       	adc	r18, r18
    33a0:	74 9f       	mul	r23, r20
    33a2:	33 27       	eor	r19, r19
    33a4:	a0 0d       	add	r26, r0
    33a6:	61 1d       	adc	r22, r1
    33a8:	23 1f       	adc	r18, r19
    33aa:	84 9f       	mul	r24, r20
    33ac:	60 0d       	add	r22, r0
    33ae:	21 1d       	adc	r18, r1
    33b0:	82 2f       	mov	r24, r18
    33b2:	76 2f       	mov	r23, r22
    33b4:	6a 2f       	mov	r22, r26
    33b6:	11 24       	eor	r1, r1
    33b8:	9f 57       	subi	r25, 0x7F	; 127
    33ba:	50 40       	sbci	r21, 0x00	; 0
    33bc:	8a f0       	brmi	.+34     	; 0x33e0 <__mulsf3_pse+0x84>
    33be:	e1 f0       	breq	.+56     	; 0x33f8 <__mulsf3_pse+0x9c>
    33c0:	88 23       	and	r24, r24
    33c2:	4a f0       	brmi	.+18     	; 0x33d6 <__mulsf3_pse+0x7a>
    33c4:	ee 0f       	add	r30, r30
    33c6:	ff 1f       	adc	r31, r31
    33c8:	bb 1f       	adc	r27, r27
    33ca:	66 1f       	adc	r22, r22
    33cc:	77 1f       	adc	r23, r23
    33ce:	88 1f       	adc	r24, r24
    33d0:	91 50       	subi	r25, 0x01	; 1
    33d2:	50 40       	sbci	r21, 0x00	; 0
    33d4:	a9 f7       	brne	.-22     	; 0x33c0 <__mulsf3_pse+0x64>
    33d6:	9e 3f       	cpi	r25, 0xFE	; 254
    33d8:	51 05       	cpc	r21, r1
    33da:	70 f0       	brcs	.+28     	; 0x33f8 <__mulsf3_pse+0x9c>
    33dc:	34 cf       	rjmp	.-408    	; 0x3246 <__fp_inf>
    33de:	a3 cf       	rjmp	.-186    	; 0x3326 <__fp_szero>
    33e0:	5f 3f       	cpi	r21, 0xFF	; 255
    33e2:	ec f3       	brlt	.-6      	; 0x33de <__mulsf3_pse+0x82>
    33e4:	98 3e       	cpi	r25, 0xE8	; 232
    33e6:	dc f3       	brlt	.-10     	; 0x33de <__mulsf3_pse+0x82>
    33e8:	86 95       	lsr	r24
    33ea:	77 95       	ror	r23
    33ec:	67 95       	ror	r22
    33ee:	b7 95       	ror	r27
    33f0:	f7 95       	ror	r31
    33f2:	e7 95       	ror	r30
    33f4:	9f 5f       	subi	r25, 0xFF	; 255
    33f6:	c1 f7       	brne	.-16     	; 0x33e8 <__mulsf3_pse+0x8c>
    33f8:	fe 2b       	or	r31, r30
    33fa:	88 0f       	add	r24, r24
    33fc:	91 1d       	adc	r25, r1
    33fe:	96 95       	lsr	r25
    3400:	87 95       	ror	r24
    3402:	97 f9       	bld	r25, 7
    3404:	08 95       	ret
    3406:	11 f4       	brne	.+4      	; 0x340c <__mulsf3_pse+0xb0>
    3408:	0e f4       	brtc	.+2      	; 0x340c <__mulsf3_pse+0xb0>
    340a:	23 cf       	rjmp	.-442    	; 0x3252 <__fp_nan>
    340c:	41 c0       	rjmp	.+130    	; 0x3490 <__fp_mpack>

0000340e <sqrt>:
    340e:	70 df       	rcall	.-288    	; 0x32f0 <__fp_splitA>
    3410:	d0 f3       	brcs	.-12     	; 0x3406 <__mulsf3_pse+0xaa>
    3412:	99 23       	and	r25, r25
    3414:	d9 f3       	breq	.-10     	; 0x340c <__mulsf3_pse+0xb0>
    3416:	ce f3       	brts	.-14     	; 0x340a <__mulsf3_pse+0xae>
    3418:	9f 57       	subi	r25, 0x7F	; 127
    341a:	55 0b       	sbc	r21, r21
    341c:	87 ff       	sbrs	r24, 7
    341e:	46 d0       	rcall	.+140    	; 0x34ac <__fp_norm2>
    3420:	00 24       	eor	r0, r0
    3422:	a0 e6       	ldi	r26, 0x60	; 96
    3424:	40 ea       	ldi	r20, 0xA0	; 160
    3426:	90 01       	movw	r18, r0
    3428:	80 58       	subi	r24, 0x80	; 128
    342a:	56 95       	lsr	r21
    342c:	97 95       	ror	r25
    342e:	28 f4       	brcc	.+10     	; 0x343a <sqrt+0x2c>
    3430:	80 5c       	subi	r24, 0xC0	; 192
    3432:	66 0f       	add	r22, r22
    3434:	77 1f       	adc	r23, r23
    3436:	88 1f       	adc	r24, r24
    3438:	20 f0       	brcs	.+8      	; 0x3442 <sqrt+0x34>
    343a:	26 17       	cp	r18, r22
    343c:	37 07       	cpc	r19, r23
    343e:	48 07       	cpc	r20, r24
    3440:	30 f4       	brcc	.+12     	; 0x344e <sqrt+0x40>
    3442:	62 1b       	sub	r22, r18
    3444:	73 0b       	sbc	r23, r19
    3446:	84 0b       	sbc	r24, r20
    3448:	20 29       	or	r18, r0
    344a:	31 29       	or	r19, r1
    344c:	4a 2b       	or	r20, r26
    344e:	a6 95       	lsr	r26
    3450:	17 94       	ror	r1
    3452:	07 94       	ror	r0
    3454:	20 25       	eor	r18, r0
    3456:	31 25       	eor	r19, r1
    3458:	4a 27       	eor	r20, r26
    345a:	58 f7       	brcc	.-42     	; 0x3432 <sqrt+0x24>
    345c:	66 0f       	add	r22, r22
    345e:	77 1f       	adc	r23, r23
    3460:	88 1f       	adc	r24, r24
    3462:	20 f0       	brcs	.+8      	; 0x346c <sqrt+0x5e>
    3464:	26 17       	cp	r18, r22
    3466:	37 07       	cpc	r19, r23
    3468:	48 07       	cpc	r20, r24
    346a:	30 f4       	brcc	.+12     	; 0x3478 <sqrt+0x6a>
    346c:	62 0b       	sbc	r22, r18
    346e:	73 0b       	sbc	r23, r19
    3470:	84 0b       	sbc	r24, r20
    3472:	20 0d       	add	r18, r0
    3474:	31 1d       	adc	r19, r1
    3476:	41 1d       	adc	r20, r1
    3478:	a0 95       	com	r26
    347a:	81 f7       	brne	.-32     	; 0x345c <sqrt+0x4e>
    347c:	b9 01       	movw	r22, r18
    347e:	84 2f       	mov	r24, r20
    3480:	91 58       	subi	r25, 0x81	; 129
    3482:	88 0f       	add	r24, r24
    3484:	96 95       	lsr	r25
    3486:	87 95       	ror	r24
    3488:	08 95       	ret

0000348a <square>:
    348a:	9b 01       	movw	r18, r22
    348c:	ac 01       	movw	r20, r24
    348e:	58 cf       	rjmp	.-336    	; 0x3340 <__mulsf3>

00003490 <__fp_mpack>:
    3490:	9f 3f       	cpi	r25, 0xFF	; 255
    3492:	31 f0       	breq	.+12     	; 0x34a0 <__fp_mpack_finite+0xc>

00003494 <__fp_mpack_finite>:
    3494:	91 50       	subi	r25, 0x01	; 1
    3496:	20 f4       	brcc	.+8      	; 0x34a0 <__fp_mpack_finite+0xc>
    3498:	87 95       	ror	r24
    349a:	77 95       	ror	r23
    349c:	67 95       	ror	r22
    349e:	b7 95       	ror	r27
    34a0:	88 0f       	add	r24, r24
    34a2:	91 1d       	adc	r25, r1
    34a4:	96 95       	lsr	r25
    34a6:	87 95       	ror	r24
    34a8:	97 f9       	bld	r25, 7
    34aa:	08 95       	ret

000034ac <__fp_norm2>:
    34ac:	91 50       	subi	r25, 0x01	; 1
    34ae:	50 40       	sbci	r21, 0x00	; 0
    34b0:	66 0f       	add	r22, r22
    34b2:	77 1f       	adc	r23, r23
    34b4:	88 1f       	adc	r24, r24
    34b6:	d2 f7       	brpl	.-12     	; 0x34ac <__fp_norm2>
    34b8:	08 95       	ret

000034ba <__divmodsi4>:
    34ba:	05 2e       	mov	r0, r21
    34bc:	97 fb       	bst	r25, 7
    34be:	16 f4       	brtc	.+4      	; 0x34c4 <__divmodsi4+0xa>
    34c0:	00 94       	com	r0
    34c2:	0f d0       	rcall	.+30     	; 0x34e2 <__negsi2>
    34c4:	57 fd       	sbrc	r21, 7
    34c6:	05 d0       	rcall	.+10     	; 0x34d2 <__divmodsi4_neg2>
    34c8:	1e d0       	rcall	.+60     	; 0x3506 <__udivmodsi4>
    34ca:	07 fc       	sbrc	r0, 7
    34cc:	02 d0       	rcall	.+4      	; 0x34d2 <__divmodsi4_neg2>
    34ce:	46 f4       	brtc	.+16     	; 0x34e0 <__divmodsi4_exit>
    34d0:	08 c0       	rjmp	.+16     	; 0x34e2 <__negsi2>

000034d2 <__divmodsi4_neg2>:
    34d2:	50 95       	com	r21
    34d4:	40 95       	com	r20
    34d6:	30 95       	com	r19
    34d8:	21 95       	neg	r18
    34da:	3f 4f       	sbci	r19, 0xFF	; 255
    34dc:	4f 4f       	sbci	r20, 0xFF	; 255
    34de:	5f 4f       	sbci	r21, 0xFF	; 255

000034e0 <__divmodsi4_exit>:
    34e0:	08 95       	ret

000034e2 <__negsi2>:
    34e2:	90 95       	com	r25
    34e4:	80 95       	com	r24
    34e6:	70 95       	com	r23
    34e8:	61 95       	neg	r22
    34ea:	7f 4f       	sbci	r23, 0xFF	; 255
    34ec:	8f 4f       	sbci	r24, 0xFF	; 255
    34ee:	9f 4f       	sbci	r25, 0xFF	; 255
    34f0:	08 95       	ret

000034f2 <__muluhisi3>:
    34f2:	2b d0       	rcall	.+86     	; 0x354a <__umulhisi3>
    34f4:	a5 9f       	mul	r26, r21
    34f6:	90 0d       	add	r25, r0
    34f8:	b4 9f       	mul	r27, r20
    34fa:	90 0d       	add	r25, r0
    34fc:	a4 9f       	mul	r26, r20
    34fe:	80 0d       	add	r24, r0
    3500:	91 1d       	adc	r25, r1
    3502:	11 24       	eor	r1, r1
    3504:	08 95       	ret

00003506 <__udivmodsi4>:
    3506:	a1 e2       	ldi	r26, 0x21	; 33
    3508:	1a 2e       	mov	r1, r26
    350a:	aa 1b       	sub	r26, r26
    350c:	bb 1b       	sub	r27, r27
    350e:	fd 01       	movw	r30, r26
    3510:	0d c0       	rjmp	.+26     	; 0x352c <__udivmodsi4_ep>

00003512 <__udivmodsi4_loop>:
    3512:	aa 1f       	adc	r26, r26
    3514:	bb 1f       	adc	r27, r27
    3516:	ee 1f       	adc	r30, r30
    3518:	ff 1f       	adc	r31, r31
    351a:	a2 17       	cp	r26, r18
    351c:	b3 07       	cpc	r27, r19
    351e:	e4 07       	cpc	r30, r20
    3520:	f5 07       	cpc	r31, r21
    3522:	20 f0       	brcs	.+8      	; 0x352c <__udivmodsi4_ep>
    3524:	a2 1b       	sub	r26, r18
    3526:	b3 0b       	sbc	r27, r19
    3528:	e4 0b       	sbc	r30, r20
    352a:	f5 0b       	sbc	r31, r21

0000352c <__udivmodsi4_ep>:
    352c:	66 1f       	adc	r22, r22
    352e:	77 1f       	adc	r23, r23
    3530:	88 1f       	adc	r24, r24
    3532:	99 1f       	adc	r25, r25
    3534:	1a 94       	dec	r1
    3536:	69 f7       	brne	.-38     	; 0x3512 <__udivmodsi4_loop>
    3538:	60 95       	com	r22
    353a:	70 95       	com	r23
    353c:	80 95       	com	r24
    353e:	90 95       	com	r25
    3540:	9b 01       	movw	r18, r22
    3542:	ac 01       	movw	r20, r24
    3544:	bd 01       	movw	r22, r26
    3546:	cf 01       	movw	r24, r30
    3548:	08 95       	ret

0000354a <__umulhisi3>:
    354a:	a2 9f       	mul	r26, r18
    354c:	b0 01       	movw	r22, r0
    354e:	b3 9f       	mul	r27, r19
    3550:	c0 01       	movw	r24, r0
    3552:	a3 9f       	mul	r26, r19
    3554:	70 0d       	add	r23, r0
    3556:	81 1d       	adc	r24, r1
    3558:	11 24       	eor	r1, r1
    355a:	91 1d       	adc	r25, r1
    355c:	b2 9f       	mul	r27, r18
    355e:	70 0d       	add	r23, r0
    3560:	81 1d       	adc	r24, r1
    3562:	11 24       	eor	r1, r1
    3564:	91 1d       	adc	r25, r1
    3566:	08 95       	ret

00003568 <_exit>:
    3568:	f8 94       	cli

0000356a <__stop_program>:
    356a:	ff cf       	rjmp	.-2      	; 0x356a <__stop_program>
