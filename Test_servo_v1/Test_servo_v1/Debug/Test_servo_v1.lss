
Test_servo_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000478  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000088  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000d8b  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000024d  00000000  00000000  0000130f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000627  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000001fc  00000000  00000000  00001b84  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000353  00000000  00000000  00001d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000891  00000000  00000000  000020d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000078  00000000  00000000  00002964  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	f5 d0       	rcall	.+490    	; 0x284 <main>
  9a:	ec c1       	rjmp	.+984    	; 0x474 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <initUSART>:
		// Vänta tills den sänt klart det sista
	}
	USART0RecieveMode();
	sei(); // Tillåt interrupts igen
	
}
  9e:	84 e0       	ldi	r24, 0x04	; 4
  a0:	8a b9       	out	0x0a, r24	; 10
  a2:	11 b8       	out	0x01, r1	; 1
  a4:	1b b8       	out	0x0b, r1	; 11
  a6:	10 92 c5 00 	sts	0x00C5, r1
  aa:	10 92 c4 00 	sts	0x00C4, r1
  ae:	88 e1       	ldi	r24, 0x18	; 24
  b0:	80 93 c1 00 	sts	0x00C1, r24
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	80 93 c2 00 	sts	0x00C2, r24
  ba:	08 95       	ret

000000bc <USARTWriteChar>:
  bc:	e0 ec       	ldi	r30, 0xC0	; 192
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	90 81       	ld	r25, Z
  c2:	95 ff       	sbrs	r25, 5
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <USARTWriteChar+0x4>
  c6:	80 93 c6 00 	sts	0x00C6, r24
  ca:	08 95       	ret

000000cc <USARTSendInstruction5>:
void USARTSendInstruction5(int ID, int instruction, int parameter0, int parameter1, int parameter2, int parameter3, int parameter4)
{
  cc:	cf 92       	push	r12
  ce:	ef 92       	push	r14
  d0:	ff 92       	push	r15
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	c8 2f       	mov	r28, r24
  dc:	d6 2f       	mov	r29, r22
  de:	14 2f       	mov	r17, r20
  e0:	f2 2e       	mov	r15, r18
	PORTD = (0<<PORTD2);
}

void USART0SendMode()
{
	PORTD = (1<<PORTD2);
  e2:	84 e0       	ldi	r24, 0x04	; 4
  e4:	8b b9       	out	0x0b, r24	; 11
}
void USARTSendInstruction5(int ID, int instruction, int parameter0, int parameter1, int parameter2, int parameter3, int parameter4)
{
	// sätt USART till sändläge
	USART0SendMode();
	UCSR0A = UCSR0A | (0 << 6); 
  e6:	e0 ec       	ldi	r30, 0xC0	; 192
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	80 83       	st	Z, r24
	USARTWriteChar(0xFF);
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	e5 df       	rcall	.-54     	; 0xbc <USARTWriteChar>
	USARTWriteChar(0xFF);
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	e3 df       	rcall	.-58     	; 0xbc <USARTWriteChar>
	USARTWriteChar(ID);
  f6:	8c 2f       	mov	r24, r28
  f8:	e1 df       	rcall	.-62     	; 0xbc <USARTWriteChar>
	USARTWriteChar(7); // Paketets längd.
  fa:	87 e0       	ldi	r24, 0x07	; 7
  fc:	df df       	rcall	.-66     	; 0xbc <USARTWriteChar>
	USARTWriteChar(instruction);
  fe:	8d 2f       	mov	r24, r29
 100:	dd df       	rcall	.-70     	; 0xbc <USARTWriteChar>
	USARTWriteChar(parameter0);
 102:	81 2f       	mov	r24, r17
 104:	db df       	rcall	.-74     	; 0xbc <USARTWriteChar>
	USARTWriteChar(parameter1);
 106:	8f 2d       	mov	r24, r15
 108:	d9 df       	rcall	.-78     	; 0xbc <USARTWriteChar>
	USARTWriteChar(parameter2);
 10a:	80 2f       	mov	r24, r16
 10c:	d7 df       	rcall	.-82     	; 0xbc <USARTWriteChar>
	USARTWriteChar(parameter3);
 10e:	8e 2d       	mov	r24, r14
 110:	d5 df       	rcall	.-86     	; 0xbc <USARTWriteChar>
	USARTWriteChar(parameter4);
 112:	8c 2d       	mov	r24, r12
 114:	d3 df       	rcall	.-90     	; 0xbc <USARTWriteChar>
	cli();
 116:	f8 94       	cli
	USARTWriteChar(~(ID+7+instruction+parameter0+parameter1+parameter2+parameter3+parameter4)); // Checksum
 118:	87 e0       	ldi	r24, 0x07	; 7
 11a:	8c 0d       	add	r24, r12
 11c:	e8 0e       	add	r14, r24
 11e:	0e 0d       	add	r16, r14
 120:	f0 0e       	add	r15, r16
 122:	1f 0d       	add	r17, r15
 124:	d1 0f       	add	r29, r17
 126:	8d 2f       	mov	r24, r29
 128:	8c 0f       	add	r24, r28
 12a:	80 95       	com	r24
 12c:	c7 df       	rcall	.-114    	; 0xbc <USARTWriteChar>
	while(!TXD0_FINISHED) //TXD0 sätts till 1 då all data shiftats ut ifrån usarten
 12e:	e0 ec       	ldi	r30, 0xC0	; 192
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	86 ff       	sbrs	r24, 6
 136:	fd cf       	rjmp	.-6      	; 0x132 <USARTSendInstruction5+0x66>
#define INST_SYNC_WRITE 0x83
#define INST_SYNC_REG_WRITE 0x84

void USART0RecieveMode() 
{
	PORTD = (0<<PORTD2);
 138:	1b b8       	out	0x0b, r1	; 11
	{
		// Vänta tills den sänt klart det sista
	}
	;
	USART0RecieveMode();
 	char test1 = RXD0_DATA; // För att läsa det som är i reciever bufferten, används nu för att readchar ska funka
 13a:	80 91 c6 00 	lds	r24, 0x00C6
	sei(); // Tillåt interrupts igen
 13e:	78 94       	sei
	
}
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	1f 91       	pop	r17
 146:	0f 91       	pop	r16
 148:	ff 90       	pop	r15
 14a:	ef 90       	pop	r14
 14c:	cf 90       	pop	r12
 14e:	08 95       	ret

00000150 <USARTReadChar>:


char USARTReadChar()
{
	//Vänta tills data är tillgänglig
	while(!RXD0_READY)
 150:	e0 ec       	ldi	r30, 0xC0	; 192
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	88 23       	and	r24, r24
 158:	ec f7       	brge	.-6      	; 0x154 <USARTReadChar+0x4>
	{
		//Gör ingenting
	}
	return RXD0_DATA;
 15a:	80 91 c6 00 	lds	r24, 0x00C6
}
 15e:	08 95       	ret

00000160 <USARTReadStatusPacket>:

int USARTReadStatusPacket()
{
 160:	ff 92       	push	r15
 162:	0f 93       	push	r16
 164:	1f 93       	push	r17
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
	int ValueOfParameters = 0;
	//if ((USARTReadChar() == 0xFF) & (USARTReadChar() == 0xFF)) // Kollar om två startbitar
	//{
		DDRA = 0xff;
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	81 b9       	out	0x01, r24	; 1
		//char test = USARTReadChar();
		char Start1 = USARTReadChar();
 16e:	f0 df       	rcall	.-32     	; 0x150 <USARTReadChar>
		char Start2 = USARTReadChar();
 170:	ef df       	rcall	.-34     	; 0x150 <USARTReadChar>
		char ID = USARTReadChar();
 172:	ee df       	rcall	.-36     	; 0x150 <USARTReadChar>
		PORTA = ID;
 174:	82 b9       	out	0x02, r24	; 2
		char Length = USARTReadChar();
 176:	ec df       	rcall	.-40     	; 0x150 <USARTReadChar>
 178:	f8 2e       	mov	r15, r24
		char Error = USARTReadChar();
 17a:	ea df       	rcall	.-44     	; 0x150 <USARTReadChar>
		int HelpVariable = 0;
		// Läser av parametervärdena och sparar värdet i ValueOfParameters
		while (Length > 2) 
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	8f 15       	cp	r24, r15
 180:	a8 f4       	brcc	.+42     	; 0x1ac <USARTReadStatusPacket+0x4c>
 182:	c0 e0       	ldi	r28, 0x00	; 0
 184:	d0 e0       	ldi	r29, 0x00	; 0
	return RXD0_DATA;
}

int USARTReadStatusPacket()
{
	int ValueOfParameters = 0;
 186:	00 e0       	ldi	r16, 0x00	; 0
 188:	10 e0       	ldi	r17, 0x00	; 0
		char Error = USARTReadChar();
		int HelpVariable = 0;
		// Läser av parametervärdena och sparar värdet i ValueOfParameters
		while (Length > 2) 
		{
			ValueOfParameters = ValueOfParameters + (USARTReadChar() << (8*HelpVariable));
 18a:	e2 df       	rcall	.-60     	; 0x150 <USARTReadChar>
 18c:	28 2f       	mov	r18, r24
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	0c 2e       	mov	r0, r28
 192:	02 c0       	rjmp	.+4      	; 0x198 <USARTReadStatusPacket+0x38>
 194:	22 0f       	add	r18, r18
 196:	33 1f       	adc	r19, r19
 198:	0a 94       	dec	r0
 19a:	e2 f7       	brpl	.-8      	; 0x194 <USARTReadStatusPacket+0x34>
 19c:	02 0f       	add	r16, r18
 19e:	13 1f       	adc	r17, r19
	//		PORTA = PORTA | (1 << HelpVariable);
			HelpVariable = HelpVariable + 1;
			Length = Length - 1;
 1a0:	fa 94       	dec	r15
 1a2:	28 96       	adiw	r28, 0x08	; 8
		PORTA = ID;
		char Length = USARTReadChar();
		char Error = USARTReadChar();
		int HelpVariable = 0;
		// Läser av parametervärdena och sparar värdet i ValueOfParameters
		while (Length > 2) 
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	f8 12       	cpse	r15, r24
 1a8:	f0 cf       	rjmp	.-32     	; 0x18a <USARTReadStatusPacket+0x2a>
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <USARTReadStatusPacket+0x50>
	return RXD0_DATA;
}

int USARTReadStatusPacket()
{
	int ValueOfParameters = 0;
 1ac:	00 e0       	ldi	r16, 0x00	; 0
 1ae:	10 e0       	ldi	r17, 0x00	; 0
	//		PORTA = PORTA | (1 << HelpVariable);
			HelpVariable = HelpVariable + 1;
			Length = Length - 1;
		}
		
		char CheckSum = USARTReadChar();
 1b0:	cf df       	rcall	.-98     	; 0x150 <USARTReadChar>
	//}
	return ValueOfParameters;
	
}
 1b2:	c8 01       	movw	r24, r16
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	ff 90       	pop	r15
 1be:	08 95       	ret

000001c0 <MoveDynamixel>:

void MoveDynamixel(int ID,long int Degree,long int Velocity)
{
 1c0:	4f 92       	push	r4
 1c2:	5f 92       	push	r5
 1c4:	6f 92       	push	r6
 1c6:	7f 92       	push	r7
 1c8:	8f 92       	push	r8
 1ca:	9f 92       	push	r9
 1cc:	af 92       	push	r10
 1ce:	bf 92       	push	r11
 1d0:	cf 92       	push	r12
 1d2:	df 92       	push	r13
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	ec 01       	movw	r28, r24
 1e2:	68 01       	movw	r12, r16
 1e4:	79 01       	movw	r14, r18
	if ((Degree <= 300) & (Degree >= 0)) // Tillåtna grader är 0-300
 1e6:	4d 32       	cpi	r20, 0x2D	; 45
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	58 07       	cpc	r21, r24
 1ec:	61 05       	cpc	r22, r1
 1ee:	71 05       	cpc	r23, r1
 1f0:	c0 f5       	brcc	.+112    	; 0x262 <MoveDynamixel+0xa2>
	{
		long int LowGoalPosition = ((Degree*1023)/300) & 0x00FF; // Gör om graden till ett tal mellan 0-1023 och delar upp det i LSB(byte) och MSB(byte)
 1f2:	af ef       	ldi	r26, 0xFF	; 255
 1f4:	b3 e0       	ldi	r27, 0x03	; 3
 1f6:	9a 01       	movw	r18, r20
 1f8:	ab 01       	movw	r20, r22
 1fa:	01 d1       	rcall	.+514    	; 0x3fe <__muluhisi3>
 1fc:	2c e2       	ldi	r18, 0x2C	; 44
 1fe:	31 e0       	ldi	r19, 0x01	; 1
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	50 e0       	ldi	r21, 0x00	; 0
 204:	e0 d0       	rcall	.+448    	; 0x3c6 <__divmodsi4>
 206:	49 01       	movw	r8, r18
 208:	5a 01       	movw	r10, r20
 20a:	99 24       	eor	r9, r9
 20c:	aa 24       	eor	r10, r10
 20e:	bb 24       	eor	r11, r11
		long int HighGoalPosition = ((Degree*1023)/300) & 0xFF00;
		HighGoalPosition = (HighGoalPosition >> 8);
 210:	43 2e       	mov	r4, r19
 212:	51 2c       	mov	r5, r1
	
		long int LowAngleVelocity = 0;
		long int HighAngleVelocity = 0;
	
		if (Velocity >= 114) // Om RPM över 114 så rör vi oss med snabbaste möjliga hastigheten med spänningen som tillhandahålls
 214:	82 e7       	ldi	r24, 0x72	; 114
 216:	c8 16       	cp	r12, r24
 218:	d1 04       	cpc	r13, r1
 21a:	e1 04       	cpc	r14, r1
 21c:	f1 04       	cpc	r15, r1
 21e:	94 f4       	brge	.+36     	; 0x244 <MoveDynamixel+0x84>
			LowAngleVelocity = 0;
			HighAngleVelocity = 0;
		}
		else
		{
			LowAngleVelocity = ((Velocity*1023)/114) & 0x00FF;
 220:	af ef       	ldi	r26, 0xFF	; 255
 222:	b3 e0       	ldi	r27, 0x03	; 3
 224:	a7 01       	movw	r20, r14
 226:	96 01       	movw	r18, r12
 228:	ea d0       	rcall	.+468    	; 0x3fe <__muluhisi3>
 22a:	22 e7       	ldi	r18, 0x72	; 114
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	40 e0       	ldi	r20, 0x00	; 0
 230:	50 e0       	ldi	r21, 0x00	; 0
 232:	c9 d0       	rcall	.+402    	; 0x3c6 <__divmodsi4>
 234:	79 01       	movw	r14, r18
 236:	8a 01       	movw	r16, r20
 238:	ff 24       	eor	r15, r15
 23a:	00 27       	eor	r16, r16
 23c:	11 27       	eor	r17, r17
			HighAngleVelocity = ((Velocity*1023)/114) & 0xFF00;
			HighAngleVelocity = (HighAngleVelocity >> 8);
 23e:	43 2f       	mov	r20, r19
 240:	50 e0       	ldi	r21, 0x00	; 0
 242:	06 c0       	rjmp	.+12     	; 0x250 <MoveDynamixel+0x90>
		long int HighAngleVelocity = 0;
	
		if (Velocity >= 114) // Om RPM över 114 så rör vi oss med snabbaste möjliga hastigheten med spänningen som tillhandahålls
		{
			LowAngleVelocity = 0;
			HighAngleVelocity = 0;
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	50 e0       	ldi	r21, 0x00	; 0
 248:	ba 01       	movw	r22, r20
		long int LowAngleVelocity = 0;
		long int HighAngleVelocity = 0;
	
		if (Velocity >= 114) // Om RPM över 114 så rör vi oss med snabbaste möjliga hastigheten med spänningen som tillhandahålls
		{
			LowAngleVelocity = 0;
 24a:	e1 2c       	mov	r14, r1
 24c:	f1 2c       	mov	r15, r1
 24e:	87 01       	movw	r16, r14
			LowAngleVelocity = ((Velocity*1023)/114) & 0x00FF;
			HighAngleVelocity = ((Velocity*1023)/114) & 0xFF00;
			HighAngleVelocity = (HighAngleVelocity >> 8);
		}
	
		USARTSendInstruction5(ID,INST_WRITE,P_GOAL_POSITION_L,LowGoalPosition ,HighGoalPosition, LowAngleVelocity, HighAngleVelocity);
 250:	6a 01       	movw	r12, r20
 252:	82 01       	movw	r16, r4
 254:	94 01       	movw	r18, r8
 256:	4e e1       	ldi	r20, 0x1E	; 30
 258:	50 e0       	ldi	r21, 0x00	; 0
 25a:	63 e0       	ldi	r22, 0x03	; 3
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	ce 01       	movw	r24, r28
 260:	35 df       	rcall	.-406    	; 0xcc <USARTSendInstruction5>
	}
}
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	ff 90       	pop	r15
 26c:	ef 90       	pop	r14
 26e:	df 90       	pop	r13
 270:	cf 90       	pop	r12
 272:	bf 90       	pop	r11
 274:	af 90       	pop	r10
 276:	9f 90       	pop	r9
 278:	8f 90       	pop	r8
 27a:	7f 90       	pop	r7
 27c:	6f 90       	pop	r6
 27e:	5f 90       	pop	r5
 280:	4f 90       	pop	r4
 282:	08 95       	ret

00000284 <main>:

int main(void)
{
 284:	0f 93       	push	r16
 286:	1f 93       	push	r17
	initUSART();
 288:	0a df       	rcall	.-492    	; 0x9e <initUSART>
			//USARTSendInstruction2(3,INST_READ,0x12,0x01);
			//USARTSendInstruction0(1,INST_PING);//ID, instruction, parameters
			//USARTSendInstruction2(5,INST_READ,0x12,0x01);
			//DDRB = 0xFF;
			//PORTB = USARTReadStatusPacket();
			MoveDynamixel(6,200,15);
 28a:	0f e0       	ldi	r16, 0x0F	; 15
 28c:	10 e0       	ldi	r17, 0x00	; 0
 28e:	20 e0       	ldi	r18, 0x00	; 0
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	48 ec       	ldi	r20, 0xC8	; 200
 294:	50 e0       	ldi	r21, 0x00	; 0
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	70 e0       	ldi	r23, 0x00	; 0
 29a:	86 e0       	ldi	r24, 0x06	; 6
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	90 df       	rcall	.-224    	; 0x1c0 <MoveDynamixel>
			USARTReadStatusPacket();
 2a0:	5f df       	rcall	.-322    	; 0x160 <USARTReadStatusPacket>
			MoveDynamixel(12,200,15); 
 2a2:	0f e0       	ldi	r16, 0x0F	; 15
 2a4:	10 e0       	ldi	r17, 0x00	; 0
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	48 ec       	ldi	r20, 0xC8	; 200
 2ac:	50 e0       	ldi	r21, 0x00	; 0
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	8c e0       	ldi	r24, 0x0C	; 12
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	84 df       	rcall	.-248    	; 0x1c0 <MoveDynamixel>
			USARTReadStatusPacket();
 2b8:	53 df       	rcall	.-346    	; 0x160 <USARTReadStatusPacket>
			MoveDynamixel(5,100,15);
 2ba:	0f e0       	ldi	r16, 0x0F	; 15
 2bc:	10 e0       	ldi	r17, 0x00	; 0
 2be:	20 e0       	ldi	r18, 0x00	; 0
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	44 e6       	ldi	r20, 0x64	; 100
 2c4:	50 e0       	ldi	r21, 0x00	; 0
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	70 e0       	ldi	r23, 0x00	; 0
 2ca:	85 e0       	ldi	r24, 0x05	; 5
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	78 df       	rcall	.-272    	; 0x1c0 <MoveDynamixel>
			USARTReadStatusPacket();
 2d0:	47 df       	rcall	.-370    	; 0x160 <USARTReadStatusPacket>
			MoveDynamixel(11,100,15);
 2d2:	0f e0       	ldi	r16, 0x0F	; 15
 2d4:	10 e0       	ldi	r17, 0x00	; 0
 2d6:	20 e0       	ldi	r18, 0x00	; 0
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	44 e6       	ldi	r20, 0x64	; 100
 2dc:	50 e0       	ldi	r21, 0x00	; 0
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	8b e0       	ldi	r24, 0x0B	; 11
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	6c df       	rcall	.-296    	; 0x1c0 <MoveDynamixel>
			USARTReadStatusPacket();
 2e8:	3b df       	rcall	.-394    	; 0x160 <USARTReadStatusPacket>
			MoveDynamixel(3,200,15);
 2ea:	0f e0       	ldi	r16, 0x0F	; 15
 2ec:	10 e0       	ldi	r17, 0x00	; 0
 2ee:	20 e0       	ldi	r18, 0x00	; 0
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	48 ec       	ldi	r20, 0xC8	; 200
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	83 e0       	ldi	r24, 0x03	; 3
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	60 df       	rcall	.-320    	; 0x1c0 <MoveDynamixel>
			USARTReadStatusPacket();
 300:	2f df       	rcall	.-418    	; 0x160 <USARTReadStatusPacket>
			MoveDynamixel(4,100,15);
 302:	0f e0       	ldi	r16, 0x0F	; 15
 304:	10 e0       	ldi	r17, 0x00	; 0
 306:	20 e0       	ldi	r18, 0x00	; 0
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	44 e6       	ldi	r20, 0x64	; 100
 30c:	50 e0       	ldi	r21, 0x00	; 0
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	84 e0       	ldi	r24, 0x04	; 4
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	54 df       	rcall	.-344    	; 0x1c0 <MoveDynamixel>
			USARTReadStatusPacket();
 318:	23 df       	rcall	.-442    	; 0x160 <USARTReadStatusPacket>
			MoveDynamixel(10,100,15);
 31a:	0f e0       	ldi	r16, 0x0F	; 15
 31c:	10 e0       	ldi	r17, 0x00	; 0
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	44 e6       	ldi	r20, 0x64	; 100
 324:	50 e0       	ldi	r21, 0x00	; 0
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	8a e0       	ldi	r24, 0x0A	; 10
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	48 df       	rcall	.-368    	; 0x1c0 <MoveDynamixel>
			USARTReadStatusPacket();
 330:	17 df       	rcall	.-466    	; 0x160 <USARTReadStatusPacket>
			MoveDynamixel(9,200,15);
 332:	0f e0       	ldi	r16, 0x0F	; 15
 334:	10 e0       	ldi	r17, 0x00	; 0
 336:	20 e0       	ldi	r18, 0x00	; 0
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	48 ec       	ldi	r20, 0xC8	; 200
 33c:	50 e0       	ldi	r21, 0x00	; 0
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	89 e0       	ldi	r24, 0x09	; 9
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	3c df       	rcall	.-392    	; 0x1c0 <MoveDynamixel>
			USARTReadStatusPacket();
 348:	0b df       	rcall	.-490    	; 0x160 <USARTReadStatusPacket>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34a:	2f e7       	ldi	r18, 0x7F	; 127
 34c:	84 e8       	ldi	r24, 0x84	; 132
 34e:	9e e1       	ldi	r25, 0x1E	; 30
 350:	21 50       	subi	r18, 0x01	; 1
 352:	80 40       	sbci	r24, 0x00	; 0
 354:	90 40       	sbci	r25, 0x00	; 0
 356:	e1 f7       	brne	.-8      	; 0x350 <main+0xcc>
 358:	00 c0       	rjmp	.+0      	; 0x35a <main+0xd6>
 35a:	00 00       	nop
			_delay_ms(10000);
			MoveDynamixel(1,100,15);
 35c:	0f e0       	ldi	r16, 0x0F	; 15
 35e:	10 e0       	ldi	r17, 0x00	; 0
 360:	20 e0       	ldi	r18, 0x00	; 0
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	44 e6       	ldi	r20, 0x64	; 100
 366:	50 e0       	ldi	r21, 0x00	; 0
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	70 e0       	ldi	r23, 0x00	; 0
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	27 df       	rcall	.-434    	; 0x1c0 <MoveDynamixel>
			USARTReadStatusPacket();
 372:	f6 de       	rcall	.-532    	; 0x160 <USARTReadStatusPacket>
			MoveDynamixel(2,100,15);
 374:	0f e0       	ldi	r16, 0x0F	; 15
 376:	10 e0       	ldi	r17, 0x00	; 0
 378:	20 e0       	ldi	r18, 0x00	; 0
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	44 e6       	ldi	r20, 0x64	; 100
 37e:	50 e0       	ldi	r21, 0x00	; 0
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	82 e0       	ldi	r24, 0x02	; 2
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	1b df       	rcall	.-458    	; 0x1c0 <MoveDynamixel>
			USARTReadStatusPacket();
 38a:	ea de       	rcall	.-556    	; 0x160 <USARTReadStatusPacket>
			MoveDynamixel(7,100,15);
 38c:	0f e0       	ldi	r16, 0x0F	; 15
 38e:	10 e0       	ldi	r17, 0x00	; 0
 390:	20 e0       	ldi	r18, 0x00	; 0
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	44 e6       	ldi	r20, 0x64	; 100
 396:	50 e0       	ldi	r21, 0x00	; 0
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	87 e0       	ldi	r24, 0x07	; 7
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0f df       	rcall	.-482    	; 0x1c0 <MoveDynamixel>
			USARTReadStatusPacket();
 3a2:	de de       	rcall	.-580    	; 0x160 <USARTReadStatusPacket>
			MoveDynamixel(8,100,15);
 3a4:	0f e0       	ldi	r16, 0x0F	; 15
 3a6:	10 e0       	ldi	r17, 0x00	; 0
 3a8:	20 e0       	ldi	r18, 0x00	; 0
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	44 e6       	ldi	r20, 0x64	; 100
 3ae:	50 e0       	ldi	r21, 0x00	; 0
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	70 e0       	ldi	r23, 0x00	; 0
 3b4:	88 e0       	ldi	r24, 0x08	; 8
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	03 df       	rcall	.-506    	; 0x1c0 <MoveDynamixel>
			USARTReadStatusPacket();
 3ba:	d2 de       	rcall	.-604    	; 0x160 <USARTReadStatusPacket>
		else 
		{
			send = 1;
		}
	}*/
}
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	1f 91       	pop	r17
 3c2:	0f 91       	pop	r16
 3c4:	08 95       	ret

000003c6 <__divmodsi4>:
 3c6:	05 2e       	mov	r0, r21
 3c8:	97 fb       	bst	r25, 7
 3ca:	16 f4       	brtc	.+4      	; 0x3d0 <__divmodsi4+0xa>
 3cc:	00 94       	com	r0
 3ce:	0f d0       	rcall	.+30     	; 0x3ee <__negsi2>
 3d0:	57 fd       	sbrc	r21, 7
 3d2:	05 d0       	rcall	.+10     	; 0x3de <__divmodsi4_neg2>
 3d4:	1e d0       	rcall	.+60     	; 0x412 <__udivmodsi4>
 3d6:	07 fc       	sbrc	r0, 7
 3d8:	02 d0       	rcall	.+4      	; 0x3de <__divmodsi4_neg2>
 3da:	46 f4       	brtc	.+16     	; 0x3ec <__divmodsi4_exit>
 3dc:	08 c0       	rjmp	.+16     	; 0x3ee <__negsi2>

000003de <__divmodsi4_neg2>:
 3de:	50 95       	com	r21
 3e0:	40 95       	com	r20
 3e2:	30 95       	com	r19
 3e4:	21 95       	neg	r18
 3e6:	3f 4f       	sbci	r19, 0xFF	; 255
 3e8:	4f 4f       	sbci	r20, 0xFF	; 255
 3ea:	5f 4f       	sbci	r21, 0xFF	; 255

000003ec <__divmodsi4_exit>:
 3ec:	08 95       	ret

000003ee <__negsi2>:
 3ee:	90 95       	com	r25
 3f0:	80 95       	com	r24
 3f2:	70 95       	com	r23
 3f4:	61 95       	neg	r22
 3f6:	7f 4f       	sbci	r23, 0xFF	; 255
 3f8:	8f 4f       	sbci	r24, 0xFF	; 255
 3fa:	9f 4f       	sbci	r25, 0xFF	; 255
 3fc:	08 95       	ret

000003fe <__muluhisi3>:
 3fe:	2b d0       	rcall	.+86     	; 0x456 <__umulhisi3>
 400:	a5 9f       	mul	r26, r21
 402:	90 0d       	add	r25, r0
 404:	b4 9f       	mul	r27, r20
 406:	90 0d       	add	r25, r0
 408:	a4 9f       	mul	r26, r20
 40a:	80 0d       	add	r24, r0
 40c:	91 1d       	adc	r25, r1
 40e:	11 24       	eor	r1, r1
 410:	08 95       	ret

00000412 <__udivmodsi4>:
 412:	a1 e2       	ldi	r26, 0x21	; 33
 414:	1a 2e       	mov	r1, r26
 416:	aa 1b       	sub	r26, r26
 418:	bb 1b       	sub	r27, r27
 41a:	fd 01       	movw	r30, r26
 41c:	0d c0       	rjmp	.+26     	; 0x438 <__udivmodsi4_ep>

0000041e <__udivmodsi4_loop>:
 41e:	aa 1f       	adc	r26, r26
 420:	bb 1f       	adc	r27, r27
 422:	ee 1f       	adc	r30, r30
 424:	ff 1f       	adc	r31, r31
 426:	a2 17       	cp	r26, r18
 428:	b3 07       	cpc	r27, r19
 42a:	e4 07       	cpc	r30, r20
 42c:	f5 07       	cpc	r31, r21
 42e:	20 f0       	brcs	.+8      	; 0x438 <__udivmodsi4_ep>
 430:	a2 1b       	sub	r26, r18
 432:	b3 0b       	sbc	r27, r19
 434:	e4 0b       	sbc	r30, r20
 436:	f5 0b       	sbc	r31, r21

00000438 <__udivmodsi4_ep>:
 438:	66 1f       	adc	r22, r22
 43a:	77 1f       	adc	r23, r23
 43c:	88 1f       	adc	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	1a 94       	dec	r1
 442:	69 f7       	brne	.-38     	; 0x41e <__udivmodsi4_loop>
 444:	60 95       	com	r22
 446:	70 95       	com	r23
 448:	80 95       	com	r24
 44a:	90 95       	com	r25
 44c:	9b 01       	movw	r18, r22
 44e:	ac 01       	movw	r20, r24
 450:	bd 01       	movw	r22, r26
 452:	cf 01       	movw	r24, r30
 454:	08 95       	ret

00000456 <__umulhisi3>:
 456:	a2 9f       	mul	r26, r18
 458:	b0 01       	movw	r22, r0
 45a:	b3 9f       	mul	r27, r19
 45c:	c0 01       	movw	r24, r0
 45e:	a3 9f       	mul	r26, r19
 460:	70 0d       	add	r23, r0
 462:	81 1d       	adc	r24, r1
 464:	11 24       	eor	r1, r1
 466:	91 1d       	adc	r25, r1
 468:	b2 9f       	mul	r27, r18
 46a:	70 0d       	add	r23, r0
 46c:	81 1d       	adc	r24, r1
 46e:	11 24       	eor	r1, r1
 470:	91 1d       	adc	r25, r1
 472:	08 95       	ret

00000474 <_exit>:
 474:	f8 94       	cli

00000476 <__stop_program>:
 476:	ff cf       	rjmp	.-2      	; 0x476 <__stop_program>
