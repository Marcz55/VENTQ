
Test_servo_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00003802  00003896  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003802  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000783  0080013a  0080013a  000038d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000038d0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00003900  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001dc8  00000000  00000000  00003a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000033b  00000000  00000000  000057d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d7b  00000000  00000000  00005b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000848  00000000  00000000  00006888  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006a4  00000000  00000000  000070d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000313a  00000000  00000000  00007774  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  0000a8ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	70 c0       	rjmp	.+224    	; 0xe2 <__ctors_end>
       2:	00 00       	nop
       4:	8d c0       	rjmp	.+282    	; 0x120 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c 94 d1 14 	jmp	0x29a2	; 0x29a2 <__vector_2>
       c:	89 c0       	rjmp	.+274    	; 0x120 <__bad_interrupt>
       e:	00 00       	nop
      10:	87 c0       	rjmp	.+270    	; 0x120 <__bad_interrupt>
      12:	00 00       	nop
      14:	85 c0       	rjmp	.+266    	; 0x120 <__bad_interrupt>
      16:	00 00       	nop
      18:	83 c0       	rjmp	.+262    	; 0x120 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	81 c0       	rjmp	.+258    	; 0x120 <__bad_interrupt>
      1e:	00 00       	nop
      20:	7f c0       	rjmp	.+254    	; 0x120 <__bad_interrupt>
      22:	00 00       	nop
      24:	7d c0       	rjmp	.+250    	; 0x120 <__bad_interrupt>
      26:	00 00       	nop
      28:	7b c0       	rjmp	.+246    	; 0x120 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	79 c0       	rjmp	.+242    	; 0x120 <__bad_interrupt>
      2e:	00 00       	nop
      30:	77 c0       	rjmp	.+238    	; 0x120 <__bad_interrupt>
      32:	00 00       	nop
      34:	75 c0       	rjmp	.+234    	; 0x120 <__bad_interrupt>
      36:	00 00       	nop
      38:	73 c0       	rjmp	.+230    	; 0x120 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	71 c0       	rjmp	.+226    	; 0x120 <__bad_interrupt>
      3e:	00 00       	nop
      40:	6f c0       	rjmp	.+222    	; 0x120 <__bad_interrupt>
      42:	00 00       	nop
      44:	6d c0       	rjmp	.+218    	; 0x120 <__bad_interrupt>
      46:	00 00       	nop
      48:	92 c1       	rjmp	.+804    	; 0x36e <__vector_18>
      4a:	00 00       	nop
      4c:	69 c0       	rjmp	.+210    	; 0x120 <__bad_interrupt>
      4e:	00 00       	nop
      50:	67 c0       	rjmp	.+206    	; 0x120 <__bad_interrupt>
      52:	00 00       	nop
      54:	65 c0       	rjmp	.+202    	; 0x120 <__bad_interrupt>
      56:	00 00       	nop
      58:	63 c0       	rjmp	.+198    	; 0x120 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	61 c0       	rjmp	.+194    	; 0x120 <__bad_interrupt>
      5e:	00 00       	nop
      60:	5f c0       	rjmp	.+190    	; 0x120 <__bad_interrupt>
      62:	00 00       	nop
      64:	5d c0       	rjmp	.+186    	; 0x120 <__bad_interrupt>
      66:	00 00       	nop
      68:	5b c0       	rjmp	.+182    	; 0x120 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	59 c0       	rjmp	.+178    	; 0x120 <__bad_interrupt>
      6e:	00 00       	nop
      70:	57 c0       	rjmp	.+174    	; 0x120 <__bad_interrupt>
      72:	00 00       	nop
      74:	55 c0       	rjmp	.+170    	; 0x120 <__bad_interrupt>
      76:	00 00       	nop
      78:	53 c0       	rjmp	.+166    	; 0x120 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	51 c0       	rjmp	.+162    	; 0x120 <__bad_interrupt>
      7e:	00 00       	nop
      80:	4f c0       	rjmp	.+158    	; 0x120 <__bad_interrupt>
      82:	00 00       	nop
      84:	4d c0       	rjmp	.+154    	; 0x120 <__bad_interrupt>
      86:	00 00       	nop
      88:	4b c0       	rjmp	.+150    	; 0x120 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 07       	cpc	r19, r31
      ba:	2c 7a       	andi	r18, 0xAC	; 172
      bc:	a5 ba       	out	0x15, r10	; 21
      be:	6c c5       	rjmp	.+2776   	; 0xb98 <MoveRearLeftLeg+0x12a>
      c0:	90 da       	rcall	.-2784   	; 0xfffff5e2 <__eeprom_end+0xff7ef5e2>
      c2:	3b 93       	.word	0x933b	; ????
      c4:	65 fc       	sbrc	r6, 5
      c6:	8b bc       	out	0x2b, r8	; 43
      c8:	53 f8       	bld	r5, 3
      ca:	10 fd       	sbrc	r17, 0
      cc:	3c 56       	subi	r19, 0x6C	; 108
      ce:	92 83       	std	Z+2, r25	; 0x02
      d0:	4d bd       	out	0x2d, r20	; 45
      d2:	87 9d       	mul	r24, r7
      d4:	3a b6       	in	r3, 0x3a	; 58
      d6:	3d cb       	rjmp	.-2438   	; 0xfffff752 <__eeprom_end+0xff7ef752>
      d8:	c9 bf       	out	0x39, r28	; 57
      da:	5b be       	out	0x3b, r5	; 59
      dc:	73 da       	rcall	.-2842   	; 0xfffff5c4 <__eeprom_end+0xff7ef5c4>
      de:	0f c9       	rjmp	.-3554   	; 0xfffff2fe <__eeprom_end+0xff7ef2fe>
      e0:	3f 00       	.word	0x003f	; ????

000000e2 <__ctors_end>:
      e2:	11 24       	eor	r1, r1
      e4:	1f be       	out	0x3f, r1	; 63
      e6:	cf ef       	ldi	r28, 0xFF	; 255
      e8:	d0 e4       	ldi	r29, 0x40	; 64
      ea:	de bf       	out	0x3e, r29	; 62
      ec:	cd bf       	out	0x3d, r28	; 61

000000ee <__do_copy_data>:
      ee:	11 e0       	ldi	r17, 0x01	; 1
      f0:	a0 e0       	ldi	r26, 0x00	; 0
      f2:	b1 e0       	ldi	r27, 0x01	; 1
      f4:	e2 e0       	ldi	r30, 0x02	; 2
      f6:	f8 e3       	ldi	r31, 0x38	; 56
      f8:	00 e0       	ldi	r16, 0x00	; 0
      fa:	0b bf       	out	0x3b, r16	; 59
      fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x14>
      fe:	07 90       	elpm	r0, Z+
     100:	0d 92       	st	X+, r0
     102:	aa 33       	cpi	r26, 0x3A	; 58
     104:	b1 07       	cpc	r27, r17
     106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0x10>

00000108 <__do_clear_bss>:
     108:	28 e0       	ldi	r18, 0x08	; 8
     10a:	aa e3       	ldi	r26, 0x3A	; 58
     10c:	b1 e0       	ldi	r27, 0x01	; 1
     10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
     110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
     112:	ad 3b       	cpi	r26, 0xBD	; 189
     114:	b2 07       	cpc	r27, r18
     116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>
     118:	0e 94 83 18 	call	0x3106	; 0x3106 <main>
     11c:	0c 94 ff 1b 	jmp	0x37fe	; 0x37fe <_exit>

00000120 <__bad_interrupt>:
     120:	6f cf       	rjmp	.-290    	; 0x0 <__vectors>

00000122 <timer0Init>:
        // Vänta tills den sänt klart det sista
    }
    USART0RecieveMode();
    sei(); // Tillåt interrupts igen
    
}
     122:	85 b5       	in	r24, 0x25	; 37
     124:	84 60       	ori	r24, 0x04	; 4
     126:	85 bd       	out	0x25, r24	; 37
     128:	16 bc       	out	0x26, r1	; 38
     12a:	ee e6       	ldi	r30, 0x6E	; 110
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	81 60       	ori	r24, 0x01	; 1
     132:	80 83       	st	Z, r24
     134:	78 94       	sei
     136:	10 92 bc 08 	sts	0x08BC, r1
     13a:	08 95       	ret

0000013c <SetLegIncrementPeriod>:
     13c:	86 34       	cpi	r24, 0x46	; 70
     13e:	91 05       	cpc	r25, r1
     140:	09 f4       	brne	.+2      	; 0x144 <SetLegIncrementPeriod+0x8>
     142:	87 c0       	rjmp	.+270    	; 0x252 <SetLegIncrementPeriod+0x116>
     144:	bc f4       	brge	.+46     	; 0x174 <SetLegIncrementPeriod+0x38>
     146:	8e 31       	cpi	r24, 0x1E	; 30
     148:	91 05       	cpc	r25, r1
     14a:	09 f4       	brne	.+2      	; 0x14e <SetLegIncrementPeriod+0x12>
     14c:	4e c0       	rjmp	.+156    	; 0x1ea <SetLegIncrementPeriod+0xae>
     14e:	34 f4       	brge	.+12     	; 0x15c <SetLegIncrementPeriod+0x20>
     150:	8a 30       	cpi	r24, 0x0A	; 10
     152:	91 05       	cpc	r25, r1
     154:	81 f1       	breq	.+96     	; 0x1b6 <SetLegIncrementPeriod+0x7a>
     156:	44 97       	sbiw	r24, 0x14	; 20
     158:	d9 f1       	breq	.+118    	; 0x1d0 <SetLegIncrementPeriod+0x94>
     15a:	08 95       	ret
     15c:	82 33       	cpi	r24, 0x32	; 50
     15e:	91 05       	cpc	r25, r1
     160:	09 f4       	brne	.+2      	; 0x164 <SetLegIncrementPeriod+0x28>
     162:	5d c0       	rjmp	.+186    	; 0x21e <SetLegIncrementPeriod+0xe2>
     164:	8c 33       	cpi	r24, 0x3C	; 60
     166:	91 05       	cpc	r25, r1
     168:	09 f4       	brne	.+2      	; 0x16c <SetLegIncrementPeriod+0x30>
     16a:	66 c0       	rjmp	.+204    	; 0x238 <SetLegIncrementPeriod+0xfc>
     16c:	88 97       	sbiw	r24, 0x28	; 40
     16e:	09 f0       	breq	.+2      	; 0x172 <SetLegIncrementPeriod+0x36>
     170:	d7 c0       	rjmp	.+430    	; 0x320 <SetLegIncrementPeriod+0x1e4>
     172:	48 c0       	rjmp	.+144    	; 0x204 <SetLegIncrementPeriod+0xc8>
     174:	88 3c       	cpi	r24, 0xC8	; 200
     176:	91 05       	cpc	r25, r1
     178:	09 f4       	brne	.+2      	; 0x17c <SetLegIncrementPeriod+0x40>
     17a:	9f c0       	rjmp	.+318    	; 0x2ba <SetLegIncrementPeriod+0x17e>
     17c:	6c f4       	brge	.+26     	; 0x198 <SetLegIncrementPeriod+0x5c>
     17e:	8a 35       	cpi	r24, 0x5A	; 90
     180:	91 05       	cpc	r25, r1
     182:	09 f4       	brne	.+2      	; 0x186 <SetLegIncrementPeriod+0x4a>
     184:	80 c0       	rjmp	.+256    	; 0x286 <SetLegIncrementPeriod+0x14a>
     186:	84 36       	cpi	r24, 0x64	; 100
     188:	91 05       	cpc	r25, r1
     18a:	09 f4       	brne	.+2      	; 0x18e <SetLegIncrementPeriod+0x52>
     18c:	89 c0       	rjmp	.+274    	; 0x2a0 <SetLegIncrementPeriod+0x164>
     18e:	80 35       	cpi	r24, 0x50	; 80
     190:	91 05       	cpc	r25, r1
     192:	09 f0       	breq	.+2      	; 0x196 <SetLegIncrementPeriod+0x5a>
     194:	c5 c0       	rjmp	.+394    	; 0x320 <SetLegIncrementPeriod+0x1e4>
     196:	6a c0       	rjmp	.+212    	; 0x26c <SetLegIncrementPeriod+0x130>
     198:	80 39       	cpi	r24, 0x90	; 144
     19a:	21 e0       	ldi	r18, 0x01	; 1
     19c:	92 07       	cpc	r25, r18
     19e:	09 f4       	brne	.+2      	; 0x1a2 <SetLegIncrementPeriod+0x66>
     1a0:	a6 c0       	rjmp	.+332    	; 0x2ee <SetLegIncrementPeriod+0x1b2>
     1a2:	84 3f       	cpi	r24, 0xF4	; 244
     1a4:	21 e0       	ldi	r18, 0x01	; 1
     1a6:	92 07       	cpc	r25, r18
     1a8:	09 f4       	brne	.+2      	; 0x1ac <SetLegIncrementPeriod+0x70>
     1aa:	ae c0       	rjmp	.+348    	; 0x308 <SetLegIncrementPeriod+0x1cc>
     1ac:	8c 32       	cpi	r24, 0x2C	; 44
     1ae:	91 40       	sbci	r25, 0x01	; 1
     1b0:	09 f0       	breq	.+2      	; 0x1b4 <SetLegIncrementPeriod+0x78>
     1b2:	b6 c0       	rjmp	.+364    	; 0x320 <SetLegIncrementPeriod+0x1e4>
     1b4:	8f c0       	rjmp	.+286    	; 0x2d4 <SetLegIncrementPeriod+0x198>
     1b6:	82 e0       	ldi	r24, 0x02	; 2
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	90 93 27 01 	sts	0x0127, r25
     1be:	80 93 26 01 	sts	0x0126, r24
     1c2:	81 e7       	ldi	r24, 0x71	; 113
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	90 93 25 01 	sts	0x0125, r25
     1ca:	80 93 24 01 	sts	0x0124, r24
     1ce:	08 95       	ret
     1d0:	84 e0       	ldi	r24, 0x04	; 4
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	90 93 27 01 	sts	0x0127, r25
     1d8:	80 93 26 01 	sts	0x0126, r24
     1dc:	82 ee       	ldi	r24, 0xE2	; 226
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	90 93 25 01 	sts	0x0125, r25
     1e4:	80 93 24 01 	sts	0x0124, r24
     1e8:	08 95       	ret
     1ea:	87 e0       	ldi	r24, 0x07	; 7
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	90 93 27 01 	sts	0x0127, r25
     1f2:	80 93 26 01 	sts	0x0126, r24
     1f6:	83 e5       	ldi	r24, 0x53	; 83
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	90 93 25 01 	sts	0x0125, r25
     1fe:	80 93 24 01 	sts	0x0124, r24
     202:	08 95       	ret
     204:	89 e0       	ldi	r24, 0x09	; 9
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	90 93 27 01 	sts	0x0127, r25
     20c:	80 93 26 01 	sts	0x0126, r24
     210:	84 ec       	ldi	r24, 0xC4	; 196
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	90 93 25 01 	sts	0x0125, r25
     218:	80 93 24 01 	sts	0x0124, r24
     21c:	08 95       	ret
     21e:	8c e0       	ldi	r24, 0x0C	; 12
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	90 93 27 01 	sts	0x0127, r25
     226:	80 93 26 01 	sts	0x0126, r24
     22a:	85 e3       	ldi	r24, 0x35	; 53
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	90 93 25 01 	sts	0x0125, r25
     232:	80 93 24 01 	sts	0x0124, r24
     236:	08 95       	ret
     238:	8e e0       	ldi	r24, 0x0E	; 14
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	90 93 27 01 	sts	0x0127, r25
     240:	80 93 26 01 	sts	0x0126, r24
     244:	86 ea       	ldi	r24, 0xA6	; 166
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	90 93 25 01 	sts	0x0125, r25
     24c:	80 93 24 01 	sts	0x0124, r24
     250:	08 95       	ret
     252:	81 e1       	ldi	r24, 0x11	; 17
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	90 93 27 01 	sts	0x0127, r25
     25a:	80 93 26 01 	sts	0x0126, r24
     25e:	87 e1       	ldi	r24, 0x17	; 23
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	90 93 25 01 	sts	0x0125, r25
     266:	80 93 24 01 	sts	0x0124, r24
     26a:	08 95       	ret
     26c:	83 e1       	ldi	r24, 0x13	; 19
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	90 93 27 01 	sts	0x0127, r25
     274:	80 93 26 01 	sts	0x0126, r24
     278:	88 e8       	ldi	r24, 0x88	; 136
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	90 93 25 01 	sts	0x0125, r25
     280:	80 93 24 01 	sts	0x0124, r24
     284:	08 95       	ret
     286:	85 e1       	ldi	r24, 0x15	; 21
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	90 93 27 01 	sts	0x0127, r25
     28e:	80 93 26 01 	sts	0x0126, r24
     292:	89 ef       	ldi	r24, 0xF9	; 249
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	90 93 25 01 	sts	0x0125, r25
     29a:	80 93 24 01 	sts	0x0124, r24
     29e:	08 95       	ret
     2a0:	88 e1       	ldi	r24, 0x18	; 24
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	90 93 27 01 	sts	0x0127, r25
     2a8:	80 93 26 01 	sts	0x0126, r24
     2ac:	8a e6       	ldi	r24, 0x6A	; 106
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	90 93 25 01 	sts	0x0125, r25
     2b4:	80 93 24 01 	sts	0x0124, r24
     2b8:	08 95       	ret
     2ba:	80 e3       	ldi	r24, 0x30	; 48
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	90 93 27 01 	sts	0x0127, r25
     2c2:	80 93 26 01 	sts	0x0126, r24
     2c6:	84 ed       	ldi	r24, 0xD4	; 212
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	90 93 25 01 	sts	0x0125, r25
     2ce:	80 93 24 01 	sts	0x0124, r24
     2d2:	08 95       	ret
     2d4:	89 e4       	ldi	r24, 0x49	; 73
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	90 93 27 01 	sts	0x0127, r25
     2dc:	80 93 26 01 	sts	0x0126, r24
     2e0:	8e e3       	ldi	r24, 0x3E	; 62
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	90 93 25 01 	sts	0x0125, r25
     2e8:	80 93 24 01 	sts	0x0124, r24
     2ec:	08 95       	ret
     2ee:	81 e6       	ldi	r24, 0x61	; 97
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	90 93 27 01 	sts	0x0127, r25
     2f6:	80 93 26 01 	sts	0x0126, r24
     2fa:	88 ea       	ldi	r24, 0xA8	; 168
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	90 93 25 01 	sts	0x0125, r25
     302:	80 93 24 01 	sts	0x0124, r24
     306:	08 95       	ret
     308:	8a e7       	ldi	r24, 0x7A	; 122
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	90 93 27 01 	sts	0x0127, r25
     310:	80 93 26 01 	sts	0x0126, r24
     314:	82 e1       	ldi	r24, 0x12	; 18
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	90 93 25 01 	sts	0x0125, r25
     31c:	80 93 24 01 	sts	0x0124, r24
     320:	08 95       	ret

00000322 <calcDynamixelSpeed>:
     322:	9b 01       	movw	r18, r22
     324:	ac 01       	movw	r20, r24
     326:	a8 ee       	ldi	r26, 0xE8	; 232
     328:	b3 e0       	ldi	r27, 0x03	; 3
     32a:	0e 94 c4 1b 	call	0x3788	; 0x3788 <__muluhisi3>
     32e:	20 91 28 01 	lds	r18, 0x0128
     332:	30 91 29 01 	lds	r19, 0x0129
     336:	a9 01       	movw	r20, r18
     338:	44 0f       	add	r20, r20
     33a:	55 1f       	adc	r21, r21
     33c:	24 0f       	add	r18, r20
     33e:	35 1f       	adc	r19, r21
     340:	22 0f       	add	r18, r18
     342:	33 1f       	adc	r19, r19
     344:	44 27       	eor	r20, r20
     346:	37 fd       	sbrc	r19, 7
     348:	40 95       	com	r20
     34a:	54 2f       	mov	r21, r20
     34c:	0e 94 a8 1b 	call	0x3750	; 0x3750 <__divmodsi4>
     350:	2a 30       	cpi	r18, 0x0A	; 10
     352:	31 05       	cpc	r19, r1
     354:	41 05       	cpc	r20, r1
     356:	51 05       	cpc	r21, r1
     358:	2c f4       	brge	.+10     	; 0x364 <calcDynamixelSpeed+0x42>
     35a:	6a e0       	ldi	r22, 0x0A	; 10
     35c:	70 e0       	ldi	r23, 0x00	; 0
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	08 95       	ret
     364:	62 2f       	mov	r22, r18
     366:	73 2f       	mov	r23, r19
     368:	84 2f       	mov	r24, r20
     36a:	95 2f       	mov	r25, r21
     36c:	08 95       	ret

0000036e <__vector_18>:
     36e:	1f 92       	push	r1
     370:	0f 92       	push	r0
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	0f 92       	push	r0
     376:	11 24       	eor	r1, r1
     378:	8f 93       	push	r24
     37a:	80 91 bc 08 	lds	r24, 0x08BC
     37e:	8f 5f       	subi	r24, 0xFF	; 255
     380:	80 93 bc 08 	sts	0x08BC, r24
     384:	8f 91       	pop	r24
     386:	0f 90       	pop	r0
     388:	0f be       	out	0x3f, r0	; 63
     38a:	0f 90       	pop	r0
     38c:	1f 90       	pop	r1
     38e:	18 95       	reti

00000390 <initUSART>:
     390:	84 e0       	ldi	r24, 0x04	; 4
     392:	8a b9       	out	0x0a, r24	; 10
     394:	1b b8       	out	0x0b, r1	; 11
     396:	10 92 c5 00 	sts	0x00C5, r1
     39a:	10 92 c4 00 	sts	0x00C4, r1
     39e:	88 e1       	ldi	r24, 0x18	; 24
     3a0:	80 93 c1 00 	sts	0x00C1, r24
     3a4:	86 e0       	ldi	r24, 0x06	; 6
     3a6:	80 93 c2 00 	sts	0x00C2, r24
     3aa:	08 95       	ret

000003ac <USARTWriteChar>:
     3ac:	e0 ec       	ldi	r30, 0xC0	; 192
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	90 81       	ld	r25, Z
     3b2:	95 ff       	sbrs	r25, 5
     3b4:	fd cf       	rjmp	.-6      	; 0x3b0 <USARTWriteChar+0x4>
     3b6:	80 93 c6 00 	sts	0x00C6, r24
     3ba:	08 95       	ret

000003bc <USARTSendInstruction5>:
void USARTSendInstruction5(int ID, int instruction, int parameter0, int parameter1, int parameter2, int parameter3, int parameter4)
{
     3bc:	cf 92       	push	r12
     3be:	ef 92       	push	r14
     3c0:	ff 92       	push	r15
     3c2:	0f 93       	push	r16
     3c4:	1f 93       	push	r17
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	c8 2f       	mov	r28, r24
     3cc:	d6 2f       	mov	r29, r22
     3ce:	14 2f       	mov	r17, r20
     3d0:	f2 2e       	mov	r15, r18
    PORTD = (0<<PORTD2);
}

void USART0SendMode()
{
    PORTD = (1<<PORTD2);
     3d2:	84 e0       	ldi	r24, 0x04	; 4
     3d4:	8b b9       	out	0x0b, r24	; 11
}
void USARTSendInstruction5(int ID, int instruction, int parameter0, int parameter1, int parameter2, int parameter3, int parameter4)
{
    // sätt USART till sändläge
    USART0SendMode();
    UCSR0A = UCSR0A | (0 << 6); // Gjorde så att vi kunde skicka en instruktion efter en instruktion/read.
     3d6:	e0 ec       	ldi	r30, 0xC0	; 192
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
     3da:	80 81       	ld	r24, Z
     3dc:	80 83       	st	Z, r24
    USARTWriteChar(0xFF);
     3de:	8f ef       	ldi	r24, 0xFF	; 255
     3e0:	e5 df       	rcall	.-54     	; 0x3ac <USARTWriteChar>
    USARTWriteChar(0xFF);
     3e2:	8f ef       	ldi	r24, 0xFF	; 255
     3e4:	e3 df       	rcall	.-58     	; 0x3ac <USARTWriteChar>
    USARTWriteChar(ID);
     3e6:	8c 2f       	mov	r24, r28
     3e8:	e1 df       	rcall	.-62     	; 0x3ac <USARTWriteChar>
    USARTWriteChar(7); // Paketets längd.
     3ea:	87 e0       	ldi	r24, 0x07	; 7
     3ec:	df df       	rcall	.-66     	; 0x3ac <USARTWriteChar>
    USARTWriteChar(instruction);
     3ee:	8d 2f       	mov	r24, r29
     3f0:	dd df       	rcall	.-70     	; 0x3ac <USARTWriteChar>
    USARTWriteChar(parameter0);
     3f2:	81 2f       	mov	r24, r17
     3f4:	db df       	rcall	.-74     	; 0x3ac <USARTWriteChar>
    USARTWriteChar(parameter1);
     3f6:	8f 2d       	mov	r24, r15
     3f8:	d9 df       	rcall	.-78     	; 0x3ac <USARTWriteChar>
    USARTWriteChar(parameter2);
     3fa:	80 2f       	mov	r24, r16
     3fc:	d7 df       	rcall	.-82     	; 0x3ac <USARTWriteChar>
    USARTWriteChar(parameter3);
     3fe:	8e 2d       	mov	r24, r14
     400:	d5 df       	rcall	.-86     	; 0x3ac <USARTWriteChar>
    USARTWriteChar(parameter4);
     402:	8c 2d       	mov	r24, r12
     404:	d3 df       	rcall	.-90     	; 0x3ac <USARTWriteChar>
    cli();
     406:	f8 94       	cli
    USARTWriteChar(~(ID+7+instruction+parameter0+parameter1+parameter2+parameter3+parameter4)); // Checksum
     408:	87 e0       	ldi	r24, 0x07	; 7
     40a:	8c 0d       	add	r24, r12
     40c:	e8 0e       	add	r14, r24
     40e:	0e 0d       	add	r16, r14
     410:	f0 0e       	add	r15, r16
     412:	1f 0d       	add	r17, r15
     414:	d1 0f       	add	r29, r17
     416:	8d 2f       	mov	r24, r29
     418:	8c 0f       	add	r24, r28
     41a:	80 95       	com	r24
     41c:	c7 df       	rcall	.-114    	; 0x3ac <USARTWriteChar>
    while(!TXD0_FINISHED) //TXD0 sätts till 1 då all data shiftats ut ifrån usarten
     41e:	e0 ec       	ldi	r30, 0xC0	; 192
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	80 81       	ld	r24, Z
     424:	86 ff       	sbrs	r24, 6
     426:	fd cf       	rjmp	.-6      	; 0x422 <USARTSendInstruction5+0x66>



void USART0RecieveMode() 
{
    PORTD = (0<<PORTD2);
     428:	1b b8       	out	0x0b, r1	; 11
        // Vänta tills den sänt klart det sista
    }
    ;
    USART0RecieveMode();
    //char test1 = RXD0_DATA; // För att läsa det som är i reciever bufferten, används nu för att readchar ska funka
    sei(); // Tillåt interrupts igen
     42a:	78 94       	sei
    
}
     42c:	df 91       	pop	r29
     42e:	cf 91       	pop	r28
     430:	1f 91       	pop	r17
     432:	0f 91       	pop	r16
     434:	ff 90       	pop	r15
     436:	ef 90       	pop	r14
     438:	cf 90       	pop	r12
     43a:	08 95       	ret

0000043c <USARTReadChar>:


char USARTReadChar()
{
    //Vänta tills data är tillgänglig
    while(!RXD0_READY)
     43c:	e0 ec       	ldi	r30, 0xC0	; 192
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	80 81       	ld	r24, Z
     442:	88 23       	and	r24, r24
     444:	ec f7       	brge	.-6      	; 0x440 <USARTReadChar+0x4>
    {
        //Gör ingenting
    }
    return RXD0_DATA;
     446:	80 91 c6 00 	lds	r24, 0x00C6
}
     44a:	08 95       	ret

0000044c <USARTReadStatusPacket>:

int USARTReadStatusPacket()
{
     44c:	ff 92       	push	r15
     44e:	0f 93       	push	r16
     450:	1f 93       	push	r17
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
    int ValueOfParameters = 0;
    //if ((USARTReadChar() == 0xFF) & (USARTReadChar() == 0xFF)) // Kollar om två startbitar
    //{
        //char test = USARTReadChar();
        char Start1 = USARTReadChar();
     456:	f2 df       	rcall	.-28     	; 0x43c <USARTReadChar>
        char Start2 = USARTReadChar();
     458:	f1 df       	rcall	.-30     	; 0x43c <USARTReadChar>
        char ID = USARTReadChar();
     45a:	f0 df       	rcall	.-32     	; 0x43c <USARTReadChar>
        char Length = USARTReadChar();
     45c:	ef df       	rcall	.-34     	; 0x43c <USARTReadChar>
     45e:	f8 2e       	mov	r15, r24
        char Error = USARTReadChar();
     460:	ed df       	rcall	.-38     	; 0x43c <USARTReadChar>
        int HelpVariable = 0;
        // Läser av parametervärdena och sparar värdet i ValueOfParameters
        while (Length > 2) 
     462:	82 e0       	ldi	r24, 0x02	; 2
     464:	8f 15       	cp	r24, r15
     466:	a8 f4       	brcc	.+42     	; 0x492 <USARTReadStatusPacket+0x46>
     468:	c0 e0       	ldi	r28, 0x00	; 0
     46a:	d0 e0       	ldi	r29, 0x00	; 0
    return RXD0_DATA;
}

int USARTReadStatusPacket()
{
    int ValueOfParameters = 0;
     46c:	00 e0       	ldi	r16, 0x00	; 0
     46e:	10 e0       	ldi	r17, 0x00	; 0
        char Error = USARTReadChar();
        int HelpVariable = 0;
        // Läser av parametervärdena och sparar värdet i ValueOfParameters
        while (Length > 2) 
        {
            ValueOfParameters = ValueOfParameters + (USARTReadChar() << (8*HelpVariable));
     470:	e5 df       	rcall	.-54     	; 0x43c <USARTReadChar>
     472:	28 2f       	mov	r18, r24
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	0c 2e       	mov	r0, r28
     478:	02 c0       	rjmp	.+4      	; 0x47e <USARTReadStatusPacket+0x32>
     47a:	22 0f       	add	r18, r18
     47c:	33 1f       	adc	r19, r19
     47e:	0a 94       	dec	r0
     480:	e2 f7       	brpl	.-8      	; 0x47a <USARTReadStatusPacket+0x2e>
     482:	02 0f       	add	r16, r18
     484:	13 1f       	adc	r17, r19
            HelpVariable = HelpVariable + 1;
            Length = Length - 1;
     486:	fa 94       	dec	r15
     488:	28 96       	adiw	r28, 0x08	; 8
        char ID = USARTReadChar();
        char Length = USARTReadChar();
        char Error = USARTReadChar();
        int HelpVariable = 0;
        // Läser av parametervärdena och sparar värdet i ValueOfParameters
        while (Length > 2) 
     48a:	82 e0       	ldi	r24, 0x02	; 2
     48c:	f8 12       	cpse	r15, r24
     48e:	f0 cf       	rjmp	.-32     	; 0x470 <USARTReadStatusPacket+0x24>
     490:	02 c0       	rjmp	.+4      	; 0x496 <USARTReadStatusPacket+0x4a>
    return RXD0_DATA;
}

int USARTReadStatusPacket()
{
    int ValueOfParameters = 0;
     492:	00 e0       	ldi	r16, 0x00	; 0
     494:	10 e0       	ldi	r17, 0x00	; 0
            ValueOfParameters = ValueOfParameters + (USARTReadChar() << (8*HelpVariable));
            HelpVariable = HelpVariable + 1;
            Length = Length - 1;
        }
        
        char CheckSum = USARTReadChar();
     496:	d2 df       	rcall	.-92     	; 0x43c <USARTReadChar>
    //}
    return ValueOfParameters;
    
}
     498:	c8 01       	movw	r24, r16
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	1f 91       	pop	r17
     4a0:	0f 91       	pop	r16
     4a2:	ff 90       	pop	r15
     4a4:	08 95       	ret

000004a6 <MoveDynamixel>:

void MoveDynamixel(int ID,long int Angle,long int RevolutionsPerMinute)
{
     4a6:	4f 92       	push	r4
     4a8:	5f 92       	push	r5
     4aa:	6f 92       	push	r6
     4ac:	7f 92       	push	r7
     4ae:	8f 92       	push	r8
     4b0:	9f 92       	push	r9
     4b2:	af 92       	push	r10
     4b4:	bf 92       	push	r11
     4b6:	cf 92       	push	r12
     4b8:	df 92       	push	r13
     4ba:	ef 92       	push	r14
     4bc:	ff 92       	push	r15
     4be:	0f 93       	push	r16
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	ec 01       	movw	r28, r24
     4c8:	68 01       	movw	r12, r16
     4ca:	79 01       	movw	r14, r18
    if ((Angle <= 300) & (Angle >= 0)) // Tillåtna grader är 0-300
     4cc:	4d 32       	cpi	r20, 0x2D	; 45
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	58 07       	cpc	r21, r24
     4d2:	61 05       	cpc	r22, r1
     4d4:	71 05       	cpc	r23, r1
     4d6:	08 f0       	brcs	.+2      	; 0x4da <MoveDynamixel+0x34>
     4d8:	3d c0       	rjmp	.+122    	; 0x554 <MoveDynamixel+0xae>
    {
        long int LowGoalPosition = ((Angle*1023)/300) & 0x00FF; // Gör om graden till ett tal mellan 0-1023 och delar upp det i LSB(byte) och MSB(byte)
     4da:	af ef       	ldi	r26, 0xFF	; 255
     4dc:	b3 e0       	ldi	r27, 0x03	; 3
     4de:	9a 01       	movw	r18, r20
     4e0:	ab 01       	movw	r20, r22
     4e2:	0e 94 c4 1b 	call	0x3788	; 0x3788 <__muluhisi3>
     4e6:	2c e2       	ldi	r18, 0x2C	; 44
     4e8:	31 e0       	ldi	r19, 0x01	; 1
     4ea:	40 e0       	ldi	r20, 0x00	; 0
     4ec:	50 e0       	ldi	r21, 0x00	; 0
     4ee:	0e 94 a8 1b 	call	0x3750	; 0x3750 <__divmodsi4>
     4f2:	49 01       	movw	r8, r18
     4f4:	5a 01       	movw	r10, r20
     4f6:	99 24       	eor	r9, r9
     4f8:	aa 24       	eor	r10, r10
     4fa:	bb 24       	eor	r11, r11
        long int HighGoalPosition = ((Angle*1023)/300) & 0xFF00;
        HighGoalPosition = (HighGoalPosition >> 8);
     4fc:	43 2e       	mov	r4, r19
     4fe:	51 2c       	mov	r5, r1
    
        long int LowAngleVelocity = 0;
        long int HighAngleVelocity = 0;
    
        if (RevolutionsPerMinute >= 114) // Om RPM över 114 så rör vi oss med snabbaste möjliga hastigheten med spänningen som tillhandahålls
     500:	82 e7       	ldi	r24, 0x72	; 114
     502:	c8 16       	cp	r12, r24
     504:	d1 04       	cpc	r13, r1
     506:	e1 04       	cpc	r14, r1
     508:	f1 04       	cpc	r15, r1
     50a:	a4 f4       	brge	.+40     	; 0x534 <MoveDynamixel+0x8e>
            LowAngleVelocity = 0;
            HighAngleVelocity = 0;
        }
        else
        {
            LowAngleVelocity = ((RevolutionsPerMinute*1023)/114) & 0x00FF;
     50c:	af ef       	ldi	r26, 0xFF	; 255
     50e:	b3 e0       	ldi	r27, 0x03	; 3
     510:	a7 01       	movw	r20, r14
     512:	96 01       	movw	r18, r12
     514:	0e 94 c4 1b 	call	0x3788	; 0x3788 <__muluhisi3>
     518:	22 e7       	ldi	r18, 0x72	; 114
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	40 e0       	ldi	r20, 0x00	; 0
     51e:	50 e0       	ldi	r21, 0x00	; 0
     520:	0e 94 a8 1b 	call	0x3750	; 0x3750 <__divmodsi4>
     524:	79 01       	movw	r14, r18
     526:	8a 01       	movw	r16, r20
     528:	ff 24       	eor	r15, r15
     52a:	00 27       	eor	r16, r16
     52c:	11 27       	eor	r17, r17
            HighAngleVelocity = ((RevolutionsPerMinute*1023)/114) & 0xFF00;
            HighAngleVelocity = (HighAngleVelocity >> 8);
     52e:	43 2f       	mov	r20, r19
     530:	50 e0       	ldi	r21, 0x00	; 0
     532:	06 c0       	rjmp	.+12     	; 0x540 <MoveDynamixel+0x9a>
        long int HighAngleVelocity = 0;
    
        if (RevolutionsPerMinute >= 114) // Om RPM över 114 så rör vi oss med snabbaste möjliga hastigheten med spänningen som tillhandahålls
        {
            LowAngleVelocity = 0;
            HighAngleVelocity = 0;
     534:	40 e0       	ldi	r20, 0x00	; 0
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	ba 01       	movw	r22, r20
        long int LowAngleVelocity = 0;
        long int HighAngleVelocity = 0;
    
        if (RevolutionsPerMinute >= 114) // Om RPM över 114 så rör vi oss med snabbaste möjliga hastigheten med spänningen som tillhandahålls
        {
            LowAngleVelocity = 0;
     53a:	e1 2c       	mov	r14, r1
     53c:	f1 2c       	mov	r15, r1
     53e:	87 01       	movw	r16, r14
            LowAngleVelocity = ((RevolutionsPerMinute*1023)/114) & 0x00FF;
            HighAngleVelocity = ((RevolutionsPerMinute*1023)/114) & 0xFF00;
            HighAngleVelocity = (HighAngleVelocity >> 8);
        }
    
        USARTSendInstruction5(ID,INST_WRITE,P_GOAL_POSITION_L,LowGoalPosition ,HighGoalPosition, LowAngleVelocity, HighAngleVelocity);
     540:	6a 01       	movw	r12, r20
     542:	82 01       	movw	r16, r4
     544:	94 01       	movw	r18, r8
     546:	4e e1       	ldi	r20, 0x1E	; 30
     548:	50 e0       	ldi	r21, 0x00	; 0
     54a:	63 e0       	ldi	r22, 0x03	; 3
     54c:	70 e0       	ldi	r23, 0x00	; 0
     54e:	ce 01       	movw	r24, r28
     550:	35 df       	rcall	.-406    	; 0x3bc <USARTSendInstruction5>
        USARTReadStatusPacket();
     552:	7c df       	rcall	.-264    	; 0x44c <USARTReadStatusPacket>
    }
    return;
}
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	1f 91       	pop	r17
     55a:	0f 91       	pop	r16
     55c:	ff 90       	pop	r15
     55e:	ef 90       	pop	r14
     560:	df 90       	pop	r13
     562:	cf 90       	pop	r12
     564:	bf 90       	pop	r11
     566:	af 90       	pop	r10
     568:	9f 90       	pop	r9
     56a:	8f 90       	pop	r8
     56c:	7f 90       	pop	r7
     56e:	6f 90       	pop	r6
     570:	5f 90       	pop	r5
     572:	4f 90       	pop	r4
     574:	08 95       	ret

00000576 <MoveFrontLeftLeg>:

void MoveFrontLeftLeg(float x, float y, float z, int speed)
{
     576:	4f 92       	push	r4
     578:	5f 92       	push	r5
     57a:	6f 92       	push	r6
     57c:	7f 92       	push	r7
     57e:	8f 92       	push	r8
     580:	9f 92       	push	r9
     582:	af 92       	push	r10
     584:	bf 92       	push	r11
     586:	cf 92       	push	r12
     588:	df 92       	push	r13
     58a:	ef 92       	push	r14
     58c:	ff 92       	push	r15
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	60 97       	sbiw	r28, 0x10	; 16
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61
     5a6:	2b 01       	movw	r4, r22
     5a8:	3c 01       	movw	r6, r24
     5aa:	49 01       	movw	r8, r18
     5ac:	5a 01       	movw	r10, r20
     5ae:	e9 82       	std	Y+1, r14	; 0x01
     5b0:	fa 82       	std	Y+2, r15	; 0x02
     5b2:	0b 83       	std	Y+3, r16	; 0x03
     5b4:	1c 83       	std	Y+4, r17	; 0x04
     5b6:	86 01       	movw	r16, r12
    long int theta1 = atan2f(-x,y)*180/PI;
     5b8:	90 58       	subi	r25, 0x80	; 128
     5ba:	0e 94 2a 19 	call	0x3254	; 0x3254 <atan2>
     5be:	6d 87       	std	Y+13, r22	; 0x0d
     5c0:	7e 87       	std	Y+14, r23	; 0x0e
     5c2:	8f 87       	std	Y+15, r24	; 0x0f
     5c4:	98 8b       	std	Y+16, r25	; 0x10
    long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) + 
     5c6:	29 81       	ldd	r18, Y+1	; 0x01
     5c8:	3a 81       	ldd	r19, Y+2	; 0x02
     5ca:	4b 81       	ldd	r20, Y+3	; 0x03
     5cc:	5c 81       	ldd	r21, Y+4	; 0x04
     5ce:	ca 01       	movw	r24, r20
     5d0:	b9 01       	movw	r22, r18
     5d2:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     5d6:	6b 01       	movw	r12, r22
     5d8:	7c 01       	movw	r14, r24
     5da:	a3 01       	movw	r20, r6
     5dc:	92 01       	movw	r18, r4
     5de:	c3 01       	movw	r24, r6
     5e0:	b2 01       	movw	r22, r4
     5e2:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     5e6:	2b 01       	movw	r4, r22
     5e8:	3c 01       	movw	r6, r24
     5ea:	a5 01       	movw	r20, r10
     5ec:	94 01       	movw	r18, r8
     5ee:	c5 01       	movw	r24, r10
     5f0:	b4 01       	movw	r22, r8
     5f2:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     5f6:	9b 01       	movw	r18, r22
     5f8:	ac 01       	movw	r20, r24
     5fa:	c3 01       	movw	r24, r6
     5fc:	b2 01       	movw	r22, r4
     5fe:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
     602:	2b 01       	movw	r4, r22
     604:	3c 01       	movw	r6, r24
     606:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <sqrt>
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	48 e4       	ldi	r20, 0x48	; 72
     610:	52 e4       	ldi	r21, 0x42	; 66
     612:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
     616:	4b 01       	movw	r8, r22
     618:	5c 01       	movw	r10, r24
     61a:	9b 01       	movw	r18, r22
     61c:	ac 01       	movw	r20, r24
     61e:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     622:	6d 83       	std	Y+5, r22	; 0x05
     624:	7e 83       	std	Y+6, r23	; 0x06
     626:	8f 83       	std	Y+7, r24	; 0x07
     628:	98 87       	std	Y+8, r25	; 0x08
     62a:	9b 01       	movw	r18, r22
     62c:	ac 01       	movw	r20, r24
     62e:	c7 01       	movw	r24, r14
     630:	b6 01       	movw	r22, r12
     632:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
     636:	69 87       	std	Y+9, r22	; 0x09
     638:	7a 87       	std	Y+10, r23	; 0x0a
     63a:	8b 87       	std	Y+11, r24	; 0x0b
     63c:	9c 87       	std	Y+12, r25	; 0x0c
     63e:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <sqrt>
     642:	9b 01       	movw	r18, r22
     644:	ac 01       	movw	r20, r24
     646:	69 81       	ldd	r22, Y+1	; 0x01
     648:	7a 81       	ldd	r23, Y+2	; 0x02
     64a:	8b 81       	ldd	r24, Y+3	; 0x03
     64c:	9c 81       	ldd	r25, Y+4	; 0x04
     64e:	90 58       	subi	r25, 0x80	; 128
     650:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
     654:	0e 94 a8 18 	call	0x3150	; 0x3150 <acos>
     658:	69 83       	std	Y+1, r22	; 0x01
     65a:	7a 83       	std	Y+2, r23	; 0x02
     65c:	8b 83       	std	Y+3, r24	; 0x03
     65e:	9c 83       	std	Y+4, r25	; 0x04
        acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	48 e4       	ldi	r20, 0x48	; 72
     666:	52 e4       	ldi	r21, 0x42	; 66
     668:	c3 01       	movw	r24, r6
     66a:	b2 01       	movw	r22, r4
     66c:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
     670:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <sqrt>
     674:	9b 01       	movw	r18, r22
     676:	ac 01       	movw	r20, r24
     678:	c5 01       	movw	r24, r10
     67a:	b4 01       	movw	r22, r8
     67c:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     680:	9b 01       	movw	r18, r22
     682:	ac 01       	movw	r20, r24
     684:	c7 01       	movw	r24, r14
     686:	b6 01       	movw	r22, r12
     688:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
     68c:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <sqrt>
     690:	2b 01       	movw	r4, r22
     692:	3c 01       	movw	r6, r24
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	38 e4       	ldi	r19, 0x48	; 72
     698:	4c e8       	ldi	r20, 0x8C	; 140
     69a:	55 e4       	ldi	r21, 0x45	; 69
     69c:	69 85       	ldd	r22, Y+9	; 0x09
     69e:	7a 85       	ldd	r23, Y+10	; 0x0a
     6a0:	8b 85       	ldd	r24, Y+11	; 0x0b
     6a2:	9c 85       	ldd	r25, Y+12	; 0x0c
     6a4:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	38 e0       	ldi	r19, 0x08	; 8
     6ac:	44 e8       	ldi	r20, 0x84	; 132
     6ae:	56 e4       	ldi	r21, 0x46	; 70
     6b0:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
     6b4:	4b 01       	movw	r8, r22
     6b6:	5c 01       	movw	r10, r24
     6b8:	a3 01       	movw	r20, r6
     6ba:	92 01       	movw	r18, r4
     6bc:	c3 01       	movw	r24, r6
     6be:	b2 01       	movw	r22, r4
     6c0:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	46 e8       	ldi	r20, 0x86	; 134
     6ca:	52 e4       	ldi	r21, 0x42	; 66
     6cc:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     6d0:	9b 01       	movw	r18, r22
     6d2:	ac 01       	movw	r20, r24
     6d4:	c5 01       	movw	r24, r10
     6d6:	b4 01       	movw	r22, r8
     6d8:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
     6dc:	0e 94 a8 18 	call	0x3150	; 0x3150 <acos>
     6e0:	2b 01       	movw	r4, r22
     6e2:	3c 01       	movw	r6, r24
    
    long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     6e4:	a7 01       	movw	r20, r14
     6e6:	96 01       	movw	r18, r12
     6e8:	60 e0       	ldi	r22, 0x00	; 0
     6ea:	7a e1       	ldi	r23, 0x1A	; 26
     6ec:	87 ea       	ldi	r24, 0xA7	; 167
     6ee:	96 e4       	ldi	r25, 0x46	; 70
     6f0:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
     6f4:	2d 81       	ldd	r18, Y+5	; 0x05
     6f6:	3e 81       	ldd	r19, Y+6	; 0x06
     6f8:	4f 81       	ldd	r20, Y+7	; 0x07
     6fa:	58 85       	ldd	r21, Y+8	; 0x08
     6fc:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	38 e1       	ldi	r19, 0x18	; 24
     704:	48 e8       	ldi	r20, 0x88	; 136
     706:	56 e4       	ldi	r21, 0x46	; 70
     708:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
     70c:	0e 94 a8 18 	call	0x3150	; 0x3150 <acos>
     710:	4b 01       	movw	r8, r22
     712:	5c 01       	movw	r10, r24
    long int ActuatorAngle1 =  theta1 + 105;
    long int ActuatorAngle2 =  theta2 + 75;
    long int ActuatorAngle3 =  theta3 + 1;
    
    
    MoveDynamixel(2,ActuatorAngle1,speed);
     714:	68 01       	movw	r12, r16
     716:	ee 24       	eor	r14, r14
     718:	d7 fc       	sbrc	r13, 7
     71a:	e0 94       	com	r14
     71c:	fe 2c       	mov	r15, r14
    return;
}

void MoveFrontLeftLeg(float x, float y, float z, int speed)
{
    long int theta1 = atan2f(-x,y)*180/PI;
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	44 e3       	ldi	r20, 0x34	; 52
     724:	53 e4       	ldi	r21, 0x43	; 67
     726:	6d 85       	ldd	r22, Y+13	; 0x0d
     728:	7e 85       	ldd	r23, Y+14	; 0x0e
     72a:	8f 85       	ldd	r24, Y+15	; 0x0f
     72c:	98 89       	ldd	r25, Y+16	; 0x10
     72e:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     732:	28 ed       	ldi	r18, 0xD8	; 216
     734:	3f e0       	ldi	r19, 0x0F	; 15
     736:	49 e4       	ldi	r20, 0x49	; 73
     738:	50 e4       	ldi	r21, 0x40	; 64
     73a:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
     73e:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) + 
        acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
    
    long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

    long int ActuatorAngle1 =  theta1 + 105;
     742:	ab 01       	movw	r20, r22
     744:	bc 01       	movw	r22, r24
     746:	47 59       	subi	r20, 0x97	; 151
     748:	5f 4f       	sbci	r21, 0xFF	; 255
     74a:	6f 4f       	sbci	r22, 0xFF	; 255
     74c:	7f 4f       	sbci	r23, 0xFF	; 255
    long int ActuatorAngle2 =  theta2 + 75;
    long int ActuatorAngle3 =  theta3 + 1;
    
    
    MoveDynamixel(2,ActuatorAngle1,speed);
     74e:	97 01       	movw	r18, r14
     750:	86 01       	movw	r16, r12
     752:	82 e0       	ldi	r24, 0x02	; 2
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	a7 de       	rcall	.-690    	; 0x4a6 <MoveDynamixel>
}

void MoveFrontLeftLeg(float x, float y, float z, int speed)
{
    long int theta1 = atan2f(-x,y)*180/PI;
    long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) + 
     758:	a3 01       	movw	r20, r6
     75a:	92 01       	movw	r18, r4
     75c:	69 81       	ldd	r22, Y+1	; 0x01
     75e:	7a 81       	ldd	r23, Y+2	; 0x02
     760:	8b 81       	ldd	r24, Y+3	; 0x03
     762:	9c 81       	ldd	r25, Y+4	; 0x04
     764:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
     768:	24 ee       	ldi	r18, 0xE4	; 228
     76a:	3e e2       	ldi	r19, 0x2E	; 46
     76c:	45 e6       	ldi	r20, 0x65	; 101
     76e:	52 e4       	ldi	r21, 0x42	; 66
     770:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     774:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
        acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
    
    long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

    long int ActuatorAngle1 =  theta1 + 105;
    long int ActuatorAngle2 =  theta2 + 75;
     778:	ab 01       	movw	r20, r22
     77a:	bc 01       	movw	r22, r24
     77c:	45 5b       	subi	r20, 0xB5	; 181
     77e:	5f 4f       	sbci	r21, 0xFF	; 255
     780:	6f 4f       	sbci	r22, 0xFF	; 255
     782:	7f 4f       	sbci	r23, 0xFF	; 255
    long int ActuatorAngle3 =  theta3 + 1;
    
    
    MoveDynamixel(2,ActuatorAngle1,speed);
    MoveDynamixel(4,ActuatorAngle2,speed);
     784:	97 01       	movw	r18, r14
     786:	86 01       	movw	r16, r12
     788:	84 e0       	ldi	r24, 0x04	; 4
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	8c de       	rcall	.-744    	; 0x4a6 <MoveDynamixel>
{
    long int theta1 = atan2f(-x,y)*180/PI;
    long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) + 
        acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
    
    long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	44 e3       	ldi	r20, 0x34	; 52
     794:	53 e4       	ldi	r21, 0x43	; 67
     796:	c5 01       	movw	r24, r10
     798:	b4 01       	movw	r22, r8
     79a:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     79e:	28 ed       	ldi	r18, 0xD8	; 216
     7a0:	3f e0       	ldi	r19, 0x0F	; 15
     7a2:	49 e4       	ldi	r20, 0x49	; 73
     7a4:	50 e4       	ldi	r21, 0x40	; 64
     7a6:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
     7aa:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>

    long int ActuatorAngle1 =  theta1 + 105;
    long int ActuatorAngle2 =  theta2 + 75;
    long int ActuatorAngle3 =  theta3 + 1;
     7ae:	ab 01       	movw	r20, r22
     7b0:	bc 01       	movw	r22, r24
     7b2:	4f 5f       	subi	r20, 0xFF	; 255
     7b4:	5f 4f       	sbci	r21, 0xFF	; 255
     7b6:	6f 4f       	sbci	r22, 0xFF	; 255
     7b8:	7f 4f       	sbci	r23, 0xFF	; 255
    
    
    MoveDynamixel(2,ActuatorAngle1,speed);
    MoveDynamixel(4,ActuatorAngle2,speed);
    MoveDynamixel(6,ActuatorAngle3,speed);
     7ba:	97 01       	movw	r18, r14
     7bc:	86 01       	movw	r16, r12
     7be:	86 e0       	ldi	r24, 0x06	; 6
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	71 de       	rcall	.-798    	; 0x4a6 <MoveDynamixel>
    return;
}
     7c4:	60 96       	adiw	r28, 0x10	; 16
     7c6:	0f b6       	in	r0, 0x3f	; 63
     7c8:	f8 94       	cli
     7ca:	de bf       	out	0x3e, r29	; 62
     7cc:	0f be       	out	0x3f, r0	; 63
     7ce:	cd bf       	out	0x3d, r28	; 61
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	ff 90       	pop	r15
     7da:	ef 90       	pop	r14
     7dc:	df 90       	pop	r13
     7de:	cf 90       	pop	r12
     7e0:	bf 90       	pop	r11
     7e2:	af 90       	pop	r10
     7e4:	9f 90       	pop	r9
     7e6:	8f 90       	pop	r8
     7e8:	7f 90       	pop	r7
     7ea:	6f 90       	pop	r6
     7ec:	5f 90       	pop	r5
     7ee:	4f 90       	pop	r4
     7f0:	08 95       	ret

000007f2 <MoveFrontRightLeg>:

void MoveFrontRightLeg(float x, float y, float z, int speed)
{
     7f2:	4f 92       	push	r4
     7f4:	5f 92       	push	r5
     7f6:	6f 92       	push	r6
     7f8:	7f 92       	push	r7
     7fa:	8f 92       	push	r8
     7fc:	9f 92       	push	r9
     7fe:	af 92       	push	r10
     800:	bf 92       	push	r11
     802:	cf 92       	push	r12
     804:	df 92       	push	r13
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
     816:	60 97       	sbiw	r28, 0x10	; 16
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	0f be       	out	0x3f, r0	; 63
     820:	cd bf       	out	0x3d, r28	; 61
     822:	2b 01       	movw	r4, r22
     824:	3c 01       	movw	r6, r24
     826:	49 01       	movw	r8, r18
     828:	5a 01       	movw	r10, r20
     82a:	e9 82       	std	Y+1, r14	; 0x01
     82c:	fa 82       	std	Y+2, r15	; 0x02
     82e:	0b 83       	std	Y+3, r16	; 0x03
     830:	1c 83       	std	Y+4, r17	; 0x04
     832:	86 01       	movw	r16, r12
    long int theta1 = atan2f(-x,y)*180/PI;
     834:	90 58       	subi	r25, 0x80	; 128
     836:	0e 94 2a 19 	call	0x3254	; 0x3254 <atan2>
     83a:	6d 87       	std	Y+13, r22	; 0x0d
     83c:	7e 87       	std	Y+14, r23	; 0x0e
     83e:	8f 87       	std	Y+15, r24	; 0x0f
     840:	98 8b       	std	Y+16, r25	; 0x10
    long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
     842:	29 81       	ldd	r18, Y+1	; 0x01
     844:	3a 81       	ldd	r19, Y+2	; 0x02
     846:	4b 81       	ldd	r20, Y+3	; 0x03
     848:	5c 81       	ldd	r21, Y+4	; 0x04
     84a:	ca 01       	movw	r24, r20
     84c:	b9 01       	movw	r22, r18
     84e:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     852:	6b 01       	movw	r12, r22
     854:	7c 01       	movw	r14, r24
     856:	a3 01       	movw	r20, r6
     858:	92 01       	movw	r18, r4
     85a:	c3 01       	movw	r24, r6
     85c:	b2 01       	movw	r22, r4
     85e:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     862:	2b 01       	movw	r4, r22
     864:	3c 01       	movw	r6, r24
     866:	a5 01       	movw	r20, r10
     868:	94 01       	movw	r18, r8
     86a:	c5 01       	movw	r24, r10
     86c:	b4 01       	movw	r22, r8
     86e:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     872:	9b 01       	movw	r18, r22
     874:	ac 01       	movw	r20, r24
     876:	c3 01       	movw	r24, r6
     878:	b2 01       	movw	r22, r4
     87a:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
     87e:	2b 01       	movw	r4, r22
     880:	3c 01       	movw	r6, r24
     882:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <sqrt>
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	48 e4       	ldi	r20, 0x48	; 72
     88c:	52 e4       	ldi	r21, 0x42	; 66
     88e:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
     892:	4b 01       	movw	r8, r22
     894:	5c 01       	movw	r10, r24
     896:	9b 01       	movw	r18, r22
     898:	ac 01       	movw	r20, r24
     89a:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     89e:	6d 83       	std	Y+5, r22	; 0x05
     8a0:	7e 83       	std	Y+6, r23	; 0x06
     8a2:	8f 83       	std	Y+7, r24	; 0x07
     8a4:	98 87       	std	Y+8, r25	; 0x08
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	c7 01       	movw	r24, r14
     8ac:	b6 01       	movw	r22, r12
     8ae:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
     8b2:	69 87       	std	Y+9, r22	; 0x09
     8b4:	7a 87       	std	Y+10, r23	; 0x0a
     8b6:	8b 87       	std	Y+11, r24	; 0x0b
     8b8:	9c 87       	std	Y+12, r25	; 0x0c
     8ba:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <sqrt>
     8be:	9b 01       	movw	r18, r22
     8c0:	ac 01       	movw	r20, r24
     8c2:	69 81       	ldd	r22, Y+1	; 0x01
     8c4:	7a 81       	ldd	r23, Y+2	; 0x02
     8c6:	8b 81       	ldd	r24, Y+3	; 0x03
     8c8:	9c 81       	ldd	r25, Y+4	; 0x04
     8ca:	90 58       	subi	r25, 0x80	; 128
     8cc:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
     8d0:	0e 94 a8 18 	call	0x3150	; 0x3150 <acos>
     8d4:	69 83       	std	Y+1, r22	; 0x01
     8d6:	7a 83       	std	Y+2, r23	; 0x02
     8d8:	8b 83       	std	Y+3, r24	; 0x03
     8da:	9c 83       	std	Y+4, r25	; 0x04
    acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	48 e4       	ldi	r20, 0x48	; 72
     8e2:	52 e4       	ldi	r21, 0x42	; 66
     8e4:	c3 01       	movw	r24, r6
     8e6:	b2 01       	movw	r22, r4
     8e8:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
     8ec:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <sqrt>
     8f0:	9b 01       	movw	r18, r22
     8f2:	ac 01       	movw	r20, r24
     8f4:	c5 01       	movw	r24, r10
     8f6:	b4 01       	movw	r22, r8
     8f8:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     8fc:	9b 01       	movw	r18, r22
     8fe:	ac 01       	movw	r20, r24
     900:	c7 01       	movw	r24, r14
     902:	b6 01       	movw	r22, r12
     904:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
     908:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <sqrt>
     90c:	2b 01       	movw	r4, r22
     90e:	3c 01       	movw	r6, r24
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	38 e4       	ldi	r19, 0x48	; 72
     914:	4c e8       	ldi	r20, 0x8C	; 140
     916:	55 e4       	ldi	r21, 0x45	; 69
     918:	69 85       	ldd	r22, Y+9	; 0x09
     91a:	7a 85       	ldd	r23, Y+10	; 0x0a
     91c:	8b 85       	ldd	r24, Y+11	; 0x0b
     91e:	9c 85       	ldd	r25, Y+12	; 0x0c
     920:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	38 e0       	ldi	r19, 0x08	; 8
     928:	44 e8       	ldi	r20, 0x84	; 132
     92a:	56 e4       	ldi	r21, 0x46	; 70
     92c:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
     930:	4b 01       	movw	r8, r22
     932:	5c 01       	movw	r10, r24
     934:	a3 01       	movw	r20, r6
     936:	92 01       	movw	r18, r4
     938:	c3 01       	movw	r24, r6
     93a:	b2 01       	movw	r22, r4
     93c:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	46 e8       	ldi	r20, 0x86	; 134
     946:	52 e4       	ldi	r21, 0x42	; 66
     948:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     94c:	9b 01       	movw	r18, r22
     94e:	ac 01       	movw	r20, r24
     950:	c5 01       	movw	r24, r10
     952:	b4 01       	movw	r22, r8
     954:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
     958:	0e 94 a8 18 	call	0x3150	; 0x3150 <acos>
     95c:	2b 01       	movw	r4, r22
     95e:	3c 01       	movw	r6, r24
    
    long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     960:	a7 01       	movw	r20, r14
     962:	96 01       	movw	r18, r12
     964:	60 e0       	ldi	r22, 0x00	; 0
     966:	7a e1       	ldi	r23, 0x1A	; 26
     968:	87 ea       	ldi	r24, 0xA7	; 167
     96a:	96 e4       	ldi	r25, 0x46	; 70
     96c:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
     970:	2d 81       	ldd	r18, Y+5	; 0x05
     972:	3e 81       	ldd	r19, Y+6	; 0x06
     974:	4f 81       	ldd	r20, Y+7	; 0x07
     976:	58 85       	ldd	r21, Y+8	; 0x08
     978:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
     97c:	20 e0       	ldi	r18, 0x00	; 0
     97e:	38 e1       	ldi	r19, 0x18	; 24
     980:	48 e8       	ldi	r20, 0x88	; 136
     982:	56 e4       	ldi	r21, 0x46	; 70
     984:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
     988:	0e 94 a8 18 	call	0x3150	; 0x3150 <acos>
     98c:	4b 01       	movw	r8, r22
     98e:	5c 01       	movw	r10, r24
    long int ActuatorAngle1 =  theta1 + 193;
    long int ActuatorAngle2 =  theta2 + 75;
    long int ActuatorAngle3 =  theta3 + 3;
    
    
    MoveDynamixel(8,ActuatorAngle1,speed);
     990:	68 01       	movw	r12, r16
     992:	ee 24       	eor	r14, r14
     994:	d7 fc       	sbrc	r13, 7
     996:	e0 94       	com	r14
     998:	fe 2c       	mov	r15, r14
    return;
}

void MoveFrontRightLeg(float x, float y, float z, int speed)
{
    long int theta1 = atan2f(-x,y)*180/PI;
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	44 e3       	ldi	r20, 0x34	; 52
     9a0:	53 e4       	ldi	r21, 0x43	; 67
     9a2:	6d 85       	ldd	r22, Y+13	; 0x0d
     9a4:	7e 85       	ldd	r23, Y+14	; 0x0e
     9a6:	8f 85       	ldd	r24, Y+15	; 0x0f
     9a8:	98 89       	ldd	r25, Y+16	; 0x10
     9aa:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     9ae:	28 ed       	ldi	r18, 0xD8	; 216
     9b0:	3f e0       	ldi	r19, 0x0F	; 15
     9b2:	49 e4       	ldi	r20, 0x49	; 73
     9b4:	50 e4       	ldi	r21, 0x40	; 64
     9b6:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
     9ba:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
    acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
    
    long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

    long int ActuatorAngle1 =  theta1 + 193;
     9be:	ab 01       	movw	r20, r22
     9c0:	bc 01       	movw	r22, r24
     9c2:	4f 53       	subi	r20, 0x3F	; 63
     9c4:	5f 4f       	sbci	r21, 0xFF	; 255
     9c6:	6f 4f       	sbci	r22, 0xFF	; 255
     9c8:	7f 4f       	sbci	r23, 0xFF	; 255
    long int ActuatorAngle2 =  theta2 + 75;
    long int ActuatorAngle3 =  theta3 + 3;
    
    
    MoveDynamixel(8,ActuatorAngle1,speed);
     9ca:	97 01       	movw	r18, r14
     9cc:	86 01       	movw	r16, r12
     9ce:	88 e0       	ldi	r24, 0x08	; 8
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	69 dd       	rcall	.-1326   	; 0x4a6 <MoveDynamixel>
}

void MoveFrontRightLeg(float x, float y, float z, int speed)
{
    long int theta1 = atan2f(-x,y)*180/PI;
    long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
     9d4:	a3 01       	movw	r20, r6
     9d6:	92 01       	movw	r18, r4
     9d8:	69 81       	ldd	r22, Y+1	; 0x01
     9da:	7a 81       	ldd	r23, Y+2	; 0x02
     9dc:	8b 81       	ldd	r24, Y+3	; 0x03
     9de:	9c 81       	ldd	r25, Y+4	; 0x04
     9e0:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
     9e4:	24 ee       	ldi	r18, 0xE4	; 228
     9e6:	3e e2       	ldi	r19, 0x2E	; 46
     9e8:	45 e6       	ldi	r20, 0x65	; 101
     9ea:	52 e4       	ldi	r21, 0x42	; 66
     9ec:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     9f0:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
    
    long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

    long int ActuatorAngle1 =  theta1 + 193;
    long int ActuatorAngle2 =  theta2 + 75;
     9f4:	ab 01       	movw	r20, r22
     9f6:	bc 01       	movw	r22, r24
     9f8:	45 5b       	subi	r20, 0xB5	; 181
     9fa:	5f 4f       	sbci	r21, 0xFF	; 255
     9fc:	6f 4f       	sbci	r22, 0xFF	; 255
     9fe:	7f 4f       	sbci	r23, 0xFF	; 255
    long int ActuatorAngle3 =  theta3 + 3;
    
    
    MoveDynamixel(8,ActuatorAngle1,speed);
    MoveDynamixel(10,ActuatorAngle2,speed);
     a00:	97 01       	movw	r18, r14
     a02:	86 01       	movw	r16, r12
     a04:	8a e0       	ldi	r24, 0x0A	; 10
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	4e dd       	rcall	.-1380   	; 0x4a6 <MoveDynamixel>
{
    long int theta1 = atan2f(-x,y)*180/PI;
    long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
    acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
    
    long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     a0a:	20 e0       	ldi	r18, 0x00	; 0
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	44 e3       	ldi	r20, 0x34	; 52
     a10:	53 e4       	ldi	r21, 0x43	; 67
     a12:	c5 01       	movw	r24, r10
     a14:	b4 01       	movw	r22, r8
     a16:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     a1a:	28 ed       	ldi	r18, 0xD8	; 216
     a1c:	3f e0       	ldi	r19, 0x0F	; 15
     a1e:	49 e4       	ldi	r20, 0x49	; 73
     a20:	50 e4       	ldi	r21, 0x40	; 64
     a22:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
     a26:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>

    long int ActuatorAngle1 =  theta1 + 193;
    long int ActuatorAngle2 =  theta2 + 75;
    long int ActuatorAngle3 =  theta3 + 3;
     a2a:	ab 01       	movw	r20, r22
     a2c:	bc 01       	movw	r22, r24
     a2e:	4d 5f       	subi	r20, 0xFD	; 253
     a30:	5f 4f       	sbci	r21, 0xFF	; 255
     a32:	6f 4f       	sbci	r22, 0xFF	; 255
     a34:	7f 4f       	sbci	r23, 0xFF	; 255
    
    
    MoveDynamixel(8,ActuatorAngle1,speed);
    MoveDynamixel(10,ActuatorAngle2,speed);
    MoveDynamixel(12,ActuatorAngle3,speed);
     a36:	97 01       	movw	r18, r14
     a38:	86 01       	movw	r16, r12
     a3a:	8c e0       	ldi	r24, 0x0C	; 12
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	33 dd       	rcall	.-1434   	; 0x4a6 <MoveDynamixel>
    return;
}
     a40:	60 96       	adiw	r28, 0x10	; 16
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	f8 94       	cli
     a46:	de bf       	out	0x3e, r29	; 62
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	cd bf       	out	0x3d, r28	; 61
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	ff 90       	pop	r15
     a56:	ef 90       	pop	r14
     a58:	df 90       	pop	r13
     a5a:	cf 90       	pop	r12
     a5c:	bf 90       	pop	r11
     a5e:	af 90       	pop	r10
     a60:	9f 90       	pop	r9
     a62:	8f 90       	pop	r8
     a64:	7f 90       	pop	r7
     a66:	6f 90       	pop	r6
     a68:	5f 90       	pop	r5
     a6a:	4f 90       	pop	r4
     a6c:	08 95       	ret

00000a6e <MoveRearLeftLeg>:
void MoveRearLeftLeg(float x, float y, float z, int speed)
{
     a6e:	4f 92       	push	r4
     a70:	5f 92       	push	r5
     a72:	6f 92       	push	r6
     a74:	7f 92       	push	r7
     a76:	8f 92       	push	r8
     a78:	9f 92       	push	r9
     a7a:	af 92       	push	r10
     a7c:	bf 92       	push	r11
     a7e:	cf 92       	push	r12
     a80:	df 92       	push	r13
     a82:	ef 92       	push	r14
     a84:	ff 92       	push	r15
     a86:	0f 93       	push	r16
     a88:	1f 93       	push	r17
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
     a8e:	cd b7       	in	r28, 0x3d	; 61
     a90:	de b7       	in	r29, 0x3e	; 62
     a92:	60 97       	sbiw	r28, 0x10	; 16
     a94:	0f b6       	in	r0, 0x3f	; 63
     a96:	f8 94       	cli
     a98:	de bf       	out	0x3e, r29	; 62
     a9a:	0f be       	out	0x3f, r0	; 63
     a9c:	cd bf       	out	0x3d, r28	; 61
     a9e:	2b 01       	movw	r4, r22
     aa0:	3c 01       	movw	r6, r24
     aa2:	49 01       	movw	r8, r18
     aa4:	5a 01       	movw	r10, r20
     aa6:	e9 82       	std	Y+1, r14	; 0x01
     aa8:	fa 82       	std	Y+2, r15	; 0x02
     aaa:	0b 83       	std	Y+3, r16	; 0x03
     aac:	1c 83       	std	Y+4, r17	; 0x04
     aae:	86 01       	movw	r16, r12
    long int theta1 = atan2f(x,-y)*180/PI;
     ab0:	50 58       	subi	r21, 0x80	; 128
     ab2:	0e 94 2a 19 	call	0x3254	; 0x3254 <atan2>
     ab6:	6d 87       	std	Y+13, r22	; 0x0d
     ab8:	7e 87       	std	Y+14, r23	; 0x0e
     aba:	8f 87       	std	Y+15, r24	; 0x0f
     abc:	98 8b       	std	Y+16, r25	; 0x10
    long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
     abe:	29 81       	ldd	r18, Y+1	; 0x01
     ac0:	3a 81       	ldd	r19, Y+2	; 0x02
     ac2:	4b 81       	ldd	r20, Y+3	; 0x03
     ac4:	5c 81       	ldd	r21, Y+4	; 0x04
     ac6:	ca 01       	movw	r24, r20
     ac8:	b9 01       	movw	r22, r18
     aca:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     ace:	6b 01       	movw	r12, r22
     ad0:	7c 01       	movw	r14, r24
     ad2:	a3 01       	movw	r20, r6
     ad4:	92 01       	movw	r18, r4
     ad6:	c3 01       	movw	r24, r6
     ad8:	b2 01       	movw	r22, r4
     ada:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     ade:	2b 01       	movw	r4, r22
     ae0:	3c 01       	movw	r6, r24
     ae2:	a5 01       	movw	r20, r10
     ae4:	94 01       	movw	r18, r8
     ae6:	c5 01       	movw	r24, r10
     ae8:	b4 01       	movw	r22, r8
     aea:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     aee:	9b 01       	movw	r18, r22
     af0:	ac 01       	movw	r20, r24
     af2:	c3 01       	movw	r24, r6
     af4:	b2 01       	movw	r22, r4
     af6:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
     afa:	2b 01       	movw	r4, r22
     afc:	3c 01       	movw	r6, r24
     afe:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <sqrt>
     b02:	20 e0       	ldi	r18, 0x00	; 0
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	48 e4       	ldi	r20, 0x48	; 72
     b08:	52 e4       	ldi	r21, 0x42	; 66
     b0a:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
     b0e:	4b 01       	movw	r8, r22
     b10:	5c 01       	movw	r10, r24
     b12:	9b 01       	movw	r18, r22
     b14:	ac 01       	movw	r20, r24
     b16:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     b1a:	6d 83       	std	Y+5, r22	; 0x05
     b1c:	7e 83       	std	Y+6, r23	; 0x06
     b1e:	8f 83       	std	Y+7, r24	; 0x07
     b20:	98 87       	std	Y+8, r25	; 0x08
     b22:	9b 01       	movw	r18, r22
     b24:	ac 01       	movw	r20, r24
     b26:	c7 01       	movw	r24, r14
     b28:	b6 01       	movw	r22, r12
     b2a:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
     b2e:	69 87       	std	Y+9, r22	; 0x09
     b30:	7a 87       	std	Y+10, r23	; 0x0a
     b32:	8b 87       	std	Y+11, r24	; 0x0b
     b34:	9c 87       	std	Y+12, r25	; 0x0c
     b36:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <sqrt>
     b3a:	9b 01       	movw	r18, r22
     b3c:	ac 01       	movw	r20, r24
     b3e:	69 81       	ldd	r22, Y+1	; 0x01
     b40:	7a 81       	ldd	r23, Y+2	; 0x02
     b42:	8b 81       	ldd	r24, Y+3	; 0x03
     b44:	9c 81       	ldd	r25, Y+4	; 0x04
     b46:	90 58       	subi	r25, 0x80	; 128
     b48:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
     b4c:	0e 94 a8 18 	call	0x3150	; 0x3150 <acos>
     b50:	69 83       	std	Y+1, r22	; 0x01
     b52:	7a 83       	std	Y+2, r23	; 0x02
     b54:	8b 83       	std	Y+3, r24	; 0x03
     b56:	9c 83       	std	Y+4, r25	; 0x04
    acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	48 e4       	ldi	r20, 0x48	; 72
     b5e:	52 e4       	ldi	r21, 0x42	; 66
     b60:	c3 01       	movw	r24, r6
     b62:	b2 01       	movw	r22, r4
     b64:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
     b68:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <sqrt>
     b6c:	9b 01       	movw	r18, r22
     b6e:	ac 01       	movw	r20, r24
     b70:	c5 01       	movw	r24, r10
     b72:	b4 01       	movw	r22, r8
     b74:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     b78:	9b 01       	movw	r18, r22
     b7a:	ac 01       	movw	r20, r24
     b7c:	c7 01       	movw	r24, r14
     b7e:	b6 01       	movw	r22, r12
     b80:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
     b84:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <sqrt>
     b88:	2b 01       	movw	r4, r22
     b8a:	3c 01       	movw	r6, r24
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	38 e4       	ldi	r19, 0x48	; 72
     b90:	4c e8       	ldi	r20, 0x8C	; 140
     b92:	55 e4       	ldi	r21, 0x45	; 69
     b94:	69 85       	ldd	r22, Y+9	; 0x09
     b96:	7a 85       	ldd	r23, Y+10	; 0x0a
     b98:	8b 85       	ldd	r24, Y+11	; 0x0b
     b9a:	9c 85       	ldd	r25, Y+12	; 0x0c
     b9c:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	38 e0       	ldi	r19, 0x08	; 8
     ba4:	44 e8       	ldi	r20, 0x84	; 132
     ba6:	56 e4       	ldi	r21, 0x46	; 70
     ba8:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
     bac:	4b 01       	movw	r8, r22
     bae:	5c 01       	movw	r10, r24
     bb0:	a3 01       	movw	r20, r6
     bb2:	92 01       	movw	r18, r4
     bb4:	c3 01       	movw	r24, r6
     bb6:	b2 01       	movw	r22, r4
     bb8:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	46 e8       	ldi	r20, 0x86	; 134
     bc2:	52 e4       	ldi	r21, 0x42	; 66
     bc4:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     bc8:	9b 01       	movw	r18, r22
     bca:	ac 01       	movw	r20, r24
     bcc:	c5 01       	movw	r24, r10
     bce:	b4 01       	movw	r22, r8
     bd0:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
     bd4:	0e 94 a8 18 	call	0x3150	; 0x3150 <acos>
     bd8:	2b 01       	movw	r4, r22
     bda:	3c 01       	movw	r6, r24
    
    long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     bdc:	a7 01       	movw	r20, r14
     bde:	96 01       	movw	r18, r12
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	7a e1       	ldi	r23, 0x1A	; 26
     be4:	87 ea       	ldi	r24, 0xA7	; 167
     be6:	96 e4       	ldi	r25, 0x46	; 70
     be8:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
     bec:	2d 81       	ldd	r18, Y+5	; 0x05
     bee:	3e 81       	ldd	r19, Y+6	; 0x06
     bf0:	4f 81       	ldd	r20, Y+7	; 0x07
     bf2:	58 85       	ldd	r21, Y+8	; 0x08
     bf4:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	38 e1       	ldi	r19, 0x18	; 24
     bfc:	48 e8       	ldi	r20, 0x88	; 136
     bfe:	56 e4       	ldi	r21, 0x46	; 70
     c00:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
     c04:	0e 94 a8 18 	call	0x3150	; 0x3150 <acos>
     c08:	4b 01       	movw	r8, r22
     c0a:	5c 01       	movw	r10, r24
    long int ActuatorAngle1 =  theta1 + 195;
    long int ActuatorAngle2 =  225 - theta2;
    long int ActuatorAngle3 =  300 - theta3 ;
    
    
    MoveDynamixel(1,ActuatorAngle1,speed);
     c0c:	68 01       	movw	r12, r16
     c0e:	ee 24       	eor	r14, r14
     c10:	d7 fc       	sbrc	r13, 7
     c12:	e0 94       	com	r14
     c14:	fe 2c       	mov	r15, r14
    MoveDynamixel(12,ActuatorAngle3,speed);
    return;
}
void MoveRearLeftLeg(float x, float y, float z, int speed)
{
    long int theta1 = atan2f(x,-y)*180/PI;
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	44 e3       	ldi	r20, 0x34	; 52
     c1c:	53 e4       	ldi	r21, 0x43	; 67
     c1e:	6d 85       	ldd	r22, Y+13	; 0x0d
     c20:	7e 85       	ldd	r23, Y+14	; 0x0e
     c22:	8f 85       	ldd	r24, Y+15	; 0x0f
     c24:	98 89       	ldd	r25, Y+16	; 0x10
     c26:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     c2a:	28 ed       	ldi	r18, 0xD8	; 216
     c2c:	3f e0       	ldi	r19, 0x0F	; 15
     c2e:	49 e4       	ldi	r20, 0x49	; 73
     c30:	50 e4       	ldi	r21, 0x40	; 64
     c32:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
     c36:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
    acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
    
    long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

    long int ActuatorAngle1 =  theta1 + 195;
     c3a:	ab 01       	movw	r20, r22
     c3c:	bc 01       	movw	r22, r24
     c3e:	4d 53       	subi	r20, 0x3D	; 61
     c40:	5f 4f       	sbci	r21, 0xFF	; 255
     c42:	6f 4f       	sbci	r22, 0xFF	; 255
     c44:	7f 4f       	sbci	r23, 0xFF	; 255
    long int ActuatorAngle2 =  225 - theta2;
    long int ActuatorAngle3 =  300 - theta3 ;
    
    
    MoveDynamixel(1,ActuatorAngle1,speed);
     c46:	97 01       	movw	r18, r14
     c48:	86 01       	movw	r16, r12
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	2b dc       	rcall	.-1962   	; 0x4a6 <MoveDynamixel>
    return;
}
void MoveRearLeftLeg(float x, float y, float z, int speed)
{
    long int theta1 = atan2f(x,-y)*180/PI;
    long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
     c50:	a3 01       	movw	r20, r6
     c52:	92 01       	movw	r18, r4
     c54:	69 81       	ldd	r22, Y+1	; 0x01
     c56:	7a 81       	ldd	r23, Y+2	; 0x02
     c58:	8b 81       	ldd	r24, Y+3	; 0x03
     c5a:	9c 81       	ldd	r25, Y+4	; 0x04
     c5c:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
     c60:	24 ee       	ldi	r18, 0xE4	; 228
     c62:	3e e2       	ldi	r19, 0x2E	; 46
     c64:	45 e6       	ldi	r20, 0x65	; 101
     c66:	52 e4       	ldi	r21, 0x42	; 66
     c68:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     c6c:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
    
    long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

    long int ActuatorAngle1 =  theta1 + 195;
    long int ActuatorAngle2 =  225 - theta2;
     c70:	0f 2e       	mov	r0, r31
     c72:	f1 ee       	ldi	r31, 0xE1	; 225
     c74:	4f 2e       	mov	r4, r31
     c76:	51 2c       	mov	r5, r1
     c78:	61 2c       	mov	r6, r1
     c7a:	71 2c       	mov	r7, r1
     c7c:	f0 2d       	mov	r31, r0
     c7e:	93 01       	movw	r18, r6
     c80:	82 01       	movw	r16, r4
     c82:	06 1b       	sub	r16, r22
     c84:	17 0b       	sbc	r17, r23
     c86:	28 0b       	sbc	r18, r24
     c88:	39 0b       	sbc	r19, r25
     c8a:	b9 01       	movw	r22, r18
     c8c:	a8 01       	movw	r20, r16
    long int ActuatorAngle3 =  300 - theta3 ;
    
    
    MoveDynamixel(1,ActuatorAngle1,speed);
    MoveDynamixel(3,ActuatorAngle2,speed);
     c8e:	97 01       	movw	r18, r14
     c90:	86 01       	movw	r16, r12
     c92:	83 e0       	ldi	r24, 0x03	; 3
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	07 dc       	rcall	.-2034   	; 0x4a6 <MoveDynamixel>
{
    long int theta1 = atan2f(x,-y)*180/PI;
    long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
    acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
    
    long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	44 e3       	ldi	r20, 0x34	; 52
     c9e:	53 e4       	ldi	r21, 0x43	; 67
     ca0:	c5 01       	movw	r24, r10
     ca2:	b4 01       	movw	r22, r8
     ca4:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     ca8:	28 ed       	ldi	r18, 0xD8	; 216
     caa:	3f e0       	ldi	r19, 0x0F	; 15
     cac:	49 e4       	ldi	r20, 0x49	; 73
     cae:	50 e4       	ldi	r21, 0x40	; 64
     cb0:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
     cb4:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>

    long int ActuatorAngle1 =  theta1 + 195;
    long int ActuatorAngle2 =  225 - theta2;
    long int ActuatorAngle3 =  300 - theta3 ;
     cb8:	0f 2e       	mov	r0, r31
     cba:	fc e2       	ldi	r31, 0x2C	; 44
     cbc:	8f 2e       	mov	r8, r31
     cbe:	99 24       	eor	r9, r9
     cc0:	93 94       	inc	r9
     cc2:	a1 2c       	mov	r10, r1
     cc4:	b1 2c       	mov	r11, r1
     cc6:	f0 2d       	mov	r31, r0
     cc8:	95 01       	movw	r18, r10
     cca:	84 01       	movw	r16, r8
     ccc:	06 1b       	sub	r16, r22
     cce:	17 0b       	sbc	r17, r23
     cd0:	28 0b       	sbc	r18, r24
     cd2:	39 0b       	sbc	r19, r25
     cd4:	b9 01       	movw	r22, r18
     cd6:	a8 01       	movw	r20, r16
    
    
    MoveDynamixel(1,ActuatorAngle1,speed);
    MoveDynamixel(3,ActuatorAngle2,speed);
    MoveDynamixel(5,ActuatorAngle3,speed);
     cd8:	97 01       	movw	r18, r14
     cda:	86 01       	movw	r16, r12
     cdc:	85 e0       	ldi	r24, 0x05	; 5
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	e2 db       	rcall	.-2108   	; 0x4a6 <MoveDynamixel>
    return;
}
     ce2:	60 96       	adiw	r28, 0x10	; 16
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	cd bf       	out	0x3d, r28	; 61
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	1f 91       	pop	r17
     cf4:	0f 91       	pop	r16
     cf6:	ff 90       	pop	r15
     cf8:	ef 90       	pop	r14
     cfa:	df 90       	pop	r13
     cfc:	cf 90       	pop	r12
     cfe:	bf 90       	pop	r11
     d00:	af 90       	pop	r10
     d02:	9f 90       	pop	r9
     d04:	8f 90       	pop	r8
     d06:	7f 90       	pop	r7
     d08:	6f 90       	pop	r6
     d0a:	5f 90       	pop	r5
     d0c:	4f 90       	pop	r4
     d0e:	08 95       	ret

00000d10 <MoveRearRightLeg>:
void MoveRearRightLeg(float x, float y, float z, int speed)
{
     d10:	4f 92       	push	r4
     d12:	5f 92       	push	r5
     d14:	6f 92       	push	r6
     d16:	7f 92       	push	r7
     d18:	8f 92       	push	r8
     d1a:	9f 92       	push	r9
     d1c:	af 92       	push	r10
     d1e:	bf 92       	push	r11
     d20:	cf 92       	push	r12
     d22:	df 92       	push	r13
     d24:	ef 92       	push	r14
     d26:	ff 92       	push	r15
     d28:	0f 93       	push	r16
     d2a:	1f 93       	push	r17
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	60 97       	sbiw	r28, 0x10	; 16
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	2b 01       	movw	r4, r22
     d42:	3c 01       	movw	r6, r24
     d44:	49 01       	movw	r8, r18
     d46:	5a 01       	movw	r10, r20
     d48:	e9 82       	std	Y+1, r14	; 0x01
     d4a:	fa 82       	std	Y+2, r15	; 0x02
     d4c:	0b 83       	std	Y+3, r16	; 0x03
     d4e:	1c 83       	std	Y+4, r17	; 0x04
     d50:	86 01       	movw	r16, r12
    long int theta1 = atan2f(x,-y)*180/PI;
     d52:	50 58       	subi	r21, 0x80	; 128
     d54:	0e 94 2a 19 	call	0x3254	; 0x3254 <atan2>
     d58:	6d 87       	std	Y+13, r22	; 0x0d
     d5a:	7e 87       	std	Y+14, r23	; 0x0e
     d5c:	8f 87       	std	Y+15, r24	; 0x0f
     d5e:	98 8b       	std	Y+16, r25	; 0x10
    long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
     d60:	29 81       	ldd	r18, Y+1	; 0x01
     d62:	3a 81       	ldd	r19, Y+2	; 0x02
     d64:	4b 81       	ldd	r20, Y+3	; 0x03
     d66:	5c 81       	ldd	r21, Y+4	; 0x04
     d68:	ca 01       	movw	r24, r20
     d6a:	b9 01       	movw	r22, r18
     d6c:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     d70:	6b 01       	movw	r12, r22
     d72:	7c 01       	movw	r14, r24
     d74:	a3 01       	movw	r20, r6
     d76:	92 01       	movw	r18, r4
     d78:	c3 01       	movw	r24, r6
     d7a:	b2 01       	movw	r22, r4
     d7c:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     d80:	2b 01       	movw	r4, r22
     d82:	3c 01       	movw	r6, r24
     d84:	a5 01       	movw	r20, r10
     d86:	94 01       	movw	r18, r8
     d88:	c5 01       	movw	r24, r10
     d8a:	b4 01       	movw	r22, r8
     d8c:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     d90:	9b 01       	movw	r18, r22
     d92:	ac 01       	movw	r20, r24
     d94:	c3 01       	movw	r24, r6
     d96:	b2 01       	movw	r22, r4
     d98:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
     d9c:	2b 01       	movw	r4, r22
     d9e:	3c 01       	movw	r6, r24
     da0:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <sqrt>
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	48 e4       	ldi	r20, 0x48	; 72
     daa:	52 e4       	ldi	r21, 0x42	; 66
     dac:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
     db0:	4b 01       	movw	r8, r22
     db2:	5c 01       	movw	r10, r24
     db4:	9b 01       	movw	r18, r22
     db6:	ac 01       	movw	r20, r24
     db8:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     dbc:	6d 83       	std	Y+5, r22	; 0x05
     dbe:	7e 83       	std	Y+6, r23	; 0x06
     dc0:	8f 83       	std	Y+7, r24	; 0x07
     dc2:	98 87       	std	Y+8, r25	; 0x08
     dc4:	9b 01       	movw	r18, r22
     dc6:	ac 01       	movw	r20, r24
     dc8:	c7 01       	movw	r24, r14
     dca:	b6 01       	movw	r22, r12
     dcc:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
     dd0:	69 87       	std	Y+9, r22	; 0x09
     dd2:	7a 87       	std	Y+10, r23	; 0x0a
     dd4:	8b 87       	std	Y+11, r24	; 0x0b
     dd6:	9c 87       	std	Y+12, r25	; 0x0c
     dd8:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <sqrt>
     ddc:	9b 01       	movw	r18, r22
     dde:	ac 01       	movw	r20, r24
     de0:	69 81       	ldd	r22, Y+1	; 0x01
     de2:	7a 81       	ldd	r23, Y+2	; 0x02
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	9c 81       	ldd	r25, Y+4	; 0x04
     de8:	90 58       	subi	r25, 0x80	; 128
     dea:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
     dee:	0e 94 a8 18 	call	0x3150	; 0x3150 <acos>
     df2:	69 83       	std	Y+1, r22	; 0x01
     df4:	7a 83       	std	Y+2, r23	; 0x02
     df6:	8b 83       	std	Y+3, r24	; 0x03
     df8:	9c 83       	std	Y+4, r25	; 0x04
    acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	48 e4       	ldi	r20, 0x48	; 72
     e00:	52 e4       	ldi	r21, 0x42	; 66
     e02:	c3 01       	movw	r24, r6
     e04:	b2 01       	movw	r22, r4
     e06:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
     e0a:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <sqrt>
     e0e:	9b 01       	movw	r18, r22
     e10:	ac 01       	movw	r20, r24
     e12:	c5 01       	movw	r24, r10
     e14:	b4 01       	movw	r22, r8
     e16:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     e1a:	9b 01       	movw	r18, r22
     e1c:	ac 01       	movw	r20, r24
     e1e:	c7 01       	movw	r24, r14
     e20:	b6 01       	movw	r22, r12
     e22:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
     e26:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <sqrt>
     e2a:	2b 01       	movw	r4, r22
     e2c:	3c 01       	movw	r6, r24
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	38 e4       	ldi	r19, 0x48	; 72
     e32:	4c e8       	ldi	r20, 0x8C	; 140
     e34:	55 e4       	ldi	r21, 0x45	; 69
     e36:	69 85       	ldd	r22, Y+9	; 0x09
     e38:	7a 85       	ldd	r23, Y+10	; 0x0a
     e3a:	8b 85       	ldd	r24, Y+11	; 0x0b
     e3c:	9c 85       	ldd	r25, Y+12	; 0x0c
     e3e:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	38 e0       	ldi	r19, 0x08	; 8
     e46:	44 e8       	ldi	r20, 0x84	; 132
     e48:	56 e4       	ldi	r21, 0x46	; 70
     e4a:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
     e4e:	4b 01       	movw	r8, r22
     e50:	5c 01       	movw	r10, r24
     e52:	a3 01       	movw	r20, r6
     e54:	92 01       	movw	r18, r4
     e56:	c3 01       	movw	r24, r6
     e58:	b2 01       	movw	r22, r4
     e5a:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	46 e8       	ldi	r20, 0x86	; 134
     e64:	52 e4       	ldi	r21, 0x42	; 66
     e66:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     e6a:	9b 01       	movw	r18, r22
     e6c:	ac 01       	movw	r20, r24
     e6e:	c5 01       	movw	r24, r10
     e70:	b4 01       	movw	r22, r8
     e72:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
     e76:	0e 94 a8 18 	call	0x3150	; 0x3150 <acos>
     e7a:	2b 01       	movw	r4, r22
     e7c:	3c 01       	movw	r6, r24
    
    long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     e7e:	a7 01       	movw	r20, r14
     e80:	96 01       	movw	r18, r12
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	7a e1       	ldi	r23, 0x1A	; 26
     e86:	87 ea       	ldi	r24, 0xA7	; 167
     e88:	96 e4       	ldi	r25, 0x46	; 70
     e8a:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
     e8e:	2d 81       	ldd	r18, Y+5	; 0x05
     e90:	3e 81       	ldd	r19, Y+6	; 0x06
     e92:	4f 81       	ldd	r20, Y+7	; 0x07
     e94:	58 85       	ldd	r21, Y+8	; 0x08
     e96:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	38 e1       	ldi	r19, 0x18	; 24
     e9e:	48 e8       	ldi	r20, 0x88	; 136
     ea0:	56 e4       	ldi	r21, 0x46	; 70
     ea2:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
     ea6:	0e 94 a8 18 	call	0x3150	; 0x3150 <acos>
     eaa:	4b 01       	movw	r8, r22
     eac:	5c 01       	movw	r10, r24
    long int ActuatorAngle1 =  theta1 + 105;
    long int ActuatorAngle2 =  225 - theta2;
    long int ActuatorAngle3 =  300 - theta3;
    
    
    MoveDynamixel(7,ActuatorAngle1,speed);
     eae:	68 01       	movw	r12, r16
     eb0:	ee 24       	eor	r14, r14
     eb2:	d7 fc       	sbrc	r13, 7
     eb4:	e0 94       	com	r14
     eb6:	fe 2c       	mov	r15, r14
    MoveDynamixel(5,ActuatorAngle3,speed);
    return;
}
void MoveRearRightLeg(float x, float y, float z, int speed)
{
    long int theta1 = atan2f(x,-y)*180/PI;
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	44 e3       	ldi	r20, 0x34	; 52
     ebe:	53 e4       	ldi	r21, 0x43	; 67
     ec0:	6d 85       	ldd	r22, Y+13	; 0x0d
     ec2:	7e 85       	ldd	r23, Y+14	; 0x0e
     ec4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ec6:	98 89       	ldd	r25, Y+16	; 0x10
     ec8:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     ecc:	28 ed       	ldi	r18, 0xD8	; 216
     ece:	3f e0       	ldi	r19, 0x0F	; 15
     ed0:	49 e4       	ldi	r20, 0x49	; 73
     ed2:	50 e4       	ldi	r21, 0x40	; 64
     ed4:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
     ed8:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
    acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
    
    long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

    long int ActuatorAngle1 =  theta1 + 105;
     edc:	ab 01       	movw	r20, r22
     ede:	bc 01       	movw	r22, r24
     ee0:	47 59       	subi	r20, 0x97	; 151
     ee2:	5f 4f       	sbci	r21, 0xFF	; 255
     ee4:	6f 4f       	sbci	r22, 0xFF	; 255
     ee6:	7f 4f       	sbci	r23, 0xFF	; 255
    long int ActuatorAngle2 =  225 - theta2;
    long int ActuatorAngle3 =  300 - theta3;
    
    
    MoveDynamixel(7,ActuatorAngle1,speed);
     ee8:	97 01       	movw	r18, r14
     eea:	86 01       	movw	r16, r12
     eec:	87 e0       	ldi	r24, 0x07	; 7
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	da da       	rcall	.-2636   	; 0x4a6 <MoveDynamixel>
    return;
}
void MoveRearRightLeg(float x, float y, float z, int speed)
{
    long int theta1 = atan2f(x,-y)*180/PI;
    long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
     ef2:	a3 01       	movw	r20, r6
     ef4:	92 01       	movw	r18, r4
     ef6:	69 81       	ldd	r22, Y+1	; 0x01
     ef8:	7a 81       	ldd	r23, Y+2	; 0x02
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	9c 81       	ldd	r25, Y+4	; 0x04
     efe:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
     f02:	24 ee       	ldi	r18, 0xE4	; 228
     f04:	3e e2       	ldi	r19, 0x2E	; 46
     f06:	45 e6       	ldi	r20, 0x65	; 101
     f08:	52 e4       	ldi	r21, 0x42	; 66
     f0a:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     f0e:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
    
    long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;

    long int ActuatorAngle1 =  theta1 + 105;
    long int ActuatorAngle2 =  225 - theta2;
     f12:	0f 2e       	mov	r0, r31
     f14:	f1 ee       	ldi	r31, 0xE1	; 225
     f16:	4f 2e       	mov	r4, r31
     f18:	51 2c       	mov	r5, r1
     f1a:	61 2c       	mov	r6, r1
     f1c:	71 2c       	mov	r7, r1
     f1e:	f0 2d       	mov	r31, r0
     f20:	93 01       	movw	r18, r6
     f22:	82 01       	movw	r16, r4
     f24:	06 1b       	sub	r16, r22
     f26:	17 0b       	sbc	r17, r23
     f28:	28 0b       	sbc	r18, r24
     f2a:	39 0b       	sbc	r19, r25
     f2c:	b9 01       	movw	r22, r18
     f2e:	a8 01       	movw	r20, r16
    long int ActuatorAngle3 =  300 - theta3;
    
    
    MoveDynamixel(7,ActuatorAngle1,speed);
    MoveDynamixel(9,ActuatorAngle2,speed);
     f30:	97 01       	movw	r18, r14
     f32:	86 01       	movw	r16, r12
     f34:	89 e0       	ldi	r24, 0x09	; 9
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	b6 da       	rcall	.-2708   	; 0x4a6 <MoveDynamixel>
{
    long int theta1 = atan2f(x,-y)*180/PI;
    long int theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
    acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
    
    long int theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	44 e3       	ldi	r20, 0x34	; 52
     f40:	53 e4       	ldi	r21, 0x43	; 67
     f42:	c5 01       	movw	r24, r10
     f44:	b4 01       	movw	r22, r8
     f46:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
     f4a:	28 ed       	ldi	r18, 0xD8	; 216
     f4c:	3f e0       	ldi	r19, 0x0F	; 15
     f4e:	49 e4       	ldi	r20, 0x49	; 73
     f50:	50 e4       	ldi	r21, 0x40	; 64
     f52:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
     f56:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>

    long int ActuatorAngle1 =  theta1 + 105;
    long int ActuatorAngle2 =  225 - theta2;
    long int ActuatorAngle3 =  300 - theta3;
     f5a:	0f 2e       	mov	r0, r31
     f5c:	fc e2       	ldi	r31, 0x2C	; 44
     f5e:	8f 2e       	mov	r8, r31
     f60:	99 24       	eor	r9, r9
     f62:	93 94       	inc	r9
     f64:	a1 2c       	mov	r10, r1
     f66:	b1 2c       	mov	r11, r1
     f68:	f0 2d       	mov	r31, r0
     f6a:	95 01       	movw	r18, r10
     f6c:	84 01       	movw	r16, r8
     f6e:	06 1b       	sub	r16, r22
     f70:	17 0b       	sbc	r17, r23
     f72:	28 0b       	sbc	r18, r24
     f74:	39 0b       	sbc	r19, r25
     f76:	b9 01       	movw	r22, r18
     f78:	a8 01       	movw	r20, r16
    
    
    MoveDynamixel(7,ActuatorAngle1,speed);
    MoveDynamixel(9,ActuatorAngle2,speed);
    MoveDynamixel(11,ActuatorAngle3,speed);
     f7a:	97 01       	movw	r18, r14
     f7c:	86 01       	movw	r16, r12
     f7e:	8b e0       	ldi	r24, 0x0B	; 11
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	91 da       	rcall	.-2782   	; 0x4a6 <MoveDynamixel>
    return;
}
     f84:	60 96       	adiw	r28, 0x10	; 16
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	1f 91       	pop	r17
     f96:	0f 91       	pop	r16
     f98:	ff 90       	pop	r15
     f9a:	ef 90       	pop	r14
     f9c:	df 90       	pop	r13
     f9e:	cf 90       	pop	r12
     fa0:	bf 90       	pop	r11
     fa2:	af 90       	pop	r10
     fa4:	9f 90       	pop	r9
     fa6:	8f 90       	pop	r8
     fa8:	7f 90       	pop	r7
     faa:	6f 90       	pop	r6
     fac:	5f 90       	pop	r5
     fae:	4f 90       	pop	r4
     fb0:	08 95       	ret

00000fb2 <MoveToStartPosition>:

void MoveToStartPosition()
{
     fb2:	4f 92       	push	r4
     fb4:	5f 92       	push	r5
     fb6:	6f 92       	push	r6
     fb8:	7f 92       	push	r7
     fba:	8f 92       	push	r8
     fbc:	9f 92       	push	r9
     fbe:	af 92       	push	r10
     fc0:	bf 92       	push	r11
     fc2:	cf 92       	push	r12
     fc4:	df 92       	push	r13
     fc6:	ef 92       	push	r14
     fc8:	ff 92       	push	r15
     fca:	0f 93       	push	r16
     fcc:	1f 93       	push	r17
    MoveFrontLeftLeg(-startPositionX_g,startPositionY_g,startPositionZ_g,standardSpeed_g);
     fce:	c0 90 2a 01 	lds	r12, 0x012A
     fd2:	d0 90 2b 01 	lds	r13, 0x012B
     fd6:	60 91 32 01 	lds	r22, 0x0132
     fda:	70 91 33 01 	lds	r23, 0x0133
     fde:	88 27       	eor	r24, r24
     fe0:	77 fd       	sbrc	r23, 7
     fe2:	80 95       	com	r24
     fe4:	98 2f       	mov	r25, r24
     fe6:	0e 94 18 1a 	call	0x3430	; 0x3430 <__floatsisf>
     fea:	2b 01       	movw	r4, r22
     fec:	3c 01       	movw	r6, r24
     fee:	60 91 34 01 	lds	r22, 0x0134
     ff2:	70 91 35 01 	lds	r23, 0x0135
     ff6:	88 27       	eor	r24, r24
     ff8:	77 fd       	sbrc	r23, 7
     ffa:	80 95       	com	r24
     ffc:	98 2f       	mov	r25, r24
     ffe:	0e 94 18 1a 	call	0x3430	; 0x3430 <__floatsisf>
    1002:	4b 01       	movw	r8, r22
    1004:	5c 01       	movw	r10, r24
    1006:	60 91 36 01 	lds	r22, 0x0136
    100a:	70 91 37 01 	lds	r23, 0x0137
    100e:	71 95       	neg	r23
    1010:	61 95       	neg	r22
    1012:	71 09       	sbc	r23, r1
    1014:	88 27       	eor	r24, r24
    1016:	77 fd       	sbrc	r23, 7
    1018:	80 95       	com	r24
    101a:	98 2f       	mov	r25, r24
    101c:	0e 94 18 1a 	call	0x3430	; 0x3430 <__floatsisf>
    1020:	83 01       	movw	r16, r6
    1022:	72 01       	movw	r14, r4
    1024:	a5 01       	movw	r20, r10
    1026:	94 01       	movw	r18, r8
    1028:	a6 da       	rcall	.-2740   	; 0x576 <MoveFrontLeftLeg>
    MoveFrontRightLeg(startPositionX_g,startPositionY_g,startPositionZ_g,standardSpeed_g);
    102a:	c0 90 2a 01 	lds	r12, 0x012A
    102e:	d0 90 2b 01 	lds	r13, 0x012B
    1032:	60 91 32 01 	lds	r22, 0x0132
    1036:	70 91 33 01 	lds	r23, 0x0133
    103a:	88 27       	eor	r24, r24
    103c:	77 fd       	sbrc	r23, 7
    103e:	80 95       	com	r24
    1040:	98 2f       	mov	r25, r24
    1042:	0e 94 18 1a 	call	0x3430	; 0x3430 <__floatsisf>
    1046:	2b 01       	movw	r4, r22
    1048:	3c 01       	movw	r6, r24
    104a:	60 91 34 01 	lds	r22, 0x0134
    104e:	70 91 35 01 	lds	r23, 0x0135
    1052:	88 27       	eor	r24, r24
    1054:	77 fd       	sbrc	r23, 7
    1056:	80 95       	com	r24
    1058:	98 2f       	mov	r25, r24
    105a:	0e 94 18 1a 	call	0x3430	; 0x3430 <__floatsisf>
    105e:	4b 01       	movw	r8, r22
    1060:	5c 01       	movw	r10, r24
    1062:	60 91 36 01 	lds	r22, 0x0136
    1066:	70 91 37 01 	lds	r23, 0x0137
    106a:	88 27       	eor	r24, r24
    106c:	77 fd       	sbrc	r23, 7
    106e:	80 95       	com	r24
    1070:	98 2f       	mov	r25, r24
    1072:	0e 94 18 1a 	call	0x3430	; 0x3430 <__floatsisf>
    1076:	83 01       	movw	r16, r6
    1078:	72 01       	movw	r14, r4
    107a:	a5 01       	movw	r20, r10
    107c:	94 01       	movw	r18, r8
    107e:	b9 db       	rcall	.-2190   	; 0x7f2 <MoveFrontRightLeg>
    MoveRearLeftLeg(-startPositionX_g,-startPositionY_g,startPositionZ_g,standardSpeed_g);
    1080:	c0 90 2a 01 	lds	r12, 0x012A
    1084:	d0 90 2b 01 	lds	r13, 0x012B
    1088:	60 91 32 01 	lds	r22, 0x0132
    108c:	70 91 33 01 	lds	r23, 0x0133
    1090:	88 27       	eor	r24, r24
    1092:	77 fd       	sbrc	r23, 7
    1094:	80 95       	com	r24
    1096:	98 2f       	mov	r25, r24
    1098:	0e 94 18 1a 	call	0x3430	; 0x3430 <__floatsisf>
    109c:	2b 01       	movw	r4, r22
    109e:	3c 01       	movw	r6, r24
    10a0:	60 91 34 01 	lds	r22, 0x0134
    10a4:	70 91 35 01 	lds	r23, 0x0135
    10a8:	71 95       	neg	r23
    10aa:	61 95       	neg	r22
    10ac:	71 09       	sbc	r23, r1
    10ae:	88 27       	eor	r24, r24
    10b0:	77 fd       	sbrc	r23, 7
    10b2:	80 95       	com	r24
    10b4:	98 2f       	mov	r25, r24
    10b6:	0e 94 18 1a 	call	0x3430	; 0x3430 <__floatsisf>
    10ba:	4b 01       	movw	r8, r22
    10bc:	5c 01       	movw	r10, r24
    10be:	60 91 36 01 	lds	r22, 0x0136
    10c2:	70 91 37 01 	lds	r23, 0x0137
    10c6:	71 95       	neg	r23
    10c8:	61 95       	neg	r22
    10ca:	71 09       	sbc	r23, r1
    10cc:	88 27       	eor	r24, r24
    10ce:	77 fd       	sbrc	r23, 7
    10d0:	80 95       	com	r24
    10d2:	98 2f       	mov	r25, r24
    10d4:	0e 94 18 1a 	call	0x3430	; 0x3430 <__floatsisf>
    10d8:	83 01       	movw	r16, r6
    10da:	72 01       	movw	r14, r4
    10dc:	a5 01       	movw	r20, r10
    10de:	94 01       	movw	r18, r8
    10e0:	c6 dc       	rcall	.-1652   	; 0xa6e <MoveRearLeftLeg>
    MoveRearRightLeg(startPositionX_g,-startPositionY_g,startPositionZ_g,standardSpeed_g);
    10e2:	c0 90 2a 01 	lds	r12, 0x012A
    10e6:	d0 90 2b 01 	lds	r13, 0x012B
    10ea:	60 91 32 01 	lds	r22, 0x0132
    10ee:	70 91 33 01 	lds	r23, 0x0133
    10f2:	88 27       	eor	r24, r24
    10f4:	77 fd       	sbrc	r23, 7
    10f6:	80 95       	com	r24
    10f8:	98 2f       	mov	r25, r24
    10fa:	0e 94 18 1a 	call	0x3430	; 0x3430 <__floatsisf>
    10fe:	2b 01       	movw	r4, r22
    1100:	3c 01       	movw	r6, r24
    1102:	60 91 34 01 	lds	r22, 0x0134
    1106:	70 91 35 01 	lds	r23, 0x0135
    110a:	71 95       	neg	r23
    110c:	61 95       	neg	r22
    110e:	71 09       	sbc	r23, r1
    1110:	88 27       	eor	r24, r24
    1112:	77 fd       	sbrc	r23, 7
    1114:	80 95       	com	r24
    1116:	98 2f       	mov	r25, r24
    1118:	0e 94 18 1a 	call	0x3430	; 0x3430 <__floatsisf>
    111c:	4b 01       	movw	r8, r22
    111e:	5c 01       	movw	r10, r24
    1120:	60 91 36 01 	lds	r22, 0x0136
    1124:	70 91 37 01 	lds	r23, 0x0137
    1128:	88 27       	eor	r24, r24
    112a:	77 fd       	sbrc	r23, 7
    112c:	80 95       	com	r24
    112e:	98 2f       	mov	r25, r24
    1130:	0e 94 18 1a 	call	0x3430	; 0x3430 <__floatsisf>
    1134:	83 01       	movw	r16, r6
    1136:	72 01       	movw	r14, r4
    1138:	a5 01       	movw	r20, r10
    113a:	94 01       	movw	r18, r8
    113c:	e9 dd       	rcall	.-1070   	; 0xd10 <MoveRearRightLeg>
    return;
}
    113e:	1f 91       	pop	r17
    1140:	0f 91       	pop	r16
    1142:	ff 90       	pop	r15
    1144:	ef 90       	pop	r14
    1146:	df 90       	pop	r13
    1148:	cf 90       	pop	r12
    114a:	bf 90       	pop	r11
    114c:	af 90       	pop	r10
    114e:	9f 90       	pop	r9
    1150:	8f 90       	pop	r8
    1152:	7f 90       	pop	r7
    1154:	6f 90       	pop	r6
    1156:	5f 90       	pop	r5
    1158:	4f 90       	pop	r4
    115a:	08 95       	ret

0000115c <increasePositionIndexes>:

// Den här funktionen hanterar vilken position i gångcykeln roboten är i. Den går runt baserat på 
// antalet positioner som finns i den givna gångstilen. 
void increasePositionIndexes()
{
    if (currentPos_g >= maxGaitCyclePos_g)
    115c:	80 91 3a 01 	lds	r24, 0x013A
    1160:	90 91 3b 01 	lds	r25, 0x013B
    1164:	20 91 20 01 	lds	r18, 0x0120
    1168:	30 91 21 01 	lds	r19, 0x0121
    116c:	82 17       	cp	r24, r18
    116e:	93 07       	cpc	r25, r19
    1170:	5c f0       	brlt	.+22     	; 0x1188 <increasePositionIndexes+0x2c>
    {
        currentPos_g = 0;
    1172:	10 92 3b 01 	sts	0x013B, r1
    1176:	10 92 3a 01 	sts	0x013A, r1
        nextPos_g = currentPos_g + 1;
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	90 93 23 01 	sts	0x0123, r25
    1182:	80 93 22 01 	sts	0x0122, r24
    1186:	08 95       	ret
    }
    else
    {
        currentPos_g++;
    1188:	ac 01       	movw	r20, r24
    118a:	4f 5f       	subi	r20, 0xFF	; 255
    118c:	5f 4f       	sbci	r21, 0xFF	; 255
    118e:	50 93 3b 01 	sts	0x013B, r21
    1192:	40 93 3a 01 	sts	0x013A, r20
        if (currentPos_g >= maxGaitCyclePos_g)
    1196:	42 17       	cp	r20, r18
    1198:	53 07       	cpc	r21, r19
    119a:	2c f0       	brlt	.+10     	; 0x11a6 <increasePositionIndexes+0x4a>
        {
            nextPos_g = 0;
    119c:	10 92 23 01 	sts	0x0123, r1
    11a0:	10 92 22 01 	sts	0x0122, r1
    11a4:	08 95       	ret
        }
        else
        {
            nextPos_g = currentPos_g + 1;
    11a6:	02 96       	adiw	r24, 0x02	; 2
    11a8:	90 93 23 01 	sts	0x0123, r25
    11ac:	80 93 22 01 	sts	0x0122, r24
    11b0:	08 95       	ret

000011b2 <CalcStraightPath>:
leg rearLeftLeg = {REAR_LEFT_LEG, 1, 3, 5};
leg rearRightLeg = {REAR_RIGHT_LEG, 7, 9, 11};


void CalcStraightPath(leg currentLeg, int numberOfPositions, int startIndex, float x1, float y1, float z1, float x2, float y2, float z2)
{
    11b2:	2f 92       	push	r2
    11b4:	3f 92       	push	r3
    11b6:	4f 92       	push	r4
    11b8:	5f 92       	push	r5
    11ba:	6f 92       	push	r6
    11bc:	7f 92       	push	r7
    11be:	8f 92       	push	r8
    11c0:	9f 92       	push	r9
    11c2:	af 92       	push	r10
    11c4:	bf 92       	push	r11
    11c6:	cf 92       	push	r12
    11c8:	df 92       	push	r13
    11ca:	ef 92       	push	r14
    11cc:	ff 92       	push	r15
    11ce:	0f 93       	push	r16
    11d0:	1f 93       	push	r17
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	e8 97       	sbiw	r28, 0x38	; 56
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	29 83       	std	Y+1, r18	; 0x01
    11e8:	3a 83       	std	Y+2, r19	; 0x02
    11ea:	4b 83       	std	Y+3, r20	; 0x03
    11ec:	5c 83       	std	Y+4, r21	; 0x04
    11ee:	6d 83       	std	Y+5, r22	; 0x05
    11f0:	7e 83       	std	Y+6, r23	; 0x06
    11f2:	8f 83       	std	Y+7, r24	; 0x07
    11f4:	98 87       	std	Y+8, r25	; 0x08
    11f6:	17 01       	movw	r2, r14
    11f8:	61 96       	adiw	r28, 0x11	; 17
    11fa:	4c ac       	ldd	r4, Y+60	; 0x3c
    11fc:	5d ac       	ldd	r5, Y+61	; 0x3d
    11fe:	6e ac       	ldd	r6, Y+62	; 0x3e
    1200:	7f ac       	ldd	r7, Y+63	; 0x3f
    1202:	61 97       	sbiw	r28, 0x11	; 17
    1204:	29 81       	ldd	r18, Y+1	; 0x01
    1206:	3a 81       	ldd	r19, Y+2	; 0x02
    1208:	38 8f       	std	Y+24, r19	; 0x18
    120a:	2f 8b       	std	Y+23, r18	; 0x17
    120c:	4b 81       	ldd	r20, Y+3	; 0x03
    120e:	5c 81       	ldd	r21, Y+4	; 0x04
    1210:	5e 8b       	std	Y+22, r21	; 0x16
    1212:	4d 8b       	std	Y+21, r20	; 0x15
    1214:	8d 80       	ldd	r8, Y+5	; 0x05
    1216:	9e 80       	ldd	r9, Y+6	; 0x06
    1218:	ef 80       	ldd	r14, Y+7	; 0x07
    121a:	f8 84       	ldd	r15, Y+8	; 0x08
    long int theta1;
    long int theta2;
    long int theta3;
    if ((currentLeg.legNumber == FRONT_LEFT_LEG) | (currentLeg.legNumber == FRONT_RIGHT_LEG))
    121c:	c9 01       	movw	r24, r18
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	02 97       	sbiw	r24, 0x02	; 2
    1222:	88 f4       	brcc	.+34     	; 0x1246 <CalcStraightPath+0x94>
    {
        x1 *= -1;
    1224:	d7 fa       	bst	r13, 7
    1226:	d0 94       	com	r13
    1228:	d7 f8       	bld	r13, 7
    122a:	d0 94       	com	r13
        x2 *= -1;
    122c:	69 96       	adiw	r28, 0x19	; 25
    122e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1230:	9d ad       	ldd	r25, Y+61	; 0x3d
    1232:	ae ad       	ldd	r26, Y+62	; 0x3e
    1234:	bf ad       	ldd	r27, Y+63	; 0x3f
    1236:	69 97       	sbiw	r28, 0x19	; 25
    1238:	b0 58       	subi	r27, 0x80	; 128
    123a:	69 96       	adiw	r28, 0x19	; 25
    123c:	8c af       	std	Y+60, r24	; 0x3c
    123e:	9d af       	std	Y+61, r25	; 0x3d
    1240:	ae af       	std	Y+62, r26	; 0x3e
    1242:	bf af       	std	Y+63, r27	; 0x3f
    1244:	69 97       	sbiw	r28, 0x19	; 25
    }
    if ((currentLeg.legNumber == REAR_RIGHT_LEG) | (currentLeg.legNumber == REAR_LEFT_LEG))
    1246:	8f 89       	ldd	r24, Y+23	; 0x17
    1248:	98 8d       	ldd	r25, Y+24	; 0x18
    124a:	03 97       	sbiw	r24, 0x03	; 3
    124c:	02 97       	sbiw	r24, 0x02	; 2
    124e:	88 f4       	brcc	.+34     	; 0x1272 <CalcStraightPath+0xc0>
    {
        y1 *= -1;
    1250:	77 fa       	bst	r7, 7
    1252:	70 94       	com	r7
    1254:	77 f8       	bld	r7, 7
    1256:	70 94       	com	r7
        y2 *= -1;
    1258:	6d 96       	adiw	r28, 0x1d	; 29
    125a:	2c ad       	ldd	r18, Y+60	; 0x3c
    125c:	3d ad       	ldd	r19, Y+61	; 0x3d
    125e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1260:	5f ad       	ldd	r21, Y+63	; 0x3f
    1262:	6d 97       	sbiw	r28, 0x1d	; 29
    1264:	50 58       	subi	r21, 0x80	; 128
    1266:	6d 96       	adiw	r28, 0x1d	; 29
    1268:	2c af       	std	Y+60, r18	; 0x3c
    126a:	3d af       	std	Y+61, r19	; 0x3d
    126c:	4e af       	std	Y+62, r20	; 0x3e
    126e:	5f af       	std	Y+63, r21	; 0x3f
    1270:	6d 97       	sbiw	r28, 0x1d	; 29
    }
    float deltaX = (x2 - x1) / numberOfPositions;
    1272:	b8 01       	movw	r22, r16
    1274:	88 27       	eor	r24, r24
    1276:	77 fd       	sbrc	r23, 7
    1278:	80 95       	com	r24
    127a:	98 2f       	mov	r25, r24
    127c:	0e 94 18 1a 	call	0x3430	; 0x3430 <__floatsisf>
    1280:	69 87       	std	Y+9, r22	; 0x09
    1282:	7a 87       	std	Y+10, r23	; 0x0a
    1284:	8b 87       	std	Y+11, r24	; 0x0b
    1286:	9c 87       	std	Y+12, r25	; 0x0c
    1288:	a6 01       	movw	r20, r12
    128a:	95 01       	movw	r18, r10
    128c:	69 96       	adiw	r28, 0x19	; 25
    128e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1290:	7d ad       	ldd	r23, Y+61	; 0x3d
    1292:	8e ad       	ldd	r24, Y+62	; 0x3e
    1294:	9f ad       	ldd	r25, Y+63	; 0x3f
    1296:	69 97       	sbiw	r28, 0x19	; 25
    1298:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
    129c:	29 85       	ldd	r18, Y+9	; 0x09
    129e:	3a 85       	ldd	r19, Y+10	; 0x0a
    12a0:	4b 85       	ldd	r20, Y+11	; 0x0b
    12a2:	5c 85       	ldd	r21, Y+12	; 0x0c
    12a4:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
    12a8:	6d a7       	std	Y+45, r22	; 0x2d
    12aa:	7e a7       	std	Y+46, r23	; 0x2e
    12ac:	8f a7       	std	Y+47, r24	; 0x2f
    12ae:	98 ab       	std	Y+48, r25	; 0x30
    float deltaY = (y2 - y1) / numberOfPositions;
    12b0:	a3 01       	movw	r20, r6
    12b2:	92 01       	movw	r18, r4
    12b4:	6d 96       	adiw	r28, 0x1d	; 29
    12b6:	6c ad       	ldd	r22, Y+60	; 0x3c
    12b8:	7d ad       	ldd	r23, Y+61	; 0x3d
    12ba:	8e ad       	ldd	r24, Y+62	; 0x3e
    12bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    12be:	6d 97       	sbiw	r28, 0x1d	; 29
    12c0:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
    12c4:	29 85       	ldd	r18, Y+9	; 0x09
    12c6:	3a 85       	ldd	r19, Y+10	; 0x0a
    12c8:	4b 85       	ldd	r20, Y+11	; 0x0b
    12ca:	5c 85       	ldd	r21, Y+12	; 0x0c
    12cc:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
    12d0:	69 ab       	std	Y+49, r22	; 0x31
    12d2:	7a ab       	std	Y+50, r23	; 0x32
    12d4:	8b ab       	std	Y+51, r24	; 0x33
    12d6:	9c ab       	std	Y+52, r25	; 0x34
    float deltaZ = (z2 - z1) / numberOfPositions;
    12d8:	65 96       	adiw	r28, 0x15	; 21
    12da:	2c ad       	ldd	r18, Y+60	; 0x3c
    12dc:	3d ad       	ldd	r19, Y+61	; 0x3d
    12de:	4e ad       	ldd	r20, Y+62	; 0x3e
    12e0:	5f ad       	ldd	r21, Y+63	; 0x3f
    12e2:	65 97       	sbiw	r28, 0x15	; 21
    12e4:	a1 96       	adiw	r28, 0x21	; 33
    12e6:	6c ad       	ldd	r22, Y+60	; 0x3c
    12e8:	7d ad       	ldd	r23, Y+61	; 0x3d
    12ea:	8e ad       	ldd	r24, Y+62	; 0x3e
    12ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    12ee:	a1 97       	sbiw	r28, 0x21	; 33
    12f0:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
    12f4:	29 85       	ldd	r18, Y+9	; 0x09
    12f6:	3a 85       	ldd	r19, Y+10	; 0x0a
    12f8:	4b 85       	ldd	r20, Y+11	; 0x0b
    12fa:	5c 85       	ldd	r21, Y+12	; 0x0c
    12fc:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
    1300:	6d ab       	std	Y+53, r22	; 0x35
    1302:	7e ab       	std	Y+54, r23	; 0x36
    1304:	8f ab       	std	Y+55, r24	; 0x37
    1306:	98 af       	std	Y+56, r25	; 0x38
    float z = z1;
    
  
    
    
    for (int i = startIndex; i < startIndex + numberOfPositions; i++)
    1308:	a1 01       	movw	r20, r2
    130a:	40 0f       	add	r20, r16
    130c:	51 1f       	adc	r21, r17
    130e:	5c a7       	std	Y+44, r21	; 0x2c
    1310:	4b a7       	std	Y+43, r20	; 0x2b
    1312:	24 16       	cp	r2, r20
    1314:	35 06       	cpc	r3, r21
    1316:	0c f0       	brlt	.+2      	; 0x131a <CalcStraightPath+0x168>
    1318:	d7 c2       	rjmp	.+1454   	; 0x18c8 <CalcStraightPath+0x716>
    131a:	24 e1       	ldi	r18, 0x14	; 20
    131c:	ad 89       	ldd	r26, Y+21	; 0x15
    131e:	be 89       	ldd	r27, Y+22	; 0x16
    1320:	2a 9f       	mul	r18, r26
    1322:	c0 01       	movw	r24, r0
    1324:	2b 9f       	mul	r18, r27
    1326:	90 0d       	add	r25, r0
    1328:	11 24       	eor	r1, r1
    132a:	82 0d       	add	r24, r2
    132c:	93 1d       	adc	r25, r3
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	88 0f       	add	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	fc 01       	movw	r30, r24
    1338:	e4 50       	subi	r30, 0x04	; 4
    133a:	fb 4f       	sbci	r31, 0xFB	; 251
    133c:	fc a3       	std	Y+36, r31	; 0x24
    133e:	eb a3       	std	Y+35, r30	; 0x23
    1340:	28 9d       	mul	r18, r8
    1342:	c0 01       	movw	r24, r0
    1344:	29 9d       	mul	r18, r9
    1346:	90 0d       	add	r25, r0
    1348:	11 24       	eor	r1, r1
    134a:	82 0d       	add	r24, r2
    134c:	93 1d       	adc	r25, r3
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	ac 01       	movw	r20, r24
    1358:	44 50       	subi	r20, 0x04	; 4
    135a:	5b 4f       	sbci	r21, 0xFB	; 251
    135c:	5a a3       	std	Y+34, r21	; 0x22
    135e:	49 a3       	std	Y+33, r20	; 0x21
    1360:	2e 9d       	mul	r18, r14
    1362:	c0 01       	movw	r24, r0
    1364:	2f 9d       	mul	r18, r15
    1366:	90 0d       	add	r25, r0
    1368:	11 24       	eor	r1, r1
    136a:	82 0d       	add	r24, r2
    136c:	93 1d       	adc	r25, r3
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	dc 01       	movw	r26, r24
    1378:	a4 50       	subi	r26, 0x04	; 4
    137a:	bb 4f       	sbci	r27, 0xFB	; 251
    137c:	be a3       	std	Y+38, r27	; 0x26
    137e:	ad a3       	std	Y+37, r26	; 0x25
    1380:	81 01       	movw	r16, r2
    1382:	00 0f       	add	r16, r16
    1384:	11 1f       	adc	r17, r17
    1386:	00 0f       	add	r16, r16
    1388:	11 1f       	adc	r17, r17
    138a:	04 57       	subi	r16, 0x74	; 116
    138c:	1e 4f       	sbci	r17, 0xFE	; 254
            }
            case REAR_LEFT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 195;
                actuatorPositions_g[currentLeg.femurJoint][i] =  225 - theta2;
                actuatorPositions_g[currentLeg.tibiaJoint][i] =  300 - theta3;
    138e:	3e 8a       	std	Y+22, r3	; 0x16
    1390:	2d 8a       	std	Y+21, r2	; 0x15
    1392:	18 01       	movw	r2, r16
    1394:	a9 86       	std	Y+9, r10	; 0x09
    1396:	ba 86       	std	Y+10, r11	; 0x0a
    1398:	cb 86       	std	Y+11, r12	; 0x0b
    139a:	dc 86       	std	Y+12, r13	; 0x0c
    139c:	4d 86       	std	Y+13, r4	; 0x0d
    139e:	5e 86       	std	Y+14, r5	; 0x0e
    13a0:	6f 86       	std	Y+15, r6	; 0x0f
    13a2:	78 8a       	std	Y+16, r7	; 0x10
  
    
    
    for (int i = startIndex; i < startIndex + numberOfPositions; i++)
    {
        x = x + deltaX;
    13a4:	2d a5       	ldd	r18, Y+45	; 0x2d
    13a6:	3e a5       	ldd	r19, Y+46	; 0x2e
    13a8:	4f a5       	ldd	r20, Y+47	; 0x2f
    13aa:	58 a9       	ldd	r21, Y+48	; 0x30
    13ac:	69 85       	ldd	r22, Y+9	; 0x09
    13ae:	7a 85       	ldd	r23, Y+10	; 0x0a
    13b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    13b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    13b4:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
    13b8:	69 87       	std	Y+9, r22	; 0x09
    13ba:	7a 87       	std	Y+10, r23	; 0x0a
    13bc:	8b 87       	std	Y+11, r24	; 0x0b
    13be:	9c 87       	std	Y+12, r25	; 0x0c
        y = y + deltaY;
    13c0:	29 a9       	ldd	r18, Y+49	; 0x31
    13c2:	3a a9       	ldd	r19, Y+50	; 0x32
    13c4:	4b a9       	ldd	r20, Y+51	; 0x33
    13c6:	5c a9       	ldd	r21, Y+52	; 0x34
    13c8:	6d 85       	ldd	r22, Y+13	; 0x0d
    13ca:	7e 85       	ldd	r23, Y+14	; 0x0e
    13cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ce:	98 89       	ldd	r25, Y+16	; 0x10
    13d0:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
    13d4:	6d 87       	std	Y+13, r22	; 0x0d
    13d6:	7e 87       	std	Y+14, r23	; 0x0e
    13d8:	8f 87       	std	Y+15, r24	; 0x0f
    13da:	98 8b       	std	Y+16, r25	; 0x10
        z = z + deltaZ;
    13dc:	2d a9       	ldd	r18, Y+53	; 0x35
    13de:	3e a9       	ldd	r19, Y+54	; 0x36
    13e0:	4f a9       	ldd	r20, Y+55	; 0x37
    13e2:	58 ad       	ldd	r21, Y+56	; 0x38
    13e4:	65 96       	adiw	r28, 0x15	; 21
    13e6:	6c ad       	ldd	r22, Y+60	; 0x3c
    13e8:	7d ad       	ldd	r23, Y+61	; 0x3d
    13ea:	8e ad       	ldd	r24, Y+62	; 0x3e
    13ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    13ee:	65 97       	sbiw	r28, 0x15	; 21
    13f0:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
    13f4:	65 96       	adiw	r28, 0x15	; 21
    13f6:	6c af       	std	Y+60, r22	; 0x3c
    13f8:	7d af       	std	Y+61, r23	; 0x3d
    13fa:	8e af       	std	Y+62, r24	; 0x3e
    13fc:	9f af       	std	Y+63, r25	; 0x3f
    13fe:	65 97       	sbiw	r28, 0x15	; 21
        
        // lös inverskinematik för lederna.
        theta1 = atan2f(x,y)*180/PI;
    1400:	2d 85       	ldd	r18, Y+13	; 0x0d
    1402:	3e 85       	ldd	r19, Y+14	; 0x0e
    1404:	4f 85       	ldd	r20, Y+15	; 0x0f
    1406:	58 89       	ldd	r21, Y+16	; 0x10
    1408:	69 85       	ldd	r22, Y+9	; 0x09
    140a:	7a 85       	ldd	r23, Y+10	; 0x0a
    140c:	8b 85       	ldd	r24, Y+11	; 0x0b
    140e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1410:	0e 94 2a 19 	call	0x3254	; 0x3254 <atan2>
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	44 e3       	ldi	r20, 0x34	; 52
    141a:	53 e4       	ldi	r21, 0x43	; 67
    141c:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
    1420:	28 ed       	ldi	r18, 0xD8	; 216
    1422:	3f e0       	ldi	r19, 0x0F	; 15
    1424:	49 e4       	ldi	r20, 0x49	; 73
    1426:	50 e4       	ldi	r21, 0x40	; 64
    1428:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
    142c:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    1430:	6f a3       	std	Y+39, r22	; 0x27
    1432:	78 a7       	std	Y+40, r23	; 0x28
    1434:	89 a7       	std	Y+41, r24	; 0x29
    1436:	9a a7       	std	Y+42, r25	; 0x2a
        theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
    1438:	65 96       	adiw	r28, 0x15	; 21
    143a:	2c ad       	ldd	r18, Y+60	; 0x3c
    143c:	3d ad       	ldd	r19, Y+61	; 0x3d
    143e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1440:	5f ad       	ldd	r21, Y+63	; 0x3f
    1442:	65 97       	sbiw	r28, 0x15	; 21
    1444:	ca 01       	movw	r24, r20
    1446:	b9 01       	movw	r22, r18
    1448:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
    144c:	69 8b       	std	Y+17, r22	; 0x11
    144e:	7a 8b       	std	Y+18, r23	; 0x12
    1450:	8b 8b       	std	Y+19, r24	; 0x13
    1452:	9c 8b       	std	Y+20, r25	; 0x14
    1454:	29 85       	ldd	r18, Y+9	; 0x09
    1456:	3a 85       	ldd	r19, Y+10	; 0x0a
    1458:	4b 85       	ldd	r20, Y+11	; 0x0b
    145a:	5c 85       	ldd	r21, Y+12	; 0x0c
    145c:	ca 01       	movw	r24, r20
    145e:	b9 01       	movw	r22, r18
    1460:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
    1464:	6b 01       	movw	r12, r22
    1466:	7c 01       	movw	r14, r24
    1468:	2d 85       	ldd	r18, Y+13	; 0x0d
    146a:	3e 85       	ldd	r19, Y+14	; 0x0e
    146c:	4f 85       	ldd	r20, Y+15	; 0x0f
    146e:	58 89       	ldd	r21, Y+16	; 0x10
    1470:	ca 01       	movw	r24, r20
    1472:	b9 01       	movw	r22, r18
    1474:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
    1478:	9b 01       	movw	r18, r22
    147a:	ac 01       	movw	r20, r24
    147c:	c7 01       	movw	r24, r14
    147e:	b6 01       	movw	r22, r12
    1480:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
    1484:	69 8f       	std	Y+25, r22	; 0x19
    1486:	7a 8f       	std	Y+26, r23	; 0x1a
    1488:	8b 8f       	std	Y+27, r24	; 0x1b
    148a:	9c 8f       	std	Y+28, r25	; 0x1c
    148c:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <sqrt>
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	48 e4       	ldi	r20, 0x48	; 72
    1496:	52 e4       	ldi	r21, 0x42	; 66
    1498:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
    149c:	6b 01       	movw	r12, r22
    149e:	7c 01       	movw	r14, r24
    14a0:	9b 01       	movw	r18, r22
    14a2:	ac 01       	movw	r20, r24
    14a4:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
    14a8:	6d 8f       	std	Y+29, r22	; 0x1d
    14aa:	7e 8f       	std	Y+30, r23	; 0x1e
    14ac:	8f 8f       	std	Y+31, r24	; 0x1f
    14ae:	98 a3       	std	Y+32, r25	; 0x20
    14b0:	9b 01       	movw	r18, r22
    14b2:	ac 01       	movw	r20, r24
    14b4:	69 89       	ldd	r22, Y+17	; 0x11
    14b6:	7a 89       	ldd	r23, Y+18	; 0x12
    14b8:	8b 89       	ldd	r24, Y+19	; 0x13
    14ba:	9c 89       	ldd	r25, Y+20	; 0x14
    14bc:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
    14c0:	4b 01       	movw	r8, r22
    14c2:	5c 01       	movw	r10, r24
    14c4:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <sqrt>
    14c8:	9b 01       	movw	r18, r22
    14ca:	ac 01       	movw	r20, r24
    14cc:	65 96       	adiw	r28, 0x15	; 21
    14ce:	6c ad       	ldd	r22, Y+60	; 0x3c
    14d0:	7d ad       	ldd	r23, Y+61	; 0x3d
    14d2:	8e ad       	ldd	r24, Y+62	; 0x3e
    14d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    14d6:	65 97       	sbiw	r28, 0x15	; 21
    14d8:	90 58       	subi	r25, 0x80	; 128
    14da:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
    14de:	0e 94 a8 18 	call	0x3150	; 0x3150 <acos>
    14e2:	2b 01       	movw	r4, r22
    14e4:	3c 01       	movw	r6, r24
        acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	48 e4       	ldi	r20, 0x48	; 72
    14ec:	52 e4       	ldi	r21, 0x42	; 66
    14ee:	69 8d       	ldd	r22, Y+25	; 0x19
    14f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14f6:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
    14fa:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <sqrt>
    14fe:	9b 01       	movw	r18, r22
    1500:	ac 01       	movw	r20, r24
    1502:	c7 01       	movw	r24, r14
    1504:	b6 01       	movw	r22, r12
    1506:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
    150a:	9b 01       	movw	r18, r22
    150c:	ac 01       	movw	r20, r24
    150e:	69 89       	ldd	r22, Y+17	; 0x11
    1510:	7a 89       	ldd	r23, Y+18	; 0x12
    1512:	8b 89       	ldd	r24, Y+19	; 0x13
    1514:	9c 89       	ldd	r25, Y+20	; 0x14
    1516:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
    151a:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <sqrt>
    151e:	6b 01       	movw	r12, r22
    1520:	7c 01       	movw	r14, r24
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	38 e4       	ldi	r19, 0x48	; 72
    1526:	4c e8       	ldi	r20, 0x8C	; 140
    1528:	55 e4       	ldi	r21, 0x45	; 69
    152a:	c5 01       	movw	r24, r10
    152c:	b4 01       	movw	r22, r8
    152e:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	38 e0       	ldi	r19, 0x08	; 8
    1536:	44 e8       	ldi	r20, 0x84	; 132
    1538:	56 e4       	ldi	r21, 0x46	; 70
    153a:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
    153e:	4b 01       	movw	r8, r22
    1540:	5c 01       	movw	r10, r24
    1542:	a7 01       	movw	r20, r14
    1544:	96 01       	movw	r18, r12
    1546:	c7 01       	movw	r24, r14
    1548:	b6 01       	movw	r22, r12
    154a:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	46 e8       	ldi	r20, 0x86	; 134
    1554:	52 e4       	ldi	r21, 0x42	; 66
    1556:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
    155a:	9b 01       	movw	r18, r22
    155c:	ac 01       	movw	r20, r24
    155e:	c5 01       	movw	r24, r10
    1560:	b4 01       	movw	r22, r8
    1562:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
    1566:	0e 94 a8 18 	call	0x3150	; 0x3150 <acos>
    156a:	9b 01       	movw	r18, r22
    156c:	ac 01       	movw	r20, r24
        y = y + deltaY;
        z = z + deltaZ;
        
        // lös inverskinematik för lederna.
        theta1 = atan2f(x,y)*180/PI;
        theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
    156e:	c3 01       	movw	r24, r6
    1570:	b2 01       	movw	r22, r4
    1572:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
    1576:	24 ee       	ldi	r18, 0xE4	; 228
    1578:	3e e2       	ldi	r19, 0x2E	; 46
    157a:	45 e6       	ldi	r20, 0x65	; 101
    157c:	52 e4       	ldi	r21, 0x42	; 66
    157e:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
    1582:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    1586:	6b 01       	movw	r12, r22
    1588:	7c 01       	movw	r14, r24
        acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
        
        theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
    158a:	29 89       	ldd	r18, Y+17	; 0x11
    158c:	3a 89       	ldd	r19, Y+18	; 0x12
    158e:	4b 89       	ldd	r20, Y+19	; 0x13
    1590:	5c 89       	ldd	r21, Y+20	; 0x14
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	7a e1       	ldi	r23, 0x1A	; 26
    1596:	87 ea       	ldi	r24, 0xA7	; 167
    1598:	96 e4       	ldi	r25, 0x46	; 70
    159a:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
    159e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    15a0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    15a2:	4f 8d       	ldd	r20, Y+31	; 0x1f
    15a4:	58 a1       	ldd	r21, Y+32	; 0x20
    15a6:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	38 e1       	ldi	r19, 0x18	; 24
    15ae:	48 e8       	ldi	r20, 0x88	; 136
    15b0:	56 e4       	ldi	r21, 0x46	; 70
    15b2:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
    15b6:	0e 94 a8 18 	call	0x3150	; 0x3150 <acos>
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	44 e3       	ldi	r20, 0x34	; 52
    15c0:	53 e4       	ldi	r21, 0x43	; 67
    15c2:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
    15c6:	28 ed       	ldi	r18, 0xD8	; 216
    15c8:	3f e0       	ldi	r19, 0x0F	; 15
    15ca:	49 e4       	ldi	r20, 0x49	; 73
    15cc:	50 e4       	ldi	r21, 0x40	; 64
    15ce:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
    15d2:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
        
        // spara resultatet i global array
        switch(currentLeg.legNumber)
    15d6:	ef 89       	ldd	r30, Y+23	; 0x17
    15d8:	f8 8d       	ldd	r31, Y+24	; 0x18
    15da:	e2 30       	cpi	r30, 0x02	; 2
    15dc:	f1 05       	cpc	r31, r1
    15de:	09 f4       	brne	.+2      	; 0x15e2 <CalcStraightPath+0x430>
    15e0:	5f c0       	rjmp	.+190    	; 0x16a0 <CalcStraightPath+0x4ee>
    15e2:	1c f4       	brge	.+6      	; 0x15ea <CalcStraightPath+0x438>
    15e4:	31 97       	sbiw	r30, 0x01	; 1
    15e6:	61 f0       	breq	.+24     	; 0x1600 <CalcStraightPath+0x44e>
    15e8:	50 c1       	rjmp	.+672    	; 0x188a <CalcStraightPath+0x6d8>
    15ea:	2f 89       	ldd	r18, Y+23	; 0x17
    15ec:	38 8d       	ldd	r19, Y+24	; 0x18
    15ee:	23 30       	cpi	r18, 0x03	; 3
    15f0:	31 05       	cpc	r19, r1
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <CalcStraightPath+0x444>
    15f4:	9b c0       	rjmp	.+310    	; 0x172c <CalcStraightPath+0x57a>
    15f6:	24 30       	cpi	r18, 0x04	; 4
    15f8:	31 05       	cpc	r19, r1
    15fa:	09 f4       	brne	.+2      	; 0x15fe <CalcStraightPath+0x44c>
    15fc:	ef c0       	rjmp	.+478    	; 0x17dc <CalcStraightPath+0x62a>
    15fe:	45 c1       	rjmp	.+650    	; 0x188a <CalcStraightPath+0x6d8>
        {
            case FRONT_LEFT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 105;
    1600:	0f a1       	ldd	r16, Y+39	; 0x27
    1602:	18 a5       	ldd	r17, Y+40	; 0x28
    1604:	29 a5       	ldd	r18, Y+41	; 0x29
    1606:	3a a5       	ldd	r19, Y+42	; 0x2a
    1608:	07 59       	subi	r16, 0x97	; 151
    160a:	1f 4f       	sbci	r17, 0xFF	; 255
    160c:	2f 4f       	sbci	r18, 0xFF	; 255
    160e:	3f 4f       	sbci	r19, 0xFF	; 255
    1610:	ab a1       	ldd	r26, Y+35	; 0x23
    1612:	bc a1       	ldd	r27, Y+36	; 0x24
    1614:	0d 93       	st	X+, r16
    1616:	1d 93       	st	X+, r17
    1618:	2d 93       	st	X+, r18
    161a:	3c 93       	st	X, r19
    161c:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.femurJoint][i] =  theta2 + 75;
    161e:	bb e4       	ldi	r27, 0x4B	; 75
    1620:	cb 0e       	add	r12, r27
    1622:	d1 1c       	adc	r13, r1
    1624:	e1 1c       	adc	r14, r1
    1626:	f1 1c       	adc	r15, r1
    1628:	e9 a1       	ldd	r30, Y+33	; 0x21
    162a:	fa a1       	ldd	r31, Y+34	; 0x22
    162c:	c0 82       	st	Z, r12
    162e:	d1 82       	std	Z+1, r13	; 0x01
    1630:	e2 82       	std	Z+2, r14	; 0x02
    1632:	f3 82       	std	Z+3, r15	; 0x03
                actuatorPositions_g[currentLeg.tibiaJoint][i] =  theta3 + 1;
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	01 96       	adiw	r24, 0x01	; 1
    163a:	a1 1d       	adc	r26, r1
    163c:	b1 1d       	adc	r27, r1
    163e:	ed a1       	ldd	r30, Y+37	; 0x25
    1640:	fe a1       	ldd	r31, Y+38	; 0x26
    1642:	80 83       	st	Z, r24
    1644:	91 83       	std	Z+1, r25	; 0x01
    1646:	a2 83       	std	Z+2, r26	; 0x02
    1648:	b3 83       	std	Z+3, r27	; 0x03
                legPositions_g[FRONT_LEFT_LEG_X][i] = x;
    164a:	69 85       	ldd	r22, Y+9	; 0x09
    164c:	7a 85       	ldd	r23, Y+10	; 0x0a
    164e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1650:	9c 85       	ldd	r25, Y+12	; 0x0c
    1652:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    1656:	d1 01       	movw	r26, r2
    1658:	6d 93       	st	X+, r22
    165a:	7d 93       	st	X+, r23
    165c:	8d 93       	st	X+, r24
    165e:	9c 93       	st	X, r25
    1660:	13 97       	sbiw	r26, 0x03	; 3
    1662:	81 01       	movw	r16, r2
    1664:	00 5b       	subi	r16, 0xB0	; 176
    1666:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[FRONT_LEFT_LEG_Y][i] = y;
    1668:	6d 85       	ldd	r22, Y+13	; 0x0d
    166a:	7e 85       	ldd	r23, Y+14	; 0x0e
    166c:	8f 85       	ldd	r24, Y+15	; 0x0f
    166e:	98 89       	ldd	r25, Y+16	; 0x10
    1670:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    1674:	f8 01       	movw	r30, r16
    1676:	60 83       	st	Z, r22
    1678:	71 83       	std	Z+1, r23	; 0x01
    167a:	82 83       	std	Z+2, r24	; 0x02
    167c:	93 83       	std	Z+3, r25	; 0x03
    167e:	00 5b       	subi	r16, 0xB0	; 176
    1680:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[FRONT_LEFT_LEG_Z][i] = z;
    1682:	65 96       	adiw	r28, 0x15	; 21
    1684:	6c ad       	ldd	r22, Y+60	; 0x3c
    1686:	7d ad       	ldd	r23, Y+61	; 0x3d
    1688:	8e ad       	ldd	r24, Y+62	; 0x3e
    168a:	9f ad       	ldd	r25, Y+63	; 0x3f
    168c:	65 97       	sbiw	r28, 0x15	; 21
    168e:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    1692:	d8 01       	movw	r26, r16
    1694:	6d 93       	st	X+, r22
    1696:	7d 93       	st	X+, r23
    1698:	8d 93       	st	X+, r24
    169a:	9c 93       	st	X, r25
    169c:	13 97       	sbiw	r26, 0x03	; 3
                break;
    169e:	f5 c0       	rjmp	.+490    	; 0x188a <CalcStraightPath+0x6d8>
            }
            case FRONT_RIGHT_LEG:
            {   
                actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 193;
    16a0:	8f a1       	ldd	r24, Y+39	; 0x27
    16a2:	98 a5       	ldd	r25, Y+40	; 0x28
    16a4:	a9 a5       	ldd	r26, Y+41	; 0x29
    16a6:	ba a5       	ldd	r27, Y+42	; 0x2a
    16a8:	8f 53       	subi	r24, 0x3F	; 63
    16aa:	9f 4f       	sbci	r25, 0xFF	; 255
    16ac:	af 4f       	sbci	r26, 0xFF	; 255
    16ae:	bf 4f       	sbci	r27, 0xFF	; 255
    16b0:	eb a1       	ldd	r30, Y+35	; 0x23
    16b2:	fc a1       	ldd	r31, Y+36	; 0x24
    16b4:	80 83       	st	Z, r24
    16b6:	91 83       	std	Z+1, r25	; 0x01
    16b8:	a2 83       	std	Z+2, r26	; 0x02
    16ba:	b3 83       	std	Z+3, r27	; 0x03
                actuatorPositions_g[currentLeg.femurJoint][i] =  theta2 + 75;
    16bc:	fb e4       	ldi	r31, 0x4B	; 75
    16be:	cf 0e       	add	r12, r31
    16c0:	d1 1c       	adc	r13, r1
    16c2:	e1 1c       	adc	r14, r1
    16c4:	f1 1c       	adc	r15, r1
    16c6:	a9 a1       	ldd	r26, Y+33	; 0x21
    16c8:	ba a1       	ldd	r27, Y+34	; 0x22
    16ca:	cd 92       	st	X+, r12
    16cc:	dd 92       	st	X+, r13
    16ce:	ed 92       	st	X+, r14
    16d0:	fc 92       	st	X, r15
    16d2:	13 97       	sbiw	r26, 0x03	; 3
    16d4:	81 01       	movw	r16, r2
    16d6:	00 51       	subi	r16, 0x10	; 16
    16d8:	1f 4f       	sbci	r17, 0xFF	; 255
                //actuatorPositions_g[currentLeg.tibiaJoint][i] =  theta3 + 3;
                legPositions_g[FRONT_RIGHT_LEG_X][i] = x;
    16da:	69 85       	ldd	r22, Y+9	; 0x09
    16dc:	7a 85       	ldd	r23, Y+10	; 0x0a
    16de:	8b 85       	ldd	r24, Y+11	; 0x0b
    16e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    16e2:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    16e6:	f8 01       	movw	r30, r16
    16e8:	60 83       	st	Z, r22
    16ea:	71 83       	std	Z+1, r23	; 0x01
    16ec:	82 83       	std	Z+2, r24	; 0x02
    16ee:	93 83       	std	Z+3, r25	; 0x03
    16f0:	00 5b       	subi	r16, 0xB0	; 176
    16f2:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[FRONT_RIGHT_LEG_Y][i] = y;
    16f4:	6d 85       	ldd	r22, Y+13	; 0x0d
    16f6:	7e 85       	ldd	r23, Y+14	; 0x0e
    16f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    16fa:	98 89       	ldd	r25, Y+16	; 0x10
    16fc:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    1700:	d8 01       	movw	r26, r16
    1702:	6d 93       	st	X+, r22
    1704:	7d 93       	st	X+, r23
    1706:	8d 93       	st	X+, r24
    1708:	9c 93       	st	X, r25
    170a:	13 97       	sbiw	r26, 0x03	; 3
    170c:	00 5b       	subi	r16, 0xB0	; 176
    170e:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[FRONT_RIGHT_LEG_Z][i] = z;
    1710:	65 96       	adiw	r28, 0x15	; 21
    1712:	6c ad       	ldd	r22, Y+60	; 0x3c
    1714:	7d ad       	ldd	r23, Y+61	; 0x3d
    1716:	8e ad       	ldd	r24, Y+62	; 0x3e
    1718:	9f ad       	ldd	r25, Y+63	; 0x3f
    171a:	65 97       	sbiw	r28, 0x15	; 21
    171c:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    1720:	f8 01       	movw	r30, r16
    1722:	60 83       	st	Z, r22
    1724:	71 83       	std	Z+1, r23	; 0x01
    1726:	82 83       	std	Z+2, r24	; 0x02
    1728:	93 83       	std	Z+3, r25	; 0x03
                break;
    172a:	af c0       	rjmp	.+350    	; 0x188a <CalcStraightPath+0x6d8>
            }
            case REAR_LEFT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 195;
    172c:	0f a1       	ldd	r16, Y+39	; 0x27
    172e:	18 a5       	ldd	r17, Y+40	; 0x28
    1730:	29 a5       	ldd	r18, Y+41	; 0x29
    1732:	3a a5       	ldd	r19, Y+42	; 0x2a
    1734:	0d 53       	subi	r16, 0x3D	; 61
    1736:	1f 4f       	sbci	r17, 0xFF	; 255
    1738:	2f 4f       	sbci	r18, 0xFF	; 255
    173a:	3f 4f       	sbci	r19, 0xFF	; 255
    173c:	ab a1       	ldd	r26, Y+35	; 0x23
    173e:	bc a1       	ldd	r27, Y+36	; 0x24
    1740:	0d 93       	st	X+, r16
    1742:	1d 93       	st	X+, r17
    1744:	2d 93       	st	X+, r18
    1746:	3c 93       	st	X, r19
    1748:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.femurJoint][i] =  225 - theta2;
    174a:	01 ee       	ldi	r16, 0xE1	; 225
    174c:	10 e0       	ldi	r17, 0x00	; 0
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	0c 19       	sub	r16, r12
    1754:	1d 09       	sbc	r17, r13
    1756:	2e 09       	sbc	r18, r14
    1758:	3f 09       	sbc	r19, r15
    175a:	e9 a1       	ldd	r30, Y+33	; 0x21
    175c:	fa a1       	ldd	r31, Y+34	; 0x22
    175e:	00 83       	st	Z, r16
    1760:	11 83       	std	Z+1, r17	; 0x01
    1762:	22 83       	std	Z+2, r18	; 0x02
    1764:	33 83       	std	Z+3, r19	; 0x03
                actuatorPositions_g[currentLeg.tibiaJoint][i] =  300 - theta3;
    1766:	2c e2       	ldi	r18, 0x2C	; 44
    1768:	31 e0       	ldi	r19, 0x01	; 1
    176a:	40 e0       	ldi	r20, 0x00	; 0
    176c:	50 e0       	ldi	r21, 0x00	; 0
    176e:	26 1b       	sub	r18, r22
    1770:	37 0b       	sbc	r19, r23
    1772:	48 0b       	sbc	r20, r24
    1774:	59 0b       	sbc	r21, r25
    1776:	ed a1       	ldd	r30, Y+37	; 0x25
    1778:	fe a1       	ldd	r31, Y+38	; 0x26
    177a:	20 83       	st	Z, r18
    177c:	31 83       	std	Z+1, r19	; 0x01
    177e:	42 83       	std	Z+2, r20	; 0x02
    1780:	53 83       	std	Z+3, r21	; 0x03
    1782:	81 01       	movw	r16, r2
    1784:	00 52       	subi	r16, 0x20	; 32
    1786:	1e 4f       	sbci	r17, 0xFE	; 254
                legPositions_g[REAR_LEFT_LEG_X][i] = x;
    1788:	69 85       	ldd	r22, Y+9	; 0x09
    178a:	7a 85       	ldd	r23, Y+10	; 0x0a
    178c:	8b 85       	ldd	r24, Y+11	; 0x0b
    178e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1790:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    1794:	d8 01       	movw	r26, r16
    1796:	6d 93       	st	X+, r22
    1798:	7d 93       	st	X+, r23
    179a:	8d 93       	st	X+, r24
    179c:	9c 93       	st	X, r25
    179e:	13 97       	sbiw	r26, 0x03	; 3
    17a0:	00 5b       	subi	r16, 0xB0	; 176
    17a2:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[REAR_LEFT_LEG_Y][i] = y;
    17a4:	6d 85       	ldd	r22, Y+13	; 0x0d
    17a6:	7e 85       	ldd	r23, Y+14	; 0x0e
    17a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    17aa:	98 89       	ldd	r25, Y+16	; 0x10
    17ac:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    17b0:	f8 01       	movw	r30, r16
    17b2:	60 83       	st	Z, r22
    17b4:	71 83       	std	Z+1, r23	; 0x01
    17b6:	82 83       	std	Z+2, r24	; 0x02
    17b8:	93 83       	std	Z+3, r25	; 0x03
    17ba:	00 5b       	subi	r16, 0xB0	; 176
    17bc:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[REAR_LEFT_LEG_Z][i] = z;
    17be:	65 96       	adiw	r28, 0x15	; 21
    17c0:	6c ad       	ldd	r22, Y+60	; 0x3c
    17c2:	7d ad       	ldd	r23, Y+61	; 0x3d
    17c4:	8e ad       	ldd	r24, Y+62	; 0x3e
    17c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    17c8:	65 97       	sbiw	r28, 0x15	; 21
    17ca:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    17ce:	d8 01       	movw	r26, r16
    17d0:	6d 93       	st	X+, r22
    17d2:	7d 93       	st	X+, r23
    17d4:	8d 93       	st	X+, r24
    17d6:	9c 93       	st	X, r25
    17d8:	13 97       	sbiw	r26, 0x03	; 3
                break;
    17da:	57 c0       	rjmp	.+174    	; 0x188a <CalcStraightPath+0x6d8>
            }
            case REAR_RIGHT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 105;
    17dc:	0f a1       	ldd	r16, Y+39	; 0x27
    17de:	18 a5       	ldd	r17, Y+40	; 0x28
    17e0:	29 a5       	ldd	r18, Y+41	; 0x29
    17e2:	3a a5       	ldd	r19, Y+42	; 0x2a
    17e4:	07 59       	subi	r16, 0x97	; 151
    17e6:	1f 4f       	sbci	r17, 0xFF	; 255
    17e8:	2f 4f       	sbci	r18, 0xFF	; 255
    17ea:	3f 4f       	sbci	r19, 0xFF	; 255
    17ec:	eb a1       	ldd	r30, Y+35	; 0x23
    17ee:	fc a1       	ldd	r31, Y+36	; 0x24
    17f0:	00 83       	st	Z, r16
    17f2:	11 83       	std	Z+1, r17	; 0x01
    17f4:	22 83       	std	Z+2, r18	; 0x02
    17f6:	33 83       	std	Z+3, r19	; 0x03
                actuatorPositions_g[currentLeg.femurJoint][i] =  225 - theta2;
    17f8:	01 ee       	ldi	r16, 0xE1	; 225
    17fa:	10 e0       	ldi	r17, 0x00	; 0
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	0c 19       	sub	r16, r12
    1802:	1d 09       	sbc	r17, r13
    1804:	2e 09       	sbc	r18, r14
    1806:	3f 09       	sbc	r19, r15
    1808:	a9 a1       	ldd	r26, Y+33	; 0x21
    180a:	ba a1       	ldd	r27, Y+34	; 0x22
    180c:	0d 93       	st	X+, r16
    180e:	1d 93       	st	X+, r17
    1810:	2d 93       	st	X+, r18
    1812:	3c 93       	st	X, r19
    1814:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.tibiaJoint][i] =  300 - theta3;
    1816:	2c e2       	ldi	r18, 0x2C	; 44
    1818:	31 e0       	ldi	r19, 0x01	; 1
    181a:	40 e0       	ldi	r20, 0x00	; 0
    181c:	50 e0       	ldi	r21, 0x00	; 0
    181e:	26 1b       	sub	r18, r22
    1820:	37 0b       	sbc	r19, r23
    1822:	48 0b       	sbc	r20, r24
    1824:	59 0b       	sbc	r21, r25
    1826:	ed a1       	ldd	r30, Y+37	; 0x25
    1828:	fe a1       	ldd	r31, Y+38	; 0x26
    182a:	20 83       	st	Z, r18
    182c:	31 83       	std	Z+1, r19	; 0x01
    182e:	42 83       	std	Z+2, r20	; 0x02
    1830:	53 83       	std	Z+3, r21	; 0x03
    1832:	81 01       	movw	r16, r2
    1834:	00 53       	subi	r16, 0x30	; 48
    1836:	1d 4f       	sbci	r17, 0xFD	; 253
                legPositions_g[REAR_RIGHT_LEG_X][i] = x;
    1838:	69 85       	ldd	r22, Y+9	; 0x09
    183a:	7a 85       	ldd	r23, Y+10	; 0x0a
    183c:	8b 85       	ldd	r24, Y+11	; 0x0b
    183e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1840:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    1844:	d8 01       	movw	r26, r16
    1846:	6d 93       	st	X+, r22
    1848:	7d 93       	st	X+, r23
    184a:	8d 93       	st	X+, r24
    184c:	9c 93       	st	X, r25
    184e:	13 97       	sbiw	r26, 0x03	; 3
    1850:	00 5b       	subi	r16, 0xB0	; 176
    1852:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[REAR_RIGHT_LEG_Y][i] = y;
    1854:	6d 85       	ldd	r22, Y+13	; 0x0d
    1856:	7e 85       	ldd	r23, Y+14	; 0x0e
    1858:	8f 85       	ldd	r24, Y+15	; 0x0f
    185a:	98 89       	ldd	r25, Y+16	; 0x10
    185c:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    1860:	f8 01       	movw	r30, r16
    1862:	60 83       	st	Z, r22
    1864:	71 83       	std	Z+1, r23	; 0x01
    1866:	82 83       	std	Z+2, r24	; 0x02
    1868:	93 83       	std	Z+3, r25	; 0x03
    186a:	00 5b       	subi	r16, 0xB0	; 176
    186c:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[REAR_RIGHT_LEG_Z][i] = z;
    186e:	65 96       	adiw	r28, 0x15	; 21
    1870:	6c ad       	ldd	r22, Y+60	; 0x3c
    1872:	7d ad       	ldd	r23, Y+61	; 0x3d
    1874:	8e ad       	ldd	r24, Y+62	; 0x3e
    1876:	9f ad       	ldd	r25, Y+63	; 0x3f
    1878:	65 97       	sbiw	r28, 0x15	; 21
    187a:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    187e:	d8 01       	movw	r26, r16
    1880:	6d 93       	st	X+, r22
    1882:	7d 93       	st	X+, r23
    1884:	8d 93       	st	X+, r24
    1886:	9c 93       	st	X, r25
    1888:	13 97       	sbiw	r26, 0x03	; 3
    float z = z1;
    
  
    
    
    for (int i = startIndex; i < startIndex + numberOfPositions; i++)
    188a:	ed 89       	ldd	r30, Y+21	; 0x15
    188c:	fe 89       	ldd	r31, Y+22	; 0x16
    188e:	31 96       	adiw	r30, 0x01	; 1
    1890:	fe 8b       	std	Y+22, r31	; 0x16
    1892:	ed 8b       	std	Y+21, r30	; 0x15
    1894:	2b a1       	ldd	r18, Y+35	; 0x23
    1896:	3c a1       	ldd	r19, Y+36	; 0x24
    1898:	2c 5f       	subi	r18, 0xFC	; 252
    189a:	3f 4f       	sbci	r19, 0xFF	; 255
    189c:	3c a3       	std	Y+36, r19	; 0x24
    189e:	2b a3       	std	Y+35, r18	; 0x23
    18a0:	49 a1       	ldd	r20, Y+33	; 0x21
    18a2:	5a a1       	ldd	r21, Y+34	; 0x22
    18a4:	4c 5f       	subi	r20, 0xFC	; 252
    18a6:	5f 4f       	sbci	r21, 0xFF	; 255
    18a8:	5a a3       	std	Y+34, r21	; 0x22
    18aa:	49 a3       	std	Y+33, r20	; 0x21
    18ac:	8d a1       	ldd	r24, Y+37	; 0x25
    18ae:	9e a1       	ldd	r25, Y+38	; 0x26
    18b0:	04 96       	adiw	r24, 0x04	; 4
    18b2:	9e a3       	std	Y+38, r25	; 0x26
    18b4:	8d a3       	std	Y+37, r24	; 0x25
    18b6:	94 e0       	ldi	r25, 0x04	; 4
    18b8:	29 0e       	add	r2, r25
    18ba:	31 1c       	adc	r3, r1
    18bc:	ab a5       	ldd	r26, Y+43	; 0x2b
    18be:	bc a5       	ldd	r27, Y+44	; 0x2c
    18c0:	ea 17       	cp	r30, r26
    18c2:	fb 07       	cpc	r31, r27
    18c4:	09 f0       	breq	.+2      	; 0x18c8 <CalcStraightPath+0x716>
    18c6:	6e cd       	rjmp	.-1316   	; 0x13a4 <CalcStraightPath+0x1f2>
        
        
        
        
    }
}
    18c8:	e8 96       	adiw	r28, 0x38	; 56
    18ca:	0f b6       	in	r0, 0x3f	; 63
    18cc:	f8 94       	cli
    18ce:	de bf       	out	0x3e, r29	; 62
    18d0:	0f be       	out	0x3f, r0	; 63
    18d2:	cd bf       	out	0x3d, r28	; 61
    18d4:	df 91       	pop	r29
    18d6:	cf 91       	pop	r28
    18d8:	1f 91       	pop	r17
    18da:	0f 91       	pop	r16
    18dc:	ff 90       	pop	r15
    18de:	ef 90       	pop	r14
    18e0:	df 90       	pop	r13
    18e2:	cf 90       	pop	r12
    18e4:	bf 90       	pop	r11
    18e6:	af 90       	pop	r10
    18e8:	9f 90       	pop	r9
    18ea:	8f 90       	pop	r8
    18ec:	7f 90       	pop	r7
    18ee:	6f 90       	pop	r6
    18f0:	5f 90       	pop	r5
    18f2:	4f 90       	pop	r4
    18f4:	3f 90       	pop	r3
    18f6:	2f 90       	pop	r2
    18f8:	08 95       	ret

000018fa <CalcCurvedPath>:

void CalcCurvedPath(leg currentLeg, int numberOfPositions, int startIndex, float x1, float y1, float z1, float x2, float y2, float z2)
{
    18fa:	2f 92       	push	r2
    18fc:	3f 92       	push	r3
    18fe:	4f 92       	push	r4
    1900:	5f 92       	push	r5
    1902:	6f 92       	push	r6
    1904:	7f 92       	push	r7
    1906:	8f 92       	push	r8
    1908:	9f 92       	push	r9
    190a:	af 92       	push	r10
    190c:	bf 92       	push	r11
    190e:	cf 92       	push	r12
    1910:	df 92       	push	r13
    1912:	ef 92       	push	r14
    1914:	ff 92       	push	r15
    1916:	0f 93       	push	r16
    1918:	1f 93       	push	r17
    191a:	cf 93       	push	r28
    191c:	df 93       	push	r29
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	ce 54       	subi	r28, 0x4E	; 78
    1924:	d1 09       	sbc	r29, r1
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	de bf       	out	0x3e, r29	; 62
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	cd bf       	out	0x3d, r28	; 61
    1930:	29 83       	std	Y+1, r18	; 0x01
    1932:	3a 83       	std	Y+2, r19	; 0x02
    1934:	4b 83       	std	Y+3, r20	; 0x03
    1936:	5c 83       	std	Y+4, r21	; 0x04
    1938:	6d 83       	std	Y+5, r22	; 0x05
    193a:	7e 83       	std	Y+6, r23	; 0x06
    193c:	8f 83       	std	Y+7, r24	; 0x07
    193e:	98 87       	std	Y+8, r25	; 0x08
    1940:	29 96       	adiw	r28, 0x09	; 9
    1942:	1f af       	std	Y+63, r17	; 0x3f
    1944:	0e af       	std	Y+62, r16	; 0x3e
    1946:	29 97       	sbiw	r28, 0x09	; 9
    1948:	f8 ae       	std	Y+56, r15	; 0x38
    194a:	ef aa       	std	Y+55, r14	; 0x37
    194c:	ab 96       	adiw	r28, 0x2b	; 43
    194e:	4c ac       	ldd	r4, Y+60	; 0x3c
    1950:	5d ac       	ldd	r5, Y+61	; 0x3d
    1952:	6e ac       	ldd	r6, Y+62	; 0x3e
    1954:	7f ac       	ldd	r7, Y+63	; 0x3f
    1956:	ab 97       	sbiw	r28, 0x2b	; 43
    1958:	29 80       	ldd	r2, Y+1	; 0x01
    195a:	3a 80       	ldd	r3, Y+2	; 0x02
    195c:	2b 81       	ldd	r18, Y+3	; 0x03
    195e:	3c 81       	ldd	r19, Y+4	; 0x04
    1960:	2b 96       	adiw	r28, 0x0b	; 11
    1962:	3f af       	std	Y+63, r19	; 0x3f
    1964:	2e af       	std	Y+62, r18	; 0x3e
    1966:	2b 97       	sbiw	r28, 0x0b	; 11
    1968:	4d 81       	ldd	r20, Y+5	; 0x05
    196a:	5e 81       	ldd	r21, Y+6	; 0x06
    196c:	2d 96       	adiw	r28, 0x0d	; 13
    196e:	5f af       	std	Y+63, r21	; 0x3f
    1970:	4e af       	std	Y+62, r20	; 0x3e
    1972:	2d 97       	sbiw	r28, 0x0d	; 13
    1974:	8f 81       	ldd	r24, Y+7	; 0x07
    1976:	98 85       	ldd	r25, Y+8	; 0x08
    1978:	2f 96       	adiw	r28, 0x0f	; 15
    197a:	9f af       	std	Y+63, r25	; 0x3f
    197c:	8e af       	std	Y+62, r24	; 0x3e
    197e:	2f 97       	sbiw	r28, 0x0f	; 15
    int topPosition = startIndex + numberOfPositions / 2 - 1;
    1980:	11 23       	and	r17, r17
    1982:	14 f4       	brge	.+4      	; 0x1988 <CalcCurvedPath+0x8e>
    1984:	0f 5f       	subi	r16, 0xFF	; 255
    1986:	1f 4f       	sbci	r17, 0xFF	; 255
    1988:	15 95       	asr	r17
    198a:	07 95       	ror	r16
    198c:	af a9       	ldd	r26, Y+55	; 0x37
    198e:	b8 ad       	ldd	r27, Y+56	; 0x38
    1990:	a0 0f       	add	r26, r16
    1992:	b1 1f       	adc	r27, r17
    1994:	be a7       	std	Y+46, r27	; 0x2e
    1996:	ad a7       	std	Y+45, r26	; 0x2d
    1998:	11 97       	sbiw	r26, 0x01	; 1
    199a:	be af       	std	Y+62, r27	; 0x3e
    199c:	ad af       	std	Y+61, r26	; 0x3d
    long int theta1;
    long int theta2;
    long int theta3;
    if ((currentLeg.legNumber == FRONT_LEFT_LEG) | (currentLeg.legNumber == FRONT_RIGHT_LEG))
    199e:	c1 01       	movw	r24, r2
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	02 97       	sbiw	r24, 0x02	; 2
    19a4:	88 f4       	brcc	.+34     	; 0x19c8 <CalcCurvedPath+0xce>
    {
        x1 *= -1;
    19a6:	d7 fa       	bst	r13, 7
    19a8:	d0 94       	com	r13
    19aa:	d7 f8       	bld	r13, 7
    19ac:	d0 94       	com	r13
        x2 *= -1;
    19ae:	af 96       	adiw	r28, 0x2f	; 47
    19b0:	2c ad       	ldd	r18, Y+60	; 0x3c
    19b2:	3d ad       	ldd	r19, Y+61	; 0x3d
    19b4:	4e ad       	ldd	r20, Y+62	; 0x3e
    19b6:	5f ad       	ldd	r21, Y+63	; 0x3f
    19b8:	af 97       	sbiw	r28, 0x2f	; 47
    19ba:	50 58       	subi	r21, 0x80	; 128
    19bc:	af 96       	adiw	r28, 0x2f	; 47
    19be:	2c af       	std	Y+60, r18	; 0x3c
    19c0:	3d af       	std	Y+61, r19	; 0x3d
    19c2:	4e af       	std	Y+62, r20	; 0x3e
    19c4:	5f af       	std	Y+63, r21	; 0x3f
    19c6:	af 97       	sbiw	r28, 0x2f	; 47
    }
    if ((currentLeg.legNumber == REAR_RIGHT_LEG) | (currentLeg.legNumber == REAR_LEFT_LEG))
    19c8:	c1 01       	movw	r24, r2
    19ca:	03 97       	sbiw	r24, 0x03	; 3
    19cc:	02 97       	sbiw	r24, 0x02	; 2
    19ce:	d0 f4       	brcc	.+52     	; 0x1a04 <CalcCurvedPath+0x10a>
    {
        y1 *= -1;
    19d0:	a7 96       	adiw	r28, 0x27	; 39
    19d2:	8c ad       	ldd	r24, Y+60	; 0x3c
    19d4:	9d ad       	ldd	r25, Y+61	; 0x3d
    19d6:	ae ad       	ldd	r26, Y+62	; 0x3e
    19d8:	bf ad       	ldd	r27, Y+63	; 0x3f
    19da:	a7 97       	sbiw	r28, 0x27	; 39
    19dc:	b0 58       	subi	r27, 0x80	; 128
    19de:	a7 96       	adiw	r28, 0x27	; 39
    19e0:	8c af       	std	Y+60, r24	; 0x3c
    19e2:	9d af       	std	Y+61, r25	; 0x3d
    19e4:	ae af       	std	Y+62, r26	; 0x3e
    19e6:	bf af       	std	Y+63, r27	; 0x3f
    19e8:	a7 97       	sbiw	r28, 0x27	; 39
        y2 *= -1;
    19ea:	e3 96       	adiw	r28, 0x33	; 51
    19ec:	2c ad       	ldd	r18, Y+60	; 0x3c
    19ee:	3d ad       	ldd	r19, Y+61	; 0x3d
    19f0:	4e ad       	ldd	r20, Y+62	; 0x3e
    19f2:	5f ad       	ldd	r21, Y+63	; 0x3f
    19f4:	e3 97       	sbiw	r28, 0x33	; 51
    19f6:	50 58       	subi	r21, 0x80	; 128
    19f8:	e3 96       	adiw	r28, 0x33	; 51
    19fa:	2c af       	std	Y+60, r18	; 0x3c
    19fc:	3d af       	std	Y+61, r19	; 0x3d
    19fe:	4e af       	std	Y+62, r20	; 0x3e
    1a00:	5f af       	std	Y+63, r21	; 0x3f
    1a02:	e3 97       	sbiw	r28, 0x33	; 51
    }
    float deltaX = (x2 - x1) / numberOfPositions;
    1a04:	29 96       	adiw	r28, 0x09	; 9
    1a06:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a08:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a0a:	29 97       	sbiw	r28, 0x09	; 9
    1a0c:	ba 01       	movw	r22, r20
    1a0e:	88 27       	eor	r24, r24
    1a10:	77 fd       	sbrc	r23, 7
    1a12:	80 95       	com	r24
    1a14:	98 2f       	mov	r25, r24
    1a16:	0e 94 18 1a 	call	0x3430	; 0x3430 <__floatsisf>
    1a1a:	69 87       	std	Y+9, r22	; 0x09
    1a1c:	7a 87       	std	Y+10, r23	; 0x0a
    1a1e:	8b 87       	std	Y+11, r24	; 0x0b
    1a20:	9c 87       	std	Y+12, r25	; 0x0c
    1a22:	a6 01       	movw	r20, r12
    1a24:	95 01       	movw	r18, r10
    1a26:	af 96       	adiw	r28, 0x2f	; 47
    1a28:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a2a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a2c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a2e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a30:	af 97       	sbiw	r28, 0x2f	; 47
    1a32:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
    1a36:	29 85       	ldd	r18, Y+9	; 0x09
    1a38:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a3a:	4b 85       	ldd	r20, Y+11	; 0x0b
    1a3c:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a3e:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
    1a42:	6f a7       	std	Y+47, r22	; 0x2f
    1a44:	78 ab       	std	Y+48, r23	; 0x30
    1a46:	89 ab       	std	Y+49, r24	; 0x31
    1a48:	9a ab       	std	Y+50, r25	; 0x32
    float deltaY = (y2 - y1) / numberOfPositions;
    1a4a:	a7 96       	adiw	r28, 0x27	; 39
    1a4c:	2c ad       	ldd	r18, Y+60	; 0x3c
    1a4e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1a50:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a52:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a54:	a7 97       	sbiw	r28, 0x27	; 39
    1a56:	e3 96       	adiw	r28, 0x33	; 51
    1a58:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a5a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a5c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a5e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a60:	e3 97       	sbiw	r28, 0x33	; 51
    1a62:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
    1a66:	29 85       	ldd	r18, Y+9	; 0x09
    1a68:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a6a:	4b 85       	ldd	r20, Y+11	; 0x0b
    1a6c:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a6e:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
    1a72:	6b ab       	std	Y+51, r22	; 0x33
    1a74:	7c ab       	std	Y+52, r23	; 0x34
    1a76:	8d ab       	std	Y+53, r24	; 0x35
    1a78:	9e ab       	std	Y+54, r25	; 0x36
    float deltaZBegin = (stepHeight_g + z2 - z1) / (numberOfPositions / 2); // första halvan av sträckan ska benet röra sig mot en position 4cm över slutpositionen
    1a7a:	60 91 30 01 	lds	r22, 0x0130
    1a7e:	70 91 31 01 	lds	r23, 0x0131
    1a82:	88 27       	eor	r24, r24
    1a84:	77 fd       	sbrc	r23, 7
    1a86:	80 95       	com	r24
    1a88:	98 2f       	mov	r25, r24
    1a8a:	0e 94 18 1a 	call	0x3430	; 0x3430 <__floatsisf>
    1a8e:	69 87       	std	Y+9, r22	; 0x09
    1a90:	7a 87       	std	Y+10, r23	; 0x0a
    1a92:	8b 87       	std	Y+11, r24	; 0x0b
    1a94:	9c 87       	std	Y+12, r25	; 0x0c
    1a96:	b8 01       	movw	r22, r16
    1a98:	88 27       	eor	r24, r24
    1a9a:	77 fd       	sbrc	r23, 7
    1a9c:	80 95       	com	r24
    1a9e:	98 2f       	mov	r25, r24
    1aa0:	0e 94 18 1a 	call	0x3430	; 0x3430 <__floatsisf>
    1aa4:	6d 87       	std	Y+13, r22	; 0x0d
    1aa6:	7e 87       	std	Y+14, r23	; 0x0e
    1aa8:	8f 87       	std	Y+15, r24	; 0x0f
    1aaa:	98 8b       	std	Y+16, r25	; 0x10
    1aac:	e7 96       	adiw	r28, 0x37	; 55
    1aae:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ab0:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ab2:	4e ad       	ldd	r20, Y+62	; 0x3e
    1ab4:	5f ad       	ldd	r21, Y+63	; 0x3f
    1ab6:	e7 97       	sbiw	r28, 0x37	; 55
    1ab8:	69 85       	ldd	r22, Y+9	; 0x09
    1aba:	7a 85       	ldd	r23, Y+10	; 0x0a
    1abc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1abe:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ac0:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
    1ac4:	a3 01       	movw	r20, r6
    1ac6:	92 01       	movw	r18, r4
    1ac8:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
    1acc:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ace:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ad0:	4f 85       	ldd	r20, Y+15	; 0x0f
    1ad2:	58 89       	ldd	r21, Y+16	; 0x10
    1ad4:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
    1ad8:	23 96       	adiw	r28, 0x03	; 3
    1ada:	6c af       	std	Y+60, r22	; 0x3c
    1adc:	7d af       	std	Y+61, r23	; 0x3d
    1ade:	8e af       	std	Y+62, r24	; 0x3e
    1ae0:	9f af       	std	Y+63, r25	; 0x3f
    1ae2:	23 97       	sbiw	r28, 0x03	; 3
    float deltaZEnd = (z2 - z1 - stepHeight_g) / (numberOfPositions / 2); // andra halvan av sträckan ska benet röra sig mot en position 4cm under slutpositionen -> benet får en triangelbana
    1ae4:	a3 01       	movw	r20, r6
    1ae6:	92 01       	movw	r18, r4
    1ae8:	e7 96       	adiw	r28, 0x37	; 55
    1aea:	6c ad       	ldd	r22, Y+60	; 0x3c
    1aec:	7d ad       	ldd	r23, Y+61	; 0x3d
    1aee:	8e ad       	ldd	r24, Y+62	; 0x3e
    1af0:	9f ad       	ldd	r25, Y+63	; 0x3f
    1af2:	e7 97       	sbiw	r28, 0x37	; 55
    1af4:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
    1af8:	29 85       	ldd	r18, Y+9	; 0x09
    1afa:	3a 85       	ldd	r19, Y+10	; 0x0a
    1afc:	4b 85       	ldd	r20, Y+11	; 0x0b
    1afe:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b00:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
    1b04:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b06:	3e 85       	ldd	r19, Y+14	; 0x0e
    1b08:	4f 85       	ldd	r20, Y+15	; 0x0f
    1b0a:	58 89       	ldd	r21, Y+16	; 0x10
    1b0c:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
    1b10:	27 96       	adiw	r28, 0x07	; 7
    1b12:	6c af       	std	Y+60, r22	; 0x3c
    1b14:	7d af       	std	Y+61, r23	; 0x3d
    1b16:	8e af       	std	Y+62, r24	; 0x3e
    1b18:	9f af       	std	Y+63, r25	; 0x3f
    1b1a:	27 97       	sbiw	r28, 0x07	; 7
    float y = y1;
    float z = z1;
    
    
    // första halvan av rörelsen
    for (int i = startIndex; i <= topPosition; i++)
    1b1c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b1e:	98 ad       	ldd	r25, Y+56	; 0x38
    1b20:	ad ad       	ldd	r26, Y+61	; 0x3d
    1b22:	be ad       	ldd	r27, Y+62	; 0x3e
    1b24:	a8 17       	cp	r26, r24
    1b26:	b9 07       	cpc	r27, r25
    1b28:	0c f4       	brge	.+2      	; 0x1b2c <CalcCurvedPath+0x232>
    1b2a:	ff c2       	rjmp	.+1534   	; 0x212a <CalcCurvedPath+0x830>
    1b2c:	24 e1       	ldi	r18, 0x14	; 20
    1b2e:	2b 96       	adiw	r28, 0x0b	; 11
    1b30:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b32:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b34:	2b 97       	sbiw	r28, 0x0b	; 11
    1b36:	2e 9f       	mul	r18, r30
    1b38:	c0 01       	movw	r24, r0
    1b3a:	2f 9f       	mul	r18, r31
    1b3c:	90 0d       	add	r25, r0
    1b3e:	11 24       	eor	r1, r1
    1b40:	4f a9       	ldd	r20, Y+55	; 0x37
    1b42:	58 ad       	ldd	r21, Y+56	; 0x38
    1b44:	84 0f       	add	r24, r20
    1b46:	95 1f       	adc	r25, r21
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	88 0f       	add	r24, r24
    1b4e:	99 1f       	adc	r25, r25
    1b50:	dc 01       	movw	r26, r24
    1b52:	a4 50       	subi	r26, 0x04	; 4
    1b54:	bb 4f       	sbci	r27, 0xFB	; 251
    1b56:	be a3       	std	Y+38, r27	; 0x26
    1b58:	ad a3       	std	Y+37, r26	; 0x25
    1b5a:	2d 96       	adiw	r28, 0x0d	; 13
    1b5c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b5e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b60:	2d 97       	sbiw	r28, 0x0d	; 13
    1b62:	2e 9f       	mul	r18, r30
    1b64:	c0 01       	movw	r24, r0
    1b66:	2f 9f       	mul	r18, r31
    1b68:	90 0d       	add	r25, r0
    1b6a:	11 24       	eor	r1, r1
    1b6c:	84 0f       	add	r24, r20
    1b6e:	95 1f       	adc	r25, r21
    1b70:	88 0f       	add	r24, r24
    1b72:	99 1f       	adc	r25, r25
    1b74:	88 0f       	add	r24, r24
    1b76:	99 1f       	adc	r25, r25
    1b78:	ac 01       	movw	r20, r24
    1b7a:	44 50       	subi	r20, 0x04	; 4
    1b7c:	5b 4f       	sbci	r21, 0xFB	; 251
    1b7e:	58 a7       	std	Y+40, r21	; 0x28
    1b80:	4f a3       	std	Y+39, r20	; 0x27
    1b82:	2f 96       	adiw	r28, 0x0f	; 15
    1b84:	ae ad       	ldd	r26, Y+62	; 0x3e
    1b86:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b88:	2f 97       	sbiw	r28, 0x0f	; 15
    1b8a:	2a 9f       	mul	r18, r26
    1b8c:	c0 01       	movw	r24, r0
    1b8e:	2b 9f       	mul	r18, r27
    1b90:	90 0d       	add	r25, r0
    1b92:	11 24       	eor	r1, r1
    1b94:	ef a9       	ldd	r30, Y+55	; 0x37
    1b96:	f8 ad       	ldd	r31, Y+56	; 0x38
    1b98:	8e 0f       	add	r24, r30
    1b9a:	9f 1f       	adc	r25, r31
    1b9c:	88 0f       	add	r24, r24
    1b9e:	99 1f       	adc	r25, r25
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	9c 01       	movw	r18, r24
    1ba6:	24 50       	subi	r18, 0x04	; 4
    1ba8:	3b 4f       	sbci	r19, 0xFB	; 251
    1baa:	3a a7       	std	Y+42, r19	; 0x2a
    1bac:	29 a7       	std	Y+41, r18	; 0x29
    1bae:	8f 01       	movw	r16, r30
    1bb0:	00 0f       	add	r16, r16
    1bb2:	11 1f       	adc	r17, r17
    1bb4:	00 0f       	add	r16, r16
    1bb6:	11 1f       	adc	r17, r17
    1bb8:	04 57       	subi	r16, 0x74	; 116
    1bba:	1e 4f       	sbci	r17, 0xFE	; 254
            }
            case REAR_LEFT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 195;
                actuatorPositions_g[currentLeg.femurJoint][i] =  225 - theta2;
                actuatorPositions_g[currentLeg.tibiaJoint][i] =  300 - theta3;
    1bbc:	fe 8b       	std	Y+22, r31	; 0x16
    1bbe:	ed 8b       	std	Y+21, r30	; 0x15
    1bc0:	3a 8e       	std	Y+26, r3	; 0x1a
    1bc2:	29 8e       	std	Y+25, r2	; 0x19
    1bc4:	18 01       	movw	r2, r16
    1bc6:	a9 86       	std	Y+9, r10	; 0x09
    1bc8:	ba 86       	std	Y+10, r11	; 0x0a
    1bca:	cb 86       	std	Y+11, r12	; 0x0b
    1bcc:	dc 86       	std	Y+12, r13	; 0x0c
    1bce:	4d 86       	std	Y+13, r4	; 0x0d
    1bd0:	5e 86       	std	Y+14, r5	; 0x0e
    1bd2:	6f 86       	std	Y+15, r6	; 0x0f
    1bd4:	78 8a       	std	Y+16, r7	; 0x10
    
    
    // första halvan av rörelsen
    for (int i = startIndex; i <= topPosition; i++)
    {
        x = x + deltaX;
    1bd6:	2f a5       	ldd	r18, Y+47	; 0x2f
    1bd8:	38 a9       	ldd	r19, Y+48	; 0x30
    1bda:	49 a9       	ldd	r20, Y+49	; 0x31
    1bdc:	5a a9       	ldd	r21, Y+50	; 0x32
    1bde:	69 85       	ldd	r22, Y+9	; 0x09
    1be0:	7a 85       	ldd	r23, Y+10	; 0x0a
    1be2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1be4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1be6:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
    1bea:	69 87       	std	Y+9, r22	; 0x09
    1bec:	7a 87       	std	Y+10, r23	; 0x0a
    1bee:	8b 87       	std	Y+11, r24	; 0x0b
    1bf0:	9c 87       	std	Y+12, r25	; 0x0c
        y = y + deltaY;
    1bf2:	2b a9       	ldd	r18, Y+51	; 0x33
    1bf4:	3c a9       	ldd	r19, Y+52	; 0x34
    1bf6:	4d a9       	ldd	r20, Y+53	; 0x35
    1bf8:	5e a9       	ldd	r21, Y+54	; 0x36
    1bfa:	a7 96       	adiw	r28, 0x27	; 39
    1bfc:	6c ad       	ldd	r22, Y+60	; 0x3c
    1bfe:	7d ad       	ldd	r23, Y+61	; 0x3d
    1c00:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c02:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c04:	a7 97       	sbiw	r28, 0x27	; 39
    1c06:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
    1c0a:	a7 96       	adiw	r28, 0x27	; 39
    1c0c:	6c af       	std	Y+60, r22	; 0x3c
    1c0e:	7d af       	std	Y+61, r23	; 0x3d
    1c10:	8e af       	std	Y+62, r24	; 0x3e
    1c12:	9f af       	std	Y+63, r25	; 0x3f
    1c14:	a7 97       	sbiw	r28, 0x27	; 39
        z = z + deltaZBegin;
    1c16:	23 96       	adiw	r28, 0x03	; 3
    1c18:	2c ad       	ldd	r18, Y+60	; 0x3c
    1c1a:	3d ad       	ldd	r19, Y+61	; 0x3d
    1c1c:	4e ad       	ldd	r20, Y+62	; 0x3e
    1c1e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1c20:	23 97       	sbiw	r28, 0x03	; 3
    1c22:	6d 85       	ldd	r22, Y+13	; 0x0d
    1c24:	7e 85       	ldd	r23, Y+14	; 0x0e
    1c26:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c28:	98 89       	ldd	r25, Y+16	; 0x10
    1c2a:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
    1c2e:	6d 87       	std	Y+13, r22	; 0x0d
    1c30:	7e 87       	std	Y+14, r23	; 0x0e
    1c32:	8f 87       	std	Y+15, r24	; 0x0f
    1c34:	98 8b       	std	Y+16, r25	; 0x10
        
        // lös inverskinematik för lederna.
        theta1 = atan2f(x,y)*180/PI;
    1c36:	a7 96       	adiw	r28, 0x27	; 39
    1c38:	2c ad       	ldd	r18, Y+60	; 0x3c
    1c3a:	3d ad       	ldd	r19, Y+61	; 0x3d
    1c3c:	4e ad       	ldd	r20, Y+62	; 0x3e
    1c3e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1c40:	a7 97       	sbiw	r28, 0x27	; 39
    1c42:	69 85       	ldd	r22, Y+9	; 0x09
    1c44:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c46:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c48:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c4a:	0e 94 2a 19 	call	0x3254	; 0x3254 <atan2>
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	44 e3       	ldi	r20, 0x34	; 52
    1c54:	53 e4       	ldi	r21, 0x43	; 67
    1c56:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
    1c5a:	28 ed       	ldi	r18, 0xD8	; 216
    1c5c:	3f e0       	ldi	r19, 0x0F	; 15
    1c5e:	49 e4       	ldi	r20, 0x49	; 73
    1c60:	50 e4       	ldi	r21, 0x40	; 64
    1c62:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
    1c66:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    1c6a:	69 af       	std	Y+57, r22	; 0x39
    1c6c:	7a af       	std	Y+58, r23	; 0x3a
    1c6e:	8b af       	std	Y+59, r24	; 0x3b
    1c70:	9c af       	std	Y+60, r25	; 0x3c
        theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
    1c72:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c74:	3e 85       	ldd	r19, Y+14	; 0x0e
    1c76:	4f 85       	ldd	r20, Y+15	; 0x0f
    1c78:	58 89       	ldd	r21, Y+16	; 0x10
    1c7a:	ca 01       	movw	r24, r20
    1c7c:	b9 01       	movw	r22, r18
    1c7e:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
    1c82:	69 8b       	std	Y+17, r22	; 0x11
    1c84:	7a 8b       	std	Y+18, r23	; 0x12
    1c86:	8b 8b       	std	Y+19, r24	; 0x13
    1c88:	9c 8b       	std	Y+20, r25	; 0x14
    1c8a:	29 85       	ldd	r18, Y+9	; 0x09
    1c8c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c8e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1c90:	5c 85       	ldd	r21, Y+12	; 0x0c
    1c92:	ca 01       	movw	r24, r20
    1c94:	b9 01       	movw	r22, r18
    1c96:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
    1c9a:	6b 01       	movw	r12, r22
    1c9c:	7c 01       	movw	r14, r24
    1c9e:	a7 96       	adiw	r28, 0x27	; 39
    1ca0:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ca2:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ca4:	4e ad       	ldd	r20, Y+62	; 0x3e
    1ca6:	5f ad       	ldd	r21, Y+63	; 0x3f
    1ca8:	a7 97       	sbiw	r28, 0x27	; 39
    1caa:	ca 01       	movw	r24, r20
    1cac:	b9 01       	movw	r22, r18
    1cae:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
    1cb2:	9b 01       	movw	r18, r22
    1cb4:	ac 01       	movw	r20, r24
    1cb6:	c7 01       	movw	r24, r14
    1cb8:	b6 01       	movw	r22, r12
    1cba:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
    1cbe:	6d 8f       	std	Y+29, r22	; 0x1d
    1cc0:	7e 8f       	std	Y+30, r23	; 0x1e
    1cc2:	8f 8f       	std	Y+31, r24	; 0x1f
    1cc4:	98 a3       	std	Y+32, r25	; 0x20
    1cc6:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <sqrt>
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	48 e4       	ldi	r20, 0x48	; 72
    1cd0:	52 e4       	ldi	r21, 0x42	; 66
    1cd2:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
    1cd6:	6b 01       	movw	r12, r22
    1cd8:	7c 01       	movw	r14, r24
    1cda:	9b 01       	movw	r18, r22
    1cdc:	ac 01       	movw	r20, r24
    1cde:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
    1ce2:	69 a3       	std	Y+33, r22	; 0x21
    1ce4:	7a a3       	std	Y+34, r23	; 0x22
    1ce6:	8b a3       	std	Y+35, r24	; 0x23
    1ce8:	9c a3       	std	Y+36, r25	; 0x24
    1cea:	9b 01       	movw	r18, r22
    1cec:	ac 01       	movw	r20, r24
    1cee:	69 89       	ldd	r22, Y+17	; 0x11
    1cf0:	7a 89       	ldd	r23, Y+18	; 0x12
    1cf2:	8b 89       	ldd	r24, Y+19	; 0x13
    1cf4:	9c 89       	ldd	r25, Y+20	; 0x14
    1cf6:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
    1cfa:	4b 01       	movw	r8, r22
    1cfc:	5c 01       	movw	r10, r24
    1cfe:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <sqrt>
    1d02:	9b 01       	movw	r18, r22
    1d04:	ac 01       	movw	r20, r24
    1d06:	6d 85       	ldd	r22, Y+13	; 0x0d
    1d08:	7e 85       	ldd	r23, Y+14	; 0x0e
    1d0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d0c:	98 89       	ldd	r25, Y+16	; 0x10
    1d0e:	90 58       	subi	r25, 0x80	; 128
    1d10:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
    1d14:	0e 94 a8 18 	call	0x3150	; 0x3150 <acos>
    1d18:	2b 01       	movw	r4, r22
    1d1a:	3c 01       	movw	r6, r24
        acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	48 e4       	ldi	r20, 0x48	; 72
    1d22:	52 e4       	ldi	r21, 0x42	; 66
    1d24:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1d26:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1d28:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d2a:	98 a1       	ldd	r25, Y+32	; 0x20
    1d2c:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
    1d30:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <sqrt>
    1d34:	9b 01       	movw	r18, r22
    1d36:	ac 01       	movw	r20, r24
    1d38:	c7 01       	movw	r24, r14
    1d3a:	b6 01       	movw	r22, r12
    1d3c:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
    1d40:	9b 01       	movw	r18, r22
    1d42:	ac 01       	movw	r20, r24
    1d44:	69 89       	ldd	r22, Y+17	; 0x11
    1d46:	7a 89       	ldd	r23, Y+18	; 0x12
    1d48:	8b 89       	ldd	r24, Y+19	; 0x13
    1d4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d4c:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
    1d50:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <sqrt>
    1d54:	6b 01       	movw	r12, r22
    1d56:	7c 01       	movw	r14, r24
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	38 e4       	ldi	r19, 0x48	; 72
    1d5c:	4c e8       	ldi	r20, 0x8C	; 140
    1d5e:	55 e4       	ldi	r21, 0x45	; 69
    1d60:	c5 01       	movw	r24, r10
    1d62:	b4 01       	movw	r22, r8
    1d64:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	38 e0       	ldi	r19, 0x08	; 8
    1d6c:	44 e8       	ldi	r20, 0x84	; 132
    1d6e:	56 e4       	ldi	r21, 0x46	; 70
    1d70:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
    1d74:	4b 01       	movw	r8, r22
    1d76:	5c 01       	movw	r10, r24
    1d78:	a7 01       	movw	r20, r14
    1d7a:	96 01       	movw	r18, r12
    1d7c:	c7 01       	movw	r24, r14
    1d7e:	b6 01       	movw	r22, r12
    1d80:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	46 e8       	ldi	r20, 0x86	; 134
    1d8a:	52 e4       	ldi	r21, 0x42	; 66
    1d8c:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
    1d90:	9b 01       	movw	r18, r22
    1d92:	ac 01       	movw	r20, r24
    1d94:	c5 01       	movw	r24, r10
    1d96:	b4 01       	movw	r22, r8
    1d98:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
    1d9c:	0e 94 a8 18 	call	0x3150	; 0x3150 <acos>
    1da0:	9b 01       	movw	r18, r22
    1da2:	ac 01       	movw	r20, r24
        y = y + deltaY;
        z = z + deltaZBegin;
        
        // lös inverskinematik för lederna.
        theta1 = atan2f(x,y)*180/PI;
        theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
    1da4:	c3 01       	movw	r24, r6
    1da6:	b2 01       	movw	r22, r4
    1da8:	0e 94 b7 18 	call	0x316e	; 0x316e <__addsf3>
    1dac:	24 ee       	ldi	r18, 0xE4	; 228
    1dae:	3e e2       	ldi	r19, 0x2E	; 46
    1db0:	45 e6       	ldi	r20, 0x65	; 101
    1db2:	52 e4       	ldi	r21, 0x42	; 66
    1db4:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
    1db8:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    1dbc:	6b 01       	movw	r12, r22
    1dbe:	7c 01       	movw	r14, r24
        acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
        
        theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
    1dc0:	29 89       	ldd	r18, Y+17	; 0x11
    1dc2:	3a 89       	ldd	r19, Y+18	; 0x12
    1dc4:	4b 89       	ldd	r20, Y+19	; 0x13
    1dc6:	5c 89       	ldd	r21, Y+20	; 0x14
    1dc8:	60 e0       	ldi	r22, 0x00	; 0
    1dca:	7a e1       	ldi	r23, 0x1A	; 26
    1dcc:	87 ea       	ldi	r24, 0xA7	; 167
    1dce:	96 e4       	ldi	r25, 0x46	; 70
    1dd0:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
    1dd4:	29 a1       	ldd	r18, Y+33	; 0x21
    1dd6:	3a a1       	ldd	r19, Y+34	; 0x22
    1dd8:	4b a1       	ldd	r20, Y+35	; 0x23
    1dda:	5c a1       	ldd	r21, Y+36	; 0x24
    1ddc:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	38 e1       	ldi	r19, 0x18	; 24
    1de4:	48 e8       	ldi	r20, 0x88	; 136
    1de6:	56 e4       	ldi	r21, 0x46	; 70
    1de8:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
    1dec:	0e 94 a8 18 	call	0x3150	; 0x3150 <acos>
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	44 e3       	ldi	r20, 0x34	; 52
    1df6:	53 e4       	ldi	r21, 0x43	; 67
    1df8:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
    1dfc:	28 ed       	ldi	r18, 0xD8	; 216
    1dfe:	3f e0       	ldi	r19, 0x0F	; 15
    1e00:	49 e4       	ldi	r20, 0x49	; 73
    1e02:	50 e4       	ldi	r21, 0x40	; 64
    1e04:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
    1e08:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
        
        // spara resultatet i global array
        switch(currentLeg.legNumber)
    1e0c:	49 8d       	ldd	r20, Y+25	; 0x19
    1e0e:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1e10:	42 30       	cpi	r20, 0x02	; 2
    1e12:	51 05       	cpc	r21, r1
    1e14:	09 f4       	brne	.+2      	; 0x1e18 <CalcCurvedPath+0x51e>
    1e16:	5f c0       	rjmp	.+190    	; 0x1ed6 <CalcCurvedPath+0x5dc>
    1e18:	24 f4       	brge	.+8      	; 0x1e22 <CalcCurvedPath+0x528>
    1e1a:	41 30       	cpi	r20, 0x01	; 1
    1e1c:	51 05       	cpc	r21, r1
    1e1e:	59 f0       	breq	.+22     	; 0x1e36 <CalcCurvedPath+0x53c>
    1e20:	5b c1       	rjmp	.+694    	; 0x20d8 <CalcCurvedPath+0x7de>
    1e22:	a9 8d       	ldd	r26, Y+25	; 0x19
    1e24:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1e26:	a3 30       	cpi	r26, 0x03	; 3
    1e28:	b1 05       	cpc	r27, r1
    1e2a:	09 f4       	brne	.+2      	; 0x1e2e <CalcCurvedPath+0x534>
    1e2c:	a6 c0       	rjmp	.+332    	; 0x1f7a <CalcCurvedPath+0x680>
    1e2e:	14 97       	sbiw	r26, 0x04	; 4
    1e30:	09 f4       	brne	.+2      	; 0x1e34 <CalcCurvedPath+0x53a>
    1e32:	fb c0       	rjmp	.+502    	; 0x202a <CalcCurvedPath+0x730>
    1e34:	51 c1       	rjmp	.+674    	; 0x20d8 <CalcCurvedPath+0x7de>
        {
            case FRONT_LEFT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 105;
    1e36:	09 ad       	ldd	r16, Y+57	; 0x39
    1e38:	1a ad       	ldd	r17, Y+58	; 0x3a
    1e3a:	2b ad       	ldd	r18, Y+59	; 0x3b
    1e3c:	3c ad       	ldd	r19, Y+60	; 0x3c
    1e3e:	07 59       	subi	r16, 0x97	; 151
    1e40:	1f 4f       	sbci	r17, 0xFF	; 255
    1e42:	2f 4f       	sbci	r18, 0xFF	; 255
    1e44:	3f 4f       	sbci	r19, 0xFF	; 255
    1e46:	ed a1       	ldd	r30, Y+37	; 0x25
    1e48:	fe a1       	ldd	r31, Y+38	; 0x26
    1e4a:	00 83       	st	Z, r16
    1e4c:	11 83       	std	Z+1, r17	; 0x01
    1e4e:	22 83       	std	Z+2, r18	; 0x02
    1e50:	33 83       	std	Z+3, r19	; 0x03
                actuatorPositions_g[currentLeg.femurJoint][i] =  theta2 + 75;
    1e52:	fb e4       	ldi	r31, 0x4B	; 75
    1e54:	cf 0e       	add	r12, r31
    1e56:	d1 1c       	adc	r13, r1
    1e58:	e1 1c       	adc	r14, r1
    1e5a:	f1 1c       	adc	r15, r1
    1e5c:	af a1       	ldd	r26, Y+39	; 0x27
    1e5e:	b8 a5       	ldd	r27, Y+40	; 0x28
    1e60:	cd 92       	st	X+, r12
    1e62:	dd 92       	st	X+, r13
    1e64:	ed 92       	st	X+, r14
    1e66:	fc 92       	st	X, r15
    1e68:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.tibiaJoint][i] =  theta3 + 1;
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	01 96       	adiw	r24, 0x01	; 1
    1e70:	a1 1d       	adc	r26, r1
    1e72:	b1 1d       	adc	r27, r1
    1e74:	e9 a5       	ldd	r30, Y+41	; 0x29
    1e76:	fa a5       	ldd	r31, Y+42	; 0x2a
    1e78:	80 83       	st	Z, r24
    1e7a:	91 83       	std	Z+1, r25	; 0x01
    1e7c:	a2 83       	std	Z+2, r26	; 0x02
    1e7e:	b3 83       	std	Z+3, r27	; 0x03
                legPositions_g[FRONT_LEFT_LEG_X][i] = x;
    1e80:	69 85       	ldd	r22, Y+9	; 0x09
    1e82:	7a 85       	ldd	r23, Y+10	; 0x0a
    1e84:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e86:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e88:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    1e8c:	d1 01       	movw	r26, r2
    1e8e:	6d 93       	st	X+, r22
    1e90:	7d 93       	st	X+, r23
    1e92:	8d 93       	st	X+, r24
    1e94:	9c 93       	st	X, r25
    1e96:	13 97       	sbiw	r26, 0x03	; 3
    1e98:	81 01       	movw	r16, r2
    1e9a:	00 5b       	subi	r16, 0xB0	; 176
    1e9c:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[FRONT_LEFT_LEG_Y][i] = y;
    1e9e:	a7 96       	adiw	r28, 0x27	; 39
    1ea0:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ea2:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ea4:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ea6:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ea8:	a7 97       	sbiw	r28, 0x27	; 39
    1eaa:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    1eae:	f8 01       	movw	r30, r16
    1eb0:	60 83       	st	Z, r22
    1eb2:	71 83       	std	Z+1, r23	; 0x01
    1eb4:	82 83       	std	Z+2, r24	; 0x02
    1eb6:	93 83       	std	Z+3, r25	; 0x03
    1eb8:	00 5b       	subi	r16, 0xB0	; 176
    1eba:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[FRONT_LEFT_LEG_Z][i] = z;
    1ebc:	6d 85       	ldd	r22, Y+13	; 0x0d
    1ebe:	7e 85       	ldd	r23, Y+14	; 0x0e
    1ec0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ec2:	98 89       	ldd	r25, Y+16	; 0x10
    1ec4:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    1ec8:	d8 01       	movw	r26, r16
    1eca:	6d 93       	st	X+, r22
    1ecc:	7d 93       	st	X+, r23
    1ece:	8d 93       	st	X+, r24
    1ed0:	9c 93       	st	X, r25
    1ed2:	13 97       	sbiw	r26, 0x03	; 3
                break;
    1ed4:	01 c1       	rjmp	.+514    	; 0x20d8 <CalcCurvedPath+0x7de>
            }
            case FRONT_RIGHT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 193;
    1ed6:	09 ad       	ldd	r16, Y+57	; 0x39
    1ed8:	1a ad       	ldd	r17, Y+58	; 0x3a
    1eda:	2b ad       	ldd	r18, Y+59	; 0x3b
    1edc:	3c ad       	ldd	r19, Y+60	; 0x3c
    1ede:	0f 53       	subi	r16, 0x3F	; 63
    1ee0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee2:	2f 4f       	sbci	r18, 0xFF	; 255
    1ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee6:	ed a1       	ldd	r30, Y+37	; 0x25
    1ee8:	fe a1       	ldd	r31, Y+38	; 0x26
    1eea:	00 83       	st	Z, r16
    1eec:	11 83       	std	Z+1, r17	; 0x01
    1eee:	22 83       	std	Z+2, r18	; 0x02
    1ef0:	33 83       	std	Z+3, r19	; 0x03
                actuatorPositions_g[currentLeg.femurJoint][i] =  theta2 + 75;
    1ef2:	fb e4       	ldi	r31, 0x4B	; 75
    1ef4:	cf 0e       	add	r12, r31
    1ef6:	d1 1c       	adc	r13, r1
    1ef8:	e1 1c       	adc	r14, r1
    1efa:	f1 1c       	adc	r15, r1
    1efc:	af a1       	ldd	r26, Y+39	; 0x27
    1efe:	b8 a5       	ldd	r27, Y+40	; 0x28
    1f00:	cd 92       	st	X+, r12
    1f02:	dd 92       	st	X+, r13
    1f04:	ed 92       	st	X+, r14
    1f06:	fc 92       	st	X, r15
    1f08:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.tibiaJoint][i] =  theta3 + 3;
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	03 96       	adiw	r24, 0x03	; 3
    1f10:	a1 1d       	adc	r26, r1
    1f12:	b1 1d       	adc	r27, r1
    1f14:	e9 a5       	ldd	r30, Y+41	; 0x29
    1f16:	fa a5       	ldd	r31, Y+42	; 0x2a
    1f18:	80 83       	st	Z, r24
    1f1a:	91 83       	std	Z+1, r25	; 0x01
    1f1c:	a2 83       	std	Z+2, r26	; 0x02
    1f1e:	b3 83       	std	Z+3, r27	; 0x03
    1f20:	81 01       	movw	r16, r2
    1f22:	00 51       	subi	r16, 0x10	; 16
    1f24:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[FRONT_RIGHT_LEG_X][i] = x;
    1f26:	69 85       	ldd	r22, Y+9	; 0x09
    1f28:	7a 85       	ldd	r23, Y+10	; 0x0a
    1f2a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f2c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f2e:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    1f32:	d8 01       	movw	r26, r16
    1f34:	6d 93       	st	X+, r22
    1f36:	7d 93       	st	X+, r23
    1f38:	8d 93       	st	X+, r24
    1f3a:	9c 93       	st	X, r25
    1f3c:	13 97       	sbiw	r26, 0x03	; 3
    1f3e:	00 5b       	subi	r16, 0xB0	; 176
    1f40:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[FRONT_RIGHT_LEG_Y][i] = y;
    1f42:	a7 96       	adiw	r28, 0x27	; 39
    1f44:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f46:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f48:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f4a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f4c:	a7 97       	sbiw	r28, 0x27	; 39
    1f4e:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    1f52:	f8 01       	movw	r30, r16
    1f54:	60 83       	st	Z, r22
    1f56:	71 83       	std	Z+1, r23	; 0x01
    1f58:	82 83       	std	Z+2, r24	; 0x02
    1f5a:	93 83       	std	Z+3, r25	; 0x03
    1f5c:	00 5b       	subi	r16, 0xB0	; 176
    1f5e:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[FRONT_RIGHT_LEG_Z][i] = z;
    1f60:	6d 85       	ldd	r22, Y+13	; 0x0d
    1f62:	7e 85       	ldd	r23, Y+14	; 0x0e
    1f64:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f66:	98 89       	ldd	r25, Y+16	; 0x10
    1f68:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    1f6c:	d8 01       	movw	r26, r16
    1f6e:	6d 93       	st	X+, r22
    1f70:	7d 93       	st	X+, r23
    1f72:	8d 93       	st	X+, r24
    1f74:	9c 93       	st	X, r25
    1f76:	13 97       	sbiw	r26, 0x03	; 3
                break;
    1f78:	af c0       	rjmp	.+350    	; 0x20d8 <CalcCurvedPath+0x7de>
            }
            case REAR_LEFT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 195;
    1f7a:	09 ad       	ldd	r16, Y+57	; 0x39
    1f7c:	1a ad       	ldd	r17, Y+58	; 0x3a
    1f7e:	2b ad       	ldd	r18, Y+59	; 0x3b
    1f80:	3c ad       	ldd	r19, Y+60	; 0x3c
    1f82:	0d 53       	subi	r16, 0x3D	; 61
    1f84:	1f 4f       	sbci	r17, 0xFF	; 255
    1f86:	2f 4f       	sbci	r18, 0xFF	; 255
    1f88:	3f 4f       	sbci	r19, 0xFF	; 255
    1f8a:	ed a1       	ldd	r30, Y+37	; 0x25
    1f8c:	fe a1       	ldd	r31, Y+38	; 0x26
    1f8e:	00 83       	st	Z, r16
    1f90:	11 83       	std	Z+1, r17	; 0x01
    1f92:	22 83       	std	Z+2, r18	; 0x02
    1f94:	33 83       	std	Z+3, r19	; 0x03
                actuatorPositions_g[currentLeg.femurJoint][i] =  225 - theta2;
    1f96:	01 ee       	ldi	r16, 0xE1	; 225
    1f98:	10 e0       	ldi	r17, 0x00	; 0
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	0c 19       	sub	r16, r12
    1fa0:	1d 09       	sbc	r17, r13
    1fa2:	2e 09       	sbc	r18, r14
    1fa4:	3f 09       	sbc	r19, r15
    1fa6:	af a1       	ldd	r26, Y+39	; 0x27
    1fa8:	b8 a5       	ldd	r27, Y+40	; 0x28
    1faa:	0d 93       	st	X+, r16
    1fac:	1d 93       	st	X+, r17
    1fae:	2d 93       	st	X+, r18
    1fb0:	3c 93       	st	X, r19
    1fb2:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.tibiaJoint][i] =  300 - theta3;
    1fb4:	2c e2       	ldi	r18, 0x2C	; 44
    1fb6:	31 e0       	ldi	r19, 0x01	; 1
    1fb8:	40 e0       	ldi	r20, 0x00	; 0
    1fba:	50 e0       	ldi	r21, 0x00	; 0
    1fbc:	26 1b       	sub	r18, r22
    1fbe:	37 0b       	sbc	r19, r23
    1fc0:	48 0b       	sbc	r20, r24
    1fc2:	59 0b       	sbc	r21, r25
    1fc4:	e9 a5       	ldd	r30, Y+41	; 0x29
    1fc6:	fa a5       	ldd	r31, Y+42	; 0x2a
    1fc8:	20 83       	st	Z, r18
    1fca:	31 83       	std	Z+1, r19	; 0x01
    1fcc:	42 83       	std	Z+2, r20	; 0x02
    1fce:	53 83       	std	Z+3, r21	; 0x03
    1fd0:	81 01       	movw	r16, r2
    1fd2:	00 52       	subi	r16, 0x20	; 32
    1fd4:	1e 4f       	sbci	r17, 0xFE	; 254
                legPositions_g[REAR_LEFT_LEG_X][i] = x;
    1fd6:	69 85       	ldd	r22, Y+9	; 0x09
    1fd8:	7a 85       	ldd	r23, Y+10	; 0x0a
    1fda:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fdc:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fde:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    1fe2:	d8 01       	movw	r26, r16
    1fe4:	6d 93       	st	X+, r22
    1fe6:	7d 93       	st	X+, r23
    1fe8:	8d 93       	st	X+, r24
    1fea:	9c 93       	st	X, r25
    1fec:	13 97       	sbiw	r26, 0x03	; 3
    1fee:	00 5b       	subi	r16, 0xB0	; 176
    1ff0:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[REAR_LEFT_LEG_Y][i] = y;
    1ff2:	a7 96       	adiw	r28, 0x27	; 39
    1ff4:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ff6:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ff8:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ffa:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ffc:	a7 97       	sbiw	r28, 0x27	; 39
    1ffe:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    2002:	f8 01       	movw	r30, r16
    2004:	60 83       	st	Z, r22
    2006:	71 83       	std	Z+1, r23	; 0x01
    2008:	82 83       	std	Z+2, r24	; 0x02
    200a:	93 83       	std	Z+3, r25	; 0x03
    200c:	00 5b       	subi	r16, 0xB0	; 176
    200e:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[REAR_LEFT_LEG_Z][i] = z;
    2010:	6d 85       	ldd	r22, Y+13	; 0x0d
    2012:	7e 85       	ldd	r23, Y+14	; 0x0e
    2014:	8f 85       	ldd	r24, Y+15	; 0x0f
    2016:	98 89       	ldd	r25, Y+16	; 0x10
    2018:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    201c:	d8 01       	movw	r26, r16
    201e:	6d 93       	st	X+, r22
    2020:	7d 93       	st	X+, r23
    2022:	8d 93       	st	X+, r24
    2024:	9c 93       	st	X, r25
    2026:	13 97       	sbiw	r26, 0x03	; 3
                break;
    2028:	57 c0       	rjmp	.+174    	; 0x20d8 <CalcCurvedPath+0x7de>
            }
            case REAR_RIGHT_LEG:
            {
                actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 105;
    202a:	09 ad       	ldd	r16, Y+57	; 0x39
    202c:	1a ad       	ldd	r17, Y+58	; 0x3a
    202e:	2b ad       	ldd	r18, Y+59	; 0x3b
    2030:	3c ad       	ldd	r19, Y+60	; 0x3c
    2032:	07 59       	subi	r16, 0x97	; 151
    2034:	1f 4f       	sbci	r17, 0xFF	; 255
    2036:	2f 4f       	sbci	r18, 0xFF	; 255
    2038:	3f 4f       	sbci	r19, 0xFF	; 255
    203a:	ed a1       	ldd	r30, Y+37	; 0x25
    203c:	fe a1       	ldd	r31, Y+38	; 0x26
    203e:	00 83       	st	Z, r16
    2040:	11 83       	std	Z+1, r17	; 0x01
    2042:	22 83       	std	Z+2, r18	; 0x02
    2044:	33 83       	std	Z+3, r19	; 0x03
                actuatorPositions_g[currentLeg.femurJoint][i] =  225 - theta2;
    2046:	01 ee       	ldi	r16, 0xE1	; 225
    2048:	10 e0       	ldi	r17, 0x00	; 0
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	0c 19       	sub	r16, r12
    2050:	1d 09       	sbc	r17, r13
    2052:	2e 09       	sbc	r18, r14
    2054:	3f 09       	sbc	r19, r15
    2056:	af a1       	ldd	r26, Y+39	; 0x27
    2058:	b8 a5       	ldd	r27, Y+40	; 0x28
    205a:	0d 93       	st	X+, r16
    205c:	1d 93       	st	X+, r17
    205e:	2d 93       	st	X+, r18
    2060:	3c 93       	st	X, r19
    2062:	13 97       	sbiw	r26, 0x03	; 3
                actuatorPositions_g[currentLeg.tibiaJoint][i] =  300 - theta3;
    2064:	2c e2       	ldi	r18, 0x2C	; 44
    2066:	31 e0       	ldi	r19, 0x01	; 1
    2068:	40 e0       	ldi	r20, 0x00	; 0
    206a:	50 e0       	ldi	r21, 0x00	; 0
    206c:	26 1b       	sub	r18, r22
    206e:	37 0b       	sbc	r19, r23
    2070:	48 0b       	sbc	r20, r24
    2072:	59 0b       	sbc	r21, r25
    2074:	e9 a5       	ldd	r30, Y+41	; 0x29
    2076:	fa a5       	ldd	r31, Y+42	; 0x2a
    2078:	20 83       	st	Z, r18
    207a:	31 83       	std	Z+1, r19	; 0x01
    207c:	42 83       	std	Z+2, r20	; 0x02
    207e:	53 83       	std	Z+3, r21	; 0x03
    2080:	81 01       	movw	r16, r2
    2082:	00 53       	subi	r16, 0x30	; 48
    2084:	1d 4f       	sbci	r17, 0xFD	; 253
                legPositions_g[REAR_RIGHT_LEG_X][i] = x;
    2086:	69 85       	ldd	r22, Y+9	; 0x09
    2088:	7a 85       	ldd	r23, Y+10	; 0x0a
    208a:	8b 85       	ldd	r24, Y+11	; 0x0b
    208c:	9c 85       	ldd	r25, Y+12	; 0x0c
    208e:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    2092:	d8 01       	movw	r26, r16
    2094:	6d 93       	st	X+, r22
    2096:	7d 93       	st	X+, r23
    2098:	8d 93       	st	X+, r24
    209a:	9c 93       	st	X, r25
    209c:	13 97       	sbiw	r26, 0x03	; 3
    209e:	00 5b       	subi	r16, 0xB0	; 176
    20a0:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[REAR_RIGHT_LEG_Y][i] = y;
    20a2:	a7 96       	adiw	r28, 0x27	; 39
    20a4:	6c ad       	ldd	r22, Y+60	; 0x3c
    20a6:	7d ad       	ldd	r23, Y+61	; 0x3d
    20a8:	8e ad       	ldd	r24, Y+62	; 0x3e
    20aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    20ac:	a7 97       	sbiw	r28, 0x27	; 39
    20ae:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    20b2:	f8 01       	movw	r30, r16
    20b4:	60 83       	st	Z, r22
    20b6:	71 83       	std	Z+1, r23	; 0x01
    20b8:	82 83       	std	Z+2, r24	; 0x02
    20ba:	93 83       	std	Z+3, r25	; 0x03
    20bc:	00 5b       	subi	r16, 0xB0	; 176
    20be:	1f 4f       	sbci	r17, 0xFF	; 255
                legPositions_g[REAR_RIGHT_LEG_Z][i] = z;
    20c0:	6d 85       	ldd	r22, Y+13	; 0x0d
    20c2:	7e 85       	ldd	r23, Y+14	; 0x0e
    20c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20c6:	98 89       	ldd	r25, Y+16	; 0x10
    20c8:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    20cc:	d8 01       	movw	r26, r16
    20ce:	6d 93       	st	X+, r22
    20d0:	7d 93       	st	X+, r23
    20d2:	8d 93       	st	X+, r24
    20d4:	9c 93       	st	X, r25
    20d6:	13 97       	sbiw	r26, 0x03	; 3
    float y = y1;
    float z = z1;
    
    
    // första halvan av rörelsen
    for (int i = startIndex; i <= topPosition; i++)
    20d8:	ed 89       	ldd	r30, Y+21	; 0x15
    20da:	fe 89       	ldd	r31, Y+22	; 0x16
    20dc:	31 96       	adiw	r30, 0x01	; 1
    20de:	fe 8b       	std	Y+22, r31	; 0x16
    20e0:	ed 8b       	std	Y+21, r30	; 0x15
    20e2:	2d a1       	ldd	r18, Y+37	; 0x25
    20e4:	3e a1       	ldd	r19, Y+38	; 0x26
    20e6:	2c 5f       	subi	r18, 0xFC	; 252
    20e8:	3f 4f       	sbci	r19, 0xFF	; 255
    20ea:	3e a3       	std	Y+38, r19	; 0x26
    20ec:	2d a3       	std	Y+37, r18	; 0x25
    20ee:	4f a1       	ldd	r20, Y+39	; 0x27
    20f0:	58 a5       	ldd	r21, Y+40	; 0x28
    20f2:	4c 5f       	subi	r20, 0xFC	; 252
    20f4:	5f 4f       	sbci	r21, 0xFF	; 255
    20f6:	58 a7       	std	Y+40, r21	; 0x28
    20f8:	4f a3       	std	Y+39, r20	; 0x27
    20fa:	89 a5       	ldd	r24, Y+41	; 0x29
    20fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    20fe:	04 96       	adiw	r24, 0x04	; 4
    2100:	9a a7       	std	Y+42, r25	; 0x2a
    2102:	89 a7       	std	Y+41, r24	; 0x29
    2104:	94 e0       	ldi	r25, 0x04	; 4
    2106:	29 0e       	add	r2, r25
    2108:	31 1c       	adc	r3, r1
    210a:	ad ad       	ldd	r26, Y+61	; 0x3d
    210c:	be ad       	ldd	r27, Y+62	; 0x3e
    210e:	ae 17       	cp	r26, r30
    2110:	bf 07       	cpc	r27, r31
    2112:	0c f0       	brlt	.+2      	; 0x2116 <CalcCurvedPath+0x81c>
    2114:	60 cd       	rjmp	.-1344   	; 0x1bd6 <CalcCurvedPath+0x2dc>
    2116:	29 8c       	ldd	r2, Y+25	; 0x19
    2118:	3a 8c       	ldd	r3, Y+26	; 0x1a
    211a:	a9 84       	ldd	r10, Y+9	; 0x09
    211c:	ba 84       	ldd	r11, Y+10	; 0x0a
    211e:	cb 84       	ldd	r12, Y+11	; 0x0b
    2120:	dc 84       	ldd	r13, Y+12	; 0x0c
    2122:	4d 84       	ldd	r4, Y+13	; 0x0d
    2124:	5e 84       	ldd	r5, Y+14	; 0x0e
    2126:	6f 84       	ldd	r6, Y+15	; 0x0f
    2128:	78 88       	ldd	r7, Y+16	; 0x10
                break;
            }
        }
    }
    
    for (int i = topPosition + 1; i < startIndex + numberOfPositions; i++)
    212a:	ef a9       	ldd	r30, Y+55	; 0x37
    212c:	f8 ad       	ldd	r31, Y+56	; 0x38
    212e:	29 96       	adiw	r28, 0x09	; 9
    2130:	2e ad       	ldd	r18, Y+62	; 0x3e
    2132:	3f ad       	ldd	r19, Y+63	; 0x3f
    2134:	29 97       	sbiw	r28, 0x09	; 9
    2136:	e2 0f       	add	r30, r18
    2138:	f3 1f       	adc	r31, r19
    213a:	f8 af       	std	Y+56, r31	; 0x38
    213c:	ef ab       	std	Y+55, r30	; 0x37
    213e:	4d a5       	ldd	r20, Y+45	; 0x2d
    2140:	5e a5       	ldd	r21, Y+46	; 0x2e
    2142:	4e 17       	cp	r20, r30
    2144:	5f 07       	cpc	r21, r31
    2146:	0c f0       	brlt	.+2      	; 0x214a <CalcCurvedPath+0x850>
    2148:	d0 c2       	rjmp	.+1440   	; 0x26ea <CalcCurvedPath+0xdf0>
    214a:	24 e1       	ldi	r18, 0x14	; 20
    214c:	2b 96       	adiw	r28, 0x0b	; 11
    214e:	ae ad       	ldd	r26, Y+62	; 0x3e
    2150:	bf ad       	ldd	r27, Y+63	; 0x3f
    2152:	2b 97       	sbiw	r28, 0x0b	; 11
    2154:	2a 9f       	mul	r18, r26
    2156:	c0 01       	movw	r24, r0
    2158:	2b 9f       	mul	r18, r27
    215a:	90 0d       	add	r25, r0
    215c:	11 24       	eor	r1, r1
    215e:	84 0f       	add	r24, r20
    2160:	95 1f       	adc	r25, r21
    2162:	88 0f       	add	r24, r24
    2164:	99 1f       	adc	r25, r25
    2166:	88 0f       	add	r24, r24
    2168:	99 1f       	adc	r25, r25
    216a:	fc 01       	movw	r30, r24
    216c:	e4 50       	subi	r30, 0x04	; 4
    216e:	fb 4f       	sbci	r31, 0xFB	; 251
    2170:	4f 01       	movw	r8, r30
    2172:	2d 96       	adiw	r28, 0x0d	; 13
    2174:	4e ad       	ldd	r20, Y+62	; 0x3e
    2176:	5f ad       	ldd	r21, Y+63	; 0x3f
    2178:	2d 97       	sbiw	r28, 0x0d	; 13
    217a:	24 9f       	mul	r18, r20
    217c:	c0 01       	movw	r24, r0
    217e:	25 9f       	mul	r18, r21
    2180:	90 0d       	add	r25, r0
    2182:	11 24       	eor	r1, r1
    2184:	ad a5       	ldd	r26, Y+45	; 0x2d
    2186:	be a5       	ldd	r27, Y+46	; 0x2e
    2188:	8a 0f       	add	r24, r26
    218a:	9b 1f       	adc	r25, r27
    218c:	88 0f       	add	r24, r24
    218e:	99 1f       	adc	r25, r25
    2190:	88 0f       	add	r24, r24
    2192:	99 1f       	adc	r25, r25
    2194:	fc 01       	movw	r30, r24
    2196:	e4 50       	subi	r30, 0x04	; 4
    2198:	fb 4f       	sbci	r31, 0xFB	; 251
    219a:	fa a3       	std	Y+34, r31	; 0x22
    219c:	e9 a3       	std	Y+33, r30	; 0x21
    219e:	2f 96       	adiw	r28, 0x0f	; 15
    21a0:	4e ad       	ldd	r20, Y+62	; 0x3e
    21a2:	5f ad       	ldd	r21, Y+63	; 0x3f
    21a4:	2f 97       	sbiw	r28, 0x0f	; 15
    21a6:	24 9f       	mul	r18, r20
    21a8:	c0 01       	movw	r24, r0
    21aa:	25 9f       	mul	r18, r21
    21ac:	90 0d       	add	r25, r0
    21ae:	11 24       	eor	r1, r1
    21b0:	8a 0f       	add	r24, r26
    21b2:	9b 1f       	adc	r25, r27
    21b4:	88 0f       	add	r24, r24
    21b6:	99 1f       	adc	r25, r25
    21b8:	88 0f       	add	r24, r24
    21ba:	99 1f       	adc	r25, r25
    21bc:	dc 01       	movw	r26, r24
    21be:	a4 50       	subi	r26, 0x04	; 4
    21c0:	bb 4f       	sbci	r27, 0xFB	; 251
    21c2:	be a3       	std	Y+38, r27	; 0x26
    21c4:	ad a3       	std	Y+37, r26	; 0x25
    21c6:	0d a5       	ldd	r16, Y+45	; 0x2d
    21c8:	1e a5       	ldd	r17, Y+46	; 0x2e
    21ca:	00 0f       	add	r16, r16
    21cc:	11 1f       	adc	r17, r17
    21ce:	00 0f       	add	r16, r16
    21d0:	11 1f       	adc	r17, r17
    21d2:	04 57       	subi	r16, 0x74	; 116
    21d4:	1e 4f       	sbci	r17, 0xFE	; 254
           }
           case REAR_LEFT_LEG:
           {
               actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 195;
               actuatorPositions_g[currentLeg.femurJoint][i] =  225 - theta2;
               actuatorPositions_g[currentLeg.tibiaJoint][i] =  300 - theta3;
    21d6:	3e 8e       	std	Y+30, r3	; 0x1e
    21d8:	2d 8e       	std	Y+29, r2	; 0x1d
    21da:	18 01       	movw	r2, r16
    21dc:	98 a6       	std	Y+40, r9	; 0x28
    21de:	8f a2       	std	Y+39, r8	; 0x27
    21e0:	a9 86       	std	Y+9, r10	; 0x09
    21e2:	ba 86       	std	Y+10, r11	; 0x0a
    21e4:	cb 86       	std	Y+11, r12	; 0x0b
    21e6:	dc 86       	std	Y+12, r13	; 0x0c
    21e8:	4d 86       	std	Y+13, r4	; 0x0d
    21ea:	5e 86       	std	Y+14, r5	; 0x0e
    21ec:	6f 86       	std	Y+15, r6	; 0x0f
    21ee:	78 8a       	std	Y+16, r7	; 0x10
        }
    }
    
    for (int i = topPosition + 1; i < startIndex + numberOfPositions; i++)
    {
        x = x + deltaX;
    21f0:	2f a5       	ldd	r18, Y+47	; 0x2f
    21f2:	38 a9       	ldd	r19, Y+48	; 0x30
    21f4:	49 a9       	ldd	r20, Y+49	; 0x31
    21f6:	5a a9       	ldd	r21, Y+50	; 0x32
    21f8:	69 85       	ldd	r22, Y+9	; 0x09
    21fa:	7a 85       	ldd	r23, Y+10	; 0x0a
    21fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    21fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    2200:	b6 d7       	rcall	.+3948   	; 0x316e <__addsf3>
    2202:	69 87       	std	Y+9, r22	; 0x09
    2204:	7a 87       	std	Y+10, r23	; 0x0a
    2206:	8b 87       	std	Y+11, r24	; 0x0b
    2208:	9c 87       	std	Y+12, r25	; 0x0c
        y = y + deltaY;
    220a:	2b a9       	ldd	r18, Y+51	; 0x33
    220c:	3c a9       	ldd	r19, Y+52	; 0x34
    220e:	4d a9       	ldd	r20, Y+53	; 0x35
    2210:	5e a9       	ldd	r21, Y+54	; 0x36
    2212:	a7 96       	adiw	r28, 0x27	; 39
    2214:	6c ad       	ldd	r22, Y+60	; 0x3c
    2216:	7d ad       	ldd	r23, Y+61	; 0x3d
    2218:	8e ad       	ldd	r24, Y+62	; 0x3e
    221a:	9f ad       	ldd	r25, Y+63	; 0x3f
    221c:	a7 97       	sbiw	r28, 0x27	; 39
    221e:	a7 d7       	rcall	.+3918   	; 0x316e <__addsf3>
    2220:	a7 96       	adiw	r28, 0x27	; 39
    2222:	6c af       	std	Y+60, r22	; 0x3c
    2224:	7d af       	std	Y+61, r23	; 0x3d
    2226:	8e af       	std	Y+62, r24	; 0x3e
    2228:	9f af       	std	Y+63, r25	; 0x3f
    222a:	a7 97       	sbiw	r28, 0x27	; 39
        z = z + deltaZEnd;
    222c:	27 96       	adiw	r28, 0x07	; 7
    222e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2230:	3d ad       	ldd	r19, Y+61	; 0x3d
    2232:	4e ad       	ldd	r20, Y+62	; 0x3e
    2234:	5f ad       	ldd	r21, Y+63	; 0x3f
    2236:	27 97       	sbiw	r28, 0x07	; 7
    2238:	6d 85       	ldd	r22, Y+13	; 0x0d
    223a:	7e 85       	ldd	r23, Y+14	; 0x0e
    223c:	8f 85       	ldd	r24, Y+15	; 0x0f
    223e:	98 89       	ldd	r25, Y+16	; 0x10
    2240:	96 d7       	rcall	.+3884   	; 0x316e <__addsf3>
    2242:	6d 87       	std	Y+13, r22	; 0x0d
    2244:	7e 87       	std	Y+14, r23	; 0x0e
    2246:	8f 87       	std	Y+15, r24	; 0x0f
    2248:	98 8b       	std	Y+16, r25	; 0x10
        
        // lös inverskinematik för lederna.
        theta1 = atan2f(x,y)*180/PI;
    224a:	a7 96       	adiw	r28, 0x27	; 39
    224c:	2c ad       	ldd	r18, Y+60	; 0x3c
    224e:	3d ad       	ldd	r19, Y+61	; 0x3d
    2250:	4e ad       	ldd	r20, Y+62	; 0x3e
    2252:	5f ad       	ldd	r21, Y+63	; 0x3f
    2254:	a7 97       	sbiw	r28, 0x27	; 39
    2256:	69 85       	ldd	r22, Y+9	; 0x09
    2258:	7a 85       	ldd	r23, Y+10	; 0x0a
    225a:	8b 85       	ldd	r24, Y+11	; 0x0b
    225c:	9c 85       	ldd	r25, Y+12	; 0x0c
    225e:	fa d7       	rcall	.+4084   	; 0x3254 <atan2>
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	44 e3       	ldi	r20, 0x34	; 52
    2266:	53 e4       	ldi	r21, 0x43	; 67
    2268:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
    226c:	28 ed       	ldi	r18, 0xD8	; 216
    226e:	3f e0       	ldi	r19, 0x0F	; 15
    2270:	49 e4       	ldi	r20, 0x49	; 73
    2272:	50 e4       	ldi	r21, 0x40	; 64
    2274:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__divsf3>
    2278:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    227c:	69 a7       	std	Y+41, r22	; 0x29
    227e:	7a a7       	std	Y+42, r23	; 0x2a
    2280:	8b a7       	std	Y+43, r24	; 0x2b
    2282:	9c a7       	std	Y+44, r25	; 0x2c
        theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
    2284:	2d 85       	ldd	r18, Y+13	; 0x0d
    2286:	3e 85       	ldd	r19, Y+14	; 0x0e
    2288:	4f 85       	ldd	r20, Y+15	; 0x0f
    228a:	58 89       	ldd	r21, Y+16	; 0x10
    228c:	ca 01       	movw	r24, r20
    228e:	b9 01       	movw	r22, r18
    2290:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
    2294:	69 8b       	std	Y+17, r22	; 0x11
    2296:	7a 8b       	std	Y+18, r23	; 0x12
    2298:	8b 8b       	std	Y+19, r24	; 0x13
    229a:	9c 8b       	std	Y+20, r25	; 0x14
    229c:	29 85       	ldd	r18, Y+9	; 0x09
    229e:	3a 85       	ldd	r19, Y+10	; 0x0a
    22a0:	4b 85       	ldd	r20, Y+11	; 0x0b
    22a2:	5c 85       	ldd	r21, Y+12	; 0x0c
    22a4:	ca 01       	movw	r24, r20
    22a6:	b9 01       	movw	r22, r18
    22a8:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
    22ac:	6b 01       	movw	r12, r22
    22ae:	7c 01       	movw	r14, r24
    22b0:	a7 96       	adiw	r28, 0x27	; 39
    22b2:	2c ad       	ldd	r18, Y+60	; 0x3c
    22b4:	3d ad       	ldd	r19, Y+61	; 0x3d
    22b6:	4e ad       	ldd	r20, Y+62	; 0x3e
    22b8:	5f ad       	ldd	r21, Y+63	; 0x3f
    22ba:	a7 97       	sbiw	r28, 0x27	; 39
    22bc:	ca 01       	movw	r24, r20
    22be:	b9 01       	movw	r22, r18
    22c0:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
    22c4:	9b 01       	movw	r18, r22
    22c6:	ac 01       	movw	r20, r24
    22c8:	c7 01       	movw	r24, r14
    22ca:	b6 01       	movw	r22, r12
    22cc:	50 d7       	rcall	.+3744   	; 0x316e <__addsf3>
    22ce:	6d 8b       	std	Y+21, r22	; 0x15
    22d0:	7e 8b       	std	Y+22, r23	; 0x16
    22d2:	8f 8b       	std	Y+23, r24	; 0x17
    22d4:	98 8f       	std	Y+24, r25	; 0x18
    22d6:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <sqrt>
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	48 e4       	ldi	r20, 0x48	; 72
    22e0:	52 e4       	ldi	r21, 0x42	; 66
    22e2:	44 d7       	rcall	.+3720   	; 0x316c <__subsf3>
    22e4:	6b 01       	movw	r12, r22
    22e6:	7c 01       	movw	r14, r24
    22e8:	9b 01       	movw	r18, r22
    22ea:	ac 01       	movw	r20, r24
    22ec:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
    22f0:	69 8f       	std	Y+25, r22	; 0x19
    22f2:	7a 8f       	std	Y+26, r23	; 0x1a
    22f4:	8b 8f       	std	Y+27, r24	; 0x1b
    22f6:	9c 8f       	std	Y+28, r25	; 0x1c
    22f8:	9b 01       	movw	r18, r22
    22fa:	ac 01       	movw	r20, r24
    22fc:	69 89       	ldd	r22, Y+17	; 0x11
    22fe:	7a 89       	ldd	r23, Y+18	; 0x12
    2300:	8b 89       	ldd	r24, Y+19	; 0x13
    2302:	9c 89       	ldd	r25, Y+20	; 0x14
    2304:	34 d7       	rcall	.+3688   	; 0x316e <__addsf3>
    2306:	4b 01       	movw	r8, r22
    2308:	5c 01       	movw	r10, r24
    230a:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <sqrt>
    230e:	9b 01       	movw	r18, r22
    2310:	ac 01       	movw	r20, r24
    2312:	6d 85       	ldd	r22, Y+13	; 0x0d
    2314:	7e 85       	ldd	r23, Y+14	; 0x0e
    2316:	8f 85       	ldd	r24, Y+15	; 0x0f
    2318:	98 89       	ldd	r25, Y+16	; 0x10
    231a:	90 58       	subi	r25, 0x80	; 128
    231c:	ee d7       	rcall	.+4060   	; 0x32fa <__divsf3>
    231e:	18 d7       	rcall	.+3632   	; 0x3150 <acos>
    2320:	2b 01       	movw	r4, r22
    2322:	3c 01       	movw	r6, r24
        acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	48 e4       	ldi	r20, 0x48	; 72
    232a:	52 e4       	ldi	r21, 0x42	; 66
    232c:	6d 89       	ldd	r22, Y+21	; 0x15
    232e:	7e 89       	ldd	r23, Y+22	; 0x16
    2330:	8f 89       	ldd	r24, Y+23	; 0x17
    2332:	98 8d       	ldd	r25, Y+24	; 0x18
    2334:	1b d7       	rcall	.+3638   	; 0x316c <__subsf3>
    2336:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <sqrt>
    233a:	9b 01       	movw	r18, r22
    233c:	ac 01       	movw	r20, r24
    233e:	c7 01       	movw	r24, r14
    2340:	b6 01       	movw	r22, r12
    2342:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
    2346:	9b 01       	movw	r18, r22
    2348:	ac 01       	movw	r20, r24
    234a:	69 89       	ldd	r22, Y+17	; 0x11
    234c:	7a 89       	ldd	r23, Y+18	; 0x12
    234e:	8b 89       	ldd	r24, Y+19	; 0x13
    2350:	9c 89       	ldd	r25, Y+20	; 0x14
    2352:	0d d7       	rcall	.+3610   	; 0x316e <__addsf3>
    2354:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <sqrt>
    2358:	6b 01       	movw	r12, r22
    235a:	7c 01       	movw	r14, r24
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	38 e4       	ldi	r19, 0x48	; 72
    2360:	4c e8       	ldi	r20, 0x8C	; 140
    2362:	55 e4       	ldi	r21, 0x45	; 69
    2364:	c5 01       	movw	r24, r10
    2366:	b4 01       	movw	r22, r8
    2368:	02 d7       	rcall	.+3588   	; 0x316e <__addsf3>
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	38 e0       	ldi	r19, 0x08	; 8
    236e:	44 e8       	ldi	r20, 0x84	; 132
    2370:	56 e4       	ldi	r21, 0x46	; 70
    2372:	fc d6       	rcall	.+3576   	; 0x316c <__subsf3>
    2374:	4b 01       	movw	r8, r22
    2376:	5c 01       	movw	r10, r24
    2378:	a7 01       	movw	r20, r14
    237a:	96 01       	movw	r18, r12
    237c:	c7 01       	movw	r24, r14
    237e:	b6 01       	movw	r22, r12
    2380:	f6 d6       	rcall	.+3564   	; 0x316e <__addsf3>
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	46 e8       	ldi	r20, 0x86	; 134
    2388:	52 e4       	ldi	r21, 0x42	; 66
    238a:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
    238e:	9b 01       	movw	r18, r22
    2390:	ac 01       	movw	r20, r24
    2392:	c5 01       	movw	r24, r10
    2394:	b4 01       	movw	r22, r8
    2396:	b1 d7       	rcall	.+3938   	; 0x32fa <__divsf3>
    2398:	db d6       	rcall	.+3510   	; 0x3150 <acos>
    239a:	9b 01       	movw	r18, r22
    239c:	ac 01       	movw	r20, r24
        y = y + deltaY;
        z = z + deltaZEnd;
        
        // lös inverskinematik för lederna.
        theta1 = atan2f(x,y)*180/PI;
        theta2 = 180/PI*(acosf(-z/sqrt(z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1))) +
    239e:	c3 01       	movw	r24, r6
    23a0:	b2 01       	movw	r22, r4
    23a2:	e5 d6       	rcall	.+3530   	; 0x316e <__addsf3>
    23a4:	24 ee       	ldi	r18, 0xE4	; 228
    23a6:	3e e2       	ldi	r19, 0x2E	; 46
    23a8:	45 e6       	ldi	r20, 0x65	; 101
    23aa:	52 e4       	ldi	r21, 0x42	; 66
    23ac:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
    23b0:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fixsfsi>
    23b4:	6b 01       	movw	r12, r22
    23b6:	7c 01       	movw	r14, r24
        acosf((z*z + (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1) + a2Square - a3Square)/(2*sqrt(z*z + (sqrt((x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)))*a2)));
        
        theta3 = acosf((a2Square + a3Square - z*z - (sqrt(x*x + y*y) - a1)*(sqrt(x*x + y*y) - a1)) / (2*a2*a3))*180/PI;
    23b8:	29 89       	ldd	r18, Y+17	; 0x11
    23ba:	3a 89       	ldd	r19, Y+18	; 0x12
    23bc:	4b 89       	ldd	r20, Y+19	; 0x13
    23be:	5c 89       	ldd	r21, Y+20	; 0x14
    23c0:	60 e0       	ldi	r22, 0x00	; 0
    23c2:	7a e1       	ldi	r23, 0x1A	; 26
    23c4:	87 ea       	ldi	r24, 0xA7	; 167
    23c6:	96 e4       	ldi	r25, 0x46	; 70
    23c8:	d1 d6       	rcall	.+3490   	; 0x316c <__subsf3>
    23ca:	29 8d       	ldd	r18, Y+25	; 0x19
    23cc:	3a 8d       	ldd	r19, Y+26	; 0x1a
    23ce:	4b 8d       	ldd	r20, Y+27	; 0x1b
    23d0:	5c 8d       	ldd	r21, Y+28	; 0x1c
    23d2:	cc d6       	rcall	.+3480   	; 0x316c <__subsf3>
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	38 e1       	ldi	r19, 0x18	; 24
    23d8:	48 e8       	ldi	r20, 0x88	; 136
    23da:	56 e4       	ldi	r21, 0x46	; 70
    23dc:	8e d7       	rcall	.+3868   	; 0x32fa <__divsf3>
    23de:	b8 d6       	rcall	.+3440   	; 0x3150 <acos>
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	44 e3       	ldi	r20, 0x34	; 52
    23e6:	53 e4       	ldi	r21, 0x43	; 67
    23e8:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__mulsf3>
    23ec:	28 ed       	ldi	r18, 0xD8	; 216
    23ee:	3f e0       	ldi	r19, 0x0F	; 15
    23f0:	49 e4       	ldi	r20, 0x49	; 73
    23f2:	50 e4       	ldi	r21, 0x40	; 64
    23f4:	82 d7       	rcall	.+3844   	; 0x32fa <__divsf3>
    23f6:	e9 d7       	rcall	.+4050   	; 0x33ca <__fixsfsi>
        
        // spara resultatet i global array
       switch(currentLeg.legNumber)
    23f8:	ed 8d       	ldd	r30, Y+29	; 0x1d
    23fa:	fe 8d       	ldd	r31, Y+30	; 0x1e
    23fc:	e2 30       	cpi	r30, 0x02	; 2
    23fe:	f1 05       	cpc	r31, r1
    2400:	09 f4       	brne	.+2      	; 0x2404 <CalcCurvedPath+0xb0a>
    2402:	5c c0       	rjmp	.+184    	; 0x24bc <CalcCurvedPath+0xbc2>
    2404:	1c f4       	brge	.+6      	; 0x240c <CalcCurvedPath+0xb12>
    2406:	31 97       	sbiw	r30, 0x01	; 1
    2408:	61 f0       	breq	.+24     	; 0x2422 <CalcCurvedPath+0xb28>
    240a:	50 c1       	rjmp	.+672    	; 0x26ac <CalcCurvedPath+0xdb2>
    240c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    240e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2410:	23 30       	cpi	r18, 0x03	; 3
    2412:	31 05       	cpc	r19, r1
    2414:	09 f4       	brne	.+2      	; 0x2418 <CalcCurvedPath+0xb1e>
    2416:	a1 c0       	rjmp	.+322    	; 0x255a <CalcCurvedPath+0xc60>
    2418:	24 30       	cpi	r18, 0x04	; 4
    241a:	31 05       	cpc	r19, r1
    241c:	09 f4       	brne	.+2      	; 0x2420 <CalcCurvedPath+0xb26>
    241e:	f2 c0       	rjmp	.+484    	; 0x2604 <CalcCurvedPath+0xd0a>
    2420:	45 c1       	rjmp	.+650    	; 0x26ac <CalcCurvedPath+0xdb2>
       {
           case FRONT_LEFT_LEG:
           {
               actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 105;
    2422:	09 a5       	ldd	r16, Y+41	; 0x29
    2424:	1a a5       	ldd	r17, Y+42	; 0x2a
    2426:	2b a5       	ldd	r18, Y+43	; 0x2b
    2428:	3c a5       	ldd	r19, Y+44	; 0x2c
    242a:	07 59       	subi	r16, 0x97	; 151
    242c:	1f 4f       	sbci	r17, 0xFF	; 255
    242e:	2f 4f       	sbci	r18, 0xFF	; 255
    2430:	3f 4f       	sbci	r19, 0xFF	; 255
    2432:	af a1       	ldd	r26, Y+39	; 0x27
    2434:	b8 a5       	ldd	r27, Y+40	; 0x28
    2436:	0d 93       	st	X+, r16
    2438:	1d 93       	st	X+, r17
    243a:	2d 93       	st	X+, r18
    243c:	3c 93       	st	X, r19
    243e:	13 97       	sbiw	r26, 0x03	; 3
               actuatorPositions_g[currentLeg.femurJoint][i] =  theta2 + 75;
    2440:	bb e4       	ldi	r27, 0x4B	; 75
    2442:	cb 0e       	add	r12, r27
    2444:	d1 1c       	adc	r13, r1
    2446:	e1 1c       	adc	r14, r1
    2448:	f1 1c       	adc	r15, r1
    244a:	e9 a1       	ldd	r30, Y+33	; 0x21
    244c:	fa a1       	ldd	r31, Y+34	; 0x22
    244e:	c0 82       	st	Z, r12
    2450:	d1 82       	std	Z+1, r13	; 0x01
    2452:	e2 82       	std	Z+2, r14	; 0x02
    2454:	f3 82       	std	Z+3, r15	; 0x03
               actuatorPositions_g[currentLeg.tibiaJoint][i] =  theta3 + 1;
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	01 96       	adiw	r24, 0x01	; 1
    245c:	a1 1d       	adc	r26, r1
    245e:	b1 1d       	adc	r27, r1
    2460:	ed a1       	ldd	r30, Y+37	; 0x25
    2462:	fe a1       	ldd	r31, Y+38	; 0x26
    2464:	80 83       	st	Z, r24
    2466:	91 83       	std	Z+1, r25	; 0x01
    2468:	a2 83       	std	Z+2, r26	; 0x02
    246a:	b3 83       	std	Z+3, r27	; 0x03
               legPositions_g[FRONT_LEFT_LEG_X][i] = x;
    246c:	69 85       	ldd	r22, Y+9	; 0x09
    246e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2470:	8b 85       	ldd	r24, Y+11	; 0x0b
    2472:	9c 85       	ldd	r25, Y+12	; 0x0c
    2474:	aa d7       	rcall	.+3924   	; 0x33ca <__fixsfsi>
    2476:	d1 01       	movw	r26, r2
    2478:	6d 93       	st	X+, r22
    247a:	7d 93       	st	X+, r23
    247c:	8d 93       	st	X+, r24
    247e:	9c 93       	st	X, r25
    2480:	13 97       	sbiw	r26, 0x03	; 3
    2482:	81 01       	movw	r16, r2
    2484:	00 5b       	subi	r16, 0xB0	; 176
    2486:	1f 4f       	sbci	r17, 0xFF	; 255
               legPositions_g[FRONT_LEFT_LEG_Y][i] = y;
    2488:	a7 96       	adiw	r28, 0x27	; 39
    248a:	6c ad       	ldd	r22, Y+60	; 0x3c
    248c:	7d ad       	ldd	r23, Y+61	; 0x3d
    248e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2490:	9f ad       	ldd	r25, Y+63	; 0x3f
    2492:	a7 97       	sbiw	r28, 0x27	; 39
    2494:	9a d7       	rcall	.+3892   	; 0x33ca <__fixsfsi>
    2496:	f8 01       	movw	r30, r16
    2498:	60 83       	st	Z, r22
    249a:	71 83       	std	Z+1, r23	; 0x01
    249c:	82 83       	std	Z+2, r24	; 0x02
    249e:	93 83       	std	Z+3, r25	; 0x03
    24a0:	00 5b       	subi	r16, 0xB0	; 176
    24a2:	1f 4f       	sbci	r17, 0xFF	; 255
               legPositions_g[FRONT_LEFT_LEG_Z][i] = z;
    24a4:	6d 85       	ldd	r22, Y+13	; 0x0d
    24a6:	7e 85       	ldd	r23, Y+14	; 0x0e
    24a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    24aa:	98 89       	ldd	r25, Y+16	; 0x10
    24ac:	8e d7       	rcall	.+3868   	; 0x33ca <__fixsfsi>
    24ae:	d8 01       	movw	r26, r16
    24b0:	6d 93       	st	X+, r22
    24b2:	7d 93       	st	X+, r23
    24b4:	8d 93       	st	X+, r24
    24b6:	9c 93       	st	X, r25
    24b8:	13 97       	sbiw	r26, 0x03	; 3
               break;
    24ba:	f8 c0       	rjmp	.+496    	; 0x26ac <CalcCurvedPath+0xdb2>
           }
           case FRONT_RIGHT_LEG:
           {
               actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 193;
    24bc:	09 a5       	ldd	r16, Y+41	; 0x29
    24be:	1a a5       	ldd	r17, Y+42	; 0x2a
    24c0:	2b a5       	ldd	r18, Y+43	; 0x2b
    24c2:	3c a5       	ldd	r19, Y+44	; 0x2c
    24c4:	0f 53       	subi	r16, 0x3F	; 63
    24c6:	1f 4f       	sbci	r17, 0xFF	; 255
    24c8:	2f 4f       	sbci	r18, 0xFF	; 255
    24ca:	3f 4f       	sbci	r19, 0xFF	; 255
    24cc:	ef a1       	ldd	r30, Y+39	; 0x27
    24ce:	f8 a5       	ldd	r31, Y+40	; 0x28
    24d0:	00 83       	st	Z, r16
    24d2:	11 83       	std	Z+1, r17	; 0x01
    24d4:	22 83       	std	Z+2, r18	; 0x02
    24d6:	33 83       	std	Z+3, r19	; 0x03
               actuatorPositions_g[currentLeg.femurJoint][i] =  theta2 + 75;
    24d8:	fb e4       	ldi	r31, 0x4B	; 75
    24da:	cf 0e       	add	r12, r31
    24dc:	d1 1c       	adc	r13, r1
    24de:	e1 1c       	adc	r14, r1
    24e0:	f1 1c       	adc	r15, r1
    24e2:	a9 a1       	ldd	r26, Y+33	; 0x21
    24e4:	ba a1       	ldd	r27, Y+34	; 0x22
    24e6:	cd 92       	st	X+, r12
    24e8:	dd 92       	st	X+, r13
    24ea:	ed 92       	st	X+, r14
    24ec:	fc 92       	st	X, r15
    24ee:	13 97       	sbiw	r26, 0x03	; 3
               actuatorPositions_g[currentLeg.tibiaJoint][i] =  theta3 + 3;
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	03 96       	adiw	r24, 0x03	; 3
    24f6:	a1 1d       	adc	r26, r1
    24f8:	b1 1d       	adc	r27, r1
    24fa:	ed a1       	ldd	r30, Y+37	; 0x25
    24fc:	fe a1       	ldd	r31, Y+38	; 0x26
    24fe:	80 83       	st	Z, r24
    2500:	91 83       	std	Z+1, r25	; 0x01
    2502:	a2 83       	std	Z+2, r26	; 0x02
    2504:	b3 83       	std	Z+3, r27	; 0x03
    2506:	81 01       	movw	r16, r2
    2508:	00 51       	subi	r16, 0x10	; 16
    250a:	1f 4f       	sbci	r17, 0xFF	; 255
               legPositions_g[FRONT_RIGHT_LEG_X][i] = x;
    250c:	69 85       	ldd	r22, Y+9	; 0x09
    250e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2510:	8b 85       	ldd	r24, Y+11	; 0x0b
    2512:	9c 85       	ldd	r25, Y+12	; 0x0c
    2514:	5a d7       	rcall	.+3764   	; 0x33ca <__fixsfsi>
    2516:	d8 01       	movw	r26, r16
    2518:	6d 93       	st	X+, r22
    251a:	7d 93       	st	X+, r23
    251c:	8d 93       	st	X+, r24
    251e:	9c 93       	st	X, r25
    2520:	13 97       	sbiw	r26, 0x03	; 3
    2522:	00 5b       	subi	r16, 0xB0	; 176
    2524:	1f 4f       	sbci	r17, 0xFF	; 255
               legPositions_g[FRONT_RIGHT_LEG_Y][i] = y;
    2526:	a7 96       	adiw	r28, 0x27	; 39
    2528:	6c ad       	ldd	r22, Y+60	; 0x3c
    252a:	7d ad       	ldd	r23, Y+61	; 0x3d
    252c:	8e ad       	ldd	r24, Y+62	; 0x3e
    252e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2530:	a7 97       	sbiw	r28, 0x27	; 39
    2532:	4b d7       	rcall	.+3734   	; 0x33ca <__fixsfsi>
    2534:	f8 01       	movw	r30, r16
    2536:	60 83       	st	Z, r22
    2538:	71 83       	std	Z+1, r23	; 0x01
    253a:	82 83       	std	Z+2, r24	; 0x02
    253c:	93 83       	std	Z+3, r25	; 0x03
    253e:	00 5b       	subi	r16, 0xB0	; 176
    2540:	1f 4f       	sbci	r17, 0xFF	; 255
               legPositions_g[FRONT_RIGHT_LEG_Z][i] = z;
    2542:	6d 85       	ldd	r22, Y+13	; 0x0d
    2544:	7e 85       	ldd	r23, Y+14	; 0x0e
    2546:	8f 85       	ldd	r24, Y+15	; 0x0f
    2548:	98 89       	ldd	r25, Y+16	; 0x10
    254a:	3f d7       	rcall	.+3710   	; 0x33ca <__fixsfsi>
    254c:	d8 01       	movw	r26, r16
    254e:	6d 93       	st	X+, r22
    2550:	7d 93       	st	X+, r23
    2552:	8d 93       	st	X+, r24
    2554:	9c 93       	st	X, r25
    2556:	13 97       	sbiw	r26, 0x03	; 3
               break;
    2558:	a9 c0       	rjmp	.+338    	; 0x26ac <CalcCurvedPath+0xdb2>
           }
           case REAR_LEFT_LEG:
           {
               actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 195;
    255a:	09 a5       	ldd	r16, Y+41	; 0x29
    255c:	1a a5       	ldd	r17, Y+42	; 0x2a
    255e:	2b a5       	ldd	r18, Y+43	; 0x2b
    2560:	3c a5       	ldd	r19, Y+44	; 0x2c
    2562:	0d 53       	subi	r16, 0x3D	; 61
    2564:	1f 4f       	sbci	r17, 0xFF	; 255
    2566:	2f 4f       	sbci	r18, 0xFF	; 255
    2568:	3f 4f       	sbci	r19, 0xFF	; 255
    256a:	ef a1       	ldd	r30, Y+39	; 0x27
    256c:	f8 a5       	ldd	r31, Y+40	; 0x28
    256e:	00 83       	st	Z, r16
    2570:	11 83       	std	Z+1, r17	; 0x01
    2572:	22 83       	std	Z+2, r18	; 0x02
    2574:	33 83       	std	Z+3, r19	; 0x03
               actuatorPositions_g[currentLeg.femurJoint][i] =  225 - theta2;
    2576:	01 ee       	ldi	r16, 0xE1	; 225
    2578:	10 e0       	ldi	r17, 0x00	; 0
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	0c 19       	sub	r16, r12
    2580:	1d 09       	sbc	r17, r13
    2582:	2e 09       	sbc	r18, r14
    2584:	3f 09       	sbc	r19, r15
    2586:	a9 a1       	ldd	r26, Y+33	; 0x21
    2588:	ba a1       	ldd	r27, Y+34	; 0x22
    258a:	0d 93       	st	X+, r16
    258c:	1d 93       	st	X+, r17
    258e:	2d 93       	st	X+, r18
    2590:	3c 93       	st	X, r19
    2592:	13 97       	sbiw	r26, 0x03	; 3
               actuatorPositions_g[currentLeg.tibiaJoint][i] =  300 - theta3;
    2594:	2c e2       	ldi	r18, 0x2C	; 44
    2596:	31 e0       	ldi	r19, 0x01	; 1
    2598:	40 e0       	ldi	r20, 0x00	; 0
    259a:	50 e0       	ldi	r21, 0x00	; 0
    259c:	26 1b       	sub	r18, r22
    259e:	37 0b       	sbc	r19, r23
    25a0:	48 0b       	sbc	r20, r24
    25a2:	59 0b       	sbc	r21, r25
    25a4:	ed a1       	ldd	r30, Y+37	; 0x25
    25a6:	fe a1       	ldd	r31, Y+38	; 0x26
    25a8:	20 83       	st	Z, r18
    25aa:	31 83       	std	Z+1, r19	; 0x01
    25ac:	42 83       	std	Z+2, r20	; 0x02
    25ae:	53 83       	std	Z+3, r21	; 0x03
    25b0:	81 01       	movw	r16, r2
    25b2:	00 52       	subi	r16, 0x20	; 32
    25b4:	1e 4f       	sbci	r17, 0xFE	; 254
               legPositions_g[REAR_LEFT_LEG_X][i] = x;
    25b6:	69 85       	ldd	r22, Y+9	; 0x09
    25b8:	7a 85       	ldd	r23, Y+10	; 0x0a
    25ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    25bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    25be:	05 d7       	rcall	.+3594   	; 0x33ca <__fixsfsi>
    25c0:	d8 01       	movw	r26, r16
    25c2:	6d 93       	st	X+, r22
    25c4:	7d 93       	st	X+, r23
    25c6:	8d 93       	st	X+, r24
    25c8:	9c 93       	st	X, r25
    25ca:	13 97       	sbiw	r26, 0x03	; 3
    25cc:	00 5b       	subi	r16, 0xB0	; 176
    25ce:	1f 4f       	sbci	r17, 0xFF	; 255
               legPositions_g[REAR_LEFT_LEG_Y][i] = y;
    25d0:	a7 96       	adiw	r28, 0x27	; 39
    25d2:	6c ad       	ldd	r22, Y+60	; 0x3c
    25d4:	7d ad       	ldd	r23, Y+61	; 0x3d
    25d6:	8e ad       	ldd	r24, Y+62	; 0x3e
    25d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    25da:	a7 97       	sbiw	r28, 0x27	; 39
    25dc:	f6 d6       	rcall	.+3564   	; 0x33ca <__fixsfsi>
    25de:	f8 01       	movw	r30, r16
    25e0:	60 83       	st	Z, r22
    25e2:	71 83       	std	Z+1, r23	; 0x01
    25e4:	82 83       	std	Z+2, r24	; 0x02
    25e6:	93 83       	std	Z+3, r25	; 0x03
    25e8:	00 5b       	subi	r16, 0xB0	; 176
    25ea:	1f 4f       	sbci	r17, 0xFF	; 255
               legPositions_g[REAR_LEFT_LEG_Z][i] = z;
    25ec:	6d 85       	ldd	r22, Y+13	; 0x0d
    25ee:	7e 85       	ldd	r23, Y+14	; 0x0e
    25f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25f2:	98 89       	ldd	r25, Y+16	; 0x10
    25f4:	ea d6       	rcall	.+3540   	; 0x33ca <__fixsfsi>
    25f6:	d8 01       	movw	r26, r16
    25f8:	6d 93       	st	X+, r22
    25fa:	7d 93       	st	X+, r23
    25fc:	8d 93       	st	X+, r24
    25fe:	9c 93       	st	X, r25
    2600:	13 97       	sbiw	r26, 0x03	; 3
               break;
    2602:	54 c0       	rjmp	.+168    	; 0x26ac <CalcCurvedPath+0xdb2>
           }
           case REAR_RIGHT_LEG:
           {
               actuatorPositions_g[currentLeg.coxaJoint][i] = theta1 + 105;
    2604:	09 a5       	ldd	r16, Y+41	; 0x29
    2606:	1a a5       	ldd	r17, Y+42	; 0x2a
    2608:	2b a5       	ldd	r18, Y+43	; 0x2b
    260a:	3c a5       	ldd	r19, Y+44	; 0x2c
    260c:	07 59       	subi	r16, 0x97	; 151
    260e:	1f 4f       	sbci	r17, 0xFF	; 255
    2610:	2f 4f       	sbci	r18, 0xFF	; 255
    2612:	3f 4f       	sbci	r19, 0xFF	; 255
    2614:	ef a1       	ldd	r30, Y+39	; 0x27
    2616:	f8 a5       	ldd	r31, Y+40	; 0x28
    2618:	00 83       	st	Z, r16
    261a:	11 83       	std	Z+1, r17	; 0x01
    261c:	22 83       	std	Z+2, r18	; 0x02
    261e:	33 83       	std	Z+3, r19	; 0x03
               actuatorPositions_g[currentLeg.femurJoint][i] =  225 - theta2;
    2620:	01 ee       	ldi	r16, 0xE1	; 225
    2622:	10 e0       	ldi	r17, 0x00	; 0
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	0c 19       	sub	r16, r12
    262a:	1d 09       	sbc	r17, r13
    262c:	2e 09       	sbc	r18, r14
    262e:	3f 09       	sbc	r19, r15
    2630:	a9 a1       	ldd	r26, Y+33	; 0x21
    2632:	ba a1       	ldd	r27, Y+34	; 0x22
    2634:	0d 93       	st	X+, r16
    2636:	1d 93       	st	X+, r17
    2638:	2d 93       	st	X+, r18
    263a:	3c 93       	st	X, r19
    263c:	13 97       	sbiw	r26, 0x03	; 3
               actuatorPositions_g[currentLeg.tibiaJoint][i] =  300 - theta3;
    263e:	2c e2       	ldi	r18, 0x2C	; 44
    2640:	31 e0       	ldi	r19, 0x01	; 1
    2642:	40 e0       	ldi	r20, 0x00	; 0
    2644:	50 e0       	ldi	r21, 0x00	; 0
    2646:	26 1b       	sub	r18, r22
    2648:	37 0b       	sbc	r19, r23
    264a:	48 0b       	sbc	r20, r24
    264c:	59 0b       	sbc	r21, r25
    264e:	ed a1       	ldd	r30, Y+37	; 0x25
    2650:	fe a1       	ldd	r31, Y+38	; 0x26
    2652:	20 83       	st	Z, r18
    2654:	31 83       	std	Z+1, r19	; 0x01
    2656:	42 83       	std	Z+2, r20	; 0x02
    2658:	53 83       	std	Z+3, r21	; 0x03
    265a:	81 01       	movw	r16, r2
    265c:	00 53       	subi	r16, 0x30	; 48
    265e:	1d 4f       	sbci	r17, 0xFD	; 253
               legPositions_g[REAR_RIGHT_LEG_X][i] = x;
    2660:	69 85       	ldd	r22, Y+9	; 0x09
    2662:	7a 85       	ldd	r23, Y+10	; 0x0a
    2664:	8b 85       	ldd	r24, Y+11	; 0x0b
    2666:	9c 85       	ldd	r25, Y+12	; 0x0c
    2668:	b0 d6       	rcall	.+3424   	; 0x33ca <__fixsfsi>
    266a:	d8 01       	movw	r26, r16
    266c:	6d 93       	st	X+, r22
    266e:	7d 93       	st	X+, r23
    2670:	8d 93       	st	X+, r24
    2672:	9c 93       	st	X, r25
    2674:	13 97       	sbiw	r26, 0x03	; 3
    2676:	00 5b       	subi	r16, 0xB0	; 176
    2678:	1f 4f       	sbci	r17, 0xFF	; 255
               legPositions_g[REAR_RIGHT_LEG_Y][i] = y;
    267a:	a7 96       	adiw	r28, 0x27	; 39
    267c:	6c ad       	ldd	r22, Y+60	; 0x3c
    267e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2680:	8e ad       	ldd	r24, Y+62	; 0x3e
    2682:	9f ad       	ldd	r25, Y+63	; 0x3f
    2684:	a7 97       	sbiw	r28, 0x27	; 39
    2686:	a1 d6       	rcall	.+3394   	; 0x33ca <__fixsfsi>
    2688:	f8 01       	movw	r30, r16
    268a:	60 83       	st	Z, r22
    268c:	71 83       	std	Z+1, r23	; 0x01
    268e:	82 83       	std	Z+2, r24	; 0x02
    2690:	93 83       	std	Z+3, r25	; 0x03
    2692:	00 5b       	subi	r16, 0xB0	; 176
    2694:	1f 4f       	sbci	r17, 0xFF	; 255
               legPositions_g[REAR_RIGHT_LEG_Z][i] = z;
    2696:	6d 85       	ldd	r22, Y+13	; 0x0d
    2698:	7e 85       	ldd	r23, Y+14	; 0x0e
    269a:	8f 85       	ldd	r24, Y+15	; 0x0f
    269c:	98 89       	ldd	r25, Y+16	; 0x10
    269e:	95 d6       	rcall	.+3370   	; 0x33ca <__fixsfsi>
    26a0:	d8 01       	movw	r26, r16
    26a2:	6d 93       	st	X+, r22
    26a4:	7d 93       	st	X+, r23
    26a6:	8d 93       	st	X+, r24
    26a8:	9c 93       	st	X, r25
    26aa:	13 97       	sbiw	r26, 0x03	; 3
                break;
            }
        }
    }
    
    for (int i = topPosition + 1; i < startIndex + numberOfPositions; i++)
    26ac:	ed a5       	ldd	r30, Y+45	; 0x2d
    26ae:	fe a5       	ldd	r31, Y+46	; 0x2e
    26b0:	31 96       	adiw	r30, 0x01	; 1
    26b2:	fe a7       	std	Y+46, r31	; 0x2e
    26b4:	ed a7       	std	Y+45, r30	; 0x2d
    26b6:	2f a1       	ldd	r18, Y+39	; 0x27
    26b8:	38 a5       	ldd	r19, Y+40	; 0x28
    26ba:	2c 5f       	subi	r18, 0xFC	; 252
    26bc:	3f 4f       	sbci	r19, 0xFF	; 255
    26be:	38 a7       	std	Y+40, r19	; 0x28
    26c0:	2f a3       	std	Y+39, r18	; 0x27
    26c2:	49 a1       	ldd	r20, Y+33	; 0x21
    26c4:	5a a1       	ldd	r21, Y+34	; 0x22
    26c6:	4c 5f       	subi	r20, 0xFC	; 252
    26c8:	5f 4f       	sbci	r21, 0xFF	; 255
    26ca:	5a a3       	std	Y+34, r21	; 0x22
    26cc:	49 a3       	std	Y+33, r20	; 0x21
    26ce:	8d a1       	ldd	r24, Y+37	; 0x25
    26d0:	9e a1       	ldd	r25, Y+38	; 0x26
    26d2:	04 96       	adiw	r24, 0x04	; 4
    26d4:	9e a3       	std	Y+38, r25	; 0x26
    26d6:	8d a3       	std	Y+37, r24	; 0x25
    26d8:	94 e0       	ldi	r25, 0x04	; 4
    26da:	29 0e       	add	r2, r25
    26dc:	31 1c       	adc	r3, r1
    26de:	af a9       	ldd	r26, Y+55	; 0x37
    26e0:	b8 ad       	ldd	r27, Y+56	; 0x38
    26e2:	ea 17       	cp	r30, r26
    26e4:	fb 07       	cpc	r31, r27
    26e6:	09 f0       	breq	.+2      	; 0x26ea <CalcCurvedPath+0xdf0>
    26e8:	83 cd       	rjmp	.-1274   	; 0x21f0 <CalcCurvedPath+0x8f6>
               legPositions_g[REAR_RIGHT_LEG_Z][i] = z;
               break;
           }
       }
    }
}
    26ea:	c2 5b       	subi	r28, 0xB2	; 178
    26ec:	df 4f       	sbci	r29, 0xFF	; 255
    26ee:	0f b6       	in	r0, 0x3f	; 63
    26f0:	f8 94       	cli
    26f2:	de bf       	out	0x3e, r29	; 62
    26f4:	0f be       	out	0x3f, r0	; 63
    26f6:	cd bf       	out	0x3d, r28	; 61
    26f8:	df 91       	pop	r29
    26fa:	cf 91       	pop	r28
    26fc:	1f 91       	pop	r17
    26fe:	0f 91       	pop	r16
    2700:	ff 90       	pop	r15
    2702:	ef 90       	pop	r14
    2704:	df 90       	pop	r13
    2706:	cf 90       	pop	r12
    2708:	bf 90       	pop	r11
    270a:	af 90       	pop	r10
    270c:	9f 90       	pop	r9
    270e:	8f 90       	pop	r8
    2710:	7f 90       	pop	r7
    2712:	6f 90       	pop	r6
    2714:	5f 90       	pop	r5
    2716:	4f 90       	pop	r4
    2718:	3f 90       	pop	r3
    271a:	2f 90       	pop	r2
    271c:	08 95       	ret

0000271e <MoveLegToNextPosition>:
{   
    move();
} 

void MoveLegToNextPosition(leg Leg)
{
    271e:	4f 92       	push	r4
    2720:	5f 92       	push	r5
    2722:	6f 92       	push	r6
    2724:	7f 92       	push	r7
    2726:	8f 92       	push	r8
    2728:	9f 92       	push	r9
    272a:	af 92       	push	r10
    272c:	bf 92       	push	r11
    272e:	cf 92       	push	r12
    2730:	df 92       	push	r13
    2732:	ef 92       	push	r14
    2734:	ff 92       	push	r15
    2736:	0f 93       	push	r16
    2738:	1f 93       	push	r17
    273a:	cf 93       	push	r28
    273c:	df 93       	push	r29
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	28 97       	sbiw	r28, 0x08	; 8
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
    274e:	4b 83       	std	Y+3, r20	; 0x03
    2750:	5c 83       	std	Y+4, r21	; 0x04
    2752:	6d 83       	std	Y+5, r22	; 0x05
    2754:	7e 83       	std	Y+6, r23	; 0x06
    2756:	8f 83       	std	Y+7, r24	; 0x07
    2758:	98 87       	std	Y+8, r25	; 0x08
    275a:	eb 80       	ldd	r14, Y+3	; 0x03
    275c:	fc 80       	ldd	r15, Y+4	; 0x04
    275e:	8d 80       	ldd	r8, Y+5	; 0x05
    2760:	9e 80       	ldd	r9, Y+6	; 0x06
    2762:	af 80       	ldd	r10, Y+7	; 0x07
    2764:	b8 84       	ldd	r11, Y+8	; 0x08
    // CoxaJoint
    long int currentAngle = actuatorPositions_g[Leg.coxaJoint][currentPos_g];
    long int nextAngle = actuatorPositions_g[Leg.coxaJoint][nextPos_g];
    2766:	24 e1       	ldi	r18, 0x14	; 20
    2768:	2e 9d       	mul	r18, r14
    276a:	c0 01       	movw	r24, r0
    276c:	2f 9d       	mul	r18, r15
    276e:	90 0d       	add	r25, r0
    2770:	11 24       	eor	r1, r1
    2772:	e0 91 22 01 	lds	r30, 0x0122
    2776:	f0 91 23 01 	lds	r31, 0x0123
    277a:	e8 0f       	add	r30, r24
    277c:	f9 1f       	adc	r31, r25
    277e:	ee 0f       	add	r30, r30
    2780:	ff 1f       	adc	r31, r31
    2782:	ee 0f       	add	r30, r30
    2784:	ff 1f       	adc	r31, r31
    2786:	e4 50       	subi	r30, 0x04	; 4
    2788:	fb 4f       	sbci	r31, 0xFB	; 251
    278a:	40 80       	ld	r4, Z
    278c:	51 80       	ldd	r5, Z+1	; 0x01
    278e:	62 80       	ldd	r6, Z+2	; 0x02
    2790:	73 80       	ldd	r7, Z+3	; 0x03
} 

void MoveLegToNextPosition(leg Leg)
{
    // CoxaJoint
    long int currentAngle = actuatorPositions_g[Leg.coxaJoint][currentPos_g];
    2792:	e0 91 3a 01 	lds	r30, 0x013A
    2796:	f0 91 3b 01 	lds	r31, 0x013B
    279a:	8e 0f       	add	r24, r30
    279c:	9f 1f       	adc	r25, r31
    279e:	fc 01       	movw	r30, r24
    27a0:	ee 0f       	add	r30, r30
    27a2:	ff 1f       	adc	r31, r31
    27a4:	ee 0f       	add	r30, r30
    27a6:	ff 1f       	adc	r31, r31
    27a8:	e4 50       	subi	r30, 0x04	; 4
    27aa:	fb 4f       	sbci	r31, 0xFB	; 251
    long int nextAngle = actuatorPositions_g[Leg.coxaJoint][nextPos_g];
    long int RPM = calcDynamixelSpeed(abs(currentAngle - nextAngle));
    27ac:	80 81       	ld	r24, Z
    27ae:	91 81       	ldd	r25, Z+1	; 0x01
    27b0:	a2 81       	ldd	r26, Z+2	; 0x02
    27b2:	b3 81       	ldd	r27, Z+3	; 0x03
    27b4:	84 19       	sub	r24, r4
    27b6:	95 09       	sbc	r25, r5
    27b8:	a6 09       	sbc	r26, r6
    27ba:	b7 09       	sbc	r27, r7
    27bc:	9c 01       	movw	r18, r24
    27be:	99 23       	and	r25, r25
    27c0:	24 f4       	brge	.+8      	; 0x27ca <MoveLegToNextPosition+0xac>
    27c2:	22 27       	eor	r18, r18
    27c4:	33 27       	eor	r19, r19
    27c6:	28 1b       	sub	r18, r24
    27c8:	39 0b       	sbc	r19, r25
    27ca:	b9 01       	movw	r22, r18
    27cc:	88 27       	eor	r24, r24
    27ce:	77 fd       	sbrc	r23, 7
    27d0:	80 95       	com	r24
    27d2:	98 2f       	mov	r25, r24
    27d4:	0e 94 91 01 	call	0x322	; 0x322 <calcDynamixelSpeed>
    27d8:	8b 01       	movw	r16, r22
    27da:	9c 01       	movw	r18, r24
    MoveDynamixel(Leg.coxaJoint, nextAngle, RPM);
    27dc:	b3 01       	movw	r22, r6
    27de:	a2 01       	movw	r20, r4
    27e0:	c7 01       	movw	r24, r14
    27e2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <MoveDynamixel>
    // FemurJoint
    currentAngle = actuatorPositions_g[Leg.femurJoint][currentPos_g];
    nextAngle = actuatorPositions_g[Leg.femurJoint][nextPos_g];
    27e6:	24 e1       	ldi	r18, 0x14	; 20
    27e8:	28 9d       	mul	r18, r8
    27ea:	c0 01       	movw	r24, r0
    27ec:	29 9d       	mul	r18, r9
    27ee:	90 0d       	add	r25, r0
    27f0:	11 24       	eor	r1, r1
    27f2:	e0 91 22 01 	lds	r30, 0x0122
    27f6:	f0 91 23 01 	lds	r31, 0x0123
    27fa:	e8 0f       	add	r30, r24
    27fc:	f9 1f       	adc	r31, r25
    27fe:	ee 0f       	add	r30, r30
    2800:	ff 1f       	adc	r31, r31
    2802:	ee 0f       	add	r30, r30
    2804:	ff 1f       	adc	r31, r31
    2806:	e4 50       	subi	r30, 0x04	; 4
    2808:	fb 4f       	sbci	r31, 0xFB	; 251
    280a:	c0 80       	ld	r12, Z
    280c:	d1 80       	ldd	r13, Z+1	; 0x01
    280e:	e2 80       	ldd	r14, Z+2	; 0x02
    2810:	f3 80       	ldd	r15, Z+3	; 0x03
    long int currentAngle = actuatorPositions_g[Leg.coxaJoint][currentPos_g];
    long int nextAngle = actuatorPositions_g[Leg.coxaJoint][nextPos_g];
    long int RPM = calcDynamixelSpeed(abs(currentAngle - nextAngle));
    MoveDynamixel(Leg.coxaJoint, nextAngle, RPM);
    // FemurJoint
    currentAngle = actuatorPositions_g[Leg.femurJoint][currentPos_g];
    2812:	e0 91 3a 01 	lds	r30, 0x013A
    2816:	f0 91 3b 01 	lds	r31, 0x013B
    281a:	8e 0f       	add	r24, r30
    281c:	9f 1f       	adc	r25, r31
    281e:	fc 01       	movw	r30, r24
    2820:	ee 0f       	add	r30, r30
    2822:	ff 1f       	adc	r31, r31
    2824:	ee 0f       	add	r30, r30
    2826:	ff 1f       	adc	r31, r31
    2828:	e4 50       	subi	r30, 0x04	; 4
    282a:	fb 4f       	sbci	r31, 0xFB	; 251
    nextAngle = actuatorPositions_g[Leg.femurJoint][nextPos_g];
    RPM = calcDynamixelSpeed(abs(currentAngle - nextAngle));
    282c:	80 81       	ld	r24, Z
    282e:	91 81       	ldd	r25, Z+1	; 0x01
    2830:	a2 81       	ldd	r26, Z+2	; 0x02
    2832:	b3 81       	ldd	r27, Z+3	; 0x03
    2834:	8c 19       	sub	r24, r12
    2836:	9d 09       	sbc	r25, r13
    2838:	ae 09       	sbc	r26, r14
    283a:	bf 09       	sbc	r27, r15
    283c:	9c 01       	movw	r18, r24
    283e:	99 23       	and	r25, r25
    2840:	24 f4       	brge	.+8      	; 0x284a <MoveLegToNextPosition+0x12c>
    2842:	22 27       	eor	r18, r18
    2844:	33 27       	eor	r19, r19
    2846:	28 1b       	sub	r18, r24
    2848:	39 0b       	sbc	r19, r25
    284a:	b9 01       	movw	r22, r18
    284c:	88 27       	eor	r24, r24
    284e:	77 fd       	sbrc	r23, 7
    2850:	80 95       	com	r24
    2852:	98 2f       	mov	r25, r24
    2854:	0e 94 91 01 	call	0x322	; 0x322 <calcDynamixelSpeed>
    2858:	8b 01       	movw	r16, r22
    285a:	9c 01       	movw	r18, r24
    MoveDynamixel(Leg.femurJoint, nextAngle, RPM);
    285c:	b7 01       	movw	r22, r14
    285e:	a6 01       	movw	r20, r12
    2860:	c4 01       	movw	r24, r8
    2862:	0e 94 53 02 	call	0x4a6	; 0x4a6 <MoveDynamixel>
    // TibiaJoint
    currentAngle = actuatorPositions_g[Leg.tibiaJoint][currentPos_g];
    nextAngle = actuatorPositions_g[Leg.tibiaJoint][nextPos_g];
    2866:	24 e1       	ldi	r18, 0x14	; 20
    2868:	2a 9d       	mul	r18, r10
    286a:	c0 01       	movw	r24, r0
    286c:	2b 9d       	mul	r18, r11
    286e:	90 0d       	add	r25, r0
    2870:	11 24       	eor	r1, r1
    2872:	e0 91 22 01 	lds	r30, 0x0122
    2876:	f0 91 23 01 	lds	r31, 0x0123
    287a:	e8 0f       	add	r30, r24
    287c:	f9 1f       	adc	r31, r25
    287e:	ee 0f       	add	r30, r30
    2880:	ff 1f       	adc	r31, r31
    2882:	ee 0f       	add	r30, r30
    2884:	ff 1f       	adc	r31, r31
    2886:	e4 50       	subi	r30, 0x04	; 4
    2888:	fb 4f       	sbci	r31, 0xFB	; 251
    288a:	c0 80       	ld	r12, Z
    288c:	d1 80       	ldd	r13, Z+1	; 0x01
    288e:	e2 80       	ldd	r14, Z+2	; 0x02
    2890:	f3 80       	ldd	r15, Z+3	; 0x03
    currentAngle = actuatorPositions_g[Leg.femurJoint][currentPos_g];
    nextAngle = actuatorPositions_g[Leg.femurJoint][nextPos_g];
    RPM = calcDynamixelSpeed(abs(currentAngle - nextAngle));
    MoveDynamixel(Leg.femurJoint, nextAngle, RPM);
    // TibiaJoint
    currentAngle = actuatorPositions_g[Leg.tibiaJoint][currentPos_g];
    2892:	e0 91 3a 01 	lds	r30, 0x013A
    2896:	f0 91 3b 01 	lds	r31, 0x013B
    289a:	8e 0f       	add	r24, r30
    289c:	9f 1f       	adc	r25, r31
    289e:	fc 01       	movw	r30, r24
    28a0:	ee 0f       	add	r30, r30
    28a2:	ff 1f       	adc	r31, r31
    28a4:	ee 0f       	add	r30, r30
    28a6:	ff 1f       	adc	r31, r31
    28a8:	e4 50       	subi	r30, 0x04	; 4
    28aa:	fb 4f       	sbci	r31, 0xFB	; 251
    nextAngle = actuatorPositions_g[Leg.tibiaJoint][nextPos_g];
    RPM = calcDynamixelSpeed(abs(currentAngle - nextAngle));
    28ac:	80 81       	ld	r24, Z
    28ae:	91 81       	ldd	r25, Z+1	; 0x01
    28b0:	a2 81       	ldd	r26, Z+2	; 0x02
    28b2:	b3 81       	ldd	r27, Z+3	; 0x03
    28b4:	8c 19       	sub	r24, r12
    28b6:	9d 09       	sbc	r25, r13
    28b8:	ae 09       	sbc	r26, r14
    28ba:	bf 09       	sbc	r27, r15
    28bc:	9c 01       	movw	r18, r24
    28be:	99 23       	and	r25, r25
    28c0:	24 f4       	brge	.+8      	; 0x28ca <MoveLegToNextPosition+0x1ac>
    28c2:	22 27       	eor	r18, r18
    28c4:	33 27       	eor	r19, r19
    28c6:	28 1b       	sub	r18, r24
    28c8:	39 0b       	sbc	r19, r25
    28ca:	b9 01       	movw	r22, r18
    28cc:	88 27       	eor	r24, r24
    28ce:	77 fd       	sbrc	r23, 7
    28d0:	80 95       	com	r24
    28d2:	98 2f       	mov	r25, r24
    28d4:	0e 94 91 01 	call	0x322	; 0x322 <calcDynamixelSpeed>
    28d8:	8b 01       	movw	r16, r22
    28da:	9c 01       	movw	r18, r24
    MoveDynamixel(Leg.tibiaJoint, nextAngle, RPM);
    28dc:	b7 01       	movw	r22, r14
    28de:	a6 01       	movw	r20, r12
    28e0:	c5 01       	movw	r24, r10
    28e2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <MoveDynamixel>

}
    28e6:	28 96       	adiw	r28, 0x08	; 8
    28e8:	0f b6       	in	r0, 0x3f	; 63
    28ea:	f8 94       	cli
    28ec:	de bf       	out	0x3e, r29	; 62
    28ee:	0f be       	out	0x3f, r0	; 63
    28f0:	cd bf       	out	0x3d, r28	; 61
    28f2:	df 91       	pop	r29
    28f4:	cf 91       	pop	r28
    28f6:	1f 91       	pop	r17
    28f8:	0f 91       	pop	r16
    28fa:	ff 90       	pop	r15
    28fc:	ef 90       	pop	r14
    28fe:	df 90       	pop	r13
    2900:	cf 90       	pop	r12
    2902:	bf 90       	pop	r11
    2904:	af 90       	pop	r10
    2906:	9f 90       	pop	r9
    2908:	8f 90       	pop	r8
    290a:	7f 90       	pop	r7
    290c:	6f 90       	pop	r6
    290e:	5f 90       	pop	r5
    2910:	4f 90       	pop	r4
    2912:	08 95       	ret

00002914 <move>:

void move()
{
    
    MoveLegToNextPosition(frontLeftLeg);
    2914:	20 91 18 01 	lds	r18, 0x0118
    2918:	30 91 19 01 	lds	r19, 0x0119
    291c:	40 91 1a 01 	lds	r20, 0x011A
    2920:	50 91 1b 01 	lds	r21, 0x011B
    2924:	60 91 1c 01 	lds	r22, 0x011C
    2928:	70 91 1d 01 	lds	r23, 0x011D
    292c:	80 91 1e 01 	lds	r24, 0x011E
    2930:	90 91 1f 01 	lds	r25, 0x011F
    2934:	f4 de       	rcall	.-536    	; 0x271e <MoveLegToNextPosition>
    MoveLegToNextPosition(frontRightLeg);
    2936:	20 91 10 01 	lds	r18, 0x0110
    293a:	30 91 11 01 	lds	r19, 0x0111
    293e:	40 91 12 01 	lds	r20, 0x0112
    2942:	50 91 13 01 	lds	r21, 0x0113
    2946:	60 91 14 01 	lds	r22, 0x0114
    294a:	70 91 15 01 	lds	r23, 0x0115
    294e:	80 91 16 01 	lds	r24, 0x0116
    2952:	90 91 17 01 	lds	r25, 0x0117
    2956:	e3 de       	rcall	.-570    	; 0x271e <MoveLegToNextPosition>
    MoveLegToNextPosition(rearLeftLeg);
    2958:	20 91 08 01 	lds	r18, 0x0108
    295c:	30 91 09 01 	lds	r19, 0x0109
    2960:	40 91 0a 01 	lds	r20, 0x010A
    2964:	50 91 0b 01 	lds	r21, 0x010B
    2968:	60 91 0c 01 	lds	r22, 0x010C
    296c:	70 91 0d 01 	lds	r23, 0x010D
    2970:	80 91 0e 01 	lds	r24, 0x010E
    2974:	90 91 0f 01 	lds	r25, 0x010F
    2978:	d2 de       	rcall	.-604    	; 0x271e <MoveLegToNextPosition>
    MoveLegToNextPosition(rearRightLeg);
    297a:	20 91 00 01 	lds	r18, 0x0100
    297e:	30 91 01 01 	lds	r19, 0x0101
    2982:	40 91 02 01 	lds	r20, 0x0102
    2986:	50 91 03 01 	lds	r21, 0x0103
    298a:	60 91 04 01 	lds	r22, 0x0104
    298e:	70 91 05 01 	lds	r23, 0x0105
    2992:	80 91 06 01 	lds	r24, 0x0106
    2996:	90 91 07 01 	lds	r25, 0x0107
    299a:	c1 de       	rcall	.-638    	; 0x271e <MoveLegToNextPosition>

    increasePositionIndexes();  
    299c:	0c 94 ae 08 	jmp	0x115c	; 0x115c <increasePositionIndexes>
    29a0:	08 95       	ret

000029a2 <__vector_2>:

// För att testa gången
int Direction = 0;

ISR(INT1_vect)
{   
    29a2:	1f 92       	push	r1
    29a4:	0f 92       	push	r0
    29a6:	0f b6       	in	r0, 0x3f	; 63
    29a8:	0f 92       	push	r0
    29aa:	11 24       	eor	r1, r1
    29ac:	0b b6       	in	r0, 0x3b	; 59
    29ae:	0f 92       	push	r0
    29b0:	2f 93       	push	r18
    29b2:	3f 93       	push	r19
    29b4:	4f 93       	push	r20
    29b6:	5f 93       	push	r21
    29b8:	6f 93       	push	r22
    29ba:	7f 93       	push	r23
    29bc:	8f 93       	push	r24
    29be:	9f 93       	push	r25
    29c0:	af 93       	push	r26
    29c2:	bf 93       	push	r27
    29c4:	ef 93       	push	r30
    29c6:	ff 93       	push	r31
    move();
    29c8:	a5 df       	rcall	.-182    	; 0x2914 <move>
} 
    29ca:	ff 91       	pop	r31
    29cc:	ef 91       	pop	r30
    29ce:	bf 91       	pop	r27
    29d0:	af 91       	pop	r26
    29d2:	9f 91       	pop	r25
    29d4:	8f 91       	pop	r24
    29d6:	7f 91       	pop	r23
    29d8:	6f 91       	pop	r22
    29da:	5f 91       	pop	r21
    29dc:	4f 91       	pop	r20
    29de:	3f 91       	pop	r19
    29e0:	2f 91       	pop	r18
    29e2:	0f 90       	pop	r0
    29e4:	0b be       	out	0x3b, r0	; 59
    29e6:	0f 90       	pop	r0
    29e8:	0f be       	out	0x3f, r0	; 63
    29ea:	0f 90       	pop	r0
    29ec:	1f 90       	pop	r1
    29ee:	18 95       	reti

000029f0 <MakeTrotGait>:

    increasePositionIndexes();  
}

void MakeTrotGait(int cycleResolution)
{
    29f0:	6f 92       	push	r6
    29f2:	7f 92       	push	r7
    29f4:	8f 92       	push	r8
    29f6:	9f 92       	push	r9
    29f8:	af 92       	push	r10
    29fa:	bf 92       	push	r11
    29fc:	cf 92       	push	r12
    29fe:	df 92       	push	r13
    2a00:	ef 92       	push	r14
    2a02:	ff 92       	push	r15
    2a04:	0f 93       	push	r16
    2a06:	1f 93       	push	r17
    2a08:	cf 93       	push	r28
    2a0a:	df 93       	push	r29
    
    // cycleResolution är antaletpunkter på kurvan som benen följer. Måste vara jämnt tal!
    int res = cycleResolution/2;
    2a0c:	ec 01       	movw	r28, r24
    2a0e:	99 23       	and	r25, r25
    2a10:	0c f4       	brge	.+2      	; 0x2a14 <MakeTrotGait+0x24>
    2a12:	21 96       	adiw	r28, 0x01	; 1
    2a14:	d5 95       	asr	r29
    2a16:	c7 95       	ror	r28
    maxGaitCyclePos_g = cycleResolution - 1;
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	90 93 21 01 	sts	0x0121, r25
    2a1e:	80 93 20 01 	sts	0x0120, r24
    CalcCurvedPath(frontLeftLeg,res,0,-startPositionX_g,startPositionY_g-stepLength_g/2,startPositionZ_g,-startPositionX_g,startPositionY_g+stepLength_g/2,startPositionZ_g);
    2a22:	00 91 38 01 	lds	r16, 0x0138
    2a26:	10 91 39 01 	lds	r17, 0x0139
    2a2a:	11 23       	and	r17, r17
    2a2c:	14 f4       	brge	.+4      	; 0x2a32 <MakeTrotGait+0x42>
    2a2e:	0f 5f       	subi	r16, 0xFF	; 255
    2a30:	1f 4f       	sbci	r17, 0xFF	; 255
    2a32:	15 95       	asr	r17
    2a34:	07 95       	ror	r16
    2a36:	e0 90 34 01 	lds	r14, 0x0134
    2a3a:	f0 90 35 01 	lds	r15, 0x0135
    2a3e:	60 91 32 01 	lds	r22, 0x0132
    2a42:	70 91 33 01 	lds	r23, 0x0133
    2a46:	88 27       	eor	r24, r24
    2a48:	77 fd       	sbrc	r23, 7
    2a4a:	80 95       	com	r24
    2a4c:	98 2f       	mov	r25, r24
    2a4e:	f0 d4       	rcall	.+2528   	; 0x3430 <__floatsisf>
    2a50:	96 2e       	mov	r9, r22
    2a52:	87 2e       	mov	r8, r23
    2a54:	78 2e       	mov	r7, r24
    2a56:	69 2e       	mov	r6, r25
    2a58:	60 91 36 01 	lds	r22, 0x0136
    2a5c:	70 91 37 01 	lds	r23, 0x0137
    2a60:	71 95       	neg	r23
    2a62:	61 95       	neg	r22
    2a64:	71 09       	sbc	r23, r1
    2a66:	88 27       	eor	r24, r24
    2a68:	77 fd       	sbrc	r23, 7
    2a6a:	80 95       	com	r24
    2a6c:	98 2f       	mov	r25, r24
    2a6e:	e0 d4       	rcall	.+2496   	; 0x3430 <__floatsisf>
    2a70:	a6 2e       	mov	r10, r22
    2a72:	b7 2e       	mov	r11, r23
    2a74:	c8 2e       	mov	r12, r24
    2a76:	d9 2e       	mov	r13, r25
    2a78:	6f 92       	push	r6
    2a7a:	7f 92       	push	r7
    2a7c:	8f 92       	push	r8
    2a7e:	9f 92       	push	r9
    2a80:	b8 01       	movw	r22, r16
    2a82:	6e 0d       	add	r22, r14
    2a84:	7f 1d       	adc	r23, r15
    2a86:	88 27       	eor	r24, r24
    2a88:	77 fd       	sbrc	r23, 7
    2a8a:	80 95       	com	r24
    2a8c:	98 2f       	mov	r25, r24
    2a8e:	d0 d4       	rcall	.+2464   	; 0x3430 <__floatsisf>
    2a90:	9f 93       	push	r25
    2a92:	8f 93       	push	r24
    2a94:	7f 93       	push	r23
    2a96:	6f 93       	push	r22
    2a98:	df 92       	push	r13
    2a9a:	cf 92       	push	r12
    2a9c:	bf 92       	push	r11
    2a9e:	af 92       	push	r10
    2aa0:	6f 92       	push	r6
    2aa2:	7f 92       	push	r7
    2aa4:	8f 92       	push	r8
    2aa6:	9f 92       	push	r9
    2aa8:	b7 01       	movw	r22, r14
    2aaa:	60 1b       	sub	r22, r16
    2aac:	71 0b       	sbc	r23, r17
    2aae:	88 27       	eor	r24, r24
    2ab0:	77 fd       	sbrc	r23, 7
    2ab2:	80 95       	com	r24
    2ab4:	98 2f       	mov	r25, r24
    2ab6:	bc d4       	rcall	.+2424   	; 0x3430 <__floatsisf>
    2ab8:	9f 93       	push	r25
    2aba:	8f 93       	push	r24
    2abc:	7f 93       	push	r23
    2abe:	6f 93       	push	r22
    2ac0:	e1 2c       	mov	r14, r1
    2ac2:	f1 2c       	mov	r15, r1
    2ac4:	8e 01       	movw	r16, r28
    2ac6:	20 91 18 01 	lds	r18, 0x0118
    2aca:	30 91 19 01 	lds	r19, 0x0119
    2ace:	40 91 1a 01 	lds	r20, 0x011A
    2ad2:	50 91 1b 01 	lds	r21, 0x011B
    2ad6:	60 91 1c 01 	lds	r22, 0x011C
    2ada:	70 91 1d 01 	lds	r23, 0x011D
    2ade:	80 91 1e 01 	lds	r24, 0x011E
    2ae2:	90 91 1f 01 	lds	r25, 0x011F
    2ae6:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <CalcCurvedPath>
    CalcStraightPath(frontLeftLeg,res,res,-startPositionX_g,startPositionY_g+stepLength_g/2,startPositionZ_g,-startPositionX_g,startPositionY_g-stepLength_g/2,startPositionZ_g);
    2aea:	e0 90 34 01 	lds	r14, 0x0134
    2aee:	f0 90 35 01 	lds	r15, 0x0135
    2af2:	00 91 38 01 	lds	r16, 0x0138
    2af6:	10 91 39 01 	lds	r17, 0x0139
    2afa:	8d b7       	in	r24, 0x3d	; 61
    2afc:	9e b7       	in	r25, 0x3e	; 62
    2afe:	44 96       	adiw	r24, 0x14	; 20
    2b00:	0f b6       	in	r0, 0x3f	; 63
    2b02:	f8 94       	cli
    2b04:	9e bf       	out	0x3e, r25	; 62
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	8d bf       	out	0x3d, r24	; 61
    2b0a:	11 23       	and	r17, r17
    2b0c:	14 f4       	brge	.+4      	; 0x2b12 <MakeTrotGait+0x122>
    2b0e:	0f 5f       	subi	r16, 0xFF	; 255
    2b10:	1f 4f       	sbci	r17, 0xFF	; 255
    2b12:	15 95       	asr	r17
    2b14:	07 95       	ror	r16
    2b16:	60 91 32 01 	lds	r22, 0x0132
    2b1a:	70 91 33 01 	lds	r23, 0x0133
    2b1e:	88 27       	eor	r24, r24
    2b20:	77 fd       	sbrc	r23, 7
    2b22:	80 95       	com	r24
    2b24:	98 2f       	mov	r25, r24
    2b26:	84 d4       	rcall	.+2312   	; 0x3430 <__floatsisf>
    2b28:	96 2e       	mov	r9, r22
    2b2a:	87 2e       	mov	r8, r23
    2b2c:	78 2e       	mov	r7, r24
    2b2e:	69 2e       	mov	r6, r25
    2b30:	60 91 36 01 	lds	r22, 0x0136
    2b34:	70 91 37 01 	lds	r23, 0x0137
    2b38:	71 95       	neg	r23
    2b3a:	61 95       	neg	r22
    2b3c:	71 09       	sbc	r23, r1
    2b3e:	88 27       	eor	r24, r24
    2b40:	77 fd       	sbrc	r23, 7
    2b42:	80 95       	com	r24
    2b44:	98 2f       	mov	r25, r24
    2b46:	74 d4       	rcall	.+2280   	; 0x3430 <__floatsisf>
    2b48:	a6 2e       	mov	r10, r22
    2b4a:	b7 2e       	mov	r11, r23
    2b4c:	c8 2e       	mov	r12, r24
    2b4e:	d9 2e       	mov	r13, r25
    2b50:	6f 92       	push	r6
    2b52:	7f 92       	push	r7
    2b54:	8f 92       	push	r8
    2b56:	9f 92       	push	r9
    2b58:	b7 01       	movw	r22, r14
    2b5a:	60 1b       	sub	r22, r16
    2b5c:	71 0b       	sbc	r23, r17
    2b5e:	88 27       	eor	r24, r24
    2b60:	77 fd       	sbrc	r23, 7
    2b62:	80 95       	com	r24
    2b64:	98 2f       	mov	r25, r24
    2b66:	64 d4       	rcall	.+2248   	; 0x3430 <__floatsisf>
    2b68:	9f 93       	push	r25
    2b6a:	8f 93       	push	r24
    2b6c:	7f 93       	push	r23
    2b6e:	6f 93       	push	r22
    2b70:	df 92       	push	r13
    2b72:	cf 92       	push	r12
    2b74:	bf 92       	push	r11
    2b76:	af 92       	push	r10
    2b78:	6f 92       	push	r6
    2b7a:	7f 92       	push	r7
    2b7c:	8f 92       	push	r8
    2b7e:	9f 92       	push	r9
    2b80:	b7 01       	movw	r22, r14
    2b82:	60 0f       	add	r22, r16
    2b84:	71 1f       	adc	r23, r17
    2b86:	88 27       	eor	r24, r24
    2b88:	77 fd       	sbrc	r23, 7
    2b8a:	80 95       	com	r24
    2b8c:	98 2f       	mov	r25, r24
    2b8e:	50 d4       	rcall	.+2208   	; 0x3430 <__floatsisf>
    2b90:	9f 93       	push	r25
    2b92:	8f 93       	push	r24
    2b94:	7f 93       	push	r23
    2b96:	6f 93       	push	r22
    2b98:	7e 01       	movw	r14, r28
    2b9a:	8e 01       	movw	r16, r28
    2b9c:	20 91 18 01 	lds	r18, 0x0118
    2ba0:	30 91 19 01 	lds	r19, 0x0119
    2ba4:	40 91 1a 01 	lds	r20, 0x011A
    2ba8:	50 91 1b 01 	lds	r21, 0x011B
    2bac:	60 91 1c 01 	lds	r22, 0x011C
    2bb0:	70 91 1d 01 	lds	r23, 0x011D
    2bb4:	80 91 1e 01 	lds	r24, 0x011E
    2bb8:	90 91 1f 01 	lds	r25, 0x011F
    2bbc:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <CalcStraightPath>
    
    CalcCurvedPath(rearRightLeg,res,0,startPositionX_g,-startPositionY_g-stepLength_g/2,startPositionZ_g,startPositionX_g,-startPositionY_g+stepLength_g/2,startPositionZ_g);
    2bc0:	00 91 38 01 	lds	r16, 0x0138
    2bc4:	10 91 39 01 	lds	r17, 0x0139
    2bc8:	8d b7       	in	r24, 0x3d	; 61
    2bca:	9e b7       	in	r25, 0x3e	; 62
    2bcc:	44 96       	adiw	r24, 0x14	; 20
    2bce:	0f b6       	in	r0, 0x3f	; 63
    2bd0:	f8 94       	cli
    2bd2:	9e bf       	out	0x3e, r25	; 62
    2bd4:	0f be       	out	0x3f, r0	; 63
    2bd6:	8d bf       	out	0x3d, r24	; 61
    2bd8:	11 23       	and	r17, r17
    2bda:	14 f4       	brge	.+4      	; 0x2be0 <MakeTrotGait+0x1f0>
    2bdc:	0f 5f       	subi	r16, 0xFF	; 255
    2bde:	1f 4f       	sbci	r17, 0xFF	; 255
    2be0:	15 95       	asr	r17
    2be2:	07 95       	ror	r16
    2be4:	e0 90 34 01 	lds	r14, 0x0134
    2be8:	f0 90 35 01 	lds	r15, 0x0135
    2bec:	60 91 32 01 	lds	r22, 0x0132
    2bf0:	70 91 33 01 	lds	r23, 0x0133
    2bf4:	88 27       	eor	r24, r24
    2bf6:	77 fd       	sbrc	r23, 7
    2bf8:	80 95       	com	r24
    2bfa:	98 2f       	mov	r25, r24
    2bfc:	19 d4       	rcall	.+2098   	; 0x3430 <__floatsisf>
    2bfe:	96 2e       	mov	r9, r22
    2c00:	87 2e       	mov	r8, r23
    2c02:	78 2e       	mov	r7, r24
    2c04:	69 2e       	mov	r6, r25
    2c06:	60 91 36 01 	lds	r22, 0x0136
    2c0a:	70 91 37 01 	lds	r23, 0x0137
    2c0e:	88 27       	eor	r24, r24
    2c10:	77 fd       	sbrc	r23, 7
    2c12:	80 95       	com	r24
    2c14:	98 2f       	mov	r25, r24
    2c16:	0c d4       	rcall	.+2072   	; 0x3430 <__floatsisf>
    2c18:	a6 2e       	mov	r10, r22
    2c1a:	b7 2e       	mov	r11, r23
    2c1c:	c8 2e       	mov	r12, r24
    2c1e:	d9 2e       	mov	r13, r25
    2c20:	6f 92       	push	r6
    2c22:	7f 92       	push	r7
    2c24:	8f 92       	push	r8
    2c26:	9f 92       	push	r9
    2c28:	b8 01       	movw	r22, r16
    2c2a:	6e 19       	sub	r22, r14
    2c2c:	7f 09       	sbc	r23, r15
    2c2e:	88 27       	eor	r24, r24
    2c30:	77 fd       	sbrc	r23, 7
    2c32:	80 95       	com	r24
    2c34:	98 2f       	mov	r25, r24
    2c36:	fc d3       	rcall	.+2040   	; 0x3430 <__floatsisf>
    2c38:	9f 93       	push	r25
    2c3a:	8f 93       	push	r24
    2c3c:	7f 93       	push	r23
    2c3e:	6f 93       	push	r22
    2c40:	df 92       	push	r13
    2c42:	cf 92       	push	r12
    2c44:	bf 92       	push	r11
    2c46:	af 92       	push	r10
    2c48:	6f 92       	push	r6
    2c4a:	7f 92       	push	r7
    2c4c:	8f 92       	push	r8
    2c4e:	9f 92       	push	r9
    2c50:	66 27       	eor	r22, r22
    2c52:	77 27       	eor	r23, r23
    2c54:	6e 19       	sub	r22, r14
    2c56:	7f 09       	sbc	r23, r15
    2c58:	60 1b       	sub	r22, r16
    2c5a:	71 0b       	sbc	r23, r17
    2c5c:	88 27       	eor	r24, r24
    2c5e:	77 fd       	sbrc	r23, 7
    2c60:	80 95       	com	r24
    2c62:	98 2f       	mov	r25, r24
    2c64:	e5 d3       	rcall	.+1994   	; 0x3430 <__floatsisf>
    2c66:	9f 93       	push	r25
    2c68:	8f 93       	push	r24
    2c6a:	7f 93       	push	r23
    2c6c:	6f 93       	push	r22
    2c6e:	e1 2c       	mov	r14, r1
    2c70:	f1 2c       	mov	r15, r1
    2c72:	8e 01       	movw	r16, r28
    2c74:	20 91 00 01 	lds	r18, 0x0100
    2c78:	30 91 01 01 	lds	r19, 0x0101
    2c7c:	40 91 02 01 	lds	r20, 0x0102
    2c80:	50 91 03 01 	lds	r21, 0x0103
    2c84:	60 91 04 01 	lds	r22, 0x0104
    2c88:	70 91 05 01 	lds	r23, 0x0105
    2c8c:	80 91 06 01 	lds	r24, 0x0106
    2c90:	90 91 07 01 	lds	r25, 0x0107
    2c94:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <CalcCurvedPath>
    CalcStraightPath(rearRightLeg,res,res,startPositionX_g,-startPositionY_g+stepLength_g/2,startPositionZ_g,startPositionX_g,-startPositionY_g-stepLength_g/2,startPositionZ_g);
    2c98:	00 91 34 01 	lds	r16, 0x0134
    2c9c:	10 91 35 01 	lds	r17, 0x0135
    2ca0:	e0 90 38 01 	lds	r14, 0x0138
    2ca4:	f0 90 39 01 	lds	r15, 0x0139
    2ca8:	8d b7       	in	r24, 0x3d	; 61
    2caa:	9e b7       	in	r25, 0x3e	; 62
    2cac:	44 96       	adiw	r24, 0x14	; 20
    2cae:	0f b6       	in	r0, 0x3f	; 63
    2cb0:	f8 94       	cli
    2cb2:	9e bf       	out	0x3e, r25	; 62
    2cb4:	0f be       	out	0x3f, r0	; 63
    2cb6:	8d bf       	out	0x3d, r24	; 61
    2cb8:	ff 20       	and	r15, r15
    2cba:	1c f4       	brge	.+6      	; 0x2cc2 <MakeTrotGait+0x2d2>
    2cbc:	9f ef       	ldi	r25, 0xFF	; 255
    2cbe:	e9 1a       	sub	r14, r25
    2cc0:	f9 0a       	sbc	r15, r25
    2cc2:	f5 94       	asr	r15
    2cc4:	e7 94       	ror	r14
    2cc6:	60 91 32 01 	lds	r22, 0x0132
    2cca:	70 91 33 01 	lds	r23, 0x0133
    2cce:	88 27       	eor	r24, r24
    2cd0:	77 fd       	sbrc	r23, 7
    2cd2:	80 95       	com	r24
    2cd4:	98 2f       	mov	r25, r24
    2cd6:	ac d3       	rcall	.+1880   	; 0x3430 <__floatsisf>
    2cd8:	96 2e       	mov	r9, r22
    2cda:	87 2e       	mov	r8, r23
    2cdc:	78 2e       	mov	r7, r24
    2cde:	69 2e       	mov	r6, r25
    2ce0:	60 91 36 01 	lds	r22, 0x0136
    2ce4:	70 91 37 01 	lds	r23, 0x0137
    2ce8:	88 27       	eor	r24, r24
    2cea:	77 fd       	sbrc	r23, 7
    2cec:	80 95       	com	r24
    2cee:	98 2f       	mov	r25, r24
    2cf0:	9f d3       	rcall	.+1854   	; 0x3430 <__floatsisf>
    2cf2:	a6 2e       	mov	r10, r22
    2cf4:	b7 2e       	mov	r11, r23
    2cf6:	c8 2e       	mov	r12, r24
    2cf8:	d9 2e       	mov	r13, r25
    2cfa:	6f 92       	push	r6
    2cfc:	7f 92       	push	r7
    2cfe:	8f 92       	push	r8
    2d00:	9f 92       	push	r9
    2d02:	66 27       	eor	r22, r22
    2d04:	77 27       	eor	r23, r23
    2d06:	60 1b       	sub	r22, r16
    2d08:	71 0b       	sbc	r23, r17
    2d0a:	6e 19       	sub	r22, r14
    2d0c:	7f 09       	sbc	r23, r15
    2d0e:	88 27       	eor	r24, r24
    2d10:	77 fd       	sbrc	r23, 7
    2d12:	80 95       	com	r24
    2d14:	98 2f       	mov	r25, r24
    2d16:	8c d3       	rcall	.+1816   	; 0x3430 <__floatsisf>
    2d18:	9f 93       	push	r25
    2d1a:	8f 93       	push	r24
    2d1c:	7f 93       	push	r23
    2d1e:	6f 93       	push	r22
    2d20:	df 92       	push	r13
    2d22:	cf 92       	push	r12
    2d24:	bf 92       	push	r11
    2d26:	af 92       	push	r10
    2d28:	6f 92       	push	r6
    2d2a:	7f 92       	push	r7
    2d2c:	8f 92       	push	r8
    2d2e:	9f 92       	push	r9
    2d30:	b7 01       	movw	r22, r14
    2d32:	60 1b       	sub	r22, r16
    2d34:	71 0b       	sbc	r23, r17
    2d36:	88 27       	eor	r24, r24
    2d38:	77 fd       	sbrc	r23, 7
    2d3a:	80 95       	com	r24
    2d3c:	98 2f       	mov	r25, r24
    2d3e:	78 d3       	rcall	.+1776   	; 0x3430 <__floatsisf>
    2d40:	9f 93       	push	r25
    2d42:	8f 93       	push	r24
    2d44:	7f 93       	push	r23
    2d46:	6f 93       	push	r22
    2d48:	7e 01       	movw	r14, r28
    2d4a:	8e 01       	movw	r16, r28
    2d4c:	20 91 00 01 	lds	r18, 0x0100
    2d50:	30 91 01 01 	lds	r19, 0x0101
    2d54:	40 91 02 01 	lds	r20, 0x0102
    2d58:	50 91 03 01 	lds	r21, 0x0103
    2d5c:	60 91 04 01 	lds	r22, 0x0104
    2d60:	70 91 05 01 	lds	r23, 0x0105
    2d64:	80 91 06 01 	lds	r24, 0x0106
    2d68:	90 91 07 01 	lds	r25, 0x0107
    2d6c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <CalcStraightPath>
    
    CalcStraightPath(rearLeftLeg,res,0,-startPositionX_g,-startPositionY_g+stepLength_g/2,startPositionZ_g,-startPositionX_g,-startPositionY_g-stepLength_g/2,startPositionZ_g);
    2d70:	00 91 34 01 	lds	r16, 0x0134
    2d74:	10 91 35 01 	lds	r17, 0x0135
    2d78:	e0 90 38 01 	lds	r14, 0x0138
    2d7c:	f0 90 39 01 	lds	r15, 0x0139
    2d80:	8d b7       	in	r24, 0x3d	; 61
    2d82:	9e b7       	in	r25, 0x3e	; 62
    2d84:	44 96       	adiw	r24, 0x14	; 20
    2d86:	0f b6       	in	r0, 0x3f	; 63
    2d88:	f8 94       	cli
    2d8a:	9e bf       	out	0x3e, r25	; 62
    2d8c:	0f be       	out	0x3f, r0	; 63
    2d8e:	8d bf       	out	0x3d, r24	; 61
    2d90:	ff 20       	and	r15, r15
    2d92:	1c f4       	brge	.+6      	; 0x2d9a <MakeTrotGait+0x3aa>
    2d94:	9f ef       	ldi	r25, 0xFF	; 255
    2d96:	e9 1a       	sub	r14, r25
    2d98:	f9 0a       	sbc	r15, r25
    2d9a:	f5 94       	asr	r15
    2d9c:	e7 94       	ror	r14
    2d9e:	60 91 32 01 	lds	r22, 0x0132
    2da2:	70 91 33 01 	lds	r23, 0x0133
    2da6:	88 27       	eor	r24, r24
    2da8:	77 fd       	sbrc	r23, 7
    2daa:	80 95       	com	r24
    2dac:	98 2f       	mov	r25, r24
    2dae:	40 d3       	rcall	.+1664   	; 0x3430 <__floatsisf>
    2db0:	96 2e       	mov	r9, r22
    2db2:	87 2e       	mov	r8, r23
    2db4:	78 2e       	mov	r7, r24
    2db6:	69 2e       	mov	r6, r25
    2db8:	60 91 36 01 	lds	r22, 0x0136
    2dbc:	70 91 37 01 	lds	r23, 0x0137
    2dc0:	71 95       	neg	r23
    2dc2:	61 95       	neg	r22
    2dc4:	71 09       	sbc	r23, r1
    2dc6:	88 27       	eor	r24, r24
    2dc8:	77 fd       	sbrc	r23, 7
    2dca:	80 95       	com	r24
    2dcc:	98 2f       	mov	r25, r24
    2dce:	30 d3       	rcall	.+1632   	; 0x3430 <__floatsisf>
    2dd0:	a6 2e       	mov	r10, r22
    2dd2:	b7 2e       	mov	r11, r23
    2dd4:	c8 2e       	mov	r12, r24
    2dd6:	d9 2e       	mov	r13, r25
    2dd8:	6f 92       	push	r6
    2dda:	7f 92       	push	r7
    2ddc:	8f 92       	push	r8
    2dde:	9f 92       	push	r9
    2de0:	66 27       	eor	r22, r22
    2de2:	77 27       	eor	r23, r23
    2de4:	60 1b       	sub	r22, r16
    2de6:	71 0b       	sbc	r23, r17
    2de8:	6e 19       	sub	r22, r14
    2dea:	7f 09       	sbc	r23, r15
    2dec:	88 27       	eor	r24, r24
    2dee:	77 fd       	sbrc	r23, 7
    2df0:	80 95       	com	r24
    2df2:	98 2f       	mov	r25, r24
    2df4:	1d d3       	rcall	.+1594   	; 0x3430 <__floatsisf>
    2df6:	9f 93       	push	r25
    2df8:	8f 93       	push	r24
    2dfa:	7f 93       	push	r23
    2dfc:	6f 93       	push	r22
    2dfe:	df 92       	push	r13
    2e00:	cf 92       	push	r12
    2e02:	bf 92       	push	r11
    2e04:	af 92       	push	r10
    2e06:	6f 92       	push	r6
    2e08:	7f 92       	push	r7
    2e0a:	8f 92       	push	r8
    2e0c:	9f 92       	push	r9
    2e0e:	b7 01       	movw	r22, r14
    2e10:	60 1b       	sub	r22, r16
    2e12:	71 0b       	sbc	r23, r17
    2e14:	88 27       	eor	r24, r24
    2e16:	77 fd       	sbrc	r23, 7
    2e18:	80 95       	com	r24
    2e1a:	98 2f       	mov	r25, r24
    2e1c:	09 d3       	rcall	.+1554   	; 0x3430 <__floatsisf>
    2e1e:	9f 93       	push	r25
    2e20:	8f 93       	push	r24
    2e22:	7f 93       	push	r23
    2e24:	6f 93       	push	r22
    2e26:	e1 2c       	mov	r14, r1
    2e28:	f1 2c       	mov	r15, r1
    2e2a:	8e 01       	movw	r16, r28
    2e2c:	20 91 08 01 	lds	r18, 0x0108
    2e30:	30 91 09 01 	lds	r19, 0x0109
    2e34:	40 91 0a 01 	lds	r20, 0x010A
    2e38:	50 91 0b 01 	lds	r21, 0x010B
    2e3c:	60 91 0c 01 	lds	r22, 0x010C
    2e40:	70 91 0d 01 	lds	r23, 0x010D
    2e44:	80 91 0e 01 	lds	r24, 0x010E
    2e48:	90 91 0f 01 	lds	r25, 0x010F
    2e4c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <CalcStraightPath>
    CalcCurvedPath(rearLeftLeg,res,res,-startPositionX_g,-startPositionY_g-stepLength_g/2,startPositionZ_g,-startPositionX_g,-startPositionY_g+stepLength_g/2,startPositionZ_g);
    2e50:	00 91 38 01 	lds	r16, 0x0138
    2e54:	10 91 39 01 	lds	r17, 0x0139
    2e58:	8d b7       	in	r24, 0x3d	; 61
    2e5a:	9e b7       	in	r25, 0x3e	; 62
    2e5c:	44 96       	adiw	r24, 0x14	; 20
    2e5e:	0f b6       	in	r0, 0x3f	; 63
    2e60:	f8 94       	cli
    2e62:	9e bf       	out	0x3e, r25	; 62
    2e64:	0f be       	out	0x3f, r0	; 63
    2e66:	8d bf       	out	0x3d, r24	; 61
    2e68:	11 23       	and	r17, r17
    2e6a:	14 f4       	brge	.+4      	; 0x2e70 <MakeTrotGait+0x480>
    2e6c:	0f 5f       	subi	r16, 0xFF	; 255
    2e6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e70:	15 95       	asr	r17
    2e72:	07 95       	ror	r16
    2e74:	e0 90 34 01 	lds	r14, 0x0134
    2e78:	f0 90 35 01 	lds	r15, 0x0135
    2e7c:	60 91 32 01 	lds	r22, 0x0132
    2e80:	70 91 33 01 	lds	r23, 0x0133
    2e84:	88 27       	eor	r24, r24
    2e86:	77 fd       	sbrc	r23, 7
    2e88:	80 95       	com	r24
    2e8a:	98 2f       	mov	r25, r24
    2e8c:	d1 d2       	rcall	.+1442   	; 0x3430 <__floatsisf>
    2e8e:	96 2e       	mov	r9, r22
    2e90:	87 2e       	mov	r8, r23
    2e92:	78 2e       	mov	r7, r24
    2e94:	69 2e       	mov	r6, r25
    2e96:	60 91 36 01 	lds	r22, 0x0136
    2e9a:	70 91 37 01 	lds	r23, 0x0137
    2e9e:	71 95       	neg	r23
    2ea0:	61 95       	neg	r22
    2ea2:	71 09       	sbc	r23, r1
    2ea4:	88 27       	eor	r24, r24
    2ea6:	77 fd       	sbrc	r23, 7
    2ea8:	80 95       	com	r24
    2eaa:	98 2f       	mov	r25, r24
    2eac:	c1 d2       	rcall	.+1410   	; 0x3430 <__floatsisf>
    2eae:	a6 2e       	mov	r10, r22
    2eb0:	b7 2e       	mov	r11, r23
    2eb2:	c8 2e       	mov	r12, r24
    2eb4:	d9 2e       	mov	r13, r25
    2eb6:	6f 92       	push	r6
    2eb8:	7f 92       	push	r7
    2eba:	8f 92       	push	r8
    2ebc:	9f 92       	push	r9
    2ebe:	b8 01       	movw	r22, r16
    2ec0:	6e 19       	sub	r22, r14
    2ec2:	7f 09       	sbc	r23, r15
    2ec4:	88 27       	eor	r24, r24
    2ec6:	77 fd       	sbrc	r23, 7
    2ec8:	80 95       	com	r24
    2eca:	98 2f       	mov	r25, r24
    2ecc:	b1 d2       	rcall	.+1378   	; 0x3430 <__floatsisf>
    2ece:	9f 93       	push	r25
    2ed0:	8f 93       	push	r24
    2ed2:	7f 93       	push	r23
    2ed4:	6f 93       	push	r22
    2ed6:	df 92       	push	r13
    2ed8:	cf 92       	push	r12
    2eda:	bf 92       	push	r11
    2edc:	af 92       	push	r10
    2ede:	6f 92       	push	r6
    2ee0:	7f 92       	push	r7
    2ee2:	8f 92       	push	r8
    2ee4:	9f 92       	push	r9
    2ee6:	66 27       	eor	r22, r22
    2ee8:	77 27       	eor	r23, r23
    2eea:	6e 19       	sub	r22, r14
    2eec:	7f 09       	sbc	r23, r15
    2eee:	60 1b       	sub	r22, r16
    2ef0:	71 0b       	sbc	r23, r17
    2ef2:	88 27       	eor	r24, r24
    2ef4:	77 fd       	sbrc	r23, 7
    2ef6:	80 95       	com	r24
    2ef8:	98 2f       	mov	r25, r24
    2efa:	9a d2       	rcall	.+1332   	; 0x3430 <__floatsisf>
    2efc:	9f 93       	push	r25
    2efe:	8f 93       	push	r24
    2f00:	7f 93       	push	r23
    2f02:	6f 93       	push	r22
    2f04:	7e 01       	movw	r14, r28
    2f06:	8e 01       	movw	r16, r28
    2f08:	20 91 08 01 	lds	r18, 0x0108
    2f0c:	30 91 09 01 	lds	r19, 0x0109
    2f10:	40 91 0a 01 	lds	r20, 0x010A
    2f14:	50 91 0b 01 	lds	r21, 0x010B
    2f18:	60 91 0c 01 	lds	r22, 0x010C
    2f1c:	70 91 0d 01 	lds	r23, 0x010D
    2f20:	80 91 0e 01 	lds	r24, 0x010E
    2f24:	90 91 0f 01 	lds	r25, 0x010F
    2f28:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <CalcCurvedPath>
    
    CalcStraightPath(frontRightLeg,res,0,startPositionX_g,startPositionY_g+stepLength_g/2,startPositionZ_g,startPositionX_g,startPositionY_g-stepLength_g/2,startPositionZ_g);
    2f2c:	e0 90 34 01 	lds	r14, 0x0134
    2f30:	f0 90 35 01 	lds	r15, 0x0135
    2f34:	00 91 38 01 	lds	r16, 0x0138
    2f38:	10 91 39 01 	lds	r17, 0x0139
    2f3c:	8d b7       	in	r24, 0x3d	; 61
    2f3e:	9e b7       	in	r25, 0x3e	; 62
    2f40:	44 96       	adiw	r24, 0x14	; 20
    2f42:	0f b6       	in	r0, 0x3f	; 63
    2f44:	f8 94       	cli
    2f46:	9e bf       	out	0x3e, r25	; 62
    2f48:	0f be       	out	0x3f, r0	; 63
    2f4a:	8d bf       	out	0x3d, r24	; 61
    2f4c:	11 23       	and	r17, r17
    2f4e:	14 f4       	brge	.+4      	; 0x2f54 <MakeTrotGait+0x564>
    2f50:	0f 5f       	subi	r16, 0xFF	; 255
    2f52:	1f 4f       	sbci	r17, 0xFF	; 255
    2f54:	15 95       	asr	r17
    2f56:	07 95       	ror	r16
    2f58:	60 91 32 01 	lds	r22, 0x0132
    2f5c:	70 91 33 01 	lds	r23, 0x0133
    2f60:	88 27       	eor	r24, r24
    2f62:	77 fd       	sbrc	r23, 7
    2f64:	80 95       	com	r24
    2f66:	98 2f       	mov	r25, r24
    2f68:	63 d2       	rcall	.+1222   	; 0x3430 <__floatsisf>
    2f6a:	96 2e       	mov	r9, r22
    2f6c:	87 2e       	mov	r8, r23
    2f6e:	78 2e       	mov	r7, r24
    2f70:	69 2e       	mov	r6, r25
    2f72:	60 91 36 01 	lds	r22, 0x0136
    2f76:	70 91 37 01 	lds	r23, 0x0137
    2f7a:	88 27       	eor	r24, r24
    2f7c:	77 fd       	sbrc	r23, 7
    2f7e:	80 95       	com	r24
    2f80:	98 2f       	mov	r25, r24
    2f82:	56 d2       	rcall	.+1196   	; 0x3430 <__floatsisf>
    2f84:	a6 2e       	mov	r10, r22
    2f86:	b7 2e       	mov	r11, r23
    2f88:	c8 2e       	mov	r12, r24
    2f8a:	d9 2e       	mov	r13, r25
    2f8c:	6f 92       	push	r6
    2f8e:	7f 92       	push	r7
    2f90:	8f 92       	push	r8
    2f92:	9f 92       	push	r9
    2f94:	b7 01       	movw	r22, r14
    2f96:	60 1b       	sub	r22, r16
    2f98:	71 0b       	sbc	r23, r17
    2f9a:	88 27       	eor	r24, r24
    2f9c:	77 fd       	sbrc	r23, 7
    2f9e:	80 95       	com	r24
    2fa0:	98 2f       	mov	r25, r24
    2fa2:	46 d2       	rcall	.+1164   	; 0x3430 <__floatsisf>
    2fa4:	9f 93       	push	r25
    2fa6:	8f 93       	push	r24
    2fa8:	7f 93       	push	r23
    2faa:	6f 93       	push	r22
    2fac:	df 92       	push	r13
    2fae:	cf 92       	push	r12
    2fb0:	bf 92       	push	r11
    2fb2:	af 92       	push	r10
    2fb4:	6f 92       	push	r6
    2fb6:	7f 92       	push	r7
    2fb8:	8f 92       	push	r8
    2fba:	9f 92       	push	r9
    2fbc:	b7 01       	movw	r22, r14
    2fbe:	60 0f       	add	r22, r16
    2fc0:	71 1f       	adc	r23, r17
    2fc2:	88 27       	eor	r24, r24
    2fc4:	77 fd       	sbrc	r23, 7
    2fc6:	80 95       	com	r24
    2fc8:	98 2f       	mov	r25, r24
    2fca:	32 d2       	rcall	.+1124   	; 0x3430 <__floatsisf>
    2fcc:	9f 93       	push	r25
    2fce:	8f 93       	push	r24
    2fd0:	7f 93       	push	r23
    2fd2:	6f 93       	push	r22
    2fd4:	e1 2c       	mov	r14, r1
    2fd6:	f1 2c       	mov	r15, r1
    2fd8:	8e 01       	movw	r16, r28
    2fda:	20 91 10 01 	lds	r18, 0x0110
    2fde:	30 91 11 01 	lds	r19, 0x0111
    2fe2:	40 91 12 01 	lds	r20, 0x0112
    2fe6:	50 91 13 01 	lds	r21, 0x0113
    2fea:	60 91 14 01 	lds	r22, 0x0114
    2fee:	70 91 15 01 	lds	r23, 0x0115
    2ff2:	80 91 16 01 	lds	r24, 0x0116
    2ff6:	90 91 17 01 	lds	r25, 0x0117
    2ffa:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <CalcStraightPath>
    CalcCurvedPath(frontRightLeg,res,res,startPositionX_g,startPositionY_g-stepLength_g/2,startPositionZ_g,startPositionX_g,startPositionY_g+stepLength_g/2,startPositionZ_g);
    2ffe:	c0 90 38 01 	lds	r12, 0x0138
    3002:	d0 90 39 01 	lds	r13, 0x0139
    3006:	8d b7       	in	r24, 0x3d	; 61
    3008:	9e b7       	in	r25, 0x3e	; 62
    300a:	44 96       	adiw	r24, 0x14	; 20
    300c:	0f b6       	in	r0, 0x3f	; 63
    300e:	f8 94       	cli
    3010:	9e bf       	out	0x3e, r25	; 62
    3012:	0f be       	out	0x3f, r0	; 63
    3014:	8d bf       	out	0x3d, r24	; 61
    3016:	dd 20       	and	r13, r13
    3018:	1c f4       	brge	.+6      	; 0x3020 <MakeTrotGait+0x630>
    301a:	9f ef       	ldi	r25, 0xFF	; 255
    301c:	c9 1a       	sub	r12, r25
    301e:	d9 0a       	sbc	r13, r25
    3020:	d5 94       	asr	r13
    3022:	c7 94       	ror	r12
    3024:	a0 90 34 01 	lds	r10, 0x0134
    3028:	b0 90 35 01 	lds	r11, 0x0135
    302c:	60 91 32 01 	lds	r22, 0x0132
    3030:	70 91 33 01 	lds	r23, 0x0133
    3034:	88 27       	eor	r24, r24
    3036:	77 fd       	sbrc	r23, 7
    3038:	80 95       	com	r24
    303a:	98 2f       	mov	r25, r24
    303c:	f9 d1       	rcall	.+1010   	; 0x3430 <__floatsisf>
    303e:	96 2e       	mov	r9, r22
    3040:	87 2e       	mov	r8, r23
    3042:	78 2e       	mov	r7, r24
    3044:	69 2e       	mov	r6, r25
    3046:	60 91 36 01 	lds	r22, 0x0136
    304a:	70 91 37 01 	lds	r23, 0x0137
    304e:	88 27       	eor	r24, r24
    3050:	77 fd       	sbrc	r23, 7
    3052:	80 95       	com	r24
    3054:	98 2f       	mov	r25, r24
    3056:	ec d1       	rcall	.+984    	; 0x3430 <__floatsisf>
    3058:	e6 2e       	mov	r14, r22
    305a:	f7 2e       	mov	r15, r23
    305c:	08 2f       	mov	r16, r24
    305e:	19 2f       	mov	r17, r25
    3060:	6f 92       	push	r6
    3062:	7f 92       	push	r7
    3064:	8f 92       	push	r8
    3066:	9f 92       	push	r9
    3068:	b6 01       	movw	r22, r12
    306a:	6a 0d       	add	r22, r10
    306c:	7b 1d       	adc	r23, r11
    306e:	88 27       	eor	r24, r24
    3070:	77 fd       	sbrc	r23, 7
    3072:	80 95       	com	r24
    3074:	98 2f       	mov	r25, r24
    3076:	dc d1       	rcall	.+952    	; 0x3430 <__floatsisf>
    3078:	9f 93       	push	r25
    307a:	8f 93       	push	r24
    307c:	7f 93       	push	r23
    307e:	6f 93       	push	r22
    3080:	1f 93       	push	r17
    3082:	0f 93       	push	r16
    3084:	ff 92       	push	r15
    3086:	ef 92       	push	r14
    3088:	6f 92       	push	r6
    308a:	7f 92       	push	r7
    308c:	8f 92       	push	r8
    308e:	9f 92       	push	r9
    3090:	b5 01       	movw	r22, r10
    3092:	6c 19       	sub	r22, r12
    3094:	7d 09       	sbc	r23, r13
    3096:	88 27       	eor	r24, r24
    3098:	77 fd       	sbrc	r23, 7
    309a:	80 95       	com	r24
    309c:	98 2f       	mov	r25, r24
    309e:	c8 d1       	rcall	.+912    	; 0x3430 <__floatsisf>
    30a0:	9f 93       	push	r25
    30a2:	8f 93       	push	r24
    30a4:	7f 93       	push	r23
    30a6:	6f 93       	push	r22
    30a8:	ae 2c       	mov	r10, r14
    30aa:	bf 2c       	mov	r11, r15
    30ac:	c0 2e       	mov	r12, r16
    30ae:	d1 2e       	mov	r13, r17
    30b0:	7e 01       	movw	r14, r28
    30b2:	8e 01       	movw	r16, r28
    30b4:	20 91 10 01 	lds	r18, 0x0110
    30b8:	30 91 11 01 	lds	r19, 0x0111
    30bc:	40 91 12 01 	lds	r20, 0x0112
    30c0:	50 91 13 01 	lds	r21, 0x0113
    30c4:	60 91 14 01 	lds	r22, 0x0114
    30c8:	70 91 15 01 	lds	r23, 0x0115
    30cc:	80 91 16 01 	lds	r24, 0x0116
    30d0:	90 91 17 01 	lds	r25, 0x0117
    30d4:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <CalcCurvedPath>
    30d8:	8d b7       	in	r24, 0x3d	; 61
    30da:	9e b7       	in	r25, 0x3e	; 62
    30dc:	44 96       	adiw	r24, 0x14	; 20
    30de:	0f b6       	in	r0, 0x3f	; 63
    30e0:	f8 94       	cli
    30e2:	9e bf       	out	0x3e, r25	; 62
    30e4:	0f be       	out	0x3f, r0	; 63
    30e6:	8d bf       	out	0x3d, r24	; 61

}
    30e8:	df 91       	pop	r29
    30ea:	cf 91       	pop	r28
    30ec:	1f 91       	pop	r17
    30ee:	0f 91       	pop	r16
    30f0:	ff 90       	pop	r15
    30f2:	ef 90       	pop	r14
    30f4:	df 90       	pop	r13
    30f6:	cf 90       	pop	r12
    30f8:	bf 90       	pop	r11
    30fa:	af 90       	pop	r10
    30fc:	9f 90       	pop	r9
    30fe:	8f 90       	pop	r8
    3100:	7f 90       	pop	r7
    3102:	6f 90       	pop	r6
    3104:	08 95       	ret

00003106 <main>:


int main(void)
{
    initUSART();
    3106:	0e 94 c8 01 	call	0x390	; 0x390 <initUSART>
    cli();
    310a:	f8 94       	cli
    EICRA = 0b1100; // Stigande flank på INT1 genererar avbrott
    310c:	8c e0       	ldi	r24, 0x0C	; 12
    310e:	80 93 69 00 	sts	0x0069, r24
    EIMSK = (EIMSK | 2); // Möjliggör externa avbrott på INT0, pinne 40  
    3112:	e9 9a       	sbi	0x1d, 1	; 29
    DDRA = 0;
    3114:	11 b8       	out	0x01, r1	; 1
    // MCUCR = (MCUCR | (1 << PUD)); Något som testades för att se om det gjorde något
    //PORTA |= (1 << PORTA0);
     // Möjliggör globala avbrott
    sei();
    3116:	78 94       	sei
    //MoveFrontRightLeg(150,150,0,30);
    currentPos_g = 5;
    3118:	85 e0       	ldi	r24, 0x05	; 5
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	90 93 3b 01 	sts	0x013B, r25
    3120:	80 93 3a 01 	sts	0x013A, r24
    nextPos_g = 6;
    3124:	86 e0       	ldi	r24, 0x06	; 6
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	90 93 23 01 	sts	0x0123, r25
    312c:	80 93 22 01 	sts	0x0122, r24
    MoveDynamixel(3,225 - 45, 10);
    USARTReadStatusPacket();
    MoveDynamixel(5,120 - 45 ,10);
    USARTReadStatusPacket();
    */
    timer0Init();
    3130:	0e 94 91 00 	call	0x122	; 0x122 <timer0Init>
            	totOverflow_g = 0;
            	
        	}
    	}
	}*/
	MakeTrotGait(gaitResolution_g);
    3134:	80 91 2e 01 	lds	r24, 0x012E
    3138:	90 91 2f 01 	lds	r25, 0x012F
    313c:	59 dc       	rcall	.-1870   	; 0x29f0 <MakeTrotGait>
    MoveToStartPosition();
    313e:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <MoveToStartPosition>
    SetLegIncrementPeriod(gaitResolutionTime_g);
    3142:	80 91 2c 01 	lds	r24, 0x012C
    3146:	90 91 2d 01 	lds	r25, 0x012D
    314a:	0e 94 9e 00 	call	0x13c	; 0x13c <SetLegIncrementPeriod>
    314e:	ff cf       	rjmp	.-2      	; 0x314e <main+0x48>

00003150 <acos>:
    3150:	9f 93       	push	r25
    3152:	9f 77       	andi	r25, 0x7F	; 127
    3154:	a8 d1       	rcall	.+848    	; 0x34a6 <__fp_arccos>
    3156:	0f 90       	pop	r0
    3158:	00 20       	and	r0, r0
    315a:	3a f4       	brpl	.+14     	; 0x316a <acos+0x1a>
    315c:	90 58       	subi	r25, 0x80	; 128
    315e:	a2 ea       	ldi	r26, 0xA2	; 162
    3160:	2a ed       	ldi	r18, 0xDA	; 218
    3162:	3f e0       	ldi	r19, 0x0F	; 15
    3164:	49 e4       	ldi	r20, 0x49	; 73
    3166:	50 e4       	ldi	r21, 0x40	; 64
    3168:	13 d0       	rcall	.+38     	; 0x3190 <__addsf3x>
    316a:	f4 c1       	rjmp	.+1000   	; 0x3554 <__fp_round>

0000316c <__subsf3>:
    316c:	50 58       	subi	r21, 0x80	; 128

0000316e <__addsf3>:
    316e:	bb 27       	eor	r27, r27
    3170:	aa 27       	eor	r26, r26
    3172:	0e d0       	rcall	.+28     	; 0x3190 <__addsf3x>
    3174:	ef c1       	rjmp	.+990    	; 0x3554 <__fp_round>
    3176:	e0 d1       	rcall	.+960    	; 0x3538 <__fp_pscA>
    3178:	30 f0       	brcs	.+12     	; 0x3186 <__addsf3+0x18>
    317a:	e5 d1       	rcall	.+970    	; 0x3546 <__fp_pscB>
    317c:	20 f0       	brcs	.+8      	; 0x3186 <__addsf3+0x18>
    317e:	31 f4       	brne	.+12     	; 0x318c <__addsf3+0x1e>
    3180:	9f 3f       	cpi	r25, 0xFF	; 255
    3182:	11 f4       	brne	.+4      	; 0x3188 <__addsf3+0x1a>
    3184:	1e f4       	brtc	.+6      	; 0x318c <__addsf3+0x1e>
    3186:	b0 c1       	rjmp	.+864    	; 0x34e8 <__fp_nan>
    3188:	0e f4       	brtc	.+2      	; 0x318c <__addsf3+0x1e>
    318a:	e0 95       	com	r30
    318c:	e7 fb       	bst	r30, 7
    318e:	a6 c1       	rjmp	.+844    	; 0x34dc <__fp_inf>

00003190 <__addsf3x>:
    3190:	e9 2f       	mov	r30, r25
    3192:	f1 d1       	rcall	.+994    	; 0x3576 <__fp_split3>
    3194:	80 f3       	brcs	.-32     	; 0x3176 <__addsf3+0x8>
    3196:	ba 17       	cp	r27, r26
    3198:	62 07       	cpc	r22, r18
    319a:	73 07       	cpc	r23, r19
    319c:	84 07       	cpc	r24, r20
    319e:	95 07       	cpc	r25, r21
    31a0:	18 f0       	brcs	.+6      	; 0x31a8 <__addsf3x+0x18>
    31a2:	71 f4       	brne	.+28     	; 0x31c0 <__addsf3x+0x30>
    31a4:	9e f5       	brtc	.+102    	; 0x320c <__addsf3x+0x7c>
    31a6:	09 c2       	rjmp	.+1042   	; 0x35ba <__fp_zero>
    31a8:	0e f4       	brtc	.+2      	; 0x31ac <__addsf3x+0x1c>
    31aa:	e0 95       	com	r30
    31ac:	0b 2e       	mov	r0, r27
    31ae:	ba 2f       	mov	r27, r26
    31b0:	a0 2d       	mov	r26, r0
    31b2:	0b 01       	movw	r0, r22
    31b4:	b9 01       	movw	r22, r18
    31b6:	90 01       	movw	r18, r0
    31b8:	0c 01       	movw	r0, r24
    31ba:	ca 01       	movw	r24, r20
    31bc:	a0 01       	movw	r20, r0
    31be:	11 24       	eor	r1, r1
    31c0:	ff 27       	eor	r31, r31
    31c2:	59 1b       	sub	r21, r25
    31c4:	99 f0       	breq	.+38     	; 0x31ec <__addsf3x+0x5c>
    31c6:	59 3f       	cpi	r21, 0xF9	; 249
    31c8:	50 f4       	brcc	.+20     	; 0x31de <__addsf3x+0x4e>
    31ca:	50 3e       	cpi	r21, 0xE0	; 224
    31cc:	68 f1       	brcs	.+90     	; 0x3228 <__addsf3x+0x98>
    31ce:	1a 16       	cp	r1, r26
    31d0:	f0 40       	sbci	r31, 0x00	; 0
    31d2:	a2 2f       	mov	r26, r18
    31d4:	23 2f       	mov	r18, r19
    31d6:	34 2f       	mov	r19, r20
    31d8:	44 27       	eor	r20, r20
    31da:	58 5f       	subi	r21, 0xF8	; 248
    31dc:	f3 cf       	rjmp	.-26     	; 0x31c4 <__addsf3x+0x34>
    31de:	46 95       	lsr	r20
    31e0:	37 95       	ror	r19
    31e2:	27 95       	ror	r18
    31e4:	a7 95       	ror	r26
    31e6:	f0 40       	sbci	r31, 0x00	; 0
    31e8:	53 95       	inc	r21
    31ea:	c9 f7       	brne	.-14     	; 0x31de <__addsf3x+0x4e>
    31ec:	7e f4       	brtc	.+30     	; 0x320c <__addsf3x+0x7c>
    31ee:	1f 16       	cp	r1, r31
    31f0:	ba 0b       	sbc	r27, r26
    31f2:	62 0b       	sbc	r22, r18
    31f4:	73 0b       	sbc	r23, r19
    31f6:	84 0b       	sbc	r24, r20
    31f8:	ba f0       	brmi	.+46     	; 0x3228 <__addsf3x+0x98>
    31fa:	91 50       	subi	r25, 0x01	; 1
    31fc:	a1 f0       	breq	.+40     	; 0x3226 <__addsf3x+0x96>
    31fe:	ff 0f       	add	r31, r31
    3200:	bb 1f       	adc	r27, r27
    3202:	66 1f       	adc	r22, r22
    3204:	77 1f       	adc	r23, r23
    3206:	88 1f       	adc	r24, r24
    3208:	c2 f7       	brpl	.-16     	; 0x31fa <__addsf3x+0x6a>
    320a:	0e c0       	rjmp	.+28     	; 0x3228 <__addsf3x+0x98>
    320c:	ba 0f       	add	r27, r26
    320e:	62 1f       	adc	r22, r18
    3210:	73 1f       	adc	r23, r19
    3212:	84 1f       	adc	r24, r20
    3214:	48 f4       	brcc	.+18     	; 0x3228 <__addsf3x+0x98>
    3216:	87 95       	ror	r24
    3218:	77 95       	ror	r23
    321a:	67 95       	ror	r22
    321c:	b7 95       	ror	r27
    321e:	f7 95       	ror	r31
    3220:	9e 3f       	cpi	r25, 0xFE	; 254
    3222:	08 f0       	brcs	.+2      	; 0x3226 <__addsf3x+0x96>
    3224:	b3 cf       	rjmp	.-154    	; 0x318c <__addsf3+0x1e>
    3226:	93 95       	inc	r25
    3228:	88 0f       	add	r24, r24
    322a:	08 f0       	brcs	.+2      	; 0x322e <__addsf3x+0x9e>
    322c:	99 27       	eor	r25, r25
    322e:	ee 0f       	add	r30, r30
    3230:	97 95       	ror	r25
    3232:	87 95       	ror	r24
    3234:	08 95       	ret
    3236:	80 d1       	rcall	.+768    	; 0x3538 <__fp_pscA>
    3238:	58 f0       	brcs	.+22     	; 0x3250 <__addsf3x+0xc0>
    323a:	80 e8       	ldi	r24, 0x80	; 128
    323c:	91 e0       	ldi	r25, 0x01	; 1
    323e:	09 f4       	brne	.+2      	; 0x3242 <__addsf3x+0xb2>
    3240:	9e ef       	ldi	r25, 0xFE	; 254
    3242:	81 d1       	rcall	.+770    	; 0x3546 <__fp_pscB>
    3244:	28 f0       	brcs	.+10     	; 0x3250 <__addsf3x+0xc0>
    3246:	40 e8       	ldi	r20, 0x80	; 128
    3248:	51 e0       	ldi	r21, 0x01	; 1
    324a:	59 f4       	brne	.+22     	; 0x3262 <atan2+0xe>
    324c:	5e ef       	ldi	r21, 0xFE	; 254
    324e:	09 c0       	rjmp	.+18     	; 0x3262 <atan2+0xe>
    3250:	4b c1       	rjmp	.+662    	; 0x34e8 <__fp_nan>
    3252:	b3 c1       	rjmp	.+870    	; 0x35ba <__fp_zero>

00003254 <atan2>:
    3254:	e9 2f       	mov	r30, r25
    3256:	e0 78       	andi	r30, 0x80	; 128
    3258:	8e d1       	rcall	.+796    	; 0x3576 <__fp_split3>
    325a:	68 f3       	brcs	.-38     	; 0x3236 <__addsf3x+0xa6>
    325c:	09 2e       	mov	r0, r25
    325e:	05 2a       	or	r0, r21
    3260:	c1 f3       	breq	.-16     	; 0x3252 <__addsf3x+0xc2>
    3262:	26 17       	cp	r18, r22
    3264:	37 07       	cpc	r19, r23
    3266:	48 07       	cpc	r20, r24
    3268:	59 07       	cpc	r21, r25
    326a:	38 f0       	brcs	.+14     	; 0x327a <atan2+0x26>
    326c:	0e 2e       	mov	r0, r30
    326e:	07 f8       	bld	r0, 7
    3270:	e0 25       	eor	r30, r0
    3272:	69 f0       	breq	.+26     	; 0x328e <atan2+0x3a>
    3274:	e0 25       	eor	r30, r0
    3276:	e0 64       	ori	r30, 0x40	; 64
    3278:	0a c0       	rjmp	.+20     	; 0x328e <atan2+0x3a>
    327a:	ef 63       	ori	r30, 0x3F	; 63
    327c:	07 f8       	bld	r0, 7
    327e:	00 94       	com	r0
    3280:	07 fa       	bst	r0, 7
    3282:	db 01       	movw	r26, r22
    3284:	b9 01       	movw	r22, r18
    3286:	9d 01       	movw	r18, r26
    3288:	dc 01       	movw	r26, r24
    328a:	ca 01       	movw	r24, r20
    328c:	ad 01       	movw	r20, r26
    328e:	ef 93       	push	r30
    3290:	43 d0       	rcall	.+134    	; 0x3318 <__divsf3_pse>
    3292:	60 d1       	rcall	.+704    	; 0x3554 <__fp_round>
    3294:	0a d0       	rcall	.+20     	; 0x32aa <atan>
    3296:	5f 91       	pop	r21
    3298:	55 23       	and	r21, r21
    329a:	31 f0       	breq	.+12     	; 0x32a8 <atan2+0x54>
    329c:	2b ed       	ldi	r18, 0xDB	; 219
    329e:	3f e0       	ldi	r19, 0x0F	; 15
    32a0:	49 e4       	ldi	r20, 0x49	; 73
    32a2:	50 fd       	sbrc	r21, 0
    32a4:	49 ec       	ldi	r20, 0xC9	; 201
    32a6:	63 cf       	rjmp	.-314    	; 0x316e <__addsf3>
    32a8:	08 95       	ret

000032aa <atan>:
    32aa:	df 93       	push	r29
    32ac:	dd 27       	eor	r29, r29
    32ae:	b9 2f       	mov	r27, r25
    32b0:	bf 77       	andi	r27, 0x7F	; 127
    32b2:	40 e8       	ldi	r20, 0x80	; 128
    32b4:	5f e3       	ldi	r21, 0x3F	; 63
    32b6:	16 16       	cp	r1, r22
    32b8:	17 06       	cpc	r1, r23
    32ba:	48 07       	cpc	r20, r24
    32bc:	5b 07       	cpc	r21, r27
    32be:	10 f4       	brcc	.+4      	; 0x32c4 <atan+0x1a>
    32c0:	d9 2f       	mov	r29, r25
    32c2:	82 d1       	rcall	.+772    	; 0x35c8 <inverse>
    32c4:	9f 93       	push	r25
    32c6:	8f 93       	push	r24
    32c8:	7f 93       	push	r23
    32ca:	6f 93       	push	r22
    32cc:	29 d2       	rcall	.+1106   	; 0x3720 <square>
    32ce:	ec e8       	ldi	r30, 0x8C	; 140
    32d0:	f0 e0       	ldi	r31, 0x00	; 0
    32d2:	0d d1       	rcall	.+538    	; 0x34ee <__fp_powser>
    32d4:	3f d1       	rcall	.+638    	; 0x3554 <__fp_round>
    32d6:	2f 91       	pop	r18
    32d8:	3f 91       	pop	r19
    32da:	4f 91       	pop	r20
    32dc:	5f 91       	pop	r21
    32de:	87 d1       	rcall	.+782    	; 0x35ee <__mulsf3x>
    32e0:	dd 23       	and	r29, r29
    32e2:	49 f0       	breq	.+18     	; 0x32f6 <atan+0x4c>
    32e4:	90 58       	subi	r25, 0x80	; 128
    32e6:	a2 ea       	ldi	r26, 0xA2	; 162
    32e8:	2a ed       	ldi	r18, 0xDA	; 218
    32ea:	3f e0       	ldi	r19, 0x0F	; 15
    32ec:	49 ec       	ldi	r20, 0xC9	; 201
    32ee:	5f e3       	ldi	r21, 0x3F	; 63
    32f0:	d0 78       	andi	r29, 0x80	; 128
    32f2:	5d 27       	eor	r21, r29
    32f4:	4d df       	rcall	.-358    	; 0x3190 <__addsf3x>
    32f6:	df 91       	pop	r29
    32f8:	2d c1       	rjmp	.+602    	; 0x3554 <__fp_round>

000032fa <__divsf3>:
    32fa:	0c d0       	rcall	.+24     	; 0x3314 <__divsf3x>
    32fc:	2b c1       	rjmp	.+598    	; 0x3554 <__fp_round>
    32fe:	23 d1       	rcall	.+582    	; 0x3546 <__fp_pscB>
    3300:	40 f0       	brcs	.+16     	; 0x3312 <__divsf3+0x18>
    3302:	1a d1       	rcall	.+564    	; 0x3538 <__fp_pscA>
    3304:	30 f0       	brcs	.+12     	; 0x3312 <__divsf3+0x18>
    3306:	21 f4       	brne	.+8      	; 0x3310 <__divsf3+0x16>
    3308:	5f 3f       	cpi	r21, 0xFF	; 255
    330a:	19 f0       	breq	.+6      	; 0x3312 <__divsf3+0x18>
    330c:	e7 c0       	rjmp	.+462    	; 0x34dc <__fp_inf>
    330e:	51 11       	cpse	r21, r1
    3310:	55 c1       	rjmp	.+682    	; 0x35bc <__fp_szero>
    3312:	ea c0       	rjmp	.+468    	; 0x34e8 <__fp_nan>

00003314 <__divsf3x>:
    3314:	30 d1       	rcall	.+608    	; 0x3576 <__fp_split3>
    3316:	98 f3       	brcs	.-26     	; 0x32fe <__divsf3+0x4>

00003318 <__divsf3_pse>:
    3318:	99 23       	and	r25, r25
    331a:	c9 f3       	breq	.-14     	; 0x330e <__divsf3+0x14>
    331c:	55 23       	and	r21, r21
    331e:	b1 f3       	breq	.-20     	; 0x330c <__divsf3+0x12>
    3320:	95 1b       	sub	r25, r21
    3322:	55 0b       	sbc	r21, r21
    3324:	bb 27       	eor	r27, r27
    3326:	aa 27       	eor	r26, r26
    3328:	62 17       	cp	r22, r18
    332a:	73 07       	cpc	r23, r19
    332c:	84 07       	cpc	r24, r20
    332e:	38 f0       	brcs	.+14     	; 0x333e <__divsf3_pse+0x26>
    3330:	9f 5f       	subi	r25, 0xFF	; 255
    3332:	5f 4f       	sbci	r21, 0xFF	; 255
    3334:	22 0f       	add	r18, r18
    3336:	33 1f       	adc	r19, r19
    3338:	44 1f       	adc	r20, r20
    333a:	aa 1f       	adc	r26, r26
    333c:	a9 f3       	breq	.-22     	; 0x3328 <__divsf3_pse+0x10>
    333e:	33 d0       	rcall	.+102    	; 0x33a6 <__divsf3_pse+0x8e>
    3340:	0e 2e       	mov	r0, r30
    3342:	3a f0       	brmi	.+14     	; 0x3352 <__divsf3_pse+0x3a>
    3344:	e0 e8       	ldi	r30, 0x80	; 128
    3346:	30 d0       	rcall	.+96     	; 0x33a8 <__divsf3_pse+0x90>
    3348:	91 50       	subi	r25, 0x01	; 1
    334a:	50 40       	sbci	r21, 0x00	; 0
    334c:	e6 95       	lsr	r30
    334e:	00 1c       	adc	r0, r0
    3350:	ca f7       	brpl	.-14     	; 0x3344 <__divsf3_pse+0x2c>
    3352:	29 d0       	rcall	.+82     	; 0x33a6 <__divsf3_pse+0x8e>
    3354:	fe 2f       	mov	r31, r30
    3356:	27 d0       	rcall	.+78     	; 0x33a6 <__divsf3_pse+0x8e>
    3358:	66 0f       	add	r22, r22
    335a:	77 1f       	adc	r23, r23
    335c:	88 1f       	adc	r24, r24
    335e:	bb 1f       	adc	r27, r27
    3360:	26 17       	cp	r18, r22
    3362:	37 07       	cpc	r19, r23
    3364:	48 07       	cpc	r20, r24
    3366:	ab 07       	cpc	r26, r27
    3368:	b0 e8       	ldi	r27, 0x80	; 128
    336a:	09 f0       	breq	.+2      	; 0x336e <__divsf3_pse+0x56>
    336c:	bb 0b       	sbc	r27, r27
    336e:	80 2d       	mov	r24, r0
    3370:	bf 01       	movw	r22, r30
    3372:	ff 27       	eor	r31, r31
    3374:	93 58       	subi	r25, 0x83	; 131
    3376:	5f 4f       	sbci	r21, 0xFF	; 255
    3378:	2a f0       	brmi	.+10     	; 0x3384 <__divsf3_pse+0x6c>
    337a:	9e 3f       	cpi	r25, 0xFE	; 254
    337c:	51 05       	cpc	r21, r1
    337e:	68 f0       	brcs	.+26     	; 0x339a <__divsf3_pse+0x82>
    3380:	ad c0       	rjmp	.+346    	; 0x34dc <__fp_inf>
    3382:	1c c1       	rjmp	.+568    	; 0x35bc <__fp_szero>
    3384:	5f 3f       	cpi	r21, 0xFF	; 255
    3386:	ec f3       	brlt	.-6      	; 0x3382 <__divsf3_pse+0x6a>
    3388:	98 3e       	cpi	r25, 0xE8	; 232
    338a:	dc f3       	brlt	.-10     	; 0x3382 <__divsf3_pse+0x6a>
    338c:	86 95       	lsr	r24
    338e:	77 95       	ror	r23
    3390:	67 95       	ror	r22
    3392:	b7 95       	ror	r27
    3394:	f7 95       	ror	r31
    3396:	9f 5f       	subi	r25, 0xFF	; 255
    3398:	c9 f7       	brne	.-14     	; 0x338c <__divsf3_pse+0x74>
    339a:	88 0f       	add	r24, r24
    339c:	91 1d       	adc	r25, r1
    339e:	96 95       	lsr	r25
    33a0:	87 95       	ror	r24
    33a2:	97 f9       	bld	r25, 7
    33a4:	08 95       	ret
    33a6:	e1 e0       	ldi	r30, 0x01	; 1
    33a8:	66 0f       	add	r22, r22
    33aa:	77 1f       	adc	r23, r23
    33ac:	88 1f       	adc	r24, r24
    33ae:	bb 1f       	adc	r27, r27
    33b0:	62 17       	cp	r22, r18
    33b2:	73 07       	cpc	r23, r19
    33b4:	84 07       	cpc	r24, r20
    33b6:	ba 07       	cpc	r27, r26
    33b8:	20 f0       	brcs	.+8      	; 0x33c2 <__divsf3_pse+0xaa>
    33ba:	62 1b       	sub	r22, r18
    33bc:	73 0b       	sbc	r23, r19
    33be:	84 0b       	sbc	r24, r20
    33c0:	ba 0b       	sbc	r27, r26
    33c2:	ee 1f       	adc	r30, r30
    33c4:	88 f7       	brcc	.-30     	; 0x33a8 <__divsf3_pse+0x90>
    33c6:	e0 95       	com	r30
    33c8:	08 95       	ret

000033ca <__fixsfsi>:
    33ca:	04 d0       	rcall	.+8      	; 0x33d4 <__fixunssfsi>
    33cc:	68 94       	set
    33ce:	b1 11       	cpse	r27, r1
    33d0:	f5 c0       	rjmp	.+490    	; 0x35bc <__fp_szero>
    33d2:	08 95       	ret

000033d4 <__fixunssfsi>:
    33d4:	d8 d0       	rcall	.+432    	; 0x3586 <__fp_splitA>
    33d6:	88 f0       	brcs	.+34     	; 0x33fa <__fixunssfsi+0x26>
    33d8:	9f 57       	subi	r25, 0x7F	; 127
    33da:	90 f0       	brcs	.+36     	; 0x3400 <__fixunssfsi+0x2c>
    33dc:	b9 2f       	mov	r27, r25
    33de:	99 27       	eor	r25, r25
    33e0:	b7 51       	subi	r27, 0x17	; 23
    33e2:	a0 f0       	brcs	.+40     	; 0x340c <__fixunssfsi+0x38>
    33e4:	d1 f0       	breq	.+52     	; 0x341a <__fixunssfsi+0x46>
    33e6:	66 0f       	add	r22, r22
    33e8:	77 1f       	adc	r23, r23
    33ea:	88 1f       	adc	r24, r24
    33ec:	99 1f       	adc	r25, r25
    33ee:	1a f0       	brmi	.+6      	; 0x33f6 <__fixunssfsi+0x22>
    33f0:	ba 95       	dec	r27
    33f2:	c9 f7       	brne	.-14     	; 0x33e6 <__fixunssfsi+0x12>
    33f4:	12 c0       	rjmp	.+36     	; 0x341a <__fixunssfsi+0x46>
    33f6:	b1 30       	cpi	r27, 0x01	; 1
    33f8:	81 f0       	breq	.+32     	; 0x341a <__fixunssfsi+0x46>
    33fa:	df d0       	rcall	.+446    	; 0x35ba <__fp_zero>
    33fc:	b1 e0       	ldi	r27, 0x01	; 1
    33fe:	08 95       	ret
    3400:	dc c0       	rjmp	.+440    	; 0x35ba <__fp_zero>
    3402:	67 2f       	mov	r22, r23
    3404:	78 2f       	mov	r23, r24
    3406:	88 27       	eor	r24, r24
    3408:	b8 5f       	subi	r27, 0xF8	; 248
    340a:	39 f0       	breq	.+14     	; 0x341a <__fixunssfsi+0x46>
    340c:	b9 3f       	cpi	r27, 0xF9	; 249
    340e:	cc f3       	brlt	.-14     	; 0x3402 <__fixunssfsi+0x2e>
    3410:	86 95       	lsr	r24
    3412:	77 95       	ror	r23
    3414:	67 95       	ror	r22
    3416:	b3 95       	inc	r27
    3418:	d9 f7       	brne	.-10     	; 0x3410 <__fixunssfsi+0x3c>
    341a:	3e f4       	brtc	.+14     	; 0x342a <__fixunssfsi+0x56>
    341c:	90 95       	com	r25
    341e:	80 95       	com	r24
    3420:	70 95       	com	r23
    3422:	61 95       	neg	r22
    3424:	7f 4f       	sbci	r23, 0xFF	; 255
    3426:	8f 4f       	sbci	r24, 0xFF	; 255
    3428:	9f 4f       	sbci	r25, 0xFF	; 255
    342a:	08 95       	ret

0000342c <__floatunsisf>:
    342c:	e8 94       	clt
    342e:	09 c0       	rjmp	.+18     	; 0x3442 <__floatsisf+0x12>

00003430 <__floatsisf>:
    3430:	97 fb       	bst	r25, 7
    3432:	3e f4       	brtc	.+14     	; 0x3442 <__floatsisf+0x12>
    3434:	90 95       	com	r25
    3436:	80 95       	com	r24
    3438:	70 95       	com	r23
    343a:	61 95       	neg	r22
    343c:	7f 4f       	sbci	r23, 0xFF	; 255
    343e:	8f 4f       	sbci	r24, 0xFF	; 255
    3440:	9f 4f       	sbci	r25, 0xFF	; 255
    3442:	99 23       	and	r25, r25
    3444:	a9 f0       	breq	.+42     	; 0x3470 <__floatsisf+0x40>
    3446:	f9 2f       	mov	r31, r25
    3448:	96 e9       	ldi	r25, 0x96	; 150
    344a:	bb 27       	eor	r27, r27
    344c:	93 95       	inc	r25
    344e:	f6 95       	lsr	r31
    3450:	87 95       	ror	r24
    3452:	77 95       	ror	r23
    3454:	67 95       	ror	r22
    3456:	b7 95       	ror	r27
    3458:	f1 11       	cpse	r31, r1
    345a:	f8 cf       	rjmp	.-16     	; 0x344c <__floatsisf+0x1c>
    345c:	fa f4       	brpl	.+62     	; 0x349c <__floatsisf+0x6c>
    345e:	bb 0f       	add	r27, r27
    3460:	11 f4       	brne	.+4      	; 0x3466 <__floatsisf+0x36>
    3462:	60 ff       	sbrs	r22, 0
    3464:	1b c0       	rjmp	.+54     	; 0x349c <__floatsisf+0x6c>
    3466:	6f 5f       	subi	r22, 0xFF	; 255
    3468:	7f 4f       	sbci	r23, 0xFF	; 255
    346a:	8f 4f       	sbci	r24, 0xFF	; 255
    346c:	9f 4f       	sbci	r25, 0xFF	; 255
    346e:	16 c0       	rjmp	.+44     	; 0x349c <__floatsisf+0x6c>
    3470:	88 23       	and	r24, r24
    3472:	11 f0       	breq	.+4      	; 0x3478 <__floatsisf+0x48>
    3474:	96 e9       	ldi	r25, 0x96	; 150
    3476:	11 c0       	rjmp	.+34     	; 0x349a <__floatsisf+0x6a>
    3478:	77 23       	and	r23, r23
    347a:	21 f0       	breq	.+8      	; 0x3484 <__floatsisf+0x54>
    347c:	9e e8       	ldi	r25, 0x8E	; 142
    347e:	87 2f       	mov	r24, r23
    3480:	76 2f       	mov	r23, r22
    3482:	05 c0       	rjmp	.+10     	; 0x348e <__floatsisf+0x5e>
    3484:	66 23       	and	r22, r22
    3486:	71 f0       	breq	.+28     	; 0x34a4 <__floatsisf+0x74>
    3488:	96 e8       	ldi	r25, 0x86	; 134
    348a:	86 2f       	mov	r24, r22
    348c:	70 e0       	ldi	r23, 0x00	; 0
    348e:	60 e0       	ldi	r22, 0x00	; 0
    3490:	2a f0       	brmi	.+10     	; 0x349c <__floatsisf+0x6c>
    3492:	9a 95       	dec	r25
    3494:	66 0f       	add	r22, r22
    3496:	77 1f       	adc	r23, r23
    3498:	88 1f       	adc	r24, r24
    349a:	da f7       	brpl	.-10     	; 0x3492 <__floatsisf+0x62>
    349c:	88 0f       	add	r24, r24
    349e:	96 95       	lsr	r25
    34a0:	87 95       	ror	r24
    34a2:	97 f9       	bld	r25, 7
    34a4:	08 95       	ret

000034a6 <__fp_arccos>:
    34a6:	df 93       	push	r29
    34a8:	cf 93       	push	r28
    34aa:	1f 93       	push	r17
    34ac:	0f 93       	push	r16
    34ae:	8b 01       	movw	r16, r22
    34b0:	ec 01       	movw	r28, r24
    34b2:	e9 eb       	ldi	r30, 0xB9	; 185
    34b4:	f0 e0       	ldi	r31, 0x00	; 0
    34b6:	1b d0       	rcall	.+54     	; 0x34ee <__fp_powser>
    34b8:	4d d0       	rcall	.+154    	; 0x3554 <__fp_round>
    34ba:	98 01       	movw	r18, r16
    34bc:	ae 01       	movw	r20, r28
    34be:	8b 01       	movw	r16, r22
    34c0:	ec 01       	movw	r28, r24
    34c2:	60 e0       	ldi	r22, 0x00	; 0
    34c4:	70 e0       	ldi	r23, 0x00	; 0
    34c6:	80 e8       	ldi	r24, 0x80	; 128
    34c8:	9f e3       	ldi	r25, 0x3F	; 63
    34ca:	50 de       	rcall	.-864    	; 0x316c <__subsf3>
    34cc:	eb d0       	rcall	.+470    	; 0x36a4 <sqrt>
    34ce:	98 01       	movw	r18, r16
    34d0:	ae 01       	movw	r20, r28
    34d2:	0f 91       	pop	r16
    34d4:	1f 91       	pop	r17
    34d6:	cf 91       	pop	r28
    34d8:	df 91       	pop	r29
    34da:	89 c0       	rjmp	.+274    	; 0x35ee <__mulsf3x>

000034dc <__fp_inf>:
    34dc:	97 f9       	bld	r25, 7
    34de:	9f 67       	ori	r25, 0x7F	; 127
    34e0:	80 e8       	ldi	r24, 0x80	; 128
    34e2:	70 e0       	ldi	r23, 0x00	; 0
    34e4:	60 e0       	ldi	r22, 0x00	; 0
    34e6:	08 95       	ret

000034e8 <__fp_nan>:
    34e8:	9f ef       	ldi	r25, 0xFF	; 255
    34ea:	80 ec       	ldi	r24, 0xC0	; 192
    34ec:	08 95       	ret

000034ee <__fp_powser>:
    34ee:	df 93       	push	r29
    34f0:	cf 93       	push	r28
    34f2:	1f 93       	push	r17
    34f4:	0f 93       	push	r16
    34f6:	ff 92       	push	r15
    34f8:	ef 92       	push	r14
    34fa:	df 92       	push	r13
    34fc:	7b 01       	movw	r14, r22
    34fe:	8c 01       	movw	r16, r24
    3500:	68 94       	set
    3502:	05 c0       	rjmp	.+10     	; 0x350e <__fp_powser+0x20>
    3504:	da 2e       	mov	r13, r26
    3506:	ef 01       	movw	r28, r30
    3508:	72 d0       	rcall	.+228    	; 0x35ee <__mulsf3x>
    350a:	fe 01       	movw	r30, r28
    350c:	e8 94       	clt
    350e:	a5 91       	lpm	r26, Z+
    3510:	25 91       	lpm	r18, Z+
    3512:	35 91       	lpm	r19, Z+
    3514:	45 91       	lpm	r20, Z+
    3516:	55 91       	lpm	r21, Z+
    3518:	ae f3       	brts	.-22     	; 0x3504 <__fp_powser+0x16>
    351a:	ef 01       	movw	r28, r30
    351c:	39 de       	rcall	.-910    	; 0x3190 <__addsf3x>
    351e:	fe 01       	movw	r30, r28
    3520:	97 01       	movw	r18, r14
    3522:	a8 01       	movw	r20, r16
    3524:	da 94       	dec	r13
    3526:	79 f7       	brne	.-34     	; 0x3506 <__fp_powser+0x18>
    3528:	df 90       	pop	r13
    352a:	ef 90       	pop	r14
    352c:	ff 90       	pop	r15
    352e:	0f 91       	pop	r16
    3530:	1f 91       	pop	r17
    3532:	cf 91       	pop	r28
    3534:	df 91       	pop	r29
    3536:	08 95       	ret

00003538 <__fp_pscA>:
    3538:	00 24       	eor	r0, r0
    353a:	0a 94       	dec	r0
    353c:	16 16       	cp	r1, r22
    353e:	17 06       	cpc	r1, r23
    3540:	18 06       	cpc	r1, r24
    3542:	09 06       	cpc	r0, r25
    3544:	08 95       	ret

00003546 <__fp_pscB>:
    3546:	00 24       	eor	r0, r0
    3548:	0a 94       	dec	r0
    354a:	12 16       	cp	r1, r18
    354c:	13 06       	cpc	r1, r19
    354e:	14 06       	cpc	r1, r20
    3550:	05 06       	cpc	r0, r21
    3552:	08 95       	ret

00003554 <__fp_round>:
    3554:	09 2e       	mov	r0, r25
    3556:	03 94       	inc	r0
    3558:	00 0c       	add	r0, r0
    355a:	11 f4       	brne	.+4      	; 0x3560 <__fp_round+0xc>
    355c:	88 23       	and	r24, r24
    355e:	52 f0       	brmi	.+20     	; 0x3574 <__fp_round+0x20>
    3560:	bb 0f       	add	r27, r27
    3562:	40 f4       	brcc	.+16     	; 0x3574 <__fp_round+0x20>
    3564:	bf 2b       	or	r27, r31
    3566:	11 f4       	brne	.+4      	; 0x356c <__fp_round+0x18>
    3568:	60 ff       	sbrs	r22, 0
    356a:	04 c0       	rjmp	.+8      	; 0x3574 <__fp_round+0x20>
    356c:	6f 5f       	subi	r22, 0xFF	; 255
    356e:	7f 4f       	sbci	r23, 0xFF	; 255
    3570:	8f 4f       	sbci	r24, 0xFF	; 255
    3572:	9f 4f       	sbci	r25, 0xFF	; 255
    3574:	08 95       	ret

00003576 <__fp_split3>:
    3576:	57 fd       	sbrc	r21, 7
    3578:	90 58       	subi	r25, 0x80	; 128
    357a:	44 0f       	add	r20, r20
    357c:	55 1f       	adc	r21, r21
    357e:	59 f0       	breq	.+22     	; 0x3596 <__fp_splitA+0x10>
    3580:	5f 3f       	cpi	r21, 0xFF	; 255
    3582:	71 f0       	breq	.+28     	; 0x35a0 <__fp_splitA+0x1a>
    3584:	47 95       	ror	r20

00003586 <__fp_splitA>:
    3586:	88 0f       	add	r24, r24
    3588:	97 fb       	bst	r25, 7
    358a:	99 1f       	adc	r25, r25
    358c:	61 f0       	breq	.+24     	; 0x35a6 <__fp_splitA+0x20>
    358e:	9f 3f       	cpi	r25, 0xFF	; 255
    3590:	79 f0       	breq	.+30     	; 0x35b0 <__fp_splitA+0x2a>
    3592:	87 95       	ror	r24
    3594:	08 95       	ret
    3596:	12 16       	cp	r1, r18
    3598:	13 06       	cpc	r1, r19
    359a:	14 06       	cpc	r1, r20
    359c:	55 1f       	adc	r21, r21
    359e:	f2 cf       	rjmp	.-28     	; 0x3584 <__fp_split3+0xe>
    35a0:	46 95       	lsr	r20
    35a2:	f1 df       	rcall	.-30     	; 0x3586 <__fp_splitA>
    35a4:	08 c0       	rjmp	.+16     	; 0x35b6 <__fp_splitA+0x30>
    35a6:	16 16       	cp	r1, r22
    35a8:	17 06       	cpc	r1, r23
    35aa:	18 06       	cpc	r1, r24
    35ac:	99 1f       	adc	r25, r25
    35ae:	f1 cf       	rjmp	.-30     	; 0x3592 <__fp_splitA+0xc>
    35b0:	86 95       	lsr	r24
    35b2:	71 05       	cpc	r23, r1
    35b4:	61 05       	cpc	r22, r1
    35b6:	08 94       	sec
    35b8:	08 95       	ret

000035ba <__fp_zero>:
    35ba:	e8 94       	clt

000035bc <__fp_szero>:
    35bc:	bb 27       	eor	r27, r27
    35be:	66 27       	eor	r22, r22
    35c0:	77 27       	eor	r23, r23
    35c2:	cb 01       	movw	r24, r22
    35c4:	97 f9       	bld	r25, 7
    35c6:	08 95       	ret

000035c8 <inverse>:
    35c8:	9b 01       	movw	r18, r22
    35ca:	ac 01       	movw	r20, r24
    35cc:	60 e0       	ldi	r22, 0x00	; 0
    35ce:	70 e0       	ldi	r23, 0x00	; 0
    35d0:	80 e8       	ldi	r24, 0x80	; 128
    35d2:	9f e3       	ldi	r25, 0x3F	; 63
    35d4:	92 ce       	rjmp	.-732    	; 0x32fa <__divsf3>

000035d6 <__mulsf3>:
    35d6:	0b d0       	rcall	.+22     	; 0x35ee <__mulsf3x>
    35d8:	bd cf       	rjmp	.-134    	; 0x3554 <__fp_round>
    35da:	ae df       	rcall	.-164    	; 0x3538 <__fp_pscA>
    35dc:	28 f0       	brcs	.+10     	; 0x35e8 <__mulsf3+0x12>
    35de:	b3 df       	rcall	.-154    	; 0x3546 <__fp_pscB>
    35e0:	18 f0       	brcs	.+6      	; 0x35e8 <__mulsf3+0x12>
    35e2:	95 23       	and	r25, r21
    35e4:	09 f0       	breq	.+2      	; 0x35e8 <__mulsf3+0x12>
    35e6:	7a cf       	rjmp	.-268    	; 0x34dc <__fp_inf>
    35e8:	7f cf       	rjmp	.-258    	; 0x34e8 <__fp_nan>
    35ea:	11 24       	eor	r1, r1
    35ec:	e7 cf       	rjmp	.-50     	; 0x35bc <__fp_szero>

000035ee <__mulsf3x>:
    35ee:	c3 df       	rcall	.-122    	; 0x3576 <__fp_split3>
    35f0:	a0 f3       	brcs	.-24     	; 0x35da <__mulsf3+0x4>

000035f2 <__mulsf3_pse>:
    35f2:	95 9f       	mul	r25, r21
    35f4:	d1 f3       	breq	.-12     	; 0x35ea <__mulsf3+0x14>
    35f6:	95 0f       	add	r25, r21
    35f8:	50 e0       	ldi	r21, 0x00	; 0
    35fa:	55 1f       	adc	r21, r21
    35fc:	62 9f       	mul	r22, r18
    35fe:	f0 01       	movw	r30, r0
    3600:	72 9f       	mul	r23, r18
    3602:	bb 27       	eor	r27, r27
    3604:	f0 0d       	add	r31, r0
    3606:	b1 1d       	adc	r27, r1
    3608:	63 9f       	mul	r22, r19
    360a:	aa 27       	eor	r26, r26
    360c:	f0 0d       	add	r31, r0
    360e:	b1 1d       	adc	r27, r1
    3610:	aa 1f       	adc	r26, r26
    3612:	64 9f       	mul	r22, r20
    3614:	66 27       	eor	r22, r22
    3616:	b0 0d       	add	r27, r0
    3618:	a1 1d       	adc	r26, r1
    361a:	66 1f       	adc	r22, r22
    361c:	82 9f       	mul	r24, r18
    361e:	22 27       	eor	r18, r18
    3620:	b0 0d       	add	r27, r0
    3622:	a1 1d       	adc	r26, r1
    3624:	62 1f       	adc	r22, r18
    3626:	73 9f       	mul	r23, r19
    3628:	b0 0d       	add	r27, r0
    362a:	a1 1d       	adc	r26, r1
    362c:	62 1f       	adc	r22, r18
    362e:	83 9f       	mul	r24, r19
    3630:	a0 0d       	add	r26, r0
    3632:	61 1d       	adc	r22, r1
    3634:	22 1f       	adc	r18, r18
    3636:	74 9f       	mul	r23, r20
    3638:	33 27       	eor	r19, r19
    363a:	a0 0d       	add	r26, r0
    363c:	61 1d       	adc	r22, r1
    363e:	23 1f       	adc	r18, r19
    3640:	84 9f       	mul	r24, r20
    3642:	60 0d       	add	r22, r0
    3644:	21 1d       	adc	r18, r1
    3646:	82 2f       	mov	r24, r18
    3648:	76 2f       	mov	r23, r22
    364a:	6a 2f       	mov	r22, r26
    364c:	11 24       	eor	r1, r1
    364e:	9f 57       	subi	r25, 0x7F	; 127
    3650:	50 40       	sbci	r21, 0x00	; 0
    3652:	8a f0       	brmi	.+34     	; 0x3676 <__mulsf3_pse+0x84>
    3654:	e1 f0       	breq	.+56     	; 0x368e <__mulsf3_pse+0x9c>
    3656:	88 23       	and	r24, r24
    3658:	4a f0       	brmi	.+18     	; 0x366c <__mulsf3_pse+0x7a>
    365a:	ee 0f       	add	r30, r30
    365c:	ff 1f       	adc	r31, r31
    365e:	bb 1f       	adc	r27, r27
    3660:	66 1f       	adc	r22, r22
    3662:	77 1f       	adc	r23, r23
    3664:	88 1f       	adc	r24, r24
    3666:	91 50       	subi	r25, 0x01	; 1
    3668:	50 40       	sbci	r21, 0x00	; 0
    366a:	a9 f7       	brne	.-22     	; 0x3656 <__mulsf3_pse+0x64>
    366c:	9e 3f       	cpi	r25, 0xFE	; 254
    366e:	51 05       	cpc	r21, r1
    3670:	70 f0       	brcs	.+28     	; 0x368e <__mulsf3_pse+0x9c>
    3672:	34 cf       	rjmp	.-408    	; 0x34dc <__fp_inf>
    3674:	a3 cf       	rjmp	.-186    	; 0x35bc <__fp_szero>
    3676:	5f 3f       	cpi	r21, 0xFF	; 255
    3678:	ec f3       	brlt	.-6      	; 0x3674 <__mulsf3_pse+0x82>
    367a:	98 3e       	cpi	r25, 0xE8	; 232
    367c:	dc f3       	brlt	.-10     	; 0x3674 <__mulsf3_pse+0x82>
    367e:	86 95       	lsr	r24
    3680:	77 95       	ror	r23
    3682:	67 95       	ror	r22
    3684:	b7 95       	ror	r27
    3686:	f7 95       	ror	r31
    3688:	e7 95       	ror	r30
    368a:	9f 5f       	subi	r25, 0xFF	; 255
    368c:	c1 f7       	brne	.-16     	; 0x367e <__mulsf3_pse+0x8c>
    368e:	fe 2b       	or	r31, r30
    3690:	88 0f       	add	r24, r24
    3692:	91 1d       	adc	r25, r1
    3694:	96 95       	lsr	r25
    3696:	87 95       	ror	r24
    3698:	97 f9       	bld	r25, 7
    369a:	08 95       	ret
    369c:	11 f4       	brne	.+4      	; 0x36a2 <__mulsf3_pse+0xb0>
    369e:	0e f4       	brtc	.+2      	; 0x36a2 <__mulsf3_pse+0xb0>
    36a0:	23 cf       	rjmp	.-442    	; 0x34e8 <__fp_nan>
    36a2:	41 c0       	rjmp	.+130    	; 0x3726 <__fp_mpack>

000036a4 <sqrt>:
    36a4:	70 df       	rcall	.-288    	; 0x3586 <__fp_splitA>
    36a6:	d0 f3       	brcs	.-12     	; 0x369c <__mulsf3_pse+0xaa>
    36a8:	99 23       	and	r25, r25
    36aa:	d9 f3       	breq	.-10     	; 0x36a2 <__mulsf3_pse+0xb0>
    36ac:	ce f3       	brts	.-14     	; 0x36a0 <__mulsf3_pse+0xae>
    36ae:	9f 57       	subi	r25, 0x7F	; 127
    36b0:	55 0b       	sbc	r21, r21
    36b2:	87 ff       	sbrs	r24, 7
    36b4:	46 d0       	rcall	.+140    	; 0x3742 <__fp_norm2>
    36b6:	00 24       	eor	r0, r0
    36b8:	a0 e6       	ldi	r26, 0x60	; 96
    36ba:	40 ea       	ldi	r20, 0xA0	; 160
    36bc:	90 01       	movw	r18, r0
    36be:	80 58       	subi	r24, 0x80	; 128
    36c0:	56 95       	lsr	r21
    36c2:	97 95       	ror	r25
    36c4:	28 f4       	brcc	.+10     	; 0x36d0 <sqrt+0x2c>
    36c6:	80 5c       	subi	r24, 0xC0	; 192
    36c8:	66 0f       	add	r22, r22
    36ca:	77 1f       	adc	r23, r23
    36cc:	88 1f       	adc	r24, r24
    36ce:	20 f0       	brcs	.+8      	; 0x36d8 <sqrt+0x34>
    36d0:	26 17       	cp	r18, r22
    36d2:	37 07       	cpc	r19, r23
    36d4:	48 07       	cpc	r20, r24
    36d6:	30 f4       	brcc	.+12     	; 0x36e4 <sqrt+0x40>
    36d8:	62 1b       	sub	r22, r18
    36da:	73 0b       	sbc	r23, r19
    36dc:	84 0b       	sbc	r24, r20
    36de:	20 29       	or	r18, r0
    36e0:	31 29       	or	r19, r1
    36e2:	4a 2b       	or	r20, r26
    36e4:	a6 95       	lsr	r26
    36e6:	17 94       	ror	r1
    36e8:	07 94       	ror	r0
    36ea:	20 25       	eor	r18, r0
    36ec:	31 25       	eor	r19, r1
    36ee:	4a 27       	eor	r20, r26
    36f0:	58 f7       	brcc	.-42     	; 0x36c8 <sqrt+0x24>
    36f2:	66 0f       	add	r22, r22
    36f4:	77 1f       	adc	r23, r23
    36f6:	88 1f       	adc	r24, r24
    36f8:	20 f0       	brcs	.+8      	; 0x3702 <sqrt+0x5e>
    36fa:	26 17       	cp	r18, r22
    36fc:	37 07       	cpc	r19, r23
    36fe:	48 07       	cpc	r20, r24
    3700:	30 f4       	brcc	.+12     	; 0x370e <sqrt+0x6a>
    3702:	62 0b       	sbc	r22, r18
    3704:	73 0b       	sbc	r23, r19
    3706:	84 0b       	sbc	r24, r20
    3708:	20 0d       	add	r18, r0
    370a:	31 1d       	adc	r19, r1
    370c:	41 1d       	adc	r20, r1
    370e:	a0 95       	com	r26
    3710:	81 f7       	brne	.-32     	; 0x36f2 <sqrt+0x4e>
    3712:	b9 01       	movw	r22, r18
    3714:	84 2f       	mov	r24, r20
    3716:	91 58       	subi	r25, 0x81	; 129
    3718:	88 0f       	add	r24, r24
    371a:	96 95       	lsr	r25
    371c:	87 95       	ror	r24
    371e:	08 95       	ret

00003720 <square>:
    3720:	9b 01       	movw	r18, r22
    3722:	ac 01       	movw	r20, r24
    3724:	58 cf       	rjmp	.-336    	; 0x35d6 <__mulsf3>

00003726 <__fp_mpack>:
    3726:	9f 3f       	cpi	r25, 0xFF	; 255
    3728:	31 f0       	breq	.+12     	; 0x3736 <__fp_mpack_finite+0xc>

0000372a <__fp_mpack_finite>:
    372a:	91 50       	subi	r25, 0x01	; 1
    372c:	20 f4       	brcc	.+8      	; 0x3736 <__fp_mpack_finite+0xc>
    372e:	87 95       	ror	r24
    3730:	77 95       	ror	r23
    3732:	67 95       	ror	r22
    3734:	b7 95       	ror	r27
    3736:	88 0f       	add	r24, r24
    3738:	91 1d       	adc	r25, r1
    373a:	96 95       	lsr	r25
    373c:	87 95       	ror	r24
    373e:	97 f9       	bld	r25, 7
    3740:	08 95       	ret

00003742 <__fp_norm2>:
    3742:	91 50       	subi	r25, 0x01	; 1
    3744:	50 40       	sbci	r21, 0x00	; 0
    3746:	66 0f       	add	r22, r22
    3748:	77 1f       	adc	r23, r23
    374a:	88 1f       	adc	r24, r24
    374c:	d2 f7       	brpl	.-12     	; 0x3742 <__fp_norm2>
    374e:	08 95       	ret

00003750 <__divmodsi4>:
    3750:	05 2e       	mov	r0, r21
    3752:	97 fb       	bst	r25, 7
    3754:	16 f4       	brtc	.+4      	; 0x375a <__divmodsi4+0xa>
    3756:	00 94       	com	r0
    3758:	0f d0       	rcall	.+30     	; 0x3778 <__negsi2>
    375a:	57 fd       	sbrc	r21, 7
    375c:	05 d0       	rcall	.+10     	; 0x3768 <__divmodsi4_neg2>
    375e:	1e d0       	rcall	.+60     	; 0x379c <__udivmodsi4>
    3760:	07 fc       	sbrc	r0, 7
    3762:	02 d0       	rcall	.+4      	; 0x3768 <__divmodsi4_neg2>
    3764:	46 f4       	brtc	.+16     	; 0x3776 <__divmodsi4_exit>
    3766:	08 c0       	rjmp	.+16     	; 0x3778 <__negsi2>

00003768 <__divmodsi4_neg2>:
    3768:	50 95       	com	r21
    376a:	40 95       	com	r20
    376c:	30 95       	com	r19
    376e:	21 95       	neg	r18
    3770:	3f 4f       	sbci	r19, 0xFF	; 255
    3772:	4f 4f       	sbci	r20, 0xFF	; 255
    3774:	5f 4f       	sbci	r21, 0xFF	; 255

00003776 <__divmodsi4_exit>:
    3776:	08 95       	ret

00003778 <__negsi2>:
    3778:	90 95       	com	r25
    377a:	80 95       	com	r24
    377c:	70 95       	com	r23
    377e:	61 95       	neg	r22
    3780:	7f 4f       	sbci	r23, 0xFF	; 255
    3782:	8f 4f       	sbci	r24, 0xFF	; 255
    3784:	9f 4f       	sbci	r25, 0xFF	; 255
    3786:	08 95       	ret

00003788 <__muluhisi3>:
    3788:	2b d0       	rcall	.+86     	; 0x37e0 <__umulhisi3>
    378a:	a5 9f       	mul	r26, r21
    378c:	90 0d       	add	r25, r0
    378e:	b4 9f       	mul	r27, r20
    3790:	90 0d       	add	r25, r0
    3792:	a4 9f       	mul	r26, r20
    3794:	80 0d       	add	r24, r0
    3796:	91 1d       	adc	r25, r1
    3798:	11 24       	eor	r1, r1
    379a:	08 95       	ret

0000379c <__udivmodsi4>:
    379c:	a1 e2       	ldi	r26, 0x21	; 33
    379e:	1a 2e       	mov	r1, r26
    37a0:	aa 1b       	sub	r26, r26
    37a2:	bb 1b       	sub	r27, r27
    37a4:	fd 01       	movw	r30, r26
    37a6:	0d c0       	rjmp	.+26     	; 0x37c2 <__udivmodsi4_ep>

000037a8 <__udivmodsi4_loop>:
    37a8:	aa 1f       	adc	r26, r26
    37aa:	bb 1f       	adc	r27, r27
    37ac:	ee 1f       	adc	r30, r30
    37ae:	ff 1f       	adc	r31, r31
    37b0:	a2 17       	cp	r26, r18
    37b2:	b3 07       	cpc	r27, r19
    37b4:	e4 07       	cpc	r30, r20
    37b6:	f5 07       	cpc	r31, r21
    37b8:	20 f0       	brcs	.+8      	; 0x37c2 <__udivmodsi4_ep>
    37ba:	a2 1b       	sub	r26, r18
    37bc:	b3 0b       	sbc	r27, r19
    37be:	e4 0b       	sbc	r30, r20
    37c0:	f5 0b       	sbc	r31, r21

000037c2 <__udivmodsi4_ep>:
    37c2:	66 1f       	adc	r22, r22
    37c4:	77 1f       	adc	r23, r23
    37c6:	88 1f       	adc	r24, r24
    37c8:	99 1f       	adc	r25, r25
    37ca:	1a 94       	dec	r1
    37cc:	69 f7       	brne	.-38     	; 0x37a8 <__udivmodsi4_loop>
    37ce:	60 95       	com	r22
    37d0:	70 95       	com	r23
    37d2:	80 95       	com	r24
    37d4:	90 95       	com	r25
    37d6:	9b 01       	movw	r18, r22
    37d8:	ac 01       	movw	r20, r24
    37da:	bd 01       	movw	r22, r26
    37dc:	cf 01       	movw	r24, r30
    37de:	08 95       	ret

000037e0 <__umulhisi3>:
    37e0:	a2 9f       	mul	r26, r18
    37e2:	b0 01       	movw	r22, r0
    37e4:	b3 9f       	mul	r27, r19
    37e6:	c0 01       	movw	r24, r0
    37e8:	a3 9f       	mul	r26, r19
    37ea:	70 0d       	add	r23, r0
    37ec:	81 1d       	adc	r24, r1
    37ee:	11 24       	eor	r1, r1
    37f0:	91 1d       	adc	r25, r1
    37f2:	b2 9f       	mul	r27, r18
    37f4:	70 0d       	add	r23, r0
    37f6:	81 1d       	adc	r24, r1
    37f8:	11 24       	eor	r1, r1
    37fa:	91 1d       	adc	r25, r1
    37fc:	08 95       	ret

000037fe <_exit>:
    37fe:	f8 94       	cli

00003800 <__stop_program>:
    3800:	ff cf       	rjmp	.-2      	; 0x3800 <__stop_program>
